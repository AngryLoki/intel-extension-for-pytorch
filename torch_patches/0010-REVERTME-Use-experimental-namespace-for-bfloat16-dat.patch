From 6738b1fa1bb8ce16ceca086f758f8c813b6a773d Mon Sep 17 00:00:00 2001
From: Jinghui <jinghui.gu@intel.com>
Date: Fri, 6 Jan 2023 15:36:56 +0800
Subject: [PATCH 10/10] [REVERTME] Use experimental namespace for bfloat16 data
 type (#97)

To be compatible with old compiler version

Signed-off-by: Gu, Jinghui <jinghui.gu@intel.com>
---
 c10/util/BFloat16-inl.h | 12 ++++++------
 c10/util/BFloat16.h     |  6 +++---
 2 files changed, 9 insertions(+), 9 deletions(-)

diff --git a/c10/util/BFloat16-inl.h b/c10/util/BFloat16-inl.h
index bad86158fe..b419cb0f20 100644
--- a/c10/util/BFloat16-inl.h
+++ b/c10/util/BFloat16-inl.h
@@ -10,7 +10,7 @@
 #endif
 
 #if defined(SYCL_LANGUAGE_VERSION) && defined(__INTEL_LLVM_COMPILER)
-#include <ext/oneapi/bfloat16.hpp>
+#include <ext/oneapi/experimental/bfloat16.hpp>
 #endif
 
 C10_CLANG_DIAGNOSTIC_PUSH()
@@ -26,7 +26,7 @@ inline C10_HOST_DEVICE BFloat16::BFloat16(float value) {
     defined(__CUDA_ARCH__) && __CUDA_ARCH__ >= 800
   x = __bfloat16_as_ushort(__float2bfloat16(value));
 #elif defined(__SYCL_DEVICE_ONLY__) && defined(__INTEL_LLVM_COMPILER)
-  x = sycl::bit_cast<uint16_t>(sycl::ext::oneapi::bfloat16(value));
+  x = sycl::bit_cast<uint16_t>(sycl::ext::oneapi::experimental::bfloat16(value));
 #else
   // RNE by default
   x = detail::round_to_nearest_even(value);
@@ -38,7 +38,7 @@ inline C10_HOST_DEVICE BFloat16::operator float() const {
 #if defined(CUDA_VERSION) && CUDA_VERSION >= 11000
   return __bfloat162float(*reinterpret_cast<const __nv_bfloat16*>(&x));
 #elif defined(__SYCL_DEVICE_ONLY__) && defined(__INTEL_LLVM_COMPILER)
-  return float(*reinterpret_cast<const sycl::ext::oneapi::bfloat16*>(&x));
+  return float(*reinterpret_cast<const sycl::ext::oneapi::experimental::bfloat16*>(&x));
 #else
   return detail::f32_from_bits(x);
 #endif
@@ -54,11 +54,11 @@ inline C10_HOST_DEVICE BFloat16::operator __nv_bfloat16() const {
 #endif
 
 #if defined(SYCL_LANGUAGE_VERSION) && defined(__INTEL_LLVM_COMPILER)
-inline C10_HOST_DEVICE BFloat16::BFloat16(const sycl::ext::oneapi::bfloat16& value) {
+inline C10_HOST_DEVICE BFloat16::BFloat16(const sycl::ext::oneapi::experimental::bfloat16& value) {
   x = *reinterpret_cast<const unsigned short*>(&value);
 }
-inline C10_HOST_DEVICE BFloat16::operator sycl::ext::oneapi::bfloat16() const {
-  return *reinterpret_cast<const sycl::ext::oneapi::bfloat16*>(&x);
+inline C10_HOST_DEVICE BFloat16::operator sycl::ext::oneapi::experimental::bfloat16() const {
+  return *reinterpret_cast<const sycl::ext::oneapi::experimental::bfloat16*>(&x);
 }
 #endif
 
diff --git a/c10/util/BFloat16.h b/c10/util/BFloat16.h
index 7f21faa092..b629cdd8f8 100644
--- a/c10/util/BFloat16.h
+++ b/c10/util/BFloat16.h
@@ -18,7 +18,7 @@
 #endif
 
 #if defined(SYCL_LANGUAGE_VERSION) && defined(__INTEL_LLVM_COMPILER)
-#include <ext/oneapi/bfloat16.hpp>
+#include <ext/oneapi/experimental/bfloat16.hpp>
 #endif
 
 namespace c10 {
@@ -106,8 +106,8 @@ struct alignas(2) BFloat16 {
 #endif
 
 #if defined(SYCL_LANGUAGE_VERSION) && defined(__INTEL_LLVM_COMPILER)
-  inline C10_HOST_DEVICE BFloat16(const sycl::ext::oneapi::bfloat16& value);
-  explicit inline C10_HOST_DEVICE operator sycl::ext::oneapi::bfloat16() const;
+  inline C10_HOST_DEVICE BFloat16(const sycl::ext::oneapi::experimental::bfloat16& value);
+  explicit inline C10_HOST_DEVICE operator sycl::ext::oneapi::experimental::bfloat16() const;
 #endif
 
 };
-- 
2.25.1

