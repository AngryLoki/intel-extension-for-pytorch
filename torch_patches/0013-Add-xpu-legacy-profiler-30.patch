From d7f5dcb360d4174055b9e6c3b8801d175eafbd7c Mon Sep 17 00:00:00 2001
From: johnlu <chengjun.lu@intel.com>
Date: Wed, 20 Apr 2022 00:28:18 +0800
Subject: [PATCH 13/14] Add xpu legacy profiler (#30)

Signed-off-by: Xunsong, Huang <xunsong.huang@intel.com>
---
 torch/_C/_autograd.pyi                        |   1 +
 torch/autograd/profiler.py                    |  18 +-
 torch/autograd/profiler_legacy.py             | 116 ++++++++---
 torch/autograd/profiler_util.py               | 189 +++++++++++++++---
 torch/csrc/autograd/init.cpp                  |  10 +
 torch/csrc/autograd/profiler_legacy.cpp       | 111 +++++++---
 torch/csrc/autograd/profiler_legacy.h         |  59 ++++--
 torch/csrc/profiler/api.cpp                   | 109 ++++------
 torch/csrc/profiler/api.h                     |  12 +-
 torch/csrc/profiler/cuda.cpp                  |  36 +++-
 torch/csrc/profiler/itt.cpp                   |   5 +
 torch/csrc/profiler/orchestration/observer.h  |   1 +
 torch/csrc/profiler/python/init.cpp           |   1 +
 .../_internal/distributed/rpc/rpc_test.py     |   4 +-
 14 files changed, 491 insertions(+), 181 deletions(-)

diff --git a/torch/_C/_autograd.pyi b/torch/_C/_autograd.pyi
index bddda0a8c95..92062738383 100644
--- a/torch/_C/_autograd.pyi
+++ b/torch/_C/_autograd.pyi
@@ -9,6 +9,7 @@ from ._profiler import _ProfilerEvent, ActiveProfilerType, ProfilerActivity, Pro
 class DeviceType(Enum):
     CPU = ...
     CUDA = ...
+    XPU = ...
     MKLDNN = ...
     OPENGL = ...
     OPENCL = ...
diff --git a/torch/autograd/profiler.py b/torch/autograd/profiler.py
index dd5700f9492..24ba73512de 100644
--- a/torch/autograd/profiler.py
+++ b/torch/autograd/profiler.py
@@ -67,6 +67,8 @@ class profile(object):
         use_cuda (bool, optional): Enables timing of CUDA events as well using the cudaEvent API.
             Adds approximately 4us of overhead to each tensor operation.
 
+        use_xpu (bool, optional): Enables timing of XPU events as well using the xpuEvent API.
+
         record_shapes (bool, optional): If shapes recording is set, information
             about input dimensions will be collected. This allows one to see which
             dimensions have been used under the hood and further group by them
@@ -142,6 +144,7 @@ class profile(object):
             enabled=True,
             *,
             use_cuda=False,
+            use_xpu=False,
             record_shapes=False,
             with_flops=False,
             profile_memory=False,
@@ -154,6 +157,7 @@ class profile(object):
         if not self.enabled:
             return
         self.use_cuda = use_cuda
+        self.use_xpu = use_xpu
         self.function_events: Optional[EventList] = None
         self.entered = False
         self.record_shapes = record_shapes
@@ -176,6 +180,10 @@ class profile(object):
             warn("CUDA is not available, disabling CUDA profiling")
             self.use_cuda = False
 
+        if self.use_xpu and not (hasattr(torch, 'xpu') and torch.xpu.is_available()):    # type: ignore[attr-defined]
+            warn("XPU is not available, disabling XPU profiling")
+            self.use_xpu = False
+
         self.kineto_activities = set()
         if self.use_cpu:
             self.kineto_activities.add(ProfilerActivity.CPU)
@@ -188,6 +196,9 @@ class profile(object):
                 self.profiler_kind = ProfilerState.KINETO_GPU_FALLBACK
             else:
                 self.kineto_activities.add(ProfilerActivity.CUDA)
+        elif self.use_xpu:
+            # legacy XPU mode
+            self.profiler_kind = ProfilerState.XPU
 
         assert len(self.kineto_activities) > 0, \
             "No activities specified for the profiler"
@@ -230,6 +241,7 @@ class profile(object):
         self.function_events = EventList(
             parsed_results,
             use_cuda=self.use_cuda,
+            use_xpu=self.use_xpu,
             profile_memory=self.profile_memory,
             with_flops=self.with_flops)
         self.function_events._build_tree()
@@ -375,7 +387,7 @@ class profile(object):
                 if cuda_time > 0:
                     fe.append_kernel(
                         fe.name,
-                        fe.device_index,
+                        torch.device("cuda:{}".format(fe.device_index)),
                         cuda_time)
                     fe.is_legacy = True
             function_events.append(fe)
@@ -393,7 +405,7 @@ class profile(object):
                     if f_evt.device_type == DeviceType.CUDA:
                         fe.append_kernel(
                             f_evt.name,
-                            f_evt.device_index,
+                            torch.device("cuda:{}".format(fe.device_index)),
                             f_evt.time_range.end - f_evt.time_range.start)
                     elif f_evt.device_type == DeviceType.CPU:
                         # make sure that 'thread' of a CPU Kineto (e.g. CUDA Runtime) event is associated
@@ -780,7 +792,7 @@ def parse_nvprof_trace(path):
         assert (row['cbid'] == 211)
         evt = functions_map[row['marker_id']]
         evt.append_kernel(row['kernel_name'],
-                          0,
+                          torch.device("cuda:0"),
                           row['kernel_end'] - row['kernel_start'])
 
     functions.sort(key=lambda evt: evt.time_range.start)
diff --git a/torch/autograd/profiler_legacy.py b/torch/autograd/profiler_legacy.py
index b3e875f252c..14bc2a2f708 100644
--- a/torch/autograd/profiler_legacy.py
+++ b/torch/autograd/profiler_legacy.py
@@ -1,7 +1,7 @@
 import torch
 import torch.cuda
 from torch.autograd.profiler_util import (
-    EventList, FunctionEvent, MEMORY_EVENT_NAME,
+    EventList, FunctionEvent, MEMORY_EVENT_NAME, Interval,
     _filter_name, _filter_stack_entry, _rewrite_name
 )
 
@@ -21,8 +21,10 @@ class profile(object):
             enabled=True,
             *,
             use_cuda=False,
+            use_xpu=False,
             record_shapes=False,
             with_flops=False,
+            with_calling_stack=False,
             profile_memory=False,
             with_stack=False,
             with_modules=False):
@@ -30,10 +32,12 @@ class profile(object):
         if not self.enabled:
             return
         self.use_cuda = use_cuda
+        self.use_xpu = use_xpu
         self.function_events = None
         self.entered = False
         self.record_shapes = record_shapes
         self.with_flops = with_flops
+        self.with_calling_stack = with_calling_stack
         self.record_shapes |= self.with_flops
         self.profile_memory = profile_memory
         self.with_stack = with_stack
@@ -43,8 +47,14 @@ class profile(object):
             warn("CUDA is not available, disabling CUDA profiling")
             self.use_cuda = False
 
+        if self.use_xpu and not (hasattr(torch, 'xpu') and torch.xpu.is_available()):    # type: ignore[attr-defined]
+            warn("XPU is not available, disabling XPU profiling")
+            self.use_xpu = False
+
         if self.use_cuda:
             self.profiler_kind = ProfilerState.CUDA
+        elif self.use_xpu:
+            self.profiler_kind = ProfilerState.XPU
         else:
             self.profiler_kind = ProfilerState.CPU
 
@@ -77,14 +87,18 @@ class profile(object):
             return
         if self.use_cuda:
             torch.cuda.synchronize()
+        if self.use_xpu:
+            torch.xpu.synchronize()    # type: ignore[attr-defined]
 
         records = _disable_profiler_legacy()
         parsed_results = _parse_legacy_records(records)
         self.function_events = EventList(
             parsed_results,
             use_cuda=self.use_cuda,
+            use_xpu=self.use_xpu,
             profile_memory=self.profile_memory,
-            with_flops=self.with_flops)
+            with_flops=self.with_flops,
+            with_calling_stack=self.with_calling_stack)
         self.function_events._build_tree()
         return False
 
@@ -109,6 +123,7 @@ class profile(object):
             max_src_column_width=75,
             max_name_column_width=55,
             max_shapes_column_width=80,
+            max_depth=10,
             header=None,
             top_level_events_only=False
     ):
@@ -120,6 +135,7 @@ class profile(object):
             max_src_column_width=max_src_column_width,
             max_name_column_width=max_name_column_width,
             max_shapes_column_width=max_shapes_column_width,
+            max_depth=max_depth,
             header=header,
             top_level_events_only=top_level_events_only
         )
@@ -184,8 +200,12 @@ def _parse_legacy_records(thread_records):
         # accumulated memory allocations per handle
         cpu_memory_allocs = {}
         cuda_memory_allocs = {}
+        xpu_memory_allocs = {}
         # ranges per handle
         range_starts = {}
+        function_stack = []
+        calling_stack = []
+        calling_id = 0
 
         filtered_handles = set()
         prev_record = None
@@ -209,9 +229,27 @@ def _parse_legacy_records(thread_records):
                         filtered_handles.add(record_key)
                         continue
 
-                range_starts[record_key] = record
+                calling_stack.append(calling_id + 1)
+                calling_id = 0
+                # create the function event for appending kernel
+                fe = FunctionEvent(
+                    id=record.handle(),
+                    name=_rewrite_name(name=record.name(), with_wildcard=True),
+                    thread=record.thread_id(),
+                    start_us=0,
+                    end_us=0,
+                    stack=[],
+                    node_id=record.node_id(),
+                    input_shapes=record.shapes(),
+                    cstack=tuple(calling_stack),
+                    device_type=DeviceType.CPU,
+                    is_legacy=True,
+                )
+                function_stack.append(fe)
+                range_starts[record_key] = (record, fe)
                 cpu_memory_allocs[record_key] = 0
                 cuda_memory_allocs[record_key] = 0
+                xpu_memory_allocs[record_key] = 0
             elif record.kind() == 'pop':
                 assert (
                     record_key in range_starts
@@ -220,37 +258,33 @@ def _parse_legacy_records(thread_records):
                     record_key
                 )
 
-                start = range_starts[record_key]
+                start, fe = range_starts[record_key]
+
+                calling_id = calling_stack.pop()
 
                 cpu_memory_usage = cpu_memory_allocs[record_key]
                 cuda_memory_usage = cuda_memory_allocs[record_key]
+                xpu_memory_usage = xpu_memory_allocs[record_key]
                 is_async = start.is_async() or (
                     start.thread_id() != record.thread_id()
                 )
                 is_remote_event = record.is_remote()
                 start_flops = start.flops()
 
-                fe = FunctionEvent(
-                    id=record.handle(),
-                    node_id=record.node_id(),
-                    name=_rewrite_name(name=start.name(), with_wildcard=True),
-                    trace_name=_rewrite_name(name=start.name(), with_wildcard=False),
-                    thread=start.thread_id(),
-                    start_us=start_record.cpu_elapsed_us(start),
-                    end_us=start_record.cpu_elapsed_us(record),
-                    fwd_thread=start.fwd_thread_id(),
-                    input_shapes=start.shapes(),
-                    stack=[entry for entry in start.stack() if _filter_stack_entry(entry)],
-                    scope=start.scope(),
-                    cpu_memory_usage=cpu_memory_usage,
-                    cuda_memory_usage=cuda_memory_usage,
-                    is_async=is_async,
-                    is_remote=is_remote_event,
-                    sequence_nr=start.sequence_nr(),
-                    device_type=DeviceType.CPU,
-                    is_legacy=True,
-                    flops=start_flops,
-                )
+                fe.time_range = Interval(start_record.cpu_elapsed_us(start), start_record.cpu_elapsed_us(record))
+                fe.cpu_memory_usage = cpu_memory_usage
+                fe.cuda_memory_usage = cuda_memory_usage
+                fe.xpu_memory_usage = xpu_memory_usage
+                fe.is_async = is_async
+                fe.is_remote = is_remote_event
+                fe.fwd_thread = start.fwd_thread_id()
+                fe.stack = [entry for entry in start.stack() if _filter_stack_entry(entry)]
+                fe.scope = start.scope()
+                fe.sequence_nr = start.sequence_nr()
+                fe.trace_name = _rewrite_name(name=start.name(), with_wildcard=False)
+                fe.fwd_thread = start.fwd_thread_id()
+                fe.flops = start_flops
+
                 # note: async events have only cpu total time
                 if not is_async and start.has_cuda():
                     duration = start.cuda_elapsed_us(record)
@@ -260,9 +294,11 @@ def _parse_legacy_records(thread_records):
                             start.device(),
                             duration)
                 functions.append(fe)
+                function_stack.remove(fe)
                 del range_starts[record_key]
                 del cpu_memory_allocs[record_key]
                 del cuda_memory_allocs[record_key]
+                del xpu_memory_allocs[record_key]
             elif record.kind() == 'memory_alloc':
                 num_open_handles_cpu = len(cpu_memory_allocs)
                 num_open_handles_cuda = len(cuda_memory_allocs)
@@ -271,6 +307,8 @@ def _parse_legacy_records(thread_records):
                     cpu_memory_allocs[handle] += record.cpu_memory_usage()
                 for handle in cuda_memory_allocs.keys():
                     cuda_memory_allocs[handle] += record.cuda_memory_usage()
+                for handle in xpu_memory_allocs.keys():
+                    xpu_memory_allocs[handle] += record.xpu_memory_usage()
                 if num_open_handles_cpu == 0:
                     # output event as a top-level memory event
                     fe = FunctionEvent(
@@ -283,9 +321,37 @@ def _parse_legacy_records(thread_records):
                         stack=[],
                         cpu_memory_usage=record.cpu_memory_usage(),
                         cuda_memory_usage=record.cuda_memory_usage(),
+                        xpu_memory_usage=record.xpu_memory_usage(),
                         is_legacy=True,
                     )
                     functions.append(fe)
+            elif record.kind() == 'mark':
+                if '__xpu_start_event' in record.name():
+                    continue
+                if record.has_xpu():
+                    if len(function_stack) > 0:
+                        fe = function_stack[-1]
+                        fe.append_kernel(fe.name + "(" + record.name() + ")",
+                                         record.device(),
+                                         record.xpu_elapsed_us())
+                    else:
+                        # An xpu event is recorded but no parent function was recorded.
+                        fe = FunctionEvent(
+                            id=record.handle(),
+                            node_id=record.node_id(),
+                            name=_rewrite_name(name=record.name(), with_wildcard=True),
+                            thread=record.thread_id(),
+                            start_us=0,
+                            end_us=0,
+                            stack=[],
+                            cstack=tuple(calling_stack),
+                            input_shapes=record.shapes(),
+                            is_legacy=True)
+                        fe.stack = []
+                        fe.append_kernel(fe.name + "(" + record.name() + ")",
+                                         record.device(),
+                                         record.xpu_elapsed_us())
+                        functions.append(fe)
             prev_record = record
 
     # Sort functions by start time then by end time ascending.
diff --git a/torch/autograd/profiler_util.py b/torch/autograd/profiler_util.py
index 7d0532d6119..368f8d33163 100644
--- a/torch/autograd/profiler_util.py
+++ b/torch/autograd/profiler_util.py
@@ -15,13 +15,17 @@ class EventList(list):
     """A list of Events (for pretty printing)"""
     def __init__(self, *args, **kwargs):
         use_cuda = kwargs.pop('use_cuda', True)
+        use_xpu = kwargs.pop('use_xpu', False)
         profile_memory = kwargs.pop('profile_memory', False)
         with_flops = kwargs.pop('with_flops', False)
+        with_calling_stack = kwargs.pop('with_calling_stack', False)
         super(EventList, self).__init__(*args, **kwargs)
         self._use_cuda = use_cuda
+        self._use_xpu = use_xpu
         self._profile_memory = profile_memory
         self._tree_built = False
         self._with_flops = with_flops
+        self._with_calling_stack = with_calling_stack
 
     def _build_tree(self):
         self._populate_cpu_children()
@@ -153,6 +157,7 @@ class EventList(list):
             max_src_column_width=75,
             max_name_column_width=55,
             max_shapes_column_width=80,
+            max_depth=10,
             header=None,
             top_level_events_only=False
     ):
@@ -180,9 +185,11 @@ class EventList(list):
             max_src_column_width=max_src_column_width,
             max_name_column_width=max_name_column_width,
             max_shapes_column_width=max_shapes_column_width,
+            max_depth=10,
             header=header,
             profile_memory=self._profile_memory,
             with_flops=self._with_flops,
+            with_calling_stack=self._with_calling_stack,
             top_level_events_only=top_level_events_only)
 
     def export_chrome_trace(self, path):
@@ -220,20 +227,36 @@ class EventList(list):
                         else f'" node_id:{evt.node_id}, thread_id:{evt.thread} "',
                     )
                 )
-                for k in evt.kernels:
-                    # 's' and 'f' draw Flow arrows from
-                    # the CPU launch to the GPU kernel
-                    f.write('{"name": "%s", '
-                            '"ph": "s", '
-                            '"ts": %s, '
-                            '"tid": %s, '
-                            '"pid": "CPU functions", '
-                            '"id": %s, '
-                            '"cat": "cpu_to_cuda", '
-                            '"args": {}}, ' % (evt.trace_name, evt.time_range.start,
-                                               evt.thread, next_id))
-                    # Note: use torch.profiler to get device kernel trace
-                    next_id += 1
+                if self._use_cuda is True:
+                    for k in evt.kernels:
+                        # 's' and 'f' draw Flow arrows from
+                        # the CPU launch to the GPU kernel
+                        f.write('{"name": "%s", '
+                                '"ph": "s", '
+                                '"ts": %s, '
+                                '"tid": %s, '
+                                '"pid": "CPU functions", '
+                                '"id": %s, '
+                                '"cat": "cpu_to_cuda", '
+                                '"args": {}}, ' % (evt.trace_name, evt.time_range.start,
+                                                   evt.thread, next_id))
+                        # Note: use torch.profiler to get device kernel trace
+                        next_id += 1
+                if self._use_xpu is True:
+                    for k in evt.kernels:
+                        # 's' and 'f' draw Flow arrows from
+                        # the CPU launch to the GPU kernel
+                        f.write('{"name": "%s", '
+                                '"ph": "s", '
+                                '"ts": %s, '
+                                '"tid": %s, '
+                                '"pid": "CPU functions", '
+                                '"id": %s, '
+                                '"cat": "cpu_to_xpu", '
+                                '"args": {}}, ' % (evt.trace_name, evt.time_range.start,
+                                                   evt.thread, next_id))
+                        # Note: use torch.profiler to get device kernel trace
+                        next_id += 1
             if len(self) > 0:
                 # remove trailing whitespace and comma
                 f.seek(f.tell() - 2, os.SEEK_SET)
@@ -290,8 +313,10 @@ class EventList(list):
         avg_list = EventList(
             stats.values(),
             use_cuda=self._use_cuda,
+            use_xpu=self._use_xpu,
             profile_memory=self._profile_memory,
-            with_flops=self._with_flops)
+            with_flops=self._with_flops,
+            with_calling_stack=self._with_calling_stack)
         for evt in avg_list:
             evt.stack = evt.stack[:group_by_stack_n]
             if not group_by_input_shapes:
@@ -354,10 +379,13 @@ class FormattedTimesMixin(object):
     """
     cpu_time_str = _attr_formatter('cpu_time')
     cuda_time_str = _attr_formatter('cuda_time')
+    xpu_time_str = _attr_formatter('xpu_time')
     cpu_time_total_str = _attr_formatter('cpu_time_total')
     cuda_time_total_str = _attr_formatter('cuda_time_total')
+    xpu_time_total_str = _attr_formatter('xpu_time_total')
     self_cpu_time_total_str = _attr_formatter('self_cpu_time_total')
     self_cuda_time_total_str = _attr_formatter('self_cuda_time_total')
+    self_xpu_time_total_str = _attr_formatter('self_xpu_time_total')
 
     @property
     def cpu_time(self):
@@ -367,6 +395,10 @@ class FormattedTimesMixin(object):
     def cuda_time(self):
         return 0.0 if self.count == 0 else 1.0 * self.cuda_time_total / self.count  # type: ignore[attr-defined]
 
+    @property
+    def xpu_time(self):
+        return 0.0 if self.count == 0 else 1.0 * self.xpu_time_total / self.count  # type: ignore[attr-defined]
+
 
 class Interval(object):
     def __init__(self, start, end):
@@ -384,7 +416,7 @@ class FunctionEvent(FormattedTimesMixin):
     """Profiling information about a single function."""
     def __init__(
             self, id, name, thread, start_us, end_us, fwd_thread=None, input_shapes=None,
-            stack=None, scope=0, cpu_memory_usage=0, cuda_memory_usage=0, is_async=False,
+            stack=None, cstack=None, scope=0, cpu_memory_usage=0, cuda_memory_usage=0, xpu_memory_usage=0, is_async=False,
             is_remote=False, sequence_nr=-1, node_id=-1, device_type=DeviceType.CPU, device_index=0,
             is_legacy=False, flops=None, trace_name=None):
         self.id: int = id
@@ -400,9 +432,11 @@ class FunctionEvent(FormattedTimesMixin):
         self.cpu_parent: Optional[FunctionEvent] = None
         self.input_shapes: Tuple[int, ...] = input_shapes
         self.stack: List = stack
+        self.cstack: Tuple[int, ...] = cstack
         self.scope: int = scope
         self.cpu_memory_usage: int = cpu_memory_usage
         self.cuda_memory_usage: int = cuda_memory_usage
+        self.xpu_memory_usage: int = xpu_memory_usage
         self.is_async: bool = is_async
         self.is_remote: bool = is_remote
         self.sequence_nr: int = sequence_nr
@@ -411,7 +445,7 @@ class FunctionEvent(FormattedTimesMixin):
         self.is_legacy: bool = is_legacy
         self.flops: Optional[int] = flops
 
-    def append_kernel(self, name, device, duration):
+    def append_kernel(self, name, device : torch.device, duration):
         assert self.device_type == DeviceType.CPU
         self.kernels.append(Kernel(name, device, duration))
 
@@ -456,6 +490,12 @@ class FunctionEvent(FormattedTimesMixin):
             [child.cuda_memory_usage for child in self.cpu_children]
         )
 
+    @property
+    def self_xpu_memory_usage(self):
+        if self.is_async:
+            return 0
+        return self.xpu_memory_usage - sum([child.xpu_memory_usage for child in self.cpu_children])
+
     @property
     def self_cpu_time_total(self):
         if self.is_async or self.device_type != DeviceType.CPU:
@@ -471,14 +511,15 @@ class FunctionEvent(FormattedTimesMixin):
         if self.device_type == DeviceType.CPU:
             if not self.is_legacy:
                 # account for the kernels in the children ops
-                return (sum(kinfo.duration for kinfo in self.kernels) +
+                return (sum(kinfo.duration for kinfo in self.kernels if kinfo.device.type == DeviceType.CUDA) +
                         sum(ch.cuda_time_total for ch in self.cpu_children))
             else:
                 # each legacy cpu events has a single (fake) kernel
-                return sum(kinfo.duration for kinfo in self.kernels)
-        else:
-            assert self.device_type == DeviceType.CUDA
+                return sum(kinfo.duration for kinfo in self.kernels if kinfo.device.type == DeviceType.CUDA)
+        elif self.device_type == DeviceType.CUDA:
             return self.time_range.elapsed_us()
+        else:
+            return 0
 
     @property
     def self_cuda_time_total(self):
@@ -487,9 +528,10 @@ class FunctionEvent(FormattedTimesMixin):
         if self.device_type == DeviceType.CPU:
             return self.cuda_time_total - \
                 sum([child.cuda_time_total for child in self.cpu_children])
-        else:
-            assert(self.device_type == DeviceType.CUDA)
+        elif self.device_type == DeviceType.CUDA:
             return self.cuda_time_total
+        else:
+            return 0
 
     @property
     def cpu_time_total(self):
@@ -498,6 +540,27 @@ class FunctionEvent(FormattedTimesMixin):
         else:
             return 0
 
+    @property
+    def xpu_time_total(self):
+        if self.is_async:
+            return 0
+        if self.device_type == DeviceType.CPU:
+            # account for the kernels in the children ops
+            return (sum(kinfo.duration for kinfo in self.kernels if kinfo.device.type == "xpu") +
+                    sum(ch.xpu_time_total for ch in self.cpu_children))
+        elif self.device_type == DeviceType.XPU:
+            print("self.device_type = ", 'xpu')
+            return self.time_range.elapsed_us()
+        else:
+            return 0
+
+    @property
+    def self_xpu_time_total(self):
+        if self.is_async:
+            return 0
+        else:
+            return sum(kinfo.duration for kinfo in self.kernels if kinfo.device.type == "xpu")
+
     @property
     def key(self):
         return self.name
@@ -505,8 +568,8 @@ class FunctionEvent(FormattedTimesMixin):
     def __repr__(self):
         return (
             '<FunctionEvent id={} name={} device_type={} node_id={} cpu_time={} start_us={} end_us={} '
-            'cpu_children={} cuda_time={} name={} thread={} input_shapes={} '
-            'cpu_memory_usage={} cuda_memory_usage={} is_async={} is_remote={} seq_nr={} is_legacy={}>'.format(
+            'cpu_children={} cuda_time={} xpu_time={} name={} thread={} input_shapes={} cstack={}'
+            'cpu_memory_usage={} cuda_memory_usage={} xpu_memory_usage={} is_async={} is_remote={} seq_nr={} is_legacy={}>'.format(
                 self.id,
                 self.name,
                 self.device_type,
@@ -516,11 +579,14 @@ class FunctionEvent(FormattedTimesMixin):
                 self.time_range.end,
                 str([child.id for child in self.cpu_children]),
                 self.cuda_time_str,
+                self.xpu_time_str,
                 self.name,
                 self.thread,
                 str(self.input_shapes),
+                str(self.cstack),
                 self.cpu_memory_usage,
                 self.cuda_memory_usage,
+                self.xpu_memory_usage,
                 self.is_async,
                 self.is_remote,
                 self.sequence_nr,
@@ -539,15 +605,20 @@ class FunctionEventAvg(FormattedTimesMixin):
         self.is_remote: bool = False
         self.cpu_time_total: int = 0
         self.cuda_time_total: int = 0
+        self.xpu_time_total: int = 0
         self.self_cpu_time_total: int = 0
         self.self_cuda_time_total: int = 0
+        self.self_xpu_time_total: int = 0
         self.input_shapes: Optional[List[List[int]]] = None
         self.stack: Optional[List] = None
+        self.cstack: Optional[List] = None
         self.scope: Optional[int] = None
         self.cpu_memory_usage: int = 0
         self.cuda_memory_usage: int = 0
+        self.xpu_memory_usage: int = 0
         self.self_cpu_memory_usage: int = 0
         self.self_cuda_memory_usage: int = 0
+        self.self_xpu_memory_usage: int = 0
         self.cpu_children: Optional[List[FunctionEvent]] = None
         self.cpu_parent: Optional[FunctionEvent] = None
         self.device_type: DeviceType = DeviceType.CPU
@@ -567,6 +638,7 @@ class FunctionEventAvg(FormattedTimesMixin):
 
             self.input_shapes = other.input_shapes
             self.stack = other.stack
+            self.cstack = other.cstack
             self.scope = other.scope
             self.device_type = other.device_type
             self.is_legacy = other.is_legacy
@@ -575,12 +647,16 @@ class FunctionEventAvg(FormattedTimesMixin):
         assert other.key == self.key
         self.cpu_time_total += other.cpu_time_total
         self.cuda_time_total += other.cuda_time_total
+        self.xpu_time_total += other.xpu_time_total
         self.self_cpu_time_total += other.self_cpu_time_total
         self.self_cuda_time_total += other.self_cuda_time_total
+        self.self_xpu_time_total += other.self_xpu_time_total
         self.cpu_memory_usage += other.cpu_memory_usage
         self.cuda_memory_usage += other.cuda_memory_usage
+        self.xpu_memory_usage += other.xpu_memory_usage
         self.self_cpu_memory_usage += other.self_cpu_memory_usage
         self.self_cuda_memory_usage += other.self_cuda_memory_usage
+        self.self_xpu_memory_usage += other.self_xpu_memory_usage
         self.count += other.count
         if self.flops is None:
             self.flops = other.flops
@@ -594,16 +670,20 @@ class FunctionEventAvg(FormattedTimesMixin):
     def __repr__(self):
         return (
             '<FunctionEventAvg key={} self_cpu_time={} cpu_time={} '
-            ' self_cuda_time={} cuda_time={} input_shapes={} '
-            'cpu_memory_usage={} cuda_memory_usage={}>'.format(
+            ' self_cuda_time={} cuda_time={} self_xpu_time={} xpu_time={} input_shapes={} cstack={}'
+            'cpu_memory_usage={} cuda_memory_usage={} xpu_memory_usage={}>'.format(
                 self.key,
                 self.self_cpu_time_total_str,
                 self.cpu_time_str,
                 self.self_cuda_time_total_str,
                 self.cuda_time_str,
+                self.self_xpu_time_total_str,
+                self.xpu_time_str,
                 str(self.input_shapes),
+                str(self.cstack),
                 self.cpu_memory_usage,
                 self.cuda_memory_usage,
+                self.xpu_memory_usage,
             )
         )
 
@@ -683,7 +763,9 @@ def _build_table(
         max_src_column_width=75,
         max_name_column_width=55,
         max_shapes_column_width=80,
+        max_depth=10,
         with_flops=False,
+        with_calling_stack=False,
         profile_memory=False,
         top_level_events_only=False):
     """Prints a summary of events (which can be a list of FunctionEvent or FunctionEventAvg)."""
@@ -692,13 +774,15 @@ def _build_table(
 
     has_cuda_time = any([event.self_cuda_time_total > 0 for event in events])
     has_cuda_mem = any([event.self_cuda_memory_usage > 0 for event in events])
+    has_xpu_time = any([event.self_xpu_time_total > 0 for event in events])
+    has_xpu_mem = any([event.self_xpu_memory_usage > 0 for event in events])
     has_input_shapes = any(
         [(event.input_shapes is not None and len(event.input_shapes) > 0) for event in events])
 
     if sort_by is not None:
         events = EventList(sorted(
             events, key=lambda evt: getattr(evt, sort_by), reverse=True
-        ), use_cuda=has_cuda_time, profile_memory=profile_memory, with_flops=with_flops)
+        ), use_cuda=has_cuda_time, use_xpu=has_xpu_time, profile_memory=profile_memory, with_flops=with_flops, with_calling_stack=with_calling_stack)
 
     name_column_width = max([len(evt.key) for evt in events]) + 4
     if max_name_column_width is not None:
@@ -711,6 +795,10 @@ def _build_table(
     DEFAULT_COLUMN_WIDTH = 12
     flops_column_width = DEFAULT_COLUMN_WIDTH
 
+    if with_calling_stack:
+        cstack_column_width = max([len(str(evt.cstack[:max_depth])[1:-1]) for evt in events]) + 8
+        cstack_column_width = max(cstack_column_width, 20)
+
     src_column_width = None
     stacks = []
     for evt in events:
@@ -737,6 +825,13 @@ def _build_table(
             'CUDA total',
             'CUDA time avg',
         ])
+    if has_xpu_time:
+        headers.extend([
+            'Self XPU',
+            'Self XPU %',
+            'XPU total',
+            'XPU time avg',
+        ])
     if profile_memory:
         headers.extend([
             'CPU Mem',
@@ -747,6 +842,11 @@ def _build_table(
                 'CUDA Mem',
                 'Self CUDA Mem',
             ])
+        if has_xpu_mem:
+            headers.extend([
+                'XPU Mem',
+                'Self XPU Mem',
+            ])
     headers.append(
         '# of Calls'
     )
@@ -806,6 +906,10 @@ def _build_table(
         else:
             with_flops = False  # can't find any valid flops
 
+    if with_calling_stack:
+        headers.append('Calling Stack Tree'.ljust(cstack_column_width))
+        add_column(cstack_column_width)
+
     row_format = row_format_lst[0]
     header_sep = header_sep_lst[0]
     line_length = line_length_lst[0]
@@ -820,14 +924,19 @@ def _build_table(
 
     sum_self_cpu_time_total = sum([event.self_cpu_time_total for event in events])
     sum_self_cuda_time_total = 0
+    sum_self_xpu_time_total = 0
     for evt in events:
         if evt.device_type == DeviceType.CPU:
             # in legacy profiler, kernel info is stored in cpu events
             if evt.is_legacy:
                 sum_self_cuda_time_total += evt.self_cuda_time_total
+                sum_self_xpu_time_total += evt.self_xpu_time_total
         elif evt.device_type == DeviceType.CUDA:
             # in kineto profiler, there're events with the correct device type (e.g. CUDA)
             sum_self_cuda_time_total += evt.self_cuda_time_total
+        elif evt.device_type == DeviceType.XPU:
+            # The XPU doesn't support kineto yet
+            pass
 
     # Actual printing
     if header is not None:
@@ -878,6 +987,14 @@ def _build_table(
                 evt.cuda_time_total_str,
                 evt.cuda_time_str,  # Cuda time avg
             ])
+        if has_xpu_time:
+            row_values.extend([
+                evt.self_xpu_time_total_str,
+                # SYCL time total %
+                _format_time_share(evt.self_xpu_time_total, sum_self_xpu_time_total),
+                evt.xpu_time_total_str,
+                evt.xpu_time_str,   # SYCL time avg
+            ])
         if profile_memory:
             row_values.extend([
                 # CPU Mem Total
@@ -892,6 +1009,13 @@ def _build_table(
                     # Self CUDA Mem Total
                     _format_memory(evt.self_cuda_memory_usage),
                 ])
+            if has_xpu_mem:
+                row_values.extend([
+                    # SYCL Mem Total
+                    _format_memory(evt.xpu_memory_usage),
+                    # Self SYCL Mem Total
+                    _format_memory(evt.self_xpu_memory_usage),
+                ])
         row_values.append(
             evt.count,  # Number of calls
         )
@@ -910,6 +1034,12 @@ def _build_table(
             if len(evt.stack) > 0:
                 src_field = trim_path(evt.stack[0], src_column_width)
             row_values.append(src_field)
+        if with_calling_stack:
+            if len(evt.cstack) > max_depth:
+                cstack_str = str(evt.cstack[:max_depth])[1:-1] + ",..."
+            else:
+                cstack_str = str(evt.cstack)[1:-1]
+            row_values.append(cstack_str.ljust(cstack_column_width))
         append(row_format.format(*row_values))
 
         if has_stack:
@@ -919,8 +1049,11 @@ def _build_table(
             empty_headers.append("")
             append(row_format.format(*empty_headers))
 
+
     append(header_sep)
     append("Self CPU time total: {}".format(_format_time(sum_self_cpu_time_total)))
     if has_cuda_time:
         append("Self CUDA time total: {}".format(_format_time(sum_self_cuda_time_total)))
+    if has_xpu_time:
+        append("Self XPU time total: {}".format(_format_time(sum_self_xpu_time_total)))
     return ''.join(result)
diff --git a/torch/csrc/autograd/init.cpp b/torch/csrc/autograd/init.cpp
index a1d6de21d18..46c2704bc9b 100644
--- a/torch/csrc/autograd/init.cpp
+++ b/torch/csrc/autograd/init.cpp
@@ -111,10 +111,20 @@ PyObject* THPAutograd_initExtension(PyObject* _unused, PyObject* unused) {
       .def("device", &LegacyEvent::device)
       .def("cpu_elapsed_us", &LegacyEvent::cpuElapsedUs)
       .def("cuda_elapsed_us", &LegacyEvent::cudaElapsedUs)
+      .def(
+          "xpu_elapsed_us",
+          static_cast<double (LegacyEvent::*)(void) const>(
+              &LegacyEvent::xpuElapsedUs))
+      .def(
+          "xpu_elapsed_us",
+          static_cast<double (LegacyEvent::*)(const LegacyEvent& e) const>(
+              &LegacyEvent::xpuElapsedUs))
       .def("has_cuda", &LegacyEvent::hasCuda)
+      .def("has_xpu", &LegacyEvent::hasXpu)
       .def("shapes", &LegacyEvent::shapes)
       .def("cpu_memory_usage", &LegacyEvent::cpuMemoryUsage)
       .def("cuda_memory_usage", &LegacyEvent::cudaMemoryUsage)
+      .def("xpu_memory_usage", &LegacyEvent::xpuMemoryUsage)
       .def("handle", &LegacyEvent::handle)
       .def("node_id", &LegacyEvent::nodeId)
       .def("is_remote", &LegacyEvent::isRemote)
diff --git a/torch/csrc/autograd/profiler_legacy.cpp b/torch/csrc/autograd/profiler_legacy.cpp
index f77b4f5928b..eb0cd7948eb 100644
--- a/torch/csrc/autograd/profiler_legacy.cpp
+++ b/torch/csrc/autograd/profiler_legacy.cpp
@@ -140,6 +140,10 @@ struct ProfilerLegacyThreadLocalState : public ProfilerStateBase {
 
   void mark(std::string name, bool include_cuda = true);
 
+  void markKernel(
+      std::string name,
+      torch::profiler::impl::ProfilerEventStub kernel_event);
+
   void setOrAddRemoteProfiledEvents(
       std::vector<LegacyEvent>&& remoteProfiledEvents);
 
@@ -195,7 +199,7 @@ thread_event_lists ProfilerLegacyThreadLocalState::consolidate() {
   return result;
 }
 
-void ProfilerLegacyThreadLocalState::mark(std::string name, bool include_cuda) {
+void ProfilerLegacyThreadLocalState::mark(std::string name, bool include_kernel) {
   if (config_.disabled()) {
     return;
   }
@@ -206,13 +210,29 @@ void ProfilerLegacyThreadLocalState::mark(std::string name, bool include_cuda) {
         EventKind::Mark,
         at::StringView(std::move(name)),
         at::RecordFunction::currentThreadId(),
-        include_cuda &&
-            config_.state == torch::profiler::impl::ProfilerState::CUDA);
+        include_kernel,
+        config_.state);
     evt.setNodeId(at::RecordFunction::getDefaultNodeId());
     getEventList().record(std::move(evt));
   }
 }
 
+void ProfilerLegacyThreadLocalState::markKernel(
+    std::string name,
+    torch::profiler::impl::ProfilerEventStub kernel_event) {
+  if (config_.state == ProfilerState::Disabled) {
+    return;
+  }
+  if (config_.state == ProfilerState::XPU) {
+    getEventList().record(
+        EventKind::Mark,
+        at::StringView(std::move(name)),
+        at::RecordFunction::currentThreadId(),
+        config_.state,
+        kernel_event);
+  }
+}
+
 void ProfilerLegacyThreadLocalState::setOrAddRemoteProfiledEvents(
     std::vector<LegacyEvent>&& remoteProfiledEvents) {
   // Lock to serialize access from multiple callback threads.
@@ -226,7 +246,7 @@ void ProfilerLegacyThreadLocalState::setOrAddRemoteProfiledEvents(
 
 void ProfilerLegacyThreadLocalState::pushRange(
     const at::RecordFunction& fn,
-    const bool record_cuda,
+    const bool include_kernel,
     std::vector<std::vector<int64_t>>&& shapes) {
   if (config_.disabled()) {
     return;
@@ -240,7 +260,8 @@ void ProfilerLegacyThreadLocalState::pushRange(
         EventKind::PushRange,
         at::StringView(std::string(fn.name())),
         at::RecordFunction::currentThreadId(),
-        record_cuda,
+        include_kernel,
+        config_.state,
         fn.handle(),
         std::move(shapes),
         at::RecordFunction::getDefaultNodeId(),
@@ -275,7 +296,7 @@ void ProfilerLegacyThreadLocalState::pushRange(
 
 void ProfilerLegacyThreadLocalState::popRange(
     const at::RecordFunction& fn,
-    const bool record_cuda) {
+    const bool include_kernel) {
   if (config_.disabled()) {
     return;
   }
@@ -290,7 +311,8 @@ void ProfilerLegacyThreadLocalState::popRange(
         EventKind::PopRange,
         at::StringView(""),
         at::RecordFunction::currentThreadId(),
-        record_cuda,
+        include_kernel,
+        config_.state,
         fn.handle());
     evt.setNodeId(at::RecordFunction::getDefaultNodeId());
     getEventList(fn.threadId()).record(std::move(evt));
@@ -309,7 +331,8 @@ void ProfilerLegacyThreadLocalState::reportMemoryUsage(
         EventKind::MemoryAlloc,
         at::StringView(""),
         thread_id,
-        config_.state == torch::profiler::impl::ProfilerState::CUDA);
+        false,
+        config_.state);
     evt.updateMemoryStats(alloc_size, device);
     getEventList(thread_id).record(std::move(evt));
   }
@@ -415,12 +438,13 @@ void pushProfilingCallbacksLegacy() {
 
 } // namespace
 
-void enableProfilerLegacy(
-    const torch::profiler::impl::ProfilerConfig& new_config) {
+void enableProfilerLegacy(const torch::profiler::impl::ProfilerConfig& new_config) {
+  TORCH_CHECK(new_config.state != torch::profiler::impl::ProfilerState::NVTX || torch::profiler::impl::cudaStubs()->enabled(),
+    "Can't use NVTX profiler - PyTorch was compiled without CUDA");
   TORCH_CHECK(
-      new_config.state != torch::profiler::impl::ProfilerState::NVTX ||
-          torch::profiler::impl::cudaStubs()->enabled(),
-      "Can't use NVTX profiler - PyTorch was compiled without CUDA");
+      new_config.state != ProfilerState::ITT ||
+          torch::profiler::impl::xpuStubs()->enabled(),
+      "Can't use Intel(R) VTune Profiler's ITT functionality - PyTorch was compiled without XPU");
 
   TORCH_CHECK(new_config.state != torch::profiler::impl::ProfilerState::KINETO);
 
@@ -434,14 +458,17 @@ void enableProfilerLegacy(
   state->mark("__start_profile", false);
 }
 
-thread_event_lists disableProfilerLegacy(
-    c10::optional<ProfilerDisableOptions> profilerDisableOptions) {
-  auto cleanupTLSState =
-      profilerDisableOptions ? profilerDisableOptions->cleanupTLSState : true;
-  auto consolidate =
-      profilerDisableOptions ? profilerDisableOptions->consolidate : true;
-  // all the DebugInfoBase objects are scope based and supposed to use
-  // DebugInfoGuard
+void markKernel(
+    std::string name,
+    torch::profiler::impl::ProfilerEventStub& kernel_event) {
+  auto state_ptr = ProfilerLegacyThreadLocalState::getTLS();
+  state_ptr->markKernel(name, kernel_event);
+}
+
+thread_event_lists disableProfilerLegacy(c10::optional<ProfilerDisableOptions> profilerDisableOptions) {
+  auto cleanupTLSState = profilerDisableOptions ? profilerDisableOptions->cleanupTLSState : true;
+  auto consolidate = profilerDisableOptions ? profilerDisableOptions->consolidate : true;
+  // all the DebugInfoBase objects are scope based and supposed to use DebugInfoGuard
   std::shared_ptr<c10::DebugInfoBase> state;
   if (cleanupTLSState) {
     state = c10::ThreadLocalDebugInfo::_pop(c10::DebugInfoKind::PROFILER_STATE);
@@ -472,10 +499,23 @@ void addEventList(std::vector<LegacyEvent>&& profiledEvents) {
   state_ptr->setOrAddRemoteProfiledEvents(std::move(profiledEvents));
 }
 
-void LegacyEvent::record(bool record_cuda) {
-  if (record_cuda) {
-    torch::profiler::impl::cudaStubs()->record(&device_, &cuda_event, &cpu_ns_);
-    return;
+void LegacyEvent::record(bool include_kernel, ProfilerState state) {
+  if (include_kernel) {
+    int device_id;
+    switch (state) {
+      case ProfilerState::CUDA:
+        torch::profiler::impl::cudaStubs()->record(
+            &device_id, &kernel_event_, &cpu_ns_);
+        device_ = at::Device(DeviceType::CUDA, device_id);
+        break;
+      case ProfilerState::XPU:
+        torch::profiler::impl::xpuStubs()->record(
+            &device_id, &kernel_event_, &cpu_ns_);
+        device_ = at::Device(DeviceType::XPU, device_id);
+        break;
+      default:
+        break;
+    }
   }
   cpu_ns_ = torch::profiler::impl::getTime();
 }
@@ -529,7 +569,7 @@ void LegacyEvent::record(bool record_cuda) {
       ivalues.get(EventIValueIdx::CPU_NS).toInt(), // cpu_ns
       ivalues.get(EventIValueIdx::CUDA_RECORDED).toBool(), // was cuda recorded
       ivalues.get(EventIValueIdx::CUDA_MEM_USAGE).toInt(), // cuda memory usage
-      ivalues.get(EventIValueIdx::CUDA_DEVICE).toInt(), // device
+      ivalues.get(EventIValueIdx::CUDA_DEVICE).toDevice(), // device
       ivalues.get(EventIValueIdx::CUDA_US).toInt() // cuda_us
   );
   return evt;
@@ -579,7 +619,24 @@ double LegacyEvent::cudaElapsedUs(const LegacyEvent& e) const {
     return static_cast<double>(e.cuda_us_ - cuda_us_);
   }
   return torch::profiler::impl::cudaStubs()->elapsed(
-      &cuda_event, &e.cuda_event);
+      &kernel_event_, &e.kernel_event_);
+}
+
+double LegacyEvent::xpuElapsedUs() const {
+  if (!hasXpu()) {
+    throw std::logic_error("Events were not recorded for XPU");
+  }
+  return torch::profiler::impl::xpuStubs()->elapsed(&kernel_event_);
+}
+
+double LegacyEvent::xpuElapsedUs(const LegacyEvent& e) const {
+  TORCH_CHECK(e.hasXpu() && hasXpu(), "Events were not recorded for XPU");
+  TORCH_CHECK(
+      e.device() == device(),
+      c10::str(
+          "Events are not on the same device: ", e.device(), " vs ", device()));
+  return torch::profiler::impl::xpuStubs()->elapsed(
+      &kernel_event_, &e.kernel_event_);
 }
 
 static const at::jit::CodeTemplate event_template(R"(
diff --git a/torch/csrc/autograd/profiler_legacy.h b/torch/csrc/autograd/profiler_legacy.h
index e12beca8060..3b12a5c35ac 100644
--- a/torch/csrc/autograd/profiler_legacy.h
+++ b/torch/csrc/autograd/profiler_legacy.h
@@ -35,7 +35,8 @@ struct TORCH_API LegacyEvent {
       EventKind kind,
       at::StringView name,
       uint16_t thread_id,
-      bool record_cuda,
+      bool include_kernel,
+      ProfilerState state,
       at::RecordFunctionHandle handle = 0,
       std::vector<std::vector<int64_t>>&& shapes = {},
       int node_id = -1,
@@ -47,7 +48,21 @@ struct TORCH_API LegacyEvent {
         shapes_(shapes),
         node_id_(node_id),
         is_async_(is_async) {
-    record(record_cuda);
+    record(include_kernel, state);
+  }
+
+  // Constructor to be used in marking a kernel event.
+  LegacyEvent(
+      EventKind kind,
+      at::StringView name,
+      uint16_t thread_id,
+      ProfilerState state,
+      torch::profiler::impl::ProfilerEventStub event)
+      : name_(std::move(name)),
+        kind_(kind),
+        thread_id_(thread_id),
+        kernel_event_(event) {
+    record(true, state);
   }
 
   // Constructor to be used in conjunction with LegacyEvent::fromIValue.
@@ -64,7 +79,7 @@ struct TORCH_API LegacyEvent {
       int64_t cpu_ns,
       bool cuda_recorded,
       int64_t cuda_memory_usage = 0,
-      int device = -1,
+      at::Device device = at::Device(DeviceType::CPU),
       double cuda_us = -1)
       : cpu_ns_(cpu_ns),
         name_(std::move(name)),
@@ -81,7 +96,7 @@ struct TORCH_API LegacyEvent {
     // Sanity check values that were deserialized
     TORCH_INTERNAL_ASSERT(cpu_ns_ > 0);
     if (cuda_recorded) {
-      TORCH_INTERNAL_ASSERT(device_ >= 0);
+      TORCH_INTERNAL_ASSERT(device_.index() >= 0);
       TORCH_INTERNAL_ASSERT(cuda_us_ >= 0);
     }
   }
@@ -93,7 +108,7 @@ struct TORCH_API LegacyEvent {
   // Reconstructs an event from IValues given by toIValue.
   static LegacyEvent fromIValue(const at::IValue& eventIValue);
 
-  void record(bool record_cuda);
+  void record(bool include_kernel, ProfilerState state);
 
   std::string kindStr() const {
     switch (kind_) {
@@ -138,13 +153,24 @@ struct TORCH_API LegacyEvent {
     return static_cast<double>(cpu_ns_) / (1000.0);
   }
 
+  bool hasKernel() const {
+    return kernel_event_ != nullptr || (isRemote() && device_.index() != -1);
+  }
+
   double cudaElapsedUs(const LegacyEvent& e) const;
 
   bool hasCuda() const {
-    return cuda_event != nullptr || (isRemote() && device_ != -1);
+    return hasKernel() && device_.type() == DeviceType::CUDA;
+  }
+
+  double xpuElapsedUs() const;
+  double xpuElapsedUs(const LegacyEvent& e) const;
+
+  bool hasXpu() const {
+    return hasKernel() && device_.type() == DeviceType::XPU;
   }
 
-  int device() const {
+  at::Device device() const {
     return device_;
   }
 
@@ -155,6 +181,8 @@ struct TORCH_API LegacyEvent {
         device.is_cpu() || device.type() == c10::DeviceType::MKLDNN ||
         device.type() == c10::DeviceType::IDEEP) {
       cpu_memory_usage_ = alloc_size;
+    } else if (device.is_xpu()) {
+      xpu_memory_usage_ = alloc_size;
     } else {
       LOG(WARNING) << "Unsupported memory profiling device: " << device;
     }
@@ -168,6 +196,10 @@ struct TORCH_API LegacyEvent {
     return cuda_memory_usage_;
   }
 
+  int64_t xpuMemoryUsage() const {
+    return xpu_memory_usage_;
+  }
+
   at::RecordFunctionHandle handle() const {
     return handle_;
   }
@@ -265,8 +297,9 @@ struct TORCH_API LegacyEvent {
   std::vector<std::vector<int64_t>> shapes_;
   int64_t cpu_memory_usage_ = 0;
   int64_t cuda_memory_usage_ = 0;
-  int device_ = -1;
-  torch::profiler::impl::ProfilerEventStub cuda_event = nullptr;
+  int64_t xpu_memory_usage_ = 0;
+  at::Device device_ = at::Device(DeviceType::CPU);
+  torch::profiler::impl::ProfilerEventStub kernel_event_ = nullptr;
   int node_id_ = 0;
   bool is_remote_ = false;
   int64_t cuda_us_ = -1;
@@ -350,9 +383,11 @@ TORCH_API thread_event_lists disableProfilerLegacy(
 // will be marked with node ID given by fromNodeId.
 TORCH_API void addEventList(std::vector<LegacyEvent>&& profiledEvents);
 // Writes profiled events to a stream.
-TORCH_API void writeProfilerEventsToStream(
-    std::ostream& out,
-    const std::vector<LegacyEvent*>& events);
+TORCH_API void writeProfilerEventsToStream(std::ostream& out, const std::vector<LegacyEvent*>& events);
+// Add a kernel event to profile.
+TORCH_API void markKernel(
+    std::string name,
+    torch::profiler::impl::ProfilerEventStub& kernel_event);
 
 // Usage:
 //   {
diff --git a/torch/csrc/profiler/api.cpp b/torch/csrc/profiler/api.cpp
index 61a285919ef..d8f62b5c051 100644
--- a/torch/csrc/profiler/api.cpp
+++ b/torch/csrc/profiler/api.cpp
@@ -1,7 +1,5 @@
 #include <torch/csrc/profiler/api.h>
 
-#include <torch/csrc/profiler/util.h>
-
 namespace torch {
 namespace profiler {
 namespace impl {
@@ -9,7 +7,9 @@ namespace impl {
 ProfilerStubs::~ProfilerStubs() = default;
 
 namespace {
-struct DefaultCUDAStubs : public ProfilerStubs {
+struct DefaultStubs : public ProfilerStubs {
+  DefaultStubs(const char* name) : name_{name} {}
+
   void record(
       int* /*device*/,
       ProfilerEventStub* /*event*/,
@@ -22,52 +22,7 @@ struct DefaultCUDAStubs : public ProfilerStubs {
     fail();
     return 0.f;
   }
-  void mark(const char* /*name*/) const override {
-    fail();
-  }
-  void rangePush(const char* /*name*/) const override {
-    fail();
-  }
-  void rangePop() const override {
-    fail();
-  }
-  bool enabled() const override {
-    return false;
-  }
-  void onEachDevice(std::function<void(int)> /*op*/) const override {
-    fail();
-  }
-  void synchronize() const override {
-    fail();
-  }
-  ~DefaultCUDAStubs() override = default;
-
- private:
-  void fail() const {
-    AT_ERROR("CUDA used in profiler but not enabled.");
-  }
-};
-
-const DefaultCUDAStubs default_cuda_stubs;
-constexpr const DefaultCUDAStubs* default_cuda_stubs_addr = &default_cuda_stubs;
-// Constant initialization, so it is guaranteed to be initialized before
-// static initialization calls which may invoke registerCUDAMethods
-inline const ProfilerStubs*& cuda_stubs() {
-  static const ProfilerStubs* stubs_ =
-      static_cast<const ProfilerStubs*>(default_cuda_stubs_addr);
-  return stubs_;
-}
-
-struct DefaultITTStubs : public ProfilerStubs {
-  void record(
-      int* /*device*/,
-      ProfilerEventStub* /*event*/,
-      int64_t* /*cpu_ns*/) const override {
-    fail();
-  }
-  float elapsed(
-      const ProfilerEventStub* /*event*/,
-      const ProfilerEventStub* /*event2*/) const override {
+  virtual float elapsed(const ProfilerEventStub* /*event*/) const override {
     fail();
     return 0.f;
   }
@@ -89,40 +44,44 @@ struct DefaultITTStubs : public ProfilerStubs {
   void synchronize() const override {
     fail();
   }
-  ~DefaultITTStubs() override = default;
+  ~DefaultStubs() override = default;
 
  private:
   void fail() const {
-    AT_ERROR("ITT used in profiler but not enabled.");
+    AT_ERROR(name_, " used in profiler but not enabled.");
   }
-};
 
-const DefaultITTStubs default_itt_stubs;
-constexpr const DefaultITTStubs* default_itt_stubs_addr = &default_itt_stubs;
-// Constant initialization, so it is guaranteed to be initialized before
-// static initialization calls which may invoke registerITTMethods
-inline const ProfilerStubs*& itt_stubs() {
-  static const ProfilerStubs* stubs_ =
-      static_cast<const ProfilerStubs*>(default_itt_stubs_addr);
-  return stubs_;
-}
+  const char* const name_;
+};
 } // namespace
 
-const ProfilerStubs* cudaStubs() {
-  return cuda_stubs();
-}
-
-void registerCUDAMethods(ProfilerStubs* stubs) {
-  cuda_stubs() = stubs;
-}
-
-const ProfilerStubs* ittStubs() {
-  return itt_stubs();
-}
+#define REGISTER_DEFAULT(name, upper_name)                                   \
+  namespace {                                                                \
+  const DefaultStubs default_##name##_stubs{#upper_name};                    \
+  constexpr const DefaultStubs* default_##name##_stubs_addr =                \
+      &default_##name##_stubs;                                               \
+                                                                             \
+  /* Constant initialization, so it is guaranteed to be initialized before*/ \
+  /* static initialization calls which may invoke register<name>Methods*/    \
+  inline const ProfilerStubs*& name##_stubs() {                              \
+    static const ProfilerStubs* stubs_ =                                     \
+        static_cast<const ProfilerStubs*>(default_##name##_stubs_addr);      \
+    return stubs_;                                                           \
+  }                                                                          \
+  } /*namespace*/                                                            \
+                                                                             \
+  const ProfilerStubs* name##Stubs() {                                       \
+    return name##_stubs();                                                   \
+  }                                                                          \
+                                                                             \
+  void register##upper_name##Methods(ProfilerStubs* stubs) {                 \
+    name##_stubs() = stubs;                                                  \
+  }
 
-void registerITTMethods(ProfilerStubs* stubs) {
-  itt_stubs() = stubs;
-}
+REGISTER_DEFAULT(cuda, CUDA)
+REGISTER_DEFAULT(itt, ITT)
+REGISTER_DEFAULT(xpu, XPU)
+#undef REGISTER_DEFAULT
 
 } // namespace impl
 } // namespace profiler
diff --git a/torch/csrc/profiler/api.h b/torch/csrc/profiler/api.h
index 0414b8c3238..5eb51333489 100644
--- a/torch/csrc/profiler/api.h
+++ b/torch/csrc/profiler/api.h
@@ -4,16 +4,19 @@
 #include <torch/csrc/Export.h>
 #include <torch/csrc/profiler/orchestration/observer.h>
 
-struct CUevent_st;
-
 namespace torch {
 namespace profiler {
 namespace impl {
 
+class KernelEventBase {
+public:
+  virtual ~KernelEventBase() = default;
+};
+
 // ----------------------------------------------------------------------------
 // -- Annotation --------------------------------------------------------------
 // ----------------------------------------------------------------------------
-using ProfilerEventStub = std::shared_ptr<CUevent_st>;
+using ProfilerEventStub = std::shared_ptr<KernelEventBase>;
 
 struct TORCH_API ProfilerStubs {
   virtual void record(int* device, ProfilerEventStub* event, int64_t* cpu_ns)
@@ -21,6 +24,7 @@ struct TORCH_API ProfilerStubs {
   virtual float elapsed(
       const ProfilerEventStub* event,
       const ProfilerEventStub* event2) const = 0;
+  virtual float elapsed(const ProfilerEventStub* event) const = 0;
   virtual void mark(const char* name) const = 0;
   virtual void rangePush(const char* name) const = 0;
   virtual void rangePop() const = 0;
@@ -36,6 +40,8 @@ TORCH_API void registerCUDAMethods(ProfilerStubs* stubs);
 TORCH_API const ProfilerStubs* cudaStubs();
 TORCH_API void registerITTMethods(ProfilerStubs* stubs);
 TORCH_API const ProfilerStubs* ittStubs();
+TORCH_API void registerXPUMethods(ProfilerStubs* stubs);
+TORCH_API const ProfilerStubs* xpuStubs();
 
 } // namespace impl
 } // namespace profiler
diff --git a/torch/csrc/profiler/cuda.cpp b/torch/csrc/profiler/cuda.cpp
index c64eb5e9caa..3c0f2b0f973 100644
--- a/torch/csrc/profiler/cuda.cpp
+++ b/torch/csrc/profiler/cuda.cpp
@@ -5,6 +5,8 @@
 
 #include <sstream>
 
+struct CUevent_st;
+
 namespace torch {
 namespace profiler {
 namespace impl {
@@ -33,6 +35,20 @@ static inline void cudaCheck(cudaError_t result, const char* file, int line) {
 }
 #define TORCH_CUDA_CHECK(result) cudaCheck(result, __FILE__, __LINE__);
 
+class CUDAEventProfiler : public KernelEventBase {
+public:
+  CUDAEventProfiler(CUevent_st* evt_ptr = nullptr) : event_(evt_ptr, CUDAEventDestory) {};
+  virtual ~CUDAEventProfiler() = default;
+  CUevent_st* get() const {
+    return event_.get();
+  }
+private:
+  static void CUDAEventDestory(CUevent_st* ptr) {
+    TORCH_CUDA_CHECK(cudaEventDestroy(ptr));
+  }
+  std::unique_ptr<CUevent_st, std::function<void(CUevent_st*)>> event_;
+};
+
 struct CUDAMethods : public ProfilerStubs {
   void record(int* device, ProfilerEventStub* event, int64_t* cpu_ns)
       const override {
@@ -42,9 +58,8 @@ struct CUDAMethods : public ProfilerStubs {
     // NOLINTNEXTLINE(cppcoreguidelines-init-variables)
     CUevent_st* cuda_event_ptr;
     TORCH_CUDA_CHECK(cudaEventCreate(&cuda_event_ptr));
-    *event = std::shared_ptr<CUevent_st>(cuda_event_ptr, [](CUevent_st* ptr) {
-      TORCH_CUDA_CHECK(cudaEventDestroy(ptr));
-    });
+    auto cuda_event_stub = std::make_shared<CUDAEventProfiler>(cuda_event_ptr);
+    *event = cuda_event_stub;
     auto stream = at::cuda::getCurrentCUDAStream();
     if (cpu_ns) {
       *cpu_ns = torch::profiler::impl::getTime();
@@ -54,15 +69,24 @@ struct CUDAMethods : public ProfilerStubs {
 
   float elapsed(const ProfilerEventStub* event, const ProfilerEventStub* event2)
       const override {
-    TORCH_CUDA_CHECK(cudaEventSynchronize(event->get()));
-    TORCH_CUDA_CHECK(cudaEventSynchronize(event2->get()));
+    CUDAEventProfiler* cuda_event_ =
+        dynamic_cast<CUDAEventProfiler*>(event->get());
+    CUDAEventProfiler* cuda_event2_ =
+        dynamic_cast<CUDAEventProfiler*>(event2->get());
+    TORCH_CUDA_CHECK(cudaEventSynchronize(cuda_event_->get()));
+    TORCH_CUDA_CHECK(cudaEventSynchronize(cuda_event2_->get()));
     // NOLINTNEXTLINE(cppcoreguidelines-init-variables)
     float ms;
-    TORCH_CUDA_CHECK(cudaEventElapsedTime(&ms, event->get(), event2->get()));
+    TORCH_CUDA_CHECK(
+        cudaEventElapsedTime(&ms, cuda_event_->get(), cuda_event2_->get()));
     // NOLINTNEXTLINE(bugprone-narrowing-conversions,cppcoreguidelines-avoid-magic-numbers,cppcoreguidelines-narrowing-conversions)
     return ms * 1000.0;
   }
 
+  float elapsed(const ProfilerEventStub* event) const override {
+    TORCH_CHECK(false, "Profiler cannot use this method on CUDA backend.");
+  }
+
   void mark(const char* name) const override {
     // NOLINTNEXTLINE(cppcoreguidelines-init-variables)
     ::nvtxMark(name);
diff --git a/torch/csrc/profiler/itt.cpp b/torch/csrc/profiler/itt.cpp
index 3269a5784ae..54bdf503206 100644
--- a/torch/csrc/profiler/itt.cpp
+++ b/torch/csrc/profiler/itt.cpp
@@ -18,6 +18,11 @@ struct ITTMethods : public ProfilerStubs {
     return 0;
   }
 
+  virtual float elapsed(const ProfilerEventStub* event)
+      const override {
+    return 0;
+  }
+
   void mark(const char* name) const override {
     // NOLINTNEXTLINE(cppcoreguidelines-init-variables)
     torch::profiler::itt_mark(name);
diff --git a/torch/csrc/profiler/orchestration/observer.h b/torch/csrc/profiler/orchestration/observer.h
index 3b75a91804b..7d75623363f 100644
--- a/torch/csrc/profiler/orchestration/observer.h
+++ b/torch/csrc/profiler/orchestration/observer.h
@@ -20,6 +20,7 @@ enum class C10_API_ENUM ProfilerState {
   Disabled = 0,
   CPU, // CPU-only profiling
   CUDA, // CPU + CUDA events
+  XPU, // CPU + XPU events
   NVTX, // only emit NVTX markers
   ITT, // only emit ITT markers
   KINETO, // use libkineto
diff --git a/torch/csrc/profiler/python/init.cpp b/torch/csrc/profiler/python/init.cpp
index 9e1b663d657..813057df40f 100644
--- a/torch/csrc/profiler/python/init.cpp
+++ b/torch/csrc/profiler/python/init.cpp
@@ -32,6 +32,7 @@ void initPythonBindings(PyObject* module) {
       .value("Disabled", ProfilerState::Disabled)
       .value("CPU", ProfilerState::CPU)
       .value("CUDA", ProfilerState::CUDA)
+      .value("XPU", ProfilerState::XPU)
       .value("NVTX", ProfilerState::NVTX)
       .value("ITT", ProfilerState::ITT)
       .value("KINETO", ProfilerState::KINETO)
diff --git a/torch/testing/_internal/distributed/rpc/rpc_test.py b/torch/testing/_internal/distributed/rpc/rpc_test.py
index ea294b43c38..326b5cc0aa2 100644
--- a/torch/testing/_internal/distributed/rpc/rpc_test.py
+++ b/torch/testing/_internal/distributed/rpc/rpc_test.py
@@ -4583,9 +4583,9 @@ class CudaRpcTest(RpcAgentTestFixture):
                     self.assertEqual(1, len(event.kernels))
                     kernel = event.kernels[0]
                     if event.node_id == dst_cuda_0:
-                        self.assertEqual(kernel.device, 0)
+                        self.assertEqual(kernel.device, torch.device("cuda:{}".format(0)))
                     if event.node_id == dst_cuda_1:
-                        self.assertEqual(kernel.device, 1)
+                        self.assertEqual(kernel.device, torch.device("cuda:{}".format(1)))
                     self.assertGreater(event.cuda_time, 0)
 
         # Validate that EXPECTED_REMOTE_EVENTS is a subset of remotely profiled
-- 
2.25.1

