From 2c6f8ceb88565420b13aa7a91a927624b3b2c05e Mon Sep 17 00:00:00 2001
From: Feng Yuan <feng1.yuan@intel.com>
Date: Fri, 28 Oct 2022 14:54:24 +0800
Subject: [PATCH 29/29] SYCL BF16 intrinsic (#60) (#77)

* Add SYCL bfloat16 type support to c10::BFloat16

Co-authored-by: ch <hao3.chen@intel.com>
Co-authored-by: Yutao Xu <yutao.xu@intel.com>
---
 c10/util/BFloat16-inl.h | 18 ++++++++++++++++++
 c10/util/BFloat16.h     | 11 +++++++++++
 2 files changed, 29 insertions(+)

diff --git a/c10/util/BFloat16-inl.h b/c10/util/BFloat16-inl.h
index 9dd30d2d5a..b51bb4d9d7 100644
--- a/c10/util/BFloat16-inl.h
+++ b/c10/util/BFloat16-inl.h
@@ -3,6 +3,11 @@
 #include <c10/macros/Macros.h>
 #include <limits>
 
+#ifdef SYCL_LANGUAGE_VERSION
+#include <CL/sycl.hpp>
+#include <ext/oneapi/experimental/bfloat16.hpp>
+#endif
+
 namespace c10 {
 
 /// Constructors
@@ -10,6 +15,8 @@ inline C10_HOST_DEVICE BFloat16::BFloat16(float value) {
 #if defined(CUDA_VERSION) && CUDA_VERSION >= 11000 && \
     defined(__CUDA_ARCH__) && __CUDA_ARCH__ >= 800
   x = __bfloat16_as_ushort(__float2bfloat16(value));
+#elif defined(__SYCL_DEVICE_ONLY__)
+  x = sycl::bit_cast<uint16_t>(sycl::ext::oneapi::experimental::bfloat16(value));
 #else
   // RNE by default
   x = detail::round_to_nearest_even(value);
@@ -20,6 +27,8 @@ inline C10_HOST_DEVICE BFloat16::BFloat16(float value) {
 inline C10_HOST_DEVICE BFloat16::operator float() const {
 #if defined(CUDA_VERSION) && CUDA_VERSION >= 11000
   return __bfloat162float(*reinterpret_cast<const __nv_bfloat16*>(&x));
+#elif defined(__SYCL_DEVICE_ONLY__)
+  return float(*reinterpret_cast<const sycl::ext::oneapi::experimental::bfloat16*>(&x));
 #else
   return detail::f32_from_bits(x);
 #endif
@@ -34,6 +43,15 @@ inline C10_HOST_DEVICE BFloat16::operator __nv_bfloat16() const {
 }
 #endif
 
+#ifdef SYCL_LANGUAGE_VERSION
+inline C10_HOST_DEVICE BFloat16::BFloat16(const sycl::ext::oneapi::experimental::bfloat16& value) {
+  x = *reinterpret_cast<const unsigned short*>(&value);
+}
+inline C10_HOST_DEVICE BFloat16::operator sycl::ext::oneapi::experimental::bfloat16() const {
+  return *reinterpret_cast<const sycl::ext::oneapi::experimental::bfloat16*>(&x);
+}
+#endif
+
 // CUDA intrinsics
 
 #if defined(__CUDACC__) || defined(__HIPCC__)
diff --git a/c10/util/BFloat16.h b/c10/util/BFloat16.h
index 5446eb9419..428ae79b50 100644
--- a/c10/util/BFloat16.h
+++ b/c10/util/BFloat16.h
@@ -11,6 +11,11 @@
 #include <cuda_bf16.h>
 #endif
 
+#if defined(SYCL_LANGUAGE_VERSION)
+#include <CL/sycl.hpp>
+#include <ext/oneapi/experimental/bfloat16.hpp>
+#endif
+
 namespace c10 {
 
 namespace detail {
@@ -94,6 +99,12 @@ struct alignas(2) BFloat16 {
   inline C10_HOST_DEVICE BFloat16(const __nv_bfloat16& value);
   explicit inline C10_HOST_DEVICE operator __nv_bfloat16() const;
 #endif
+
+#if defined(SYCL_LANGUAGE_VERSION)
+  inline C10_HOST_DEVICE BFloat16(const sycl::ext::oneapi::experimental::bfloat16& value);
+  explicit inline C10_HOST_DEVICE operator sycl::ext::oneapi::experimental::bfloat16() const;
+#endif
+
 };
 
 } // namespace c10
-- 
2.25.1

