From 1942c5fa9a93e3aab4b7ad1720ab2327f7395a60 Mon Sep 17 00:00:00 2001
From: "Gu, Jinghui" <jinghui.gu@intel.com>
Date: Wed, 16 Nov 2022 13:11:37 +0000
Subject: [PATCH 4/9] SYCL BF16 intrinsic (#60) (#77)

* Add SYCL bfloat16 type support to c10::BFloat16
---
 c10/util/BFloat16-inl.h | 23 +++++++++++++++++++++++
 c10/util/BFloat16.h     | 16 ++++++++++++++++
 c10/util/Half-inl.h     |  8 ++++----
 c10/util/Half.h         |  9 ++++-----
 4 files changed, 47 insertions(+), 9 deletions(-)

diff --git a/c10/util/BFloat16-inl.h b/c10/util/BFloat16-inl.h
index 29fda9c388..bad86158fe 100644
--- a/c10/util/BFloat16-inl.h
+++ b/c10/util/BFloat16-inl.h
@@ -3,6 +3,16 @@
 #include <c10/macros/Macros.h>
 #include <limits>
 
+#if defined(CL_SYCL_LANGUAGE_VERSION)
+#include <CL/sycl.hpp> // for SYCL 1.2.1
+#elif defined(SYCL_LANGUAGE_VERSION)
+#include <sycl/sycl.hpp> // for SYCL 2020
+#endif
+
+#if defined(SYCL_LANGUAGE_VERSION) && defined(__INTEL_LLVM_COMPILER)
+#include <ext/oneapi/bfloat16.hpp>
+#endif
+
 C10_CLANG_DIAGNOSTIC_PUSH()
 #if C10_CLANG_HAS_WARNING("-Wimplicit-int-float-conversion")
 C10_CLANG_DIAGNOSTIC_IGNORE("-Wimplicit-int-float-conversion")
@@ -15,6 +25,8 @@ inline C10_HOST_DEVICE BFloat16::BFloat16(float value) {
 #if defined(CUDA_VERSION) && CUDA_VERSION >= 11000 && \
     defined(__CUDA_ARCH__) && __CUDA_ARCH__ >= 800
   x = __bfloat16_as_ushort(__float2bfloat16(value));
+#elif defined(__SYCL_DEVICE_ONLY__) && defined(__INTEL_LLVM_COMPILER)
+  x = sycl::bit_cast<uint16_t>(sycl::ext::oneapi::bfloat16(value));
 #else
   // RNE by default
   x = detail::round_to_nearest_even(value);
@@ -25,6 +37,8 @@ inline C10_HOST_DEVICE BFloat16::BFloat16(float value) {
 inline C10_HOST_DEVICE BFloat16::operator float() const {
 #if defined(CUDA_VERSION) && CUDA_VERSION >= 11000
   return __bfloat162float(*reinterpret_cast<const __nv_bfloat16*>(&x));
+#elif defined(__SYCL_DEVICE_ONLY__) && defined(__INTEL_LLVM_COMPILER)
+  return float(*reinterpret_cast<const sycl::ext::oneapi::bfloat16*>(&x));
 #else
   return detail::f32_from_bits(x);
 #endif
@@ -39,6 +53,15 @@ inline C10_HOST_DEVICE BFloat16::operator __nv_bfloat16() const {
 }
 #endif
 
+#if defined(SYCL_LANGUAGE_VERSION) && defined(__INTEL_LLVM_COMPILER)
+inline C10_HOST_DEVICE BFloat16::BFloat16(const sycl::ext::oneapi::bfloat16& value) {
+  x = *reinterpret_cast<const unsigned short*>(&value);
+}
+inline C10_HOST_DEVICE BFloat16::operator sycl::ext::oneapi::bfloat16() const {
+  return *reinterpret_cast<const sycl::ext::oneapi::bfloat16*>(&x);
+}
+#endif
+
 // CUDA intrinsics
 
 #if defined(__CUDACC__) || defined(__HIPCC__)
diff --git a/c10/util/BFloat16.h b/c10/util/BFloat16.h
index 1ada02bba1..7f21faa092 100644
--- a/c10/util/BFloat16.h
+++ b/c10/util/BFloat16.h
@@ -11,6 +11,16 @@
 #include <cuda_bf16.h>
 #endif
 
+#if defined(CL_SYCL_LANGUAGE_VERSION)
+#include <CL/sycl.hpp> // for SYCL 1.2.1
+#elif defined(SYCL_LANGUAGE_VERSION)
+#include <sycl/sycl.hpp> // for SYCL 2020
+#endif
+
+#if defined(SYCL_LANGUAGE_VERSION) && defined(__INTEL_LLVM_COMPILER)
+#include <ext/oneapi/bfloat16.hpp>
+#endif
+
 namespace c10 {
 
 namespace detail {
@@ -94,6 +104,12 @@ struct alignas(2) BFloat16 {
   inline C10_HOST_DEVICE BFloat16(const __nv_bfloat16& value);
   explicit inline C10_HOST_DEVICE operator __nv_bfloat16() const;
 #endif
+
+#if defined(SYCL_LANGUAGE_VERSION) && defined(__INTEL_LLVM_COMPILER)
+  inline C10_HOST_DEVICE BFloat16(const sycl::ext::oneapi::bfloat16& value);
+  explicit inline C10_HOST_DEVICE operator sycl::ext::oneapi::bfloat16() const;
+#endif
+
 };
 
 } // namespace c10
diff --git a/c10/util/Half-inl.h b/c10/util/Half-inl.h
index 3ed8cf80d1..9d296f0be1 100644
--- a/c10/util/Half-inl.h
+++ b/c10/util/Half-inl.h
@@ -12,10 +12,10 @@
 #include <hip/hip_fp16.h>
 #endif
 
-#if defined(SYCL_LANGUAGE_VERSION)
-#include <sycl/sycl.hpp> // for SYCL 2020
-#elif defined(CL_SYCL_LANGUAGE_VERSION)
+#if defined(CL_SYCL_LANGUAGE_VERSION)
 #include <CL/sycl.hpp> // for SYCL 1.2.1
+#elif defined(SYCL_LANGUAGE_VERSION)
+#include <sycl/sycl.hpp> // for SYCL 2020
 #endif
 
 C10_CLANG_DIAGNOSTIC_PUSH()
@@ -58,7 +58,7 @@ inline C10_HOST_DEVICE Half::operator __half() const {
 }
 #endif
 
-#ifdef SYCL_LANGUAGE_VERSION
+#if defined(SYCL_LANGUAGE_VERSION)
 inline C10_HOST_DEVICE Half::Half(const sycl::half& value) {
   x = *reinterpret_cast<const unsigned short*>(&value);
 }
diff --git a/c10/util/Half.h b/c10/util/Half.h
index a786db956c..4b6d4a59c8 100644
--- a/c10/util/Half.h
+++ b/c10/util/Half.h
@@ -45,10 +45,10 @@
 #include <hip/hip_fp16.h>
 #endif
 
-#if defined(SYCL_LANGUAGE_VERSION)
-#include <sycl/sycl.hpp> // for SYCL 2020
-#elif defined(CL_SYCL_LANGUAGE_VERSION)
+#if defined(CL_SYCL_LANGUAGE_VERSION)
 #include <CL/sycl.hpp> // for SYCL 1.2.1
+#elif defined(SYCL_LANGUAGE_VERSION)
+#include <sycl/sycl.hpp> // for SYCL 2020
 #endif
 
 // Standard check for compiling CUDA with clang
@@ -395,8 +395,7 @@ struct alignas(2) Half {
 #if defined(__CUDACC__) || defined(__HIPCC__)
   inline C10_HOST_DEVICE Half(const __half& value);
   inline C10_HOST_DEVICE operator __half() const;
-#endif
-#ifdef SYCL_LANGUAGE_VERSION
+#elif defined(SYCL_LANGUAGE_VERSION)
   inline C10_HOST_DEVICE Half(const sycl::half& value);
   inline C10_HOST_DEVICE operator sycl::half() const;
 #endif
-- 
2.25.1

