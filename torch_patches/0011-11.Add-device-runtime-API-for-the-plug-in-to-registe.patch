From d3705765f23be5837483547c1642149270406d76 Mon Sep 17 00:00:00 2001
From: chengjunlu <chengjun.lu@intel.com>
Date: Tue, 6 Jul 2021 16:14:03 +0800
Subject: [PATCH 11/17] 11.Add device runtime API for the plug-in to register
 platform python module into torch (#59857) (#12)

Summary:
Allow the out-of-tree Pytorch plug-in, for the device type other than CUDA, to add the runtime interface to the `torch` module. The runtime interface of the device can be referred with the device type name in the `torch` module. I.E., `torch.cuda` or `torch.xpu`.

- Add a register interface for the plug-in to add the platform python module into `torch` module with the device type name. I.E., The `torch.xpu` can be used to refer the XPU runtime interface after the XPU runtime module is registered with `torch._register_device_module('xpu', xpu_module)` in Intel's XPU plug-in.

More details about runtime has been discussed in https://github.com/pytorch/pytorch/issues/53707.

Pull Request resolved: https://github.com/pytorch/pytorch/pull/59857

Reviewed By: mrshenli

Differential Revision: D29309320

Pulled By: ezyang

fbshipit-source-id: b9802a5f937ddef9e0bdaf2f7692dfe463912fbe

(cherry picked from commit 265f0e532178bea4f4980c4b53c9ae5ca31540af)
---
 test/test_utils.py | 28 ++++++++++++++++++++++++++++
 torch/__init__.py  | 16 ++++++++++++++++
 2 files changed, 44 insertions(+)

diff --git a/test/test_utils.py b/test/test_utils.py
index 11b4337b47..fff462ceda 100644
--- a/test/test_utils.py
+++ b/test/test_utils.py
@@ -940,5 +940,33 @@ class TestAssert(TestCase):
             torch.Assert(False, "bar")
 
 
+class DummyXPUModule(object):
+    @staticmethod
+    def is_available():
+        return True
+
+
+class TestExtensionUtils(TestCase):
+    def test_external_module_register(self):
+        # Built-in module
+        with self.assertRaisesRegex(RuntimeError, "The runtime module of"):
+            torch._register_device_module('cuda', torch.cuda)
+
+        # Wrong device type
+        with self.assertRaisesRegex(RuntimeError, "Expected one of cpu"):
+            torch._register_device_module('dummmy', DummyXPUModule)
+
+        with self.assertRaises(AttributeError):
+            torch.xpu.is_available()  # type: ignore[attr-defined]
+
+        torch._register_device_module('xpu', DummyXPUModule)
+
+        torch.xpu.is_available()  # type: ignore[attr-defined]
+
+        # No supporting for override
+        with self.assertRaisesRegex(RuntimeError, "The runtime module of"):
+            torch._register_device_module('xpu', DummyXPUModule)
+
+
 if __name__ == '__main__':
     run_tests()
diff --git a/torch/__init__.py b/torch/__init__.py
index e91e45c29e..e814f76737 100644
--- a/torch/__init__.py
+++ b/torch/__init__.py
@@ -623,3 +623,19 @@ def Assert(condition, message):
     if type(condition) is not torch.Tensor and has_torch_function((condition,)):
         return handle_torch_function(Assert, (condition,), condition, message)
     assert condition, message
+
+
+def _register_device_module(device_type, module):
+    r"""Register an external runtime module of the specific :attr:`device_type`
+    supported by torch.
+
+    After the :attr:`module` is registered correctly, the user can refer
+    the external runtime module as part of torch with attribute torch.xxx.
+    """
+    # Make sure the device_type represent a supported device type for torch.
+    device_type = torch.device(device_type).type
+    m = sys.modules[__name__]
+    if hasattr(m, device_type):
+        raise RuntimeError("The runtime module of '{}' has already "
+                           "been registered with '{}'".format(device_type, getattr(m, device_type)))
+    setattr(m, device_type, module)
-- 
2.25.1

