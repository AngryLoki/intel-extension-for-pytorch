From dc22b5074545f1eee081e531cc996660e83c0652 Mon Sep 17 00:00:00 2001
From: cchheennhhaaoo <hao3.chen@intel.com>
Date: Wed, 4 May 2022 00:57:03 +0000
Subject: [PATCH 12/28] Optimize half conversion for SYCL kernel

## Motivation:
Add support for SYCL half implicit/explicit conversion in SYCL kernels.

## Additional Context:
Macro `SYCL_LANGUAGE_VERSION` is suggested by SYCL compiler to instead of `__SYCL_DEVICE_ONLY__` in current version unless device and host specific implementation of the same function is necessary.

Pull Request resolved: https://github.com/pytorch/pytorch/pull/76515
Approved by: https://github.com/ezyang
---
 c10/util/Half-inl.h | 13 ++++++++++++-
 c10/util/Half.h     |  8 ++++++++
 2 files changed, 20 insertions(+), 1 deletion(-)

diff --git a/c10/util/Half-inl.h b/c10/util/Half-inl.h
index 1982dc7fbc..f634afd7df 100644
--- a/c10/util/Half-inl.h
+++ b/c10/util/Half-inl.h
@@ -12,7 +12,7 @@
 #include <hip/hip_fp16.h>
 #endif
 
-#ifdef __SYCL_DEVICE_ONLY__
+#ifdef SYCL_LANGUAGE_VERSION
 #include <CL/sycl.hpp>
 #endif
 
@@ -51,6 +51,15 @@ inline C10_HOST_DEVICE Half::operator __half() const {
 }
 #endif
 
+#ifdef SYCL_LANGUAGE_VERSION
+inline C10_HOST_DEVICE Half::Half(const sycl::half& value) {
+  x = *reinterpret_cast<const unsigned short*>(&value);
+}
+inline C10_HOST_DEVICE Half::operator sycl::half() const {
+  return *reinterpret_cast<const sycl::half*>(&x);
+}
+#endif
+
 // CUDA intrinsics
 
 #if (defined(__CUDA_ARCH__) && (__CUDA_ARCH__ >= 350)) || \
@@ -83,6 +92,8 @@ inline C10_HOST_DEVICE Half operator-(const Half& a) {
 #if (defined(__CUDA_ARCH__) && __CUDA_ARCH__ >= 530) || \
     defined(__HIP_DEVICE_COMPILE__)
   return __hneg(a);
+#elif defined(__SYCL_DEVICE_ONLY__)
+  return -static_cast<sycl::half>(a);
 #else
   return -static_cast<float>(a);
 #endif
diff --git a/c10/util/Half.h b/c10/util/Half.h
index c22db1fab2..580b5cd73b 100644
--- a/c10/util/Half.h
+++ b/c10/util/Half.h
@@ -43,6 +43,10 @@
 #include <hip/hip_fp16.h>
 #endif
 
+#ifdef SYCL_LANGUAGE_VERSION
+#include <CL/sycl.hpp>
+#endif
+
 // Standard check for compiling CUDA with clang
 #if defined(__clang__) && defined(__CUDA__) && defined(__CUDA_ARCH__)
 #define C10_DEVICE_HOST_FUNCTION __device__ __host__
@@ -386,6 +390,10 @@ struct alignas(2) Half {
   inline C10_HOST_DEVICE Half(const __half& value);
   inline C10_HOST_DEVICE operator __half() const;
 #endif
+#ifdef SYCL_LANGUAGE_VERSION
+  inline C10_HOST_DEVICE Half(const sycl::half& value);
+  inline C10_HOST_DEVICE operator sycl::half() const;
+#endif
 };
 
 // This is just a placeholder for whatever complex representation we
-- 
2.25.1

