commit 1cbc036727ce245c9e233d0ce717a2cb308e2716
Author: Denis Samoilov <denis.samoylov@intel.com>
Date:   Wed Dec 23 18:44:38 2020 -0800

    common: change LRU eviction policy to FIFO

diff --git a/src/common/primitive_cache.cpp b/src/common/primitive_cache.cpp
index 9074432..3a6f31f 100644
--- a/src/common/primitive_cache.cpp
+++ b/src/common/primitive_cache.cpp
@@ -77,22 +77,25 @@ lru_primitive_cache_t::value_t lru_primitive_cache_t::get_or_add(
         return value_t();
     }
 
-    unlock_read();
-    lock_write();
+    // Check if the requested entry is present in the cache
+    auto e = get(key);
 
-    // Double check the capacity due to possible race condition
-    if (capacity_ == 0) {
-        unlock_write();
-        return value_t();
+    if (e.valid()) {
+        unlock_read();
+        return e;
     }
 
-    // Check if the requested entry is present in the cache
-    auto e = get(key);
+    // Cache doesn't contain the shared_future
+    unlock_read();
+    lock_write();
+
+    e = get(key);
     if (!e.valid()) {
         // If the entry is missing in the cache then add it
         add(key, value);
     }
     unlock_write();
+
     return e;
 }
 
@@ -107,13 +110,15 @@ void lru_primitive_cache_t::add(const key_t &key, const value_t &value) {
     assert(cache_list_.size() == cache_mapper_.size());
 }
 
-lru_primitive_cache_t::value_t lru_primitive_cache_t::get(const key_t &key) {
+lru_primitive_cache_t::value_t lru_primitive_cache_t::get(
+        const key_t &key) const {
     auto it = cache_mapper_.find(key);
     if (it == cache_mapper_.end()) { return value_t(); }
 
     // Move 1 cache_list_ node to the front of the cache_list_
-    cache_list_.splice(cache_list_.begin(), cache_list_, it->second);
-    return cache_list_.front().second;
+    //cache_list_.splice(cache_list_.begin(), cache_list_, it->second);
+    //return cache_list_.front().second;
+    return it->second->second;
 }
 
 void lru_primitive_cache_t::remove_if_invalidated(const key_t &key) {
diff --git a/src/common/primitive_cache.hpp b/src/common/primitive_cache.hpp
index fb471f2..72bd929 100644
--- a/src/common/primitive_cache.hpp
+++ b/src/common/primitive_cache.hpp
@@ -79,7 +79,7 @@ struct lru_primitive_cache_t : public primitive_cache_t {
 private:
     void evict(size_t n);
     void add(const key_t &key, const value_t &value);
-    value_t get(const key_t &key);
+    value_t get(const key_t &key) const;
 
     size_t capacity_;
     using cache_list_t = std::list<std::pair<key_t, value_t>>;
