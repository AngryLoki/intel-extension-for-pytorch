From eda34b739e0292ddeccc37b1fc9e6901f711660b Mon Sep 17 00:00:00 2001
From: xytintel <yutao.xu@intel.com>
Date: Fri, 24 Sep 2021 09:53:15 +0800
Subject: [PATCH 16/17] 16. add sycl::half support (#19)

---
 c10/util/Half-inl.h | 13 +++++++++++++
 c10/util/Half.h     |  8 ++++++++
 2 files changed, 21 insertions(+)

diff --git a/c10/util/Half-inl.h b/c10/util/Half-inl.h
index 0a1421d3c9..75e85482bc 100644
--- a/c10/util/Half-inl.h
+++ b/c10/util/Half-inl.h
@@ -12,6 +12,10 @@
 #include <hip/hip_fp16.h>
 #endif
 
+#ifdef __SYCL_DEVICE_ONLY__
+#include <CL/sycl.hpp>
+#endif
+
 namespace c10 {
 
 /// Constructors
@@ -43,6 +47,15 @@ inline C10_HOST_DEVICE Half::operator __half() const {
 }
 #endif
 
+#ifdef __SYCL_DEVICE_ONLY__
+inline C10_HOST_DEVICE Half::Half(const sycl::half& value) {
+  x = *reinterpret_cast<const unsigned short*>(&value);
+}
+inline C10_HOST_DEVICE Half::operator sycl::half() const {
+  return *reinterpret_cast<const sycl::half*>(&x);
+}
+#endif
+
 // CUDA intrinsics
 
 #if (defined(__CUDA_ARCH__) && (__CUDA_ARCH__ >= 350)) || \
diff --git a/c10/util/Half.h b/c10/util/Half.h
index 8f8dd34673..c983e1341e 100644
--- a/c10/util/Half.h
+++ b/c10/util/Half.h
@@ -43,6 +43,10 @@
 #include <hip/hip_fp16.h>
 #endif
 
+#ifdef __SYCL_DEVICE_ONLY__
+#include <CL/sycl.hpp>
+#endif
+
 // Standard check for compiling CUDA with clang
 #if defined(__clang__) && defined(__CUDA__) && defined(__CUDA_ARCH__)
 #define C10_DEVICE_HOST_FUNCTION __device__ __host__
@@ -356,6 +360,10 @@ struct alignas(2) Half {
   inline C10_HOST_DEVICE Half(const __half& value);
   inline C10_HOST_DEVICE operator __half() const;
 #endif
+#ifdef __SYCL_DEVICE_ONLY__
+  inline C10_HOST_DEVICE Half(const sycl::half& value);
+  inline C10_HOST_DEVICE operator sycl::half() const;
+#endif
 };
 
 // This is just a placeholder for whatever complex representation we
-- 
2.25.1

