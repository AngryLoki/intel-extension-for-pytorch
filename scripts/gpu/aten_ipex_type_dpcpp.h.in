// Autogenerated file by gen-gpu-ops.py. Do not edit directly!

#include <ATen/Tensor.h>
#include <ATen/ipex_type_dpcpp_customized.h>

namespace at {

namespace AtenIpexTypeDPCPP {
  at::Tensor _adaptive_avg_pool2d(const at::Tensor & self, at::IntArrayRef output_size);
  at::Tensor _adaptive_avg_pool2d_backward(const at::Tensor & grad_output, const at::Tensor & self);
  at::Tensor _cat(at::TensorList tensors, int64_t dim);
  at::Tensor & _cat_out(at::Tensor & out, at::TensorList tensors, int64_t dim);
  std::tuple<at::Tensor,at::Tensor> _ctc_loss(const at::Tensor & log_probs, const at::Tensor & targets, at::IntArrayRef input_lengths, at::IntArrayRef target_lengths, int64_t blank, bool zero_infinity);
  at::Tensor _ctc_loss_backward(const at::Tensor & grad, const at::Tensor & log_probs, const at::Tensor & targets, at::IntArrayRef input_lengths, at::IntArrayRef target_lengths, const at::Tensor & neg_log_likelihood, const at::Tensor & log_alpha, int64_t blank, bool zero_infinity);
  at::Tensor _cumprod(const at::Tensor & self, int64_t dim);
  at::Tensor & _cumprod_out(at::Tensor & out, const at::Tensor & self, int64_t dim);
  at::Tensor _cumsum(const at::Tensor & self, int64_t dim);
  at::Tensor & _cumsum_out(at::Tensor & out, const at::Tensor & self, int64_t dim);
  std::tuple<at::Tensor,at::Tensor,at::Tensor,at::Tensor> _embedding_bag(const at::Tensor & weight, const at::Tensor & indices, const at::Tensor & offsets, bool scale_grad_by_freq, int64_t mode, bool sparse, const at::Tensor & per_sample_weights, bool include_last_offset);
  at::Tensor _embedding_bag_dense_backward(const at::Tensor & grad, const at::Tensor & indices, const at::Tensor & offsets, const at::Tensor & offset2bag, const at::Tensor & bag_size, const at::Tensor & maximum_indices, int64_t num_weights, bool scale_grad_by_freq, int64_t mode, const at::Tensor & per_sample_weights);
  at::Tensor & _index_put_impl_(at::Tensor & self, at::TensorList indices, const at::Tensor & values, bool accumulate, bool unsafe);
  at::Scalar _local_scalar_dense(const at::Tensor & self);
  at::Tensor _log_softmax(const at::Tensor & self, int64_t dim, bool half_to_float);
  at::Tensor _log_softmax_backward_data(const at::Tensor & grad_output, const at::Tensor & output, int64_t dim, const at::Tensor & self);
  std::tuple<at::Tensor,at::Tensor> _max(const at::Tensor & self, int64_t dim, bool keepdim);
  std::tuple<at::Tensor &,at::Tensor &> _max_out(at::Tensor & max, at::Tensor & max_indices, const at::Tensor & self, int64_t dim, bool keepdim);
  std::tuple<at::Tensor,at::Tensor> _min(const at::Tensor & self, int64_t dim, bool keepdim);
  std::tuple<at::Tensor &,at::Tensor &> _min_out(at::Tensor & min, at::Tensor & min_indices, const at::Tensor & self, int64_t dim, bool keepdim);
  at::Tensor _pdist_backward(const at::Tensor & grad, const at::Tensor & self, double p, const at::Tensor & pdist);
  at::Tensor _pdist_forward(const at::Tensor & self, double p);
  at::Tensor _s_where(const at::Tensor & condition, const at::Tensor & self, const at::Tensor & other);
  at::Tensor _softmax(const at::Tensor & self, int64_t dim, bool half_to_float);
  at::Tensor _softmax_backward_data(const at::Tensor & grad_output, const at::Tensor & output, int64_t dim, const at::Tensor & self);
  at::Tensor _var(const at::Tensor & self, bool unbiased);
  at::Tensor & abs_out(at::Tensor & out, const at::Tensor & self);
  at::Tensor & acos_out(at::Tensor & out, const at::Tensor & self);
  at::Tensor adaptive_avg_pool2d(const at::Tensor & self, at::IntArrayRef output_size);
  at::Tensor & adaptive_avg_pool2d_out(at::Tensor & out, const at::Tensor & self, at::IntArrayRef output_size);
  at::Tensor adaptive_avg_pool3d(const at::Tensor & self, at::IntArrayRef output_size);
  at::Tensor adaptive_avg_pool3d_backward(const at::Tensor & grad_output, const at::Tensor & self);
  at::Tensor & adaptive_avg_pool3d_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self);
  at::Tensor & adaptive_avg_pool3d_out(at::Tensor & out, const at::Tensor & self, at::IntArrayRef output_size);
  std::tuple<at::Tensor,at::Tensor> adaptive_max_pool2d(const at::Tensor & self, at::IntArrayRef output_size);
  at::Tensor adaptive_max_pool2d_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & indices);
  at::Tensor & adaptive_max_pool2d_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & indices);
  std::tuple<at::Tensor &,at::Tensor &> adaptive_max_pool2d_out(at::Tensor & out, at::Tensor & indices, const at::Tensor & self, at::IntArrayRef output_size);
  std::tuple<at::Tensor,at::Tensor> adaptive_max_pool3d(const at::Tensor & self, at::IntArrayRef output_size);
  at::Tensor adaptive_max_pool3d_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & indices);
  at::Tensor & adaptive_max_pool3d_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & indices);
  std::tuple<at::Tensor &,at::Tensor &> adaptive_max_pool3d_out(at::Tensor & out, at::Tensor & indices, const at::Tensor & self, at::IntArrayRef output_size);
  at::Tensor add(const at::Tensor & self, const at::Tensor & other, at::Scalar alpha);
  at::Tensor add(const at::Tensor & self, at::Scalar other, at::Scalar alpha);
  at::Tensor & add_(at::Tensor & self, const at::Tensor & other, at::Scalar alpha);
  at::Tensor & add_(at::Tensor & self, at::Scalar other, at::Scalar alpha);
  at::Tensor & add_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & other, at::Scalar alpha);
  at::Tensor addcdiv(const at::Tensor & self, const at::Tensor & tensor1, const at::Tensor & tensor2, at::Scalar value);
  at::Tensor & addcdiv_(at::Tensor & self, const at::Tensor & tensor1, const at::Tensor & tensor2, at::Scalar value);
  at::Tensor & addcdiv_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & tensor1, const at::Tensor & tensor2, at::Scalar value);
  at::Tensor addcmul(const at::Tensor & self, const at::Tensor & tensor1, const at::Tensor & tensor2, at::Scalar value);
  at::Tensor & addcmul_(at::Tensor & self, const at::Tensor & tensor1, const at::Tensor & tensor2, at::Scalar value);
  at::Tensor & addcmul_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & tensor1, const at::Tensor & tensor2, at::Scalar value);
  at::Tensor addmm(const at::Tensor & self, const at::Tensor & mat1, const at::Tensor & mat2, at::Scalar beta, at::Scalar alpha);
  at::Tensor & addmm_(at::Tensor & self, const at::Tensor & mat1, const at::Tensor & mat2, at::Scalar beta, at::Scalar alpha);
  at::Tensor all(const at::Tensor & self, int64_t dim, bool keepdim);
  at::Tensor all(const at::Tensor & self);
  at::Tensor & all_out(at::Tensor & out, const at::Tensor & self, int64_t dim, bool keepdim);
  at::Tensor any(const at::Tensor & self, int64_t dim, bool keepdim);
  at::Tensor any(const at::Tensor & self);
  at::Tensor & any_out(at::Tensor & out, const at::Tensor & self, int64_t dim, bool keepdim);
  at::Tensor & arange_out(at::Tensor & out, at::Scalar start, at::Scalar end, at::Scalar step);
  at::Tensor argmax(const at::Tensor & self, c10::optional<int64_t> dim, bool keepdim);
  at::Tensor argmin(const at::Tensor & self, c10::optional<int64_t> dim, bool keepdim);
  at::Tensor as_strided(const at::Tensor & self, at::IntArrayRef size, at::IntArrayRef stride, c10::optional<int64_t> storage_offset);
  at::Tensor & asin_out(at::Tensor & out, const at::Tensor & self);
  at::Tensor atan2(const at::Tensor & self, const at::Tensor & other);
  at::Tensor & atan2_(at::Tensor & self, const at::Tensor & other);
  at::Tensor & atan2_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & other);
  at::Tensor & atan_(at::Tensor & self);
  at::Tensor & atan_out(at::Tensor & out, const at::Tensor & self);
  at::Tensor avg_pool2d(const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override);
  at::Tensor avg_pool2d_backward(const at::Tensor & grad_output, const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override);
  at::Tensor & avg_pool2d_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override);
  at::Tensor & avg_pool2d_out(at::Tensor & out, const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override);
  at::Tensor avg_pool3d(const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override);
  at::Tensor avg_pool3d_backward(const at::Tensor & grad_output, const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override);
  at::Tensor & avg_pool3d_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override);
  at::Tensor & avg_pool3d_out(at::Tensor & out, const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override);
  at::Tensor baddbmm(const at::Tensor & self, const at::Tensor & batch1, const at::Tensor & batch2, at::Scalar beta, at::Scalar alpha);
  at::Tensor & baddbmm_(at::Tensor & self, const at::Tensor & batch1, const at::Tensor & batch2, at::Scalar beta, at::Scalar alpha);
  at::Tensor & baddbmm_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & batch1, const at::Tensor & batch2, at::Scalar beta, at::Scalar alpha);
  at::Tensor & bernoulli_(at::Tensor & self, const at::Tensor & p, at::Generator * generator);
  at::Tensor & bernoulli_(at::Tensor & self, double p, at::Generator * generator);
  at::Tensor binary_cross_entropy(const at::Tensor & self, const at::Tensor & target, const at::Tensor & weight, int64_t reduction);
  at::Tensor binary_cross_entropy_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & target, const at::Tensor & weight, int64_t reduction);
  at::Tensor & binary_cross_entropy_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & target, const at::Tensor & weight, int64_t reduction);
  at::Tensor & binary_cross_entropy_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & target, const at::Tensor & weight, int64_t reduction);
  at::Tensor bincount(const at::Tensor & self, const at::Tensor & weights, int64_t minlength);
  at::Tensor & bitwise_and_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & other);
  at::Tensor & bitwise_and_out(at::Tensor & out, const at::Tensor & self, at::Scalar other);
  at::Tensor bitwise_not(const at::Tensor & self);
  at::Tensor & bitwise_not_(at::Tensor & self);
  at::Tensor & bitwise_not_out(at::Tensor & out, const at::Tensor & self);
  at::Tensor & bitwise_or_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & other);
  at::Tensor & bitwise_or_out(at::Tensor & out, const at::Tensor & self, at::Scalar other);
  at::Tensor bmm(const at::Tensor & self, const at::Tensor & mat2);
  at::Tensor & bmm_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & mat2);
  at::Tensor & ceil_out(at::Tensor & out, const at::Tensor & self);
  at::Tensor clamp(const at::Tensor & self, c10::optional<at::Scalar> min, c10::optional<at::Scalar> max);
  at::Tensor & clamp_(at::Tensor & self, c10::optional<at::Scalar> min, c10::optional<at::Scalar> max);
  at::Tensor & clamp_max_(at::Tensor & self, at::Scalar max);
  at::Tensor & clamp_max_out(at::Tensor & out, const at::Tensor & self, at::Scalar max);
  at::Tensor & clamp_min_(at::Tensor & self, at::Scalar min);
  at::Tensor & clamp_min_out(at::Tensor & out, const at::Tensor & self, at::Scalar min);
  at::Tensor & clamp_out(at::Tensor & out, const at::Tensor & self, c10::optional<at::Scalar> min, c10::optional<at::Scalar> max);
  at::Tensor clone(const at::Tensor & self, c10::optional<at::MemoryFormat> memory_format);
  at::Tensor col2im(const at::Tensor & self, at::IntArrayRef output_size, at::IntArrayRef kernel_size, at::IntArrayRef dilation, at::IntArrayRef padding, at::IntArrayRef stride);
  at::Tensor col2im_backward(const at::Tensor & grad_output, at::IntArrayRef kernel_size, at::IntArrayRef dilation, at::IntArrayRef padding, at::IntArrayRef stride);
  at::Tensor & col2im_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, at::IntArrayRef kernel_size, at::IntArrayRef dilation, at::IntArrayRef padding, at::IntArrayRef stride);
  at::Tensor & col2im_out(at::Tensor & out, const at::Tensor & self, at::IntArrayRef output_size, at::IntArrayRef kernel_size, at::IntArrayRef dilation, at::IntArrayRef padding, at::IntArrayRef stride);
  at::Tensor & conj_out(at::Tensor & out, const at::Tensor & self);
  std::tuple<at::Tensor,at::Tensor,at::Tensor> convolution_backward_overrideable(const at::Tensor & grad_output, const at::Tensor & input, const at::Tensor & weight, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef dilation, bool transposed, at::IntArrayRef output_padding, int64_t groups, std::array<bool,3> output_mask);
  at::Tensor convolution_overrideable(const at::Tensor & input, const at::Tensor & weight, const at::Tensor & bias, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef dilation, bool transposed, at::IntArrayRef output_padding, int64_t groups);
  at::Tensor & copy_(at::Tensor & self, const at::Tensor & src, bool non_blocking);
  at::Tensor & cos_(at::Tensor & self);
  at::Tensor & cos_out(at::Tensor & out, const at::Tensor & self);
  at::Tensor & cosh_out(at::Tensor & out, const at::Tensor & self);
  at::Tensor cross(const at::Tensor & self, const at::Tensor & other, c10::optional<int64_t> dim);
  at::Tensor & cross_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & other, c10::optional<int64_t> dim);
  at::Tensor diag(const at::Tensor & self, int64_t diagonal);
  at::Tensor & diag_out(at::Tensor & out, const at::Tensor & self, int64_t diagonal);
  at::Tensor digamma(const at::Tensor & self);
  at::Tensor & digamma_(at::Tensor & self);
  at::Tensor & digamma_out(at::Tensor & out, const at::Tensor & self);
  at::Tensor div(const at::Tensor & self, const at::Tensor & other);
  at::Tensor & div_(at::Tensor & self, const at::Tensor & other);
  at::Tensor & div_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & other);
  at::Tensor elu(const at::Tensor & self, at::Scalar alpha, at::Scalar scale, at::Scalar input_scale);
  at::Tensor & elu_(at::Tensor & self, at::Scalar alpha, at::Scalar scale, at::Scalar input_scale);
  at::Tensor elu_backward(const at::Tensor & grad_output, at::Scalar alpha, at::Scalar scale, at::Scalar input_scale, const at::Tensor & output);
  at::Tensor & elu_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, at::Scalar alpha, at::Scalar scale, at::Scalar input_scale, const at::Tensor & output);
  at::Tensor & elu_out(at::Tensor & out, const at::Tensor & self, at::Scalar alpha, at::Scalar scale, at::Scalar input_scale);
  at::Tensor embedding_dense_backward(const at::Tensor & grad_output, const at::Tensor & indices, int64_t num_weights, int64_t padding_idx, bool scale_grad_by_freq);
  at::Tensor empty(at::IntArrayRef size, const at::TensorOptions & options, c10::optional<at::MemoryFormat> memory_format);
  at::Tensor empty_strided(at::IntArrayRef size, at::IntArrayRef stride, const at::TensorOptions & options);
  at::Tensor eq(const at::Tensor & self, at::Scalar other);
  at::Tensor eq(const at::Tensor & self, const at::Tensor & other);
  at::Tensor & eq_out(at::Tensor & out, const at::Tensor & self, at::Scalar other);
  at::Tensor & eq_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & other);
  bool equal(const at::Tensor & self, const at::Tensor & other);
  at::Tensor & erf_(at::Tensor & self);
  at::Tensor & erf_out(at::Tensor & out, const at::Tensor & self);
  at::Tensor & erfc_(at::Tensor & self);
  at::Tensor & erfc_out(at::Tensor & out, const at::Tensor & self);
  at::Tensor erfinv(const at::Tensor & self);
  at::Tensor & erfinv_(at::Tensor & self);
  at::Tensor & erfinv_out(at::Tensor & out, const at::Tensor & self);
  at::Tensor & exp_(at::Tensor & self);
  at::Tensor & exp_out(at::Tensor & out, const at::Tensor & self);
  at::Tensor & expm1_out(at::Tensor & out, const at::Tensor & self);
  at::Tensor & eye_out(at::Tensor & out, int64_t n);
  at::Tensor & eye_out(at::Tensor & out, int64_t n, int64_t m);
  at::Tensor & fill_(at::Tensor & self, at::Scalar value);
  at::Tensor & fill_(at::Tensor & self, const at::Tensor & value);
  at::Tensor & floor_out(at::Tensor & out, const at::Tensor & self);
  at::Tensor fmod(const at::Tensor & self, at::Scalar other);
  at::Tensor fmod(const at::Tensor & self, const at::Tensor & other);
  at::Tensor & fmod_(at::Tensor & self, at::Scalar other);
  at::Tensor & fmod_(at::Tensor & self, const at::Tensor & other);
  at::Tensor & fmod_out(at::Tensor & out, const at::Tensor & self, at::Scalar other);
  at::Tensor & fmod_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & other);
  std::tuple<at::Tensor,at::Tensor> fractional_max_pool2d(const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef output_size, const at::Tensor & random_samples);
  at::Tensor fractional_max_pool2d_backward(const at::Tensor & grad_output, const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef output_size, const at::Tensor & indices);
  at::Tensor & fractional_max_pool2d_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef output_size, const at::Tensor & indices);
  std::tuple<at::Tensor &,at::Tensor &> fractional_max_pool2d_out(at::Tensor & output, at::Tensor & indices, const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef output_size, const at::Tensor & random_samples);
  std::tuple<at::Tensor,at::Tensor> fractional_max_pool3d(const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef output_size, const at::Tensor & random_samples);
  at::Tensor fractional_max_pool3d_backward(const at::Tensor & grad_output, const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef output_size, const at::Tensor & indices);
  at::Tensor & fractional_max_pool3d_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef output_size, const at::Tensor & indices);
  std::tuple<at::Tensor &,at::Tensor &> fractional_max_pool3d_out(at::Tensor & output, at::Tensor & indices, const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef output_size, const at::Tensor & random_samples);
  at::Tensor gather(const at::Tensor & self, int64_t dim, const at::Tensor & index, bool sparse_grad);
  at::Tensor & gather_out(at::Tensor & out, const at::Tensor & self, int64_t dim, const at::Tensor & index, bool sparse_grad);
  at::Tensor ge(const at::Tensor & self, at::Scalar other);
  at::Tensor ge(const at::Tensor & self, const at::Tensor & other);
  at::Tensor & ge_out(at::Tensor & out, const at::Tensor & self, at::Scalar other);
  at::Tensor & ge_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & other);
  at::Tensor gt(const at::Tensor & self, at::Scalar other);
  at::Tensor gt(const at::Tensor & self, const at::Tensor & other);
  at::Tensor & gt_out(at::Tensor & out, const at::Tensor & self, at::Scalar other);
  at::Tensor & gt_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & other);
  at::Tensor hardshrink(const at::Tensor & self, at::Scalar lambd);
  at::Tensor hardshrink_backward(const at::Tensor & grad_out, const at::Tensor & self, at::Scalar lambd);
  at::Tensor hardtanh(const at::Tensor & self, at::Scalar min_val, at::Scalar max_val);
  at::Tensor & hardtanh_(at::Tensor & self, at::Scalar min_val, at::Scalar max_val);
  at::Tensor hardtanh_backward(const at::Tensor & grad_output, const at::Tensor & self, at::Scalar min_val, at::Scalar max_val);
  at::Tensor & hardtanh_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self, at::Scalar min_val, at::Scalar max_val);
  at::Tensor & hardtanh_out(at::Tensor & out, const at::Tensor & self, at::Scalar min_val, at::Scalar max_val);
  at::Tensor im2col(const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef dilation, at::IntArrayRef padding, at::IntArrayRef stride);
  at::Tensor im2col_backward(const at::Tensor & grad_output, at::IntArrayRef input_size, at::IntArrayRef kernel_size, at::IntArrayRef dilation, at::IntArrayRef padding, at::IntArrayRef stride);
  at::Tensor & im2col_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, at::IntArrayRef input_size, at::IntArrayRef kernel_size, at::IntArrayRef dilation, at::IntArrayRef padding, at::IntArrayRef stride);
  at::Tensor & im2col_out(at::Tensor & out, const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef dilation, at::IntArrayRef padding, at::IntArrayRef stride);
  at::Tensor index(const at::Tensor & self, at::TensorList indices);
  at::Tensor & index_add_(at::Tensor & self, int64_t dim, const at::Tensor & index, const at::Tensor & source);
  at::Tensor & index_fill_(at::Tensor & self, int64_t dim, const at::Tensor & index, at::Scalar value);
  at::Tensor & index_fill_(at::Tensor & self, int64_t dim, const at::Tensor & index, const at::Tensor & value);
  at::Tensor index_select(const at::Tensor & self, int64_t dim, const at::Tensor & index);
  at::Tensor & index_select_out(at::Tensor & out, const at::Tensor & self, int64_t dim, const at::Tensor & index);
  bool is_set_to(const at::Tensor & self, const at::Tensor & tensor);
  at::Tensor isnan(const at::Tensor & self);
  std::tuple<at::Tensor &,at::Tensor &> kthvalue_out(at::Tensor & values, at::Tensor & indices, const at::Tensor & self, int64_t k, int64_t dim, bool keepdim);
  at::Tensor l1_loss(const at::Tensor & self, const at::Tensor & target, int64_t reduction);
  at::Tensor l1_loss_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & target, int64_t reduction);
  at::Tensor & l1_loss_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & target, int64_t reduction);
  at::Tensor & l1_loss_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & target, int64_t reduction);
  at::Tensor le(const at::Tensor & self, at::Scalar other);
  at::Tensor le(const at::Tensor & self, const at::Tensor & other);
  at::Tensor & le_out(at::Tensor & out, const at::Tensor & self, at::Scalar other);
  at::Tensor & le_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & other);
  at::Tensor leaky_relu(const at::Tensor & self, at::Scalar negative_slope);
  at::Tensor & leaky_relu_(at::Tensor & self, at::Scalar negative_slope);
  at::Tensor leaky_relu_backward(const at::Tensor & grad_output, const at::Tensor & self, at::Scalar negative_slope, bool self_is_result);
  at::Tensor & leaky_relu_out(at::Tensor & out, const at::Tensor & self, at::Scalar negative_slope);
  at::Tensor lerp(const at::Tensor & self, const at::Tensor & end, at::Scalar weight);
  at::Tensor lerp(const at::Tensor & self, const at::Tensor & end, const at::Tensor & weight);
  at::Tensor & lerp_(at::Tensor & self, const at::Tensor & end, at::Scalar weight);
  at::Tensor & lerp_(at::Tensor & self, const at::Tensor & end, const at::Tensor & weight);
  at::Tensor & lerp_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & end, at::Scalar weight);
  at::Tensor & lerp_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & end, const at::Tensor & weight);
  at::Tensor & linspace_out(at::Tensor & out, at::Scalar start, at::Scalar end, int64_t steps);
  at::Tensor & log10_out(at::Tensor & out, const at::Tensor & self);
  at::Tensor & log1p_out(at::Tensor & out, const at::Tensor & self);
  at::Tensor & log2_out(at::Tensor & out, const at::Tensor & self);
  at::Tensor & log_out(at::Tensor & out, const at::Tensor & self);
  at::Tensor log_sigmoid_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & buffer);
  at::Tensor & log_sigmoid_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & buffer);
  std::tuple<at::Tensor,at::Tensor> log_sigmoid_forward(const at::Tensor & self);
  std::tuple<at::Tensor &,at::Tensor &> log_sigmoid_forward_out(at::Tensor & output, at::Tensor & buffer, const at::Tensor & self);
  at::Tensor logical_not(const at::Tensor & self);
  at::Tensor & logical_not_(at::Tensor & self);
  at::Tensor & logical_not_out(at::Tensor & out, const at::Tensor & self);
  at::Tensor & logical_xor_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & other);
  at::Tensor & logspace_out(at::Tensor & out, at::Scalar start, at::Scalar end, int64_t steps, double base);
  at::Tensor lt(const at::Tensor & self, at::Scalar other);
  at::Tensor lt(const at::Tensor & self, const at::Tensor & other);
  at::Tensor & lt_out(at::Tensor & out, const at::Tensor & self, at::Scalar other);
  at::Tensor & lt_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & other);
  at::Tensor & masked_fill_(at::Tensor & self, const at::Tensor & mask, at::Scalar value);
  at::Tensor & masked_fill_(at::Tensor & self, const at::Tensor & mask, const at::Tensor & value);
  at::Tensor & masked_scatter_(at::Tensor & self, const at::Tensor & mask, const at::Tensor & source);
  at::Tensor masked_select(const at::Tensor & self, const at::Tensor & mask);
  at::Tensor & masked_select_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & mask);
  std::tuple<at::Tensor,at::Tensor> max(const at::Tensor & self, int64_t dim, bool keepdim);
  at::Tensor max(const at::Tensor & self, const at::Tensor & other);
  at::Tensor max(const at::Tensor & self);
  std::tuple<at::Tensor &,at::Tensor &> max_out(at::Tensor & max, at::Tensor & max_values, const at::Tensor & self, int64_t dim, bool keepdim);
  at::Tensor & max_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & other);
  std::tuple<at::Tensor,at::Tensor> max_pool2d_with_indices(const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef dilation, bool ceil_mode);
  at::Tensor max_pool2d_with_indices_backward(const at::Tensor & grad_output, const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef dilation, bool ceil_mode, const at::Tensor & indices);
  at::Tensor & max_pool2d_with_indices_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef dilation, bool ceil_mode, const at::Tensor & indices);
  std::tuple<at::Tensor &,at::Tensor &> max_pool2d_with_indices_out(at::Tensor & out, at::Tensor & indices, const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef dilation, bool ceil_mode);
  std::tuple<at::Tensor,at::Tensor> max_pool3d_with_indices(const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef dilation, bool ceil_mode);
  at::Tensor max_pool3d_with_indices_backward(const at::Tensor & grad_output, const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef dilation, bool ceil_mode, const at::Tensor & indices);
  at::Tensor & max_pool3d_with_indices_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef dilation, bool ceil_mode, const at::Tensor & indices);
  std::tuple<at::Tensor &,at::Tensor &> max_pool3d_with_indices_out(at::Tensor & out, at::Tensor & indices, const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef dilation, bool ceil_mode);
  at::Tensor mean(const at::Tensor & self, c10::optional<at::ScalarType> dtype);
  at::Tensor mean(const at::Tensor & self, at::IntArrayRef dim, bool keepdim, c10::optional<at::ScalarType> dtype);
  at::Tensor & mean_out(at::Tensor & out, const at::Tensor & self, at::IntArrayRef dim, bool keepdim, c10::optional<at::ScalarType> dtype);
  at::Tensor median(const at::Tensor & self);
  std::tuple<at::Tensor,at::Tensor> min(const at::Tensor & self, int64_t dim, bool keepdim);
  at::Tensor min(const at::Tensor & self, const at::Tensor & other);
  at::Tensor min(const at::Tensor & self);
  std::tuple<at::Tensor &,at::Tensor &> min_out(at::Tensor & min, at::Tensor & min_indices, const at::Tensor & self, int64_t dim, bool keepdim);
  at::Tensor & min_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & other);
  at::Tensor mm(const at::Tensor & self, const at::Tensor & mat2);
  at::Tensor & mm_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & mat2);
  at::Tensor mse_loss(const at::Tensor & self, const at::Tensor & target, int64_t reduction);
  at::Tensor mse_loss_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & target, int64_t reduction);
  at::Tensor & mse_loss_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & target, int64_t reduction);
  at::Tensor & mse_loss_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & target, int64_t reduction);
  at::Tensor mul(const at::Tensor & self, const at::Tensor & other);
  at::Tensor mul(const at::Tensor & self, at::Scalar other);
  at::Tensor & mul_(at::Tensor & self, const at::Tensor & other);
  at::Tensor & mul_(at::Tensor & self, at::Scalar other);
  at::Tensor & mul_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & other);
  at::Tensor multi_margin_loss(const at::Tensor & self, const at::Tensor & target, at::Scalar p, at::Scalar margin, const at::Tensor & weight, int64_t reduction);
  at::Tensor multi_margin_loss_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & target, at::Scalar p, at::Scalar margin, const at::Tensor & weight, int64_t reduction);
  at::Tensor & multi_margin_loss_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & target, at::Scalar p, at::Scalar margin, const at::Tensor & weight, int64_t reduction);
  at::Tensor & multi_margin_loss_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & target, at::Scalar p, at::Scalar margin, const at::Tensor & weight, int64_t reduction);
  at::Tensor multilabel_margin_loss(const at::Tensor & self, const at::Tensor & target, int64_t reduction);
  at::Tensor multilabel_margin_loss_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & target, int64_t reduction, const at::Tensor & is_target);
  at::Tensor & multilabel_margin_loss_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & target, int64_t reduction, const at::Tensor & is_target);
  std::tuple<at::Tensor,at::Tensor> multilabel_margin_loss_forward(const at::Tensor & self, const at::Tensor & target, int64_t reduction);
  std::tuple<at::Tensor &,at::Tensor &> multilabel_margin_loss_forward_out(at::Tensor & output, at::Tensor & is_target, const at::Tensor & self, const at::Tensor & target, int64_t reduction);
  at::Tensor & multilabel_margin_loss_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & target, int64_t reduction);
  at::Tensor multinomial(const at::Tensor & self, int64_t num_samples, bool replacement, at::Generator * generator);
  at::Tensor & multinomial_out(at::Tensor & out, const at::Tensor & self, int64_t num_samples, bool replacement, at::Generator * generator);
  at::Tensor narrow_copy(const at::Tensor & self, int64_t dim, int64_t start, int64_t length);
  std::tuple<at::Tensor,at::Tensor,at::Tensor> native_batch_norm(const at::Tensor & input, const at::Tensor & weight, const at::Tensor & bias, const at::Tensor & running_mean, const at::Tensor & running_var, bool training, double momentum, double eps);
  std::tuple<at::Tensor,at::Tensor,at::Tensor> native_batch_norm_backward(const at::Tensor & grad_out, const at::Tensor & input, const at::Tensor & weight, const at::Tensor & running_mean, const at::Tensor & running_var, const at::Tensor & save_mean, const at::Tensor & save_invstd, bool train, double eps, std::array<bool,3> output_mask);
  std::tuple<at::Tensor,at::Tensor,at::Tensor> native_layer_norm(const at::Tensor & input, const at::Tensor & weight, const at::Tensor & bias, int64_t M, int64_t N, double eps);
  std::tuple<at::Tensor,at::Tensor,at::Tensor> native_layer_norm_backward(const at::Tensor & grad_out, const at::Tensor & input, const at::Tensor & mean, const at::Tensor & rstd, const at::Tensor & weight, int64_t M, int64_t N, std::array<bool,3> output_mask);
  at::Tensor ne(const at::Tensor & self, at::Scalar other);
  at::Tensor ne(const at::Tensor & self, const at::Tensor & other);
  at::Tensor & ne_out(at::Tensor & out, const at::Tensor & self, at::Scalar other);
  at::Tensor & ne_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & other);
  at::Tensor & neg_out(at::Tensor & out, const at::Tensor & self);
  at::Tensor nll_loss_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & target, const at::Tensor & weight, int64_t reduction, int64_t ignore_index, const at::Tensor & total_weight);
  at::Tensor & nll_loss_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & target, const at::Tensor & weight, int64_t reduction, int64_t ignore_index, const at::Tensor & total_weight);
  std::tuple<at::Tensor,at::Tensor> nll_loss_forward(const at::Tensor & self, const at::Tensor & target, const at::Tensor & weight, int64_t reduction, int64_t ignore_index);
  std::tuple<at::Tensor &,at::Tensor &> nll_loss_forward_out(at::Tensor & output, at::Tensor & total_weight, const at::Tensor & self, const at::Tensor & target, const at::Tensor & weight, int64_t reduction, int64_t ignore_index);
  at::Tensor nonzero(const at::Tensor & self);
  at::Tensor & nonzero_out(at::Tensor & out, const at::Tensor & self);
  at::Tensor norm(const at::Tensor & self, c10::optional<at::Scalar> p, at::ScalarType dtype);
  at::Tensor norm(const at::Tensor & self, at::Scalar p);
  at::Tensor norm(const at::Tensor & self, c10::optional<at::Scalar> p, at::IntArrayRef dim, bool keepdim, at::ScalarType dtype);
  at::Tensor norm(const at::Tensor & self, c10::optional<at::Scalar> p, at::IntArrayRef dim, bool keepdim);
  at::Tensor & norm_out(at::Tensor & out, const at::Tensor & self, c10::optional<at::Scalar> p, at::IntArrayRef dim, bool keepdim, at::ScalarType dtype);
  at::Tensor & norm_out(at::Tensor & out, const at::Tensor & self, c10::optional<at::Scalar> p, at::IntArrayRef dim, bool keepdim);
  at::Tensor & normal_(at::Tensor & self, double mean, double std, at::Generator * generator);
  at::Tensor pow(const at::Tensor & self, at::Scalar exponent);
  at::Tensor pow(const at::Tensor & self, const at::Tensor & exponent);
  at::Tensor pow(at::Scalar self, const at::Tensor & exponent);
  at::Tensor & pow_(at::Tensor & self, at::Scalar exponent);
  at::Tensor & pow_(at::Tensor & self, const at::Tensor & exponent);
  at::Tensor & pow_out(at::Tensor & out, const at::Tensor & self, at::Scalar exponent);
  at::Tensor & pow_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & exponent);
  at::Tensor & pow_out(at::Tensor & out, at::Scalar self, const at::Tensor & exponent);
  at::Tensor prod(const at::Tensor & self, c10::optional<at::ScalarType> dtype);
  at::Tensor prod(const at::Tensor & self, int64_t dim, bool keepdim, c10::optional<at::ScalarType> dtype);
  at::Tensor & prod_out(at::Tensor & out, const at::Tensor & self, int64_t dim, bool keepdim, c10::optional<at::ScalarType> dtype);
  at::Tensor & put_(at::Tensor & self, const at::Tensor & index, const at::Tensor & source, bool accumulate);
  at::Tensor & range_out(at::Tensor & out, at::Scalar start, at::Scalar end, at::Scalar step);
  at::Tensor relu(const at::Tensor & self);
  at::Tensor & relu_(at::Tensor & self);
  at::Tensor remainder(const at::Tensor & self, at::Scalar other);
  at::Tensor remainder(const at::Tensor & self, const at::Tensor & other);
  at::Tensor & remainder_(at::Tensor & self, at::Scalar other);
  at::Tensor & remainder_(at::Tensor & self, const at::Tensor & other);
  at::Tensor & remainder_out(at::Tensor & out, const at::Tensor & self, at::Scalar other);
  at::Tensor & remainder_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & other);
  at::Tensor renorm(const at::Tensor & self, at::Scalar p, int64_t dim, at::Scalar maxnorm);
  at::Tensor & renorm_(at::Tensor & self, at::Scalar p, int64_t dim, at::Scalar maxnorm);
  at::Tensor & renorm_out(at::Tensor & out, const at::Tensor & self, at::Scalar p, int64_t dim, at::Scalar maxnorm);
  at::Tensor repeat_interleave(const at::Tensor & repeats);
  at::Tensor & resize_(at::Tensor & self, at::IntArrayRef size, c10::optional<at::MemoryFormat> memory_format);
  at::Tensor & resize_as_(at::Tensor & self, const at::Tensor & the_template, c10::optional<at::MemoryFormat> memory_format);
  at::Tensor roll(const at::Tensor & self, at::IntArrayRef shifts, at::IntArrayRef dims);
  at::Tensor & round_out(at::Tensor & out, const at::Tensor & self);
  at::Tensor & rsqrt_out(at::Tensor & out, const at::Tensor & self);
  at::Tensor rsub(const at::Tensor & self, const at::Tensor & other, at::Scalar alpha);
  at::Tensor rsub(const at::Tensor & self, at::Scalar other, at::Scalar alpha);
  at::Tensor & scatter_(at::Tensor & self, int64_t dim, const at::Tensor & index, const at::Tensor & src);
  at::Tensor & scatter_(at::Tensor & self, int64_t dim, const at::Tensor & index, at::Scalar value);
  at::Tensor & scatter_add_(at::Tensor & self, int64_t dim, const at::Tensor & index, const at::Tensor & src);
  at::Tensor & set_(at::Tensor & self, at::Storage source);
  at::Tensor & set_(at::Tensor & self, at::Storage source, int64_t storage_offset, at::IntArrayRef size, at::IntArrayRef stride);
  at::Tensor & set_(at::Tensor & self, const at::Tensor & source);
  at::Tensor & set_(at::Tensor & self);
  at::Tensor sigmoid(const at::Tensor & self);
  at::Tensor & sigmoid_(at::Tensor & self);
  at::Tensor sigmoid_backward(const at::Tensor & grad_output, const at::Tensor & output);
  at::Tensor & sigmoid_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & output);
  at::Tensor & sigmoid_out(at::Tensor & out, const at::Tensor & self);
  at::Tensor sign(const at::Tensor & self);
  at::Tensor & sign_(at::Tensor & self);
  at::Tensor & sign_out(at::Tensor & out, const at::Tensor & self);
  at::Tensor & sin_out(at::Tensor & out, const at::Tensor & self);
  at::Tensor & sinh_out(at::Tensor & out, const at::Tensor & self);
  at::Tensor smooth_l1_loss(const at::Tensor & self, const at::Tensor & target, int64_t reduction);
  at::Tensor smooth_l1_loss_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & target, int64_t reduction);
  at::Tensor & smooth_l1_loss_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & target, int64_t reduction);
  at::Tensor & smooth_l1_loss_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & target, int64_t reduction);
  at::Tensor soft_margin_loss(const at::Tensor & self, const at::Tensor & target, int64_t reduction);
  at::Tensor soft_margin_loss_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & target, int64_t reduction);
  at::Tensor & soft_margin_loss_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & target, int64_t reduction);
  at::Tensor & soft_margin_loss_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & target, int64_t reduction);
  at::Tensor softplus(const at::Tensor & self, at::Scalar beta, at::Scalar threshold);
  at::Tensor softplus_backward(const at::Tensor & grad_output, const at::Tensor & self, at::Scalar beta, at::Scalar threshold, const at::Tensor & output);
  at::Tensor & softplus_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self, at::Scalar beta, at::Scalar threshold, const at::Tensor & output);
  at::Tensor & softplus_out(at::Tensor & out, const at::Tensor & self, at::Scalar beta, at::Scalar threshold);
  at::Tensor softshrink(const at::Tensor & self, at::Scalar lambd);
  at::Tensor softshrink_backward(const at::Tensor & grad_output, const at::Tensor & self, at::Scalar lambd);
  at::Tensor & softshrink_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self, at::Scalar lambd);
  at::Tensor & softshrink_out(at::Tensor & out, const at::Tensor & self, at::Scalar lambd);
  std::tuple<at::Tensor,at::Tensor> sort(const at::Tensor & self, int64_t dim, bool descending);
  std::tuple<at::Tensor &,at::Tensor &> sort_out(at::Tensor & values, at::Tensor & indices, const at::Tensor & self, int64_t dim, bool descending);
  at::Tensor & sqrt_out(at::Tensor & out, const at::Tensor & self);
  std::tuple<at::Tensor,at::Tensor> std_mean(const at::Tensor & self, bool unbiased);
  std::tuple<at::Tensor,at::Tensor> std_mean(const at::Tensor & self, at::IntArrayRef dim, bool unbiased, bool keepdim);
  at::Tensor sub(const at::Tensor & self, const at::Tensor & other, at::Scalar alpha);
  at::Tensor sub(const at::Tensor & self, at::Scalar other, at::Scalar alpha);
  at::Tensor & sub_(at::Tensor & self, const at::Tensor & other, at::Scalar alpha);
  at::Tensor & sub_(at::Tensor & self, at::Scalar other, at::Scalar alpha);
  at::Tensor & sub_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & other, at::Scalar alpha);
  at::Tensor sum(const at::Tensor & self, c10::optional<at::ScalarType> dtype);
  at::Tensor sum(const at::Tensor & self, at::IntArrayRef dim, bool keepdim, c10::optional<at::ScalarType> dtype);
  at::Tensor & sum_out(at::Tensor & out, const at::Tensor & self, at::IntArrayRef dim, bool keepdim, c10::optional<at::ScalarType> dtype);
  at::Tensor take(const at::Tensor & self, const at::Tensor & index);
  at::Tensor & take_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & index);
  at::Tensor & tan_(at::Tensor & self);
  at::Tensor & tan_out(at::Tensor & out, const at::Tensor & self);
  at::Tensor tanh(const at::Tensor & self);
  at::Tensor & tanh_(at::Tensor & self);
  at::Tensor tanh_backward(const at::Tensor & grad_output, const at::Tensor & output);
  at::Tensor & tanh_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & output);
  at::Tensor & tanh_out(at::Tensor & out, const at::Tensor & self);
  at::Tensor threshold(const at::Tensor & self, at::Scalar threshold, at::Scalar value);
  at::Tensor & threshold_(at::Tensor & self, at::Scalar threshold, at::Scalar value);
  at::Tensor threshold_backward(const at::Tensor & grad_output, const at::Tensor & self, at::Scalar threshold);
  at::Tensor & threshold_out(at::Tensor & out, const at::Tensor & self, at::Scalar threshold, at::Scalar value);
  std::tuple<at::Tensor,at::Tensor> topk(const at::Tensor & self, int64_t k, int64_t dim, bool largest, bool sorted);
  std::tuple<at::Tensor &,at::Tensor &> topk_out(at::Tensor & values, at::Tensor & indices, const at::Tensor & self, int64_t k, int64_t dim, bool largest, bool sorted);
  at::Tensor trace(const at::Tensor & self);
  at::Tensor & tril_(at::Tensor & self, int64_t diagonal);
  at::Tensor tril_indices(int64_t row, int64_t col, int64_t offset, const at::TensorOptions & options);
  at::Tensor & tril_out(at::Tensor & out, const at::Tensor & self, int64_t diagonal);
  at::Tensor & triu_(at::Tensor & self, int64_t diagonal);
  at::Tensor triu_indices(int64_t row, int64_t col, int64_t offset, const at::TensorOptions & options);
  at::Tensor & triu_out(at::Tensor & out, const at::Tensor & self, int64_t diagonal);
  at::Tensor & trunc_out(at::Tensor & out, const at::Tensor & self);
  at::Tensor unfold(const at::Tensor & self, int64_t dimension, int64_t size, int64_t step);
  at::Tensor & uniform_(at::Tensor & self, double from, double to, at::Generator * generator);
  at::Tensor upsample_nearest2d(const at::Tensor & self, at::IntArrayRef output_size, c10::optional<double> scales_h, c10::optional<double> scales_w);
  at::Tensor upsample_nearest2d_backward(const at::Tensor & grad_output, at::IntArrayRef output_size, at::IntArrayRef input_size, c10::optional<double> scales_h, c10::optional<double> scales_w);
  at::Tensor & upsample_nearest2d_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, at::IntArrayRef output_size, at::IntArrayRef input_size, c10::optional<double> scales_h, c10::optional<double> scales_w);
  at::Tensor & upsample_nearest2d_out(at::Tensor & out, const at::Tensor & self, at::IntArrayRef output_size, c10::optional<double> scales_h, c10::optional<double> scales_w);
  at::Tensor var(const at::Tensor & self, bool unbiased);
  at::Tensor var(const at::Tensor & self, at::IntArrayRef dim, bool unbiased, bool keepdim);
  std::tuple<at::Tensor,at::Tensor> var_mean(const at::Tensor & self, bool unbiased);
  std::tuple<at::Tensor,at::Tensor> var_mean(const at::Tensor & self, at::IntArrayRef dim, bool unbiased, bool keepdim);
  at::Tensor view(const at::Tensor & self, at::IntArrayRef size);
  at::Tensor & zero_(at::Tensor & self);


} // namespace AtenIpexTypeDPCPP
} // namespace at

