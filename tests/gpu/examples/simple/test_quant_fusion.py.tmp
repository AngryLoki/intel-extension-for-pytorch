import torch
import torch.nn as nn
import torch.nn.functional as F

import torch_ipex

from torch.jit._recursive import wrap_cpp_module
from torch.quantization._quantize_script import script_qconfig
from torch.quantization._quantize_script import prepare_script
from torch.quantization._quantize_script import convert_script
from torch.quantization._quantize_script import quantize_script
from torch.quantization import default_qconfig

torch._C._jit_set_profiling_mode(False)
torch._C._jit_set_profiling_executor(False)

def conv3x3(in_planes, out_planes, stride=1):
    """3x3 convolution with padding"""
    return nn.Conv2d(in_planes, out_planes, kernel_size=3, stride=stride,
                     padding=1, bias=False)


def conv1x1(in_planes, out_planes, stride=1):
    """1x1 convolution"""
    return nn.Conv2d(in_planes, out_planes, kernel_size=1, stride=stride, bias=False)


class Bottleneck1(nn.Module):
    expansion = 4

    def __init__(self, inplanes, planes, stride=1, downsample=None):
        super(Bottleneck1, self).__init__()
        self.conv1 = conv1x1(inplanes, planes)
        self.bn1 = nn.BatchNorm2d(planes)
        self.conv2 = conv3x3(planes, planes, stride)
        self.bn2 = nn.BatchNorm2d(planes)
        self.conv3 = conv1x1(planes, planes)
        self.bn3 = nn.BatchNorm2d(planes)
        self.relu = nn.ReLU(inplace=False)
        self.downsample = downsample
        self.stride = stride
        self.max_pool = nn.MaxPool2d(kernel_size=3, stride=1,
                                padding=1, return_indices=True)

    def forward(self, x):
        identity = x

        out = self.conv1(x)
        out = self.bn1(out)
        out = self.relu(out)

        out = self.conv2(out)
        out = self.bn2(out)
        out = self.relu(out)

        out = self.conv3(out)
        out = self.bn3(out)

        if self.downsample is not None:
            identity = self.downsample(x)

        out += identity
        out = self.relu(out)

        out = self.max_pool(out)

        return out


class M(torch.nn.Module):
    def __init__(self):
        super(M, self).__init__()
        self.conv1 = conv3x3(2, 2, 1).float()
        self.conv2 = conv3x3(2, 2, 1).float()
        self.bn = torch.nn.BatchNorm2d(2).float()
        self.relu = torch.nn.ReLU()

    def forward(self, x):
        # return self.conv1(x)
        # return self.relu(self.bn(self.conv1(x)) + x)
        o = self.relu(self.conv1(x))
        o = self.conv2(o)
        o += x
        return self.relu(o)
        # return self.relu(o)

data_ = torch.randn(1, 2, 3, 3, dtype=torch.float)
data1_ = torch.randn(1, 2, 3, 3, dtype=torch.float)
data2_ = torch.randn(1, 2, 3, 3, dtype=torch.float)
data_ = data_ / 10.0

# model = Bottleneck1(2, 2).eval()
model = M().eval()

qconfig = torch.quantization.QConfig(
    activation=torch.quantization.observer.MinMaxObserver.with_args(
        qscheme=torch.per_tensor_symmetric,
        reduce_range=False
        # reduce_range=False,
        # dtype=torch.qint8
    ),
    weight=torch.quantization.default_weight_observer
)

data_ = torch.nn.ReLU()(data_)
print("ref ...", model(data_))

data = data_.to("xpu")

m = torch.jit.script(model.eval().to("xpu"))
m = wrap_cpp_module(torch._C._jit_pass_fold_convbn(m._c))
with torch.no_grad():
    m = prepare_script(m, {'': script_qconfig(qconfig)}, True)
    m(data)
    m = wrap_cpp_module(torch._C._jit_pass_insert_quant_dequant(m._c, 'forward', False))
    m = wrap_cpp_module(torch._C._jit_pass_quant_finalize(m._c))
    # m = convert_script(m, True)
    print("after finalize ...", m.graph_for(data))
    print("real ...", m(data).cpu())
    # print("real ...", m(data)[0].cpu())
