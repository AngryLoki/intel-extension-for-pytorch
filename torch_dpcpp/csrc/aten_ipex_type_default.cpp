// Autogenerated file by gen.py. Do not edit directly!
#include "torch_dpcpp/csrc/aten_ipex_type_default.h"

#include <ATen/Context.h>
#include <ATen/core/op_registration/op_registration.h>
#include <ATen/CPUGenerator.h>

namespace at {

at::Tensor AtenIpexTypeDefault::_cast_Byte(const at::Tensor & self, bool non_blocking) {
  return at::_cast_Byte(xlatens[0], non_blocking);
}

at::Tensor AtenIpexTypeDefault::_cast_Char(const at::Tensor & self, bool non_blocking) {
  return at::_cast_Char(xlatens[0], non_blocking);
}

at::Tensor AtenIpexTypeDefault::_cast_Double(const at::Tensor & self, bool non_blocking) {
  return at::_cast_Double(xlatens[0], non_blocking);
}

at::Tensor AtenIpexTypeDefault::_cast_Float(const at::Tensor & self, bool non_blocking) {
  return at::_cast_Float(xlatens[0], non_blocking);
}

at::Tensor AtenIpexTypeDefault::_cast_Int(const at::Tensor & self, bool non_blocking) {
  return at::_cast_Int(xlatens[0], non_blocking);
}

at::Tensor AtenIpexTypeDefault::_cast_Long(const at::Tensor & self, bool non_blocking) {
  return at::_cast_Long(xlatens[0], non_blocking);
}

at::Tensor AtenIpexTypeDefault::_cast_Short(const at::Tensor & self, bool non_blocking) {
  return at::_cast_Short(xlatens[0], non_blocking);
}

at::Tensor AtenIpexTypeDefault::_cast_Half(const at::Tensor & self, bool non_blocking) {
  return at::_cast_Half(xlatens[0], non_blocking);
}

void AtenIpexTypeDefault::backward(const at::Tensor & self, const at::Tensor & gradient, bool keep_graph, bool create_graph) {
  return xlatens[0].backward(xlatens[1], keep_graph, create_graph);
}

void AtenIpexTypeDefault::set_data(const at::Tensor & self, const at::Tensor & new_data) {
  return xlatens[0].set_data(xlatens[1]);
}

int64_t AtenIpexTypeDefault::_debug_has_internal_overlap(const at::Tensor & self) {
  return at::_debug_has_internal_overlap(xlatens[0]);
}

std::tuple<at::Tensor,at::Tensor> AtenIpexTypeDefault::_fused_dropout(const at::Tensor & self, double p, at::Generator * generator) {
  return at::_fused_dropout(xlatens[0], p, generator);
}

at::Tensor AtenIpexTypeDefault::_masked_scale(const at::Tensor & self, const at::Tensor & mask, double scale) {
  return at::_masked_scale(xlatens[0], xlatens[1], scale);
}

std::tuple<at::Tensor,at::Tensor> AtenIpexTypeDefault::_sobol_engine_draw(const at::Tensor & quasi, int64_t n, const at::Tensor & sobolstate, int64_t dimension, int64_t num_generated, c10::optional<at::ScalarType> dtype) {
  return at::_sobol_engine_draw(xlatens[0], n, xlatens[1], dimension, num_generated, dtype);
}

at::Tensor & AtenIpexTypeDefault::_sobol_engine_ff_(at::Tensor & self, int64_t n, const at::Tensor & sobolstate, int64_t dimension, int64_t num_generated) {
  return at::_sobol_engine_ff_(xlatens[0], n, xlatens[1], dimension, num_generated);
}

at::Tensor & AtenIpexTypeDefault::_sobol_engine_scramble_(at::Tensor & self, const at::Tensor & ltm, int64_t dimension) {
  return at::_sobol_engine_scramble_(xlatens[0], xlatens[1], dimension);
}

at::Tensor & AtenIpexTypeDefault::_sobol_engine_initialize_state_(at::Tensor & self, int64_t dimension) {
  return at::_sobol_engine_initialize_state_(xlatens[0], dimension);
}

at::Tensor AtenIpexTypeDefault::_reshape_from_tensor(const at::Tensor & self, const at::Tensor & shape) {
  return at::_reshape_from_tensor(xlatens[0], xlatens[1]);
}

at::Tensor AtenIpexTypeDefault::_shape_as_tensor(const at::Tensor & self) {
  return at::_shape_as_tensor(xlatens[0]);
}

at::Tensor AtenIpexTypeDefault::dropout(const at::Tensor & input, double p, bool train) {
  return at::dropout(xlatens[0], p, train);
}

at::Tensor & AtenIpexTypeDefault::dropout_(at::Tensor & self, double p, bool train) {
  return at::dropout_(xlatens[0], p, train);
}

at::Tensor AtenIpexTypeDefault::feature_dropout(const at::Tensor & input, double p, bool train) {
  return at::feature_dropout(xlatens[0], p, train);
}

at::Tensor & AtenIpexTypeDefault::feature_dropout_(at::Tensor & self, double p, bool train) {
  return at::feature_dropout_(xlatens[0], p, train);
}

at::Tensor AtenIpexTypeDefault::alpha_dropout(const at::Tensor & input, double p, bool train) {
  return at::alpha_dropout(xlatens[0], p, train);
}

at::Tensor & AtenIpexTypeDefault::alpha_dropout_(at::Tensor & self, double p, bool train) {
  return at::alpha_dropout_(xlatens[0], p, train);
}

at::Tensor AtenIpexTypeDefault::feature_alpha_dropout(const at::Tensor & input, double p, bool train) {
  return at::feature_alpha_dropout(xlatens[0], p, train);
}

at::Tensor & AtenIpexTypeDefault::feature_alpha_dropout_(at::Tensor & self, double p, bool train) {
  return at::feature_alpha_dropout_(xlatens[0], p, train);
}

at::Tensor AtenIpexTypeDefault::abs(const at::Tensor & self) {
  return at::abs(xlatens[0]);
}

at::Tensor & AtenIpexTypeDefault::abs_(at::Tensor & self) {
  return at::abs_(xlatens[0]);
}

at::Tensor & AtenIpexTypeDefault::abs_out(at::Tensor & out, const at::Tensor & self) {
  return at::abs_out(xlatens[0], xlatens[1]);
}

at::Tensor AtenIpexTypeDefault::acos(const at::Tensor & self) {
  return at::acos(xlatens[0]);
}

at::Tensor & AtenIpexTypeDefault::acos_(at::Tensor & self) {
  return at::acos_(xlatens[0]);
}

at::Tensor & AtenIpexTypeDefault::acos_out(at::Tensor & out, const at::Tensor & self) {
  return at::acos_out(xlatens[0], xlatens[1]);
}

at::Tensor AtenIpexTypeDefault::avg_pool1d(const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, bool ceil_mode, bool count_include_pad) {
  return at::avg_pool1d(xlatens[0], kernel_size, stride, padding, ceil_mode, count_include_pad);
}

at::Tensor AtenIpexTypeDefault::adaptive_avg_pool1d(const at::Tensor & self, at::IntArrayRef output_size) {
  return at::adaptive_avg_pool1d(xlatens[0], output_size);
}

std::tuple<at::Tensor,at::Tensor> AtenIpexTypeDefault::adaptive_max_pool1d(const at::Tensor & self, at::IntArrayRef output_size) {
  return at::adaptive_max_pool1d(xlatens[0], output_size);
}

at::Tensor AtenIpexTypeDefault::add(const at::Tensor & self, const at::Tensor & other, at::Scalar alpha) {
  return at::add(xlatens[0], xlatens[1], alpha);
}

at::Tensor & AtenIpexTypeDefault::add_(at::Tensor & self, const at::Tensor & other, at::Scalar alpha) {
  return xlatens[0].add_(xlatens[1], alpha);
}

at::Tensor & AtenIpexTypeDefault::add_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & other, at::Scalar alpha) {
  auto add_out_tmp = AtenXlaType::add(self, other, alpha);
  out.unsafeGetTensorImpl()->shallow_copy_from(add_out_tmp.getIntrusivePtr());
  return out;
}

at::Tensor AtenIpexTypeDefault::add(const at::Tensor & self, at::Scalar other, at::Scalar alpha) {
  return at::add(xlatens[0], other, alpha);
}

at::Tensor & AtenIpexTypeDefault::add_(at::Tensor & self, at::Scalar other, at::Scalar alpha) {
  return xlatens[0].add_(other, alpha);
}

at::Tensor AtenIpexTypeDefault::addmv(const at::Tensor & self, const at::Tensor & mat, const at::Tensor & vec, at::Scalar beta, at::Scalar alpha) {
  return at::addmv(xlatens[0], xlatens[1], xlatens[2], beta, alpha);
}

at::Tensor & AtenIpexTypeDefault::addmv_(at::Tensor & self, const at::Tensor & mat, const at::Tensor & vec, at::Scalar beta, at::Scalar alpha) {
  return at::addmv_(xlatens[0], xlatens[1], xlatens[2], beta, alpha);
}

at::Tensor & AtenIpexTypeDefault::addmv_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & mat, const at::Tensor & vec, at::Scalar beta, at::Scalar alpha) {
  return at::addmv_out(xlatens[0], xlatens[1], xlatens[2], xlatens[3], beta, alpha);
}

at::Tensor AtenIpexTypeDefault::addr(const at::Tensor & self, const at::Tensor & vec1, const at::Tensor & vec2, at::Scalar beta, at::Scalar alpha) {
  return at::addr(xlatens[0], xlatens[1], xlatens[2], beta, alpha);
}

at::Tensor & AtenIpexTypeDefault::addr_(at::Tensor & self, const at::Tensor & vec1, const at::Tensor & vec2, at::Scalar beta, at::Scalar alpha) {
  return xlatens[0].addr_(xlatens[1], xlatens[2], beta, alpha);
}

at::Tensor & AtenIpexTypeDefault::addr_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & vec1, const at::Tensor & vec2, at::Scalar beta, at::Scalar alpha) {
  return at::addr_out(xlatens[0], xlatens[1], xlatens[2], xlatens[3], beta, alpha);
}

at::Tensor AtenIpexTypeDefault::affine_grid_generator(const at::Tensor & theta, at::IntArrayRef size, bool align_corners) {
  return at::affine_grid_generator(xlatens[0], size, align_corners);
}

at::Tensor AtenIpexTypeDefault::affine_grid_generator_backward(const at::Tensor & grad, at::IntArrayRef size, bool align_corners) {
  return at::affine_grid_generator_backward(xlatens[0], size, align_corners);
}

at::Tensor AtenIpexTypeDefault::all(const at::Tensor & self, int64_t dim, bool keepdim) {
  return at::all(xlatens[0], dim, keepdim);
}

at::Tensor & AtenIpexTypeDefault::all_out(at::Tensor & out, const at::Tensor & self, int64_t dim, bool keepdim) {
  return at::all_out(xlatens[0], xlatens[1], dim, keepdim);
}

bool AtenIpexTypeDefault::allclose(const at::Tensor & self, const at::Tensor & other, double rtol, double atol, bool equal_nan) {
  return at::allclose(xlatens[0], xlatens[1], rtol, atol, equal_nan);
}

at::Tensor AtenIpexTypeDefault::any(const at::Tensor & self, int64_t dim, bool keepdim) {
  return at::any(xlatens[0], dim, keepdim);
}

at::Tensor & AtenIpexTypeDefault::any_out(at::Tensor & out, const at::Tensor & self, int64_t dim, bool keepdim) {
  return at::any_out(xlatens[0], xlatens[1], dim, keepdim);
}

at::Tensor AtenIpexTypeDefault::arange(at::Scalar end, const at::TensorOptions & options) {
  return at::arange(end, options);
}

at::Tensor AtenIpexTypeDefault::arange(at::Scalar start, at::Scalar end, const at::TensorOptions & options) {
  return at::arange(start, end, options);
}

at::Tensor AtenIpexTypeDefault::arange(at::Scalar start, at::Scalar end, at::Scalar step, const at::TensorOptions & options) {
  return at::arange(start, end, step, options);
}

at::Tensor & AtenIpexTypeDefault::arange_out(at::Tensor & out, at::Scalar end) {
  return at::arange_out(xlatens[0], end);
}

at::Tensor & AtenIpexTypeDefault::arange_out(at::Tensor & out, at::Scalar start, at::Scalar end, at::Scalar step) {
  auto arange_out_tmp = AtenXlaType::arange(start, end, step, out.options());
  out.unsafeGetTensorImpl()->shallow_copy_from(arange_out_tmp.getIntrusivePtr());
  return out;
}

at::Tensor AtenIpexTypeDefault::_dim_arange(const at::Tensor & like, int64_t dim) {
  return at::_dim_arange(xlatens[0], dim);
}

at::Tensor AtenIpexTypeDefault::argmax(const at::Tensor & self, c10::optional<int64_t> dim, bool keepdim) {
  return at::argmax(xlatens[0], dim, keepdim);
}

at::Tensor AtenIpexTypeDefault::argmin(const at::Tensor & self, c10::optional<int64_t> dim, bool keepdim) {
  return at::argmin(xlatens[0], dim, keepdim);
}

at::Tensor AtenIpexTypeDefault::as_strided(const at::Tensor & self, at::IntArrayRef size, at::IntArrayRef stride, c10::optional<int64_t> storage_offset) {
  return at::as_strided(xlatens[0], size, stride, storage_offset);
}

at::Tensor & AtenIpexTypeDefault::as_strided_(at::Tensor & self, at::IntArrayRef size, at::IntArrayRef stride, c10::optional<int64_t> storage_offset) {
  return at::as_strided_(xlatens[0], size, stride, storage_offset);
}

at::Tensor AtenIpexTypeDefault::asin(const at::Tensor & self) {
  return at::asin(xlatens[0]);
}

at::Tensor & AtenIpexTypeDefault::asin_(at::Tensor & self) {
  return at::asin_(xlatens[0]);
}

at::Tensor & AtenIpexTypeDefault::asin_out(at::Tensor & out, const at::Tensor & self) {
  return at::asin_out(xlatens[0], xlatens[1]);
}

at::Tensor AtenIpexTypeDefault::atan(const at::Tensor & self) {
  return at::atan(xlatens[0]);
}

at::Tensor & AtenIpexTypeDefault::atan_(at::Tensor & self) {
  return at::atan_(xlatens[0]);
}

at::Tensor & AtenIpexTypeDefault::atan_out(at::Tensor & out, const at::Tensor & self) {
  return at::atan_out(xlatens[0], xlatens[1]);
}

at::Tensor AtenIpexTypeDefault::baddbmm(const at::Tensor & self, const at::Tensor & batch1, const at::Tensor & batch2, at::Scalar beta, at::Scalar alpha) {
  return at::baddbmm(xlatens[0], xlatens[1], xlatens[2], beta, alpha);
}

at::Tensor & AtenIpexTypeDefault::baddbmm_(at::Tensor & self, const at::Tensor & batch1, const at::Tensor & batch2, at::Scalar beta, at::Scalar alpha) {
  return xlatens[0].baddbmm_(xlatens[1], xlatens[2], beta, alpha);
}

at::Tensor & AtenIpexTypeDefault::_baddbmm_mkl_(at::Tensor & self, const at::Tensor & batch1, const at::Tensor & batch2, at::Scalar beta, at::Scalar alpha) {
  return at::_baddbmm_mkl_(xlatens[0], xlatens[1], xlatens[2], beta, alpha);
}

at::Tensor & AtenIpexTypeDefault::baddbmm_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & batch1, const at::Tensor & batch2, at::Scalar beta, at::Scalar alpha) {
  return at::baddbmm_out(xlatens[0], xlatens[1], xlatens[2], xlatens[3], beta, alpha);
}

at::Tensor AtenIpexTypeDefault::bartlett_window(int64_t window_length, const at::TensorOptions & options) {
  return at::bartlett_window(window_length, options);
}

at::Tensor AtenIpexTypeDefault::bartlett_window(int64_t window_length, bool periodic, const at::TensorOptions & options) {
  return at::bartlett_window(window_length, periodic, options);
}

at::Tensor AtenIpexTypeDefault::batch_norm(const at::Tensor & input, const at::Tensor & weight, const at::Tensor & bias, const at::Tensor & running_mean, const at::Tensor & running_var, bool training, double momentum, double eps, bool cudnn_enabled) {
  return at::batch_norm(xlatens[0], xlatens[1], xlatens[2], xlatens[3], xlatens[4], training, momentum, eps, cudnn_enabled);
}

std::tuple<at::Tensor,at::Tensor,at::Tensor,int64_t> AtenIpexTypeDefault::_batch_norm_impl_index(const at::Tensor & input, const at::Tensor & weight, const at::Tensor & bias, const at::Tensor & running_mean, const at::Tensor & running_var, bool training, double momentum, double eps, bool cudnn_enabled) {
  return at::_batch_norm_impl_index(xlatens[0], xlatens[1], xlatens[2], xlatens[3], xlatens[4], training, momentum, eps, cudnn_enabled);
}

std::tuple<at::Tensor,at::Tensor,at::Tensor> AtenIpexTypeDefault::_batch_norm_impl_index_backward(int64_t impl_index, const at::Tensor & input, const at::Tensor & grad_output, const at::Tensor & weight, const at::Tensor & running_mean, const at::Tensor & running_var, const at::Tensor & save_mean, const at::Tensor & save_var_transform, bool train, double eps, std::array<bool,3> output_mask) {
  return at::_batch_norm_impl_index_backward(impl_index, xlatens[0], xlatens[1], xlatens[2], xlatens[3], xlatens[4], xlatens[5], xlatens[6], train, eps, output_mask);
}

at::Tensor AtenIpexTypeDefault::bernoulli(const at::Tensor & self, at::Generator * generator) {
  return at::bernoulli(xlatens[0], generator);
}

at::Tensor & AtenIpexTypeDefault::bernoulli_out(at::Tensor & out, const at::Tensor & self, at::Generator * generator) {
  return at::bernoulli_out(xlatens[0], xlatens[1], generator);
}

at::Tensor & AtenIpexTypeDefault::bernoulli_(at::Tensor & self, const at::Tensor & p, at::Generator * generator) {
  return xlatens[0].bernoulli_(xlatens[1], generator);
}

at::Tensor & AtenIpexTypeDefault::bernoulli_(at::Tensor & self, double p, at::Generator * generator) {
  return xlatens[0].bernoulli_(p, generator);
}

at::Tensor AtenIpexTypeDefault::bernoulli(const at::Tensor & self, double p, at::Generator * generator) {
  return at::bernoulli(xlatens[0], p, generator);
}

at::Tensor AtenIpexTypeDefault::bilinear(const at::Tensor & input1, const at::Tensor & input2, const at::Tensor & weight, const at::Tensor & bias) {
  return at::bilinear(xlatens[0], xlatens[1], xlatens[2], xlatens[3]);
}

at::Tensor AtenIpexTypeDefault::binary_cross_entropy_with_logits(const at::Tensor & self, const at::Tensor & target, const at::Tensor & weight, const at::Tensor & pos_weight, int64_t reduction) {
  return at::binary_cross_entropy_with_logits(xlatens[0], xlatens[1], xlatens[2], xlatens[3], reduction);
}

at::Tensor AtenIpexTypeDefault::binary_cross_entropy_with_logits_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & target, const at::Tensor & weight, const at::Tensor & pos_weight, int64_t reduction) {
  return at::binary_cross_entropy_with_logits_backward(xlatens[0], xlatens[1], xlatens[2], xlatens[3], xlatens[4], reduction);
}

at::Tensor AtenIpexTypeDefault::bincount(const at::Tensor & self, const at::Tensor & weights, int64_t minlength) {
  return at::bincount(xlatens[0], xlatens[1], minlength);
}

at::Tensor AtenIpexTypeDefault::bitwise_not(const at::Tensor & self) {
  return at::bitwise_not(xlatens[0]);
}

at::Tensor & AtenIpexTypeDefault::bitwise_not_(at::Tensor & self) {
  return xlatens[0].bitwise_not_();
}

at::Tensor & AtenIpexTypeDefault::bitwise_not_out(at::Tensor & out, const at::Tensor & self) {
  auto bitwise_not_out_tmp = AtenXlaType::bitwise_not(self);
  out.unsafeGetTensorImpl()->shallow_copy_from(bitwise_not_out_tmp.getIntrusivePtr());
  return out;
}

at::Tensor AtenIpexTypeDefault::logical_not(const at::Tensor & self) {
  return at::logical_not(xlatens[0]);
}

at::Tensor & AtenIpexTypeDefault::logical_not_(at::Tensor & self) {
  return xlatens[0].logical_not_();
}

at::Tensor & AtenIpexTypeDefault::logical_not_out(at::Tensor & out, const at::Tensor & self) {
  return at::logical_not_out(xlatens[0], xlatens[1]);
}

at::Tensor AtenIpexTypeDefault::logical_xor(const at::Tensor & self, const at::Tensor & other) {
  return at::logical_xor(xlatens[0], xlatens[1]);
}

at::Tensor & AtenIpexTypeDefault::logical_xor_(at::Tensor & self, const at::Tensor & other) {
  return xlatens[0].logical_xor_(xlatens[1]);
}

at::Tensor & AtenIpexTypeDefault::logical_xor_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & other) {
  return at::logical_xor_out(xlatens[0], xlatens[1], xlatens[2]);
}

at::Tensor AtenIpexTypeDefault::blackman_window(int64_t window_length, const at::TensorOptions & options) {
  return at::blackman_window(window_length, options);
}

at::Tensor AtenIpexTypeDefault::blackman_window(int64_t window_length, bool periodic, const at::TensorOptions & options) {
  return at::blackman_window(window_length, periodic, options);
}

at::Tensor AtenIpexTypeDefault::bmm(const at::Tensor & self, const at::Tensor & mat2) {
  return at::bmm(xlatens[0], xlatens[1]);
}

at::Tensor & AtenIpexTypeDefault::bmm_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & mat2) {
  return at::bmm_out(xlatens[0], xlatens[1], xlatens[2]);
}

std::vector<at::Tensor> AtenIpexTypeDefault::broadcast_tensors(at::TensorList tensors) {
  auto l_tensors = bridge::XlaCreateTensorList(tensors);
  return at::broadcast_tensors(l_tensors);
}

at::Tensor AtenIpexTypeDefault::cat(at::TensorList tensors, int64_t dim) {
  auto l_tensors = bridge::XlaCreateTensorList(tensors);
  return at::cat(l_tensors, dim);
}

at::Tensor & AtenIpexTypeDefault::cat_out(at::Tensor & out, at::TensorList tensors, int64_t dim) {
  auto l_tensors = bridge::XlaCreateTensorList(tensors);
  return at::cat_out(xlatens[0], l_tensors, dim);
}

at::Tensor AtenIpexTypeDefault::ceil(const at::Tensor & self) {
  return at::ceil(xlatens[0]);
}

at::Tensor & AtenIpexTypeDefault::ceil_(at::Tensor & self) {
  return at::ceil_(xlatens[0]);
}

at::Tensor & AtenIpexTypeDefault::ceil_out(at::Tensor & out, const at::Tensor & self) {
  return at::ceil_out(xlatens[0], xlatens[1]);
}

at::Tensor AtenIpexTypeDefault::chain_matmul(at::TensorList matrices) {
  auto l_matrices = bridge::XlaCreateTensorList(matrices);
  return at::chain_matmul(l_matrices);
}

std::vector<at::Tensor> AtenIpexTypeDefault::chunk(const at::Tensor & self, int64_t chunks, int64_t dim) {
  return at::chunk(xlatens[0], chunks, dim);
}

at::Tensor AtenIpexTypeDefault::clamp(const at::Tensor & self, c10::optional<at::Scalar> min, c10::optional<at::Scalar> max) {
  return at::clamp(xlatens[0], min, max);
}

at::Tensor & AtenIpexTypeDefault::clamp_(at::Tensor & self, c10::optional<at::Scalar> min, c10::optional<at::Scalar> max) {
  return at::clamp_(xlatens[0], min, max);
}

at::Tensor & AtenIpexTypeDefault::clamp_out(at::Tensor & out, const at::Tensor & self, c10::optional<at::Scalar> min, c10::optional<at::Scalar> max) {
  auto clamp_out_tmp = AtenXlaType::clamp(self, min, max);
  out.unsafeGetTensorImpl()->shallow_copy_from(clamp_out_tmp.getIntrusivePtr());
  return out;
}

at::Tensor AtenIpexTypeDefault::clamp_max(const at::Tensor & self, at::Scalar max) {
  return at::clamp_max(xlatens[0], max);
}

at::Tensor & AtenIpexTypeDefault::clamp_max_(at::Tensor & self, at::Scalar max) {
  return at::clamp_max_(xlatens[0], max);
}

at::Tensor & AtenIpexTypeDefault::clamp_max_out(at::Tensor & out, const at::Tensor & self, at::Scalar max) {
  return at::clamp_max_out(xlatens[0], xlatens[1], max);
}

at::Tensor AtenIpexTypeDefault::clamp_min(const at::Tensor & self, at::Scalar min) {
  return at::clamp_min(xlatens[0], min);
}

at::Tensor & AtenIpexTypeDefault::clamp_min_(at::Tensor & self, at::Scalar min) {
  return at::clamp_min_(xlatens[0], min);
}

at::Tensor & AtenIpexTypeDefault::clamp_min_out(at::Tensor & out, const at::Tensor & self, at::Scalar min) {
  return at::clamp_min_out(xlatens[0], xlatens[1], min);
}

at::Tensor AtenIpexTypeDefault::constant_pad_nd(const at::Tensor & self, at::IntArrayRef pad, at::Scalar value) {
  return at::constant_pad_nd(xlatens[0], pad, value);
}

at::Tensor AtenIpexTypeDefault::contiguous(const at::Tensor & self, at::MemoryFormat memory_format) {
  return xlatens[0].contiguous(memory_format);
}

at::Tensor AtenIpexTypeDefault::convolution(const at::Tensor & input, const at::Tensor & weight, const at::Tensor & bias, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef dilation, bool transposed, at::IntArrayRef output_padding, int64_t groups) {
  return at::convolution(xlatens[0], xlatens[1], xlatens[2], stride, padding, dilation, transposed, output_padding, groups);
}

at::Tensor AtenIpexTypeDefault::_convolution(const at::Tensor & input, const at::Tensor & weight, const at::Tensor & bias, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef dilation, bool transposed, at::IntArrayRef output_padding, int64_t groups, bool benchmark, bool deterministic, bool cudnn_enabled) {
  return at::_convolution(xlatens[0], xlatens[1], xlatens[2], stride, padding, dilation, transposed, output_padding, groups, benchmark, deterministic, cudnn_enabled);
}

at::Tensor AtenIpexTypeDefault::_convolution_nogroup(const at::Tensor & input, const at::Tensor & weight, const at::Tensor & bias, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef dilation, bool transposed, at::IntArrayRef output_padding) {
  return at::_convolution_nogroup(xlatens[0], xlatens[1], xlatens[2], stride, padding, dilation, transposed, output_padding);
}

std::tuple<at::Tensor,at::Tensor,at::Tensor> AtenIpexTypeDefault::_convolution_double_backward(const at::Tensor & ggI, const at::Tensor & ggW, const at::Tensor & ggb, const at::Tensor & gO, const at::Tensor & weight, const at::Tensor & self, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef dilation, bool transposed, at::IntArrayRef output_padding, int64_t groups, bool benchmark, bool deterministic, bool cudnn_enabled, std::array<bool,3> output_mask) {
  return at::_convolution_double_backward(xlatens[0], xlatens[1], xlatens[2], xlatens[3], xlatens[4], xlatens[5], stride, padding, dilation, transposed, output_padding, groups, benchmark, deterministic, cudnn_enabled, output_mask);
}

at::Tensor AtenIpexTypeDefault::conv1d(const at::Tensor & input, const at::Tensor & weight, const at::Tensor & bias, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef dilation, int64_t groups) {
  return at::conv1d(xlatens[0], xlatens[1], xlatens[2], stride, padding, dilation, groups);
}

at::Tensor AtenIpexTypeDefault::conv2d(const at::Tensor & input, const at::Tensor & weight, const at::Tensor & bias, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef dilation, int64_t groups) {
  return at::conv2d(xlatens[0], xlatens[1], xlatens[2], stride, padding, dilation, groups);
}

at::Tensor AtenIpexTypeDefault::conv3d(const at::Tensor & input, const at::Tensor & weight, const at::Tensor & bias, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef dilation, int64_t groups) {
  return at::conv3d(xlatens[0], xlatens[1], xlatens[2], stride, padding, dilation, groups);
}

at::Tensor AtenIpexTypeDefault::conv_tbc(const at::Tensor & self, const at::Tensor & weight, const at::Tensor & bias, int64_t pad) {
  return at::conv_tbc(xlatens[0], xlatens[1], xlatens[2], pad);
}

std::tuple<at::Tensor,at::Tensor,at::Tensor> AtenIpexTypeDefault::conv_tbc_backward(const at::Tensor & self, const at::Tensor & input, const at::Tensor & weight, const at::Tensor & bias, int64_t pad) {
  return at::conv_tbc_backward(xlatens[0], xlatens[1], xlatens[2], xlatens[3], pad);
}

at::Tensor AtenIpexTypeDefault::conv_transpose1d(const at::Tensor & input, const at::Tensor & weight, const at::Tensor & bias, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef output_padding, int64_t groups, at::IntArrayRef dilation) {
  return at::conv_transpose1d(xlatens[0], xlatens[1], xlatens[2], stride, padding, output_padding, groups, dilation);
}

at::Tensor AtenIpexTypeDefault::conv_transpose2d(const at::Tensor & input, const at::Tensor & weight, const at::Tensor & bias, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef output_padding, int64_t groups, at::IntArrayRef dilation) {
  return at::conv_transpose2d(xlatens[0], xlatens[1], xlatens[2], stride, padding, output_padding, groups, dilation);
}

at::Tensor AtenIpexTypeDefault::conv_transpose3d(const at::Tensor & input, const at::Tensor & weight, const at::Tensor & bias, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef output_padding, int64_t groups, at::IntArrayRef dilation) {
  return at::conv_transpose3d(xlatens[0], xlatens[1], xlatens[2], stride, padding, output_padding, groups, dilation);
}

at::Tensor & AtenIpexTypeDefault::copy_(at::Tensor & self, const at::Tensor & src, bool non_blocking) {
  return xlatens[0].copy_(xlatens[1], non_blocking);
}

at::Tensor AtenIpexTypeDefault::_copy_from(const at::Tensor & self, const at::Tensor & dst, bool non_blocking) {
  return at::_copy_from(xlatens[0], xlatens[1], non_blocking);
}

at::Tensor AtenIpexTypeDefault::cos(const at::Tensor & self) {
  return at::cos(xlatens[0]);
}

at::Tensor & AtenIpexTypeDefault::cos_(at::Tensor & self) {
  return at::cos_(xlatens[0]);
}

at::Tensor & AtenIpexTypeDefault::cos_out(at::Tensor & out, const at::Tensor & self) {
  return at::cos_out(xlatens[0], xlatens[1]);
}

at::Tensor AtenIpexTypeDefault::cosh(const at::Tensor & self) {
  return at::cosh(xlatens[0]);
}

at::Tensor & AtenIpexTypeDefault::cosh_(at::Tensor & self) {
  return at::cosh_(xlatens[0]);
}

at::Tensor & AtenIpexTypeDefault::cosh_out(at::Tensor & out, const at::Tensor & self) {
  return at::cosh_out(xlatens[0], xlatens[1]);
}

at::Tensor AtenIpexTypeDefault::cosine_embedding_loss(const at::Tensor & input1, const at::Tensor & input2, const at::Tensor & target, double margin, int64_t reduction) {
  return at::cosine_embedding_loss(xlatens[0], xlatens[1], xlatens[2], margin, reduction);
}

at::Tensor AtenIpexTypeDefault::cumsum(const at::Tensor & self, int64_t dim, c10::optional<at::ScalarType> dtype) {
  return at::cumsum(xlatens[0], dim, dtype);
}

at::Tensor & AtenIpexTypeDefault::cumsum_out(at::Tensor & out, const at::Tensor & self, int64_t dim, c10::optional<at::ScalarType> dtype) {
  return at::cumsum_out(xlatens[0], xlatens[1], dim, dtype);
}

at::Tensor AtenIpexTypeDefault::cumprod(const at::Tensor & self, int64_t dim, c10::optional<at::ScalarType> dtype) {
  return at::cumprod(xlatens[0], dim, dtype);
}

at::Tensor & AtenIpexTypeDefault::cumprod_out(at::Tensor & out, const at::Tensor & self, int64_t dim, c10::optional<at::ScalarType> dtype) {
  return at::cumprod_out(xlatens[0], xlatens[1], dim, dtype);
}

at::Tensor AtenIpexTypeDefault::ctc_loss(const at::Tensor & log_probs, const at::Tensor & targets, at::IntArrayRef input_lengths, at::IntArrayRef target_lengths, int64_t blank, int64_t reduction, bool zero_infinity) {
  return at::ctc_loss(xlatens[0], xlatens[1], input_lengths, target_lengths, blank, reduction, zero_infinity);
}

at::Tensor AtenIpexTypeDefault::ctc_loss(const at::Tensor & log_probs, const at::Tensor & targets, const at::Tensor & input_lengths, const at::Tensor & target_lengths, int64_t blank, int64_t reduction, bool zero_infinity) {
  return at::ctc_loss(xlatens[0], xlatens[1], xlatens[2], xlatens[3], blank, reduction, zero_infinity);
}

std::tuple<at::Tensor,at::Tensor> AtenIpexTypeDefault::_ctc_loss(const at::Tensor & log_probs, const at::Tensor & targets, at::IntArrayRef input_lengths, at::IntArrayRef target_lengths, int64_t blank, bool zero_infinity) {
  return at::_ctc_loss(xlatens[0], xlatens[1], input_lengths, target_lengths, blank, zero_infinity);
}

at::Tensor AtenIpexTypeDefault::_ctc_loss_backward(const at::Tensor & grad, const at::Tensor & log_probs, const at::Tensor & targets, at::IntArrayRef input_lengths, at::IntArrayRef target_lengths, const at::Tensor & neg_log_likelihood, const at::Tensor & log_alpha, int64_t blank, bool zero_infinity) {
  return at::_ctc_loss_backward(xlatens[0], xlatens[1], xlatens[2], input_lengths, target_lengths, xlatens[3], xlatens[4], blank, zero_infinity);
}

at::Tensor AtenIpexTypeDefault::det(const at::Tensor & self) {
  return at::det(xlatens[0]);
}

at::Tensor AtenIpexTypeDefault::diag_embed(const at::Tensor & self, int64_t offset, int64_t dim1, int64_t dim2) {
  return at::diag_embed(xlatens[0], offset, dim1, dim2);
}

at::Tensor AtenIpexTypeDefault::diagflat(const at::Tensor & self, int64_t offset) {
  return at::diagflat(xlatens[0], offset);
}

at::Tensor AtenIpexTypeDefault::diagonal(const at::Tensor & self, int64_t offset, int64_t dim1, int64_t dim2) {
  return at::diagonal(xlatens[0], offset, dim1, dim2);
}

at::Tensor & AtenIpexTypeDefault::fill_diagonal_(at::Tensor & self, at::Scalar fill_value, bool wrap) {
  return xlatens[0].fill_diagonal_(fill_value, wrap);
}

at::Tensor AtenIpexTypeDefault::div(const at::Tensor & self, const at::Tensor & other) {
  return at::div(xlatens[0], xlatens[1]);
}

at::Tensor & AtenIpexTypeDefault::div_(at::Tensor & self, const at::Tensor & other) {
  return xlatens[0].div_(xlatens[1]);
}

at::Tensor & AtenIpexTypeDefault::div_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & other) {
  auto div_out_tmp = AtenXlaType::div(self, other);
  out.unsafeGetTensorImpl()->shallow_copy_from(div_out_tmp.getIntrusivePtr());
  return out;
}

at::Tensor AtenIpexTypeDefault::div(const at::Tensor & self, at::Scalar other) {
  return at::div(xlatens[0], other);
}

at::Tensor & AtenIpexTypeDefault::div_(at::Tensor & self, at::Scalar other) {
  return xlatens[0].div_(other);
}

at::Tensor AtenIpexTypeDefault::dot(const at::Tensor & self, const at::Tensor & tensor) {
  return at::dot(xlatens[0], xlatens[1]);
}

at::Tensor & AtenIpexTypeDefault::dot_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & tensor) {
  return at::dot_out(xlatens[0], xlatens[1], xlatens[2]);
}

at::Tensor AtenIpexTypeDefault::einsum(std::string equation, at::TensorList tensors) {
  auto l_tensors = bridge::XlaCreateTensorList(tensors);
  return at::einsum(equation, l_tensors);
}

at::Tensor AtenIpexTypeDefault::embedding(const at::Tensor & weight, const at::Tensor & indices, int64_t padding_idx, bool scale_grad_by_freq, bool sparse) {
  return at::embedding(xlatens[0], xlatens[1], padding_idx, scale_grad_by_freq, sparse);
}

at::Tensor AtenIpexTypeDefault::embedding_backward(const at::Tensor & grad, const at::Tensor & indices, int64_t num_weights, int64_t padding_idx, bool scale_grad_by_freq, bool sparse) {
  return at::embedding_backward(xlatens[0], xlatens[1], num_weights, padding_idx, scale_grad_by_freq, sparse);
}

at::Tensor AtenIpexTypeDefault::embedding_dense_backward(const at::Tensor & grad_output, const at::Tensor & indices, int64_t num_weights, int64_t padding_idx, bool scale_grad_by_freq) {
  return at::embedding_dense_backward(xlatens[0], xlatens[1], num_weights, padding_idx, scale_grad_by_freq);
}

at::Tensor & AtenIpexTypeDefault::embedding_renorm_(at::Tensor & self, const at::Tensor & indices, double max_norm, double norm_type) {
  return at::embedding_renorm_(xlatens[0], xlatens[1], max_norm, norm_type);
}

at::Tensor AtenIpexTypeDefault::embedding_sparse_backward(const at::Tensor & grad, const at::Tensor & indices, int64_t num_weights, int64_t padding_idx, bool scale_grad_by_freq) {
  return at::embedding_sparse_backward(xlatens[0], xlatens[1], num_weights, padding_idx, scale_grad_by_freq);
}

std::tuple<at::Tensor,at::Tensor,at::Tensor,at::Tensor> AtenIpexTypeDefault::embedding_bag(const at::Tensor & weight, const at::Tensor & indices, const at::Tensor & offsets, bool scale_grad_by_freq, int64_t mode, bool sparse, const at::Tensor & per_sample_weights) {
  return at::embedding_bag(xlatens[0], xlatens[1], xlatens[2], scale_grad_by_freq, mode, sparse, xlatens[3]);
}

std::tuple<at::Tensor,at::Tensor,at::Tensor,at::Tensor> AtenIpexTypeDefault::_embedding_bag(const at::Tensor & weight, const at::Tensor & indices, const at::Tensor & offsets, bool scale_grad_by_freq, int64_t mode, bool sparse, const at::Tensor & per_sample_weights) {
  return at::_embedding_bag(xlatens[0], xlatens[1], xlatens[2], scale_grad_by_freq, mode, sparse, xlatens[3]);
}

at::Tensor AtenIpexTypeDefault::_embedding_bag_backward(const at::Tensor & grad, const at::Tensor & indices, const at::Tensor & offsets, const at::Tensor & offset2bag, const at::Tensor & bag_size, const at::Tensor & maximum_indices, int64_t num_weights, bool scale_grad_by_freq, int64_t mode, bool sparse, const at::Tensor & per_sample_weights) {
  return at::_embedding_bag_backward(xlatens[0], xlatens[1], xlatens[2], xlatens[3], xlatens[4], xlatens[5], num_weights, scale_grad_by_freq, mode, sparse, xlatens[6]);
}

at::Tensor AtenIpexTypeDefault::_embedding_bag_sparse_backward(const at::Tensor & grad, const at::Tensor & indices, const at::Tensor & offsets, const at::Tensor & offset2bag, const at::Tensor & bag_size, int64_t num_weights, bool scale_grad_by_freq, int64_t mode, const at::Tensor & per_sample_weights) {
  return at::_embedding_bag_sparse_backward(xlatens[0], xlatens[1], xlatens[2], xlatens[3], xlatens[4], num_weights, scale_grad_by_freq, mode, xlatens[5]);
}

at::Tensor AtenIpexTypeDefault::_embedding_bag_dense_backward(const at::Tensor & grad, const at::Tensor & indices, const at::Tensor & offsets, const at::Tensor & offset2bag, const at::Tensor & bag_size, const at::Tensor & maximum_indices, int64_t num_weights, bool scale_grad_by_freq, int64_t mode, const at::Tensor & per_sample_weights) {
  return at::_embedding_bag_dense_backward(xlatens[0], xlatens[1], xlatens[2], xlatens[3], xlatens[4], xlatens[5], num_weights, scale_grad_by_freq, mode, xlatens[6]);
}

at::Tensor AtenIpexTypeDefault::_embedding_bag_per_sample_weights_backward(const at::Tensor & grad, const at::Tensor & weight, const at::Tensor & indices, const at::Tensor & offsets, const at::Tensor & offset2bag, int64_t mode) {
  return at::_embedding_bag_per_sample_weights_backward(xlatens[0], xlatens[1], xlatens[2], xlatens[3], xlatens[4], mode);
}

at::Tensor AtenIpexTypeDefault::empty(at::IntArrayRef size, const at::TensorOptions & options, c10::optional<at::MemoryFormat> memory_format) {
  at::TensorOptions o_options = options.device(at::DeviceType::CPU);
  return at::empty(size, o_options, memory_format);
}

at::Tensor AtenIpexTypeDefault::_empty_affine_quantized(at::IntArrayRef size, const at::TensorOptions & options, double scale, int64_t zero_point, c10::optional<at::MemoryFormat> memory_format) {
  return at::_empty_affine_quantized(size, options, scale, zero_point, memory_format);
}

at::Tensor & AtenIpexTypeDefault::resize_(at::Tensor & self, at::IntArrayRef size) {
  return xlatens[0].resize_(size);
}

at::Tensor & AtenIpexTypeDefault::empty_out(at::Tensor & out, at::IntArrayRef size, c10::optional<at::MemoryFormat> memory_format) {
  return at::empty_out(xlatens[0], size, memory_format);
}

at::Tensor AtenIpexTypeDefault::empty_like(const at::Tensor & self) {
  return at::empty_like(xlatens[0]);
}

at::Tensor AtenIpexTypeDefault::empty_like(const at::Tensor & self, const at::TensorOptions & options, c10::optional<at::MemoryFormat> memory_format) {
  return at::empty_like(xlatens[0], options, memory_format);
}

at::Tensor AtenIpexTypeDefault::empty_strided(at::IntArrayRef size, at::IntArrayRef stride, const at::TensorOptions & options) {
  return at::empty_strided(size, stride, options);
}

at::Tensor AtenIpexTypeDefault::erf(const at::Tensor & self) {
  return at::erf(xlatens[0]);
}

at::Tensor & AtenIpexTypeDefault::erf_(at::Tensor & self) {
  return at::erf_(xlatens[0]);
}

at::Tensor & AtenIpexTypeDefault::erf_out(at::Tensor & out, const at::Tensor & self) {
  return at::erf_out(xlatens[0], xlatens[1]);
}

at::Tensor AtenIpexTypeDefault::erfc(const at::Tensor & self) {
  return at::erfc(xlatens[0]);
}

at::Tensor & AtenIpexTypeDefault::erfc_(at::Tensor & self) {
  return at::erfc_(xlatens[0]);
}

at::Tensor & AtenIpexTypeDefault::erfc_out(at::Tensor & out, const at::Tensor & self) {
  return at::erfc_out(xlatens[0], xlatens[1]);
}

at::Tensor AtenIpexTypeDefault::exp(const at::Tensor & self) {
  return at::exp(xlatens[0]);
}

at::Tensor & AtenIpexTypeDefault::exp_(at::Tensor & self) {
  return at::exp_(xlatens[0]);
}

at::Tensor & AtenIpexTypeDefault::exp_out(at::Tensor & out, const at::Tensor & self) {
  return at::exp_out(xlatens[0], xlatens[1]);
}

at::Tensor AtenIpexTypeDefault::expm1(const at::Tensor & self) {
  return at::expm1(xlatens[0]);
}

at::Tensor & AtenIpexTypeDefault::expm1_(at::Tensor & self) {
  return at::expm1_(xlatens[0]);
}

at::Tensor & AtenIpexTypeDefault::expm1_out(at::Tensor & out, const at::Tensor & self) {
  return at::expm1_out(xlatens[0], xlatens[1]);
}

at::Tensor AtenIpexTypeDefault::expand(const at::Tensor & self, at::IntArrayRef size, bool implicit) {
  return xlatens[0].expand(size, implicit);
}

at::Tensor AtenIpexTypeDefault::expand_as(const at::Tensor & self, const at::Tensor & other) {
  return xlatens[0].expand_as(xlatens[1]);
}

at::Tensor AtenIpexTypeDefault::eye(int64_t n, const at::TensorOptions & options) {
  return at::eye(n, options);
}

at::Tensor AtenIpexTypeDefault::eye(int64_t n, int64_t m, const at::TensorOptions & options) {
  return at::eye(n, m, options);
}

at::Tensor & AtenIpexTypeDefault::eye_out(at::Tensor & out, int64_t n) {
  return at::eye_out(xlatens[0], n);
}

at::Tensor & AtenIpexTypeDefault::eye_out(at::Tensor & out, int64_t n, int64_t m) {
  return at::eye_out(xlatens[0], n, m);
}

at::Tensor AtenIpexTypeDefault::flatten(const at::Tensor & self, int64_t start_dim, int64_t end_dim) {
  return at::flatten(xlatens[0], start_dim, end_dim);
}

at::Tensor & AtenIpexTypeDefault::fill_(at::Tensor & self, at::Scalar value) {
  return at::fill_(xlatens[0], value);
}

at::Tensor & AtenIpexTypeDefault::fill_(at::Tensor & self, const at::Tensor & value) {
  return at::fill_(xlatens[0], xlatens[1]);
}

at::Tensor AtenIpexTypeDefault::floor(const at::Tensor & self) {
  return at::floor(xlatens[0]);
}

at::Tensor & AtenIpexTypeDefault::floor_(at::Tensor & self) {
  return at::floor_(xlatens[0]);
}

at::Tensor & AtenIpexTypeDefault::floor_out(at::Tensor & out, const at::Tensor & self) {
  return at::floor_out(xlatens[0], xlatens[1]);
}

at::Tensor AtenIpexTypeDefault::frac(const at::Tensor & self) {
  return at::frac(xlatens[0]);
}

at::Tensor & AtenIpexTypeDefault::frac_(at::Tensor & self) {
  return at::frac_(xlatens[0]);
}

at::Tensor & AtenIpexTypeDefault::frac_out(at::Tensor & out, const at::Tensor & self) {
  return at::frac_out(xlatens[0], xlatens[1]);
}

at::Tensor AtenIpexTypeDefault::full(at::IntArrayRef size, at::Scalar fill_value, const at::TensorOptions & options) {
  return at::full(size, fill_value, options);
}

at::Tensor & AtenIpexTypeDefault::full_out(at::Tensor & out, at::IntArrayRef size, at::Scalar fill_value) {
  return at::full_out(xlatens[0], size, fill_value);
}

at::Tensor AtenIpexTypeDefault::full_like(const at::Tensor & self, at::Scalar fill_value) {
  return at::full_like(xlatens[0], fill_value);
}

at::Tensor AtenIpexTypeDefault::full_like(const at::Tensor & self, at::Scalar fill_value, const at::TensorOptions & options) {
  return at::full_like(xlatens[0], fill_value, options);
}

at::Tensor AtenIpexTypeDefault::from_file(std::string filename, c10::optional<bool> shared, c10::optional<int64_t> size, const at::TensorOptions & options) {
  return at::from_file(filename, shared, size, options);
}

at::Tensor AtenIpexTypeDefault::grid_sampler(const at::Tensor & input, const at::Tensor & grid, int64_t interpolation_mode, int64_t padding_mode, bool align_corners) {
  return at::grid_sampler(xlatens[0], xlatens[1], interpolation_mode, padding_mode, align_corners);
}

at::Tensor AtenIpexTypeDefault::grid_sampler_2d(const at::Tensor & input, const at::Tensor & grid, int64_t interpolation_mode, int64_t padding_mode, bool align_corners) {
  return at::grid_sampler_2d(xlatens[0], xlatens[1], interpolation_mode, padding_mode, align_corners);
}

std::tuple<at::Tensor,at::Tensor> AtenIpexTypeDefault::grid_sampler_2d_backward(const at::Tensor & grad_output, const at::Tensor & input, const at::Tensor & grid, int64_t interpolation_mode, int64_t padding_mode, bool align_corners) {
  return at::grid_sampler_2d_backward(xlatens[0], xlatens[1], xlatens[2], interpolation_mode, padding_mode, align_corners);
}

at::Tensor AtenIpexTypeDefault::grid_sampler_3d(const at::Tensor & input, const at::Tensor & grid, int64_t interpolation_mode, int64_t padding_mode, bool align_corners) {
  return at::grid_sampler_3d(xlatens[0], xlatens[1], interpolation_mode, padding_mode, align_corners);
}

std::tuple<at::Tensor,at::Tensor> AtenIpexTypeDefault::grid_sampler_3d_backward(const at::Tensor & grad_output, const at::Tensor & input, const at::Tensor & grid, int64_t interpolation_mode, int64_t padding_mode, bool align_corners) {
  return at::grid_sampler_3d_backward(xlatens[0], xlatens[1], xlatens[2], interpolation_mode, padding_mode, align_corners);
}

at::Tensor AtenIpexTypeDefault::hann_window(int64_t window_length, const at::TensorOptions & options) {
  return at::hann_window(window_length, options);
}

at::Tensor AtenIpexTypeDefault::hann_window(int64_t window_length, bool periodic, const at::TensorOptions & options) {
  return at::hann_window(window_length, periodic, options);
}

at::Tensor AtenIpexTypeDefault::hamming_window(int64_t window_length, const at::TensorOptions & options) {
  return at::hamming_window(window_length, options);
}

at::Tensor AtenIpexTypeDefault::hamming_window(int64_t window_length, bool periodic, const at::TensorOptions & options) {
  return at::hamming_window(window_length, periodic, options);
}

at::Tensor AtenIpexTypeDefault::hamming_window(int64_t window_length, bool periodic, double alpha, const at::TensorOptions & options) {
  return at::hamming_window(window_length, periodic, alpha, options);
}

at::Tensor AtenIpexTypeDefault::hamming_window(int64_t window_length, bool periodic, double alpha, double beta, const at::TensorOptions & options) {
  return at::hamming_window(window_length, periodic, alpha, beta, options);
}

at::Tensor AtenIpexTypeDefault::hinge_embedding_loss(const at::Tensor & self, const at::Tensor & target, double margin, int64_t reduction) {
  return at::hinge_embedding_loss(xlatens[0], xlatens[1], margin, reduction);
}

at::Tensor AtenIpexTypeDefault::ger(const at::Tensor & self, const at::Tensor & vec2) {
  return at::ger(xlatens[0], xlatens[1]);
}

at::Tensor & AtenIpexTypeDefault::ger_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & vec2) {
  return at::ger_out(xlatens[0], xlatens[1], xlatens[2]);
}

at::Tensor AtenIpexTypeDefault::group_norm(const at::Tensor & input, int64_t num_groups, const at::Tensor & weight, const at::Tensor & bias, double eps, bool cudnn_enabled) {
  return at::group_norm(xlatens[0], num_groups, xlatens[1], xlatens[2], eps, cudnn_enabled);
}

at::Tensor AtenIpexTypeDefault::fft(const at::Tensor & self, int64_t signal_ndim, bool normalized) {
  return at::fft(xlatens[0], signal_ndim, normalized);
}

at::Tensor AtenIpexTypeDefault::ifft(const at::Tensor & self, int64_t signal_ndim, bool normalized) {
  return at::ifft(xlatens[0], signal_ndim, normalized);
}

at::Tensor AtenIpexTypeDefault::rfft(const at::Tensor & self, int64_t signal_ndim, bool normalized, bool onesided) {
  return at::rfft(xlatens[0], signal_ndim, normalized, onesided);
}

at::Tensor AtenIpexTypeDefault::irfft(const at::Tensor & self, int64_t signal_ndim, bool normalized, bool onesided, at::IntArrayRef signal_sizes) {
  return at::irfft(xlatens[0], signal_ndim, normalized, onesided, signal_sizes);
}

at::Tensor AtenIpexTypeDefault::_fft_with_size(const at::Tensor & self, int64_t signal_ndim, bool complex_input, bool complex_output, bool inverse, at::IntArrayRef checked_signal_sizes, bool normalized, bool onesided, at::IntArrayRef output_sizes) {
  return at::_fft_with_size(xlatens[0], signal_ndim, complex_input, complex_output, inverse, checked_signal_sizes, normalized, onesided, output_sizes);
}

int64_t AtenIpexTypeDefault::_cufft_get_plan_cache_size(int64_t device_index) {
  return at::_cufft_get_plan_cache_size(device_index);
}

int64_t AtenIpexTypeDefault::_cufft_get_plan_cache_max_size(int64_t device_index) {
  return at::_cufft_get_plan_cache_max_size(device_index);
}

void AtenIpexTypeDefault::_cufft_set_plan_cache_max_size(int64_t device_index, int64_t max_size) {
  return at::_cufft_set_plan_cache_max_size(device_index, max_size);
}

void AtenIpexTypeDefault::_cufft_clear_plan_cache(int64_t device_index) {
  return at::_cufft_clear_plan_cache(device_index);
}

at::Tensor AtenIpexTypeDefault::index(const at::Tensor & self, at::TensorList indices) {
  auto l_indices = bridge::XlaCreateTensorList(indices);
  return at::index(xlatens[0], l_indices);
}

at::Tensor & AtenIpexTypeDefault::index_copy_(at::Tensor & self, int64_t dim, const at::Tensor & index, const at::Tensor & source) {
  return xlatens[0].index_copy_(dim, xlatens[1], xlatens[2]);
}

at::Tensor AtenIpexTypeDefault::index_copy(const at::Tensor & self, int64_t dim, const at::Tensor & index, const at::Tensor & source) {
  return at::index_copy(xlatens[0], dim, xlatens[1], xlatens[2]);
}

at::Tensor & AtenIpexTypeDefault::index_put_(at::Tensor & self, at::TensorList indices, const at::Tensor & values, bool accumulate) {
  auto l_indices = bridge::XlaCreateTensorList(indices);
  return at::index_put_(xlatens[0], l_indices, xlatens[1], accumulate);
}

at::Tensor AtenIpexTypeDefault::index_put(const at::Tensor & self, at::TensorList indices, const at::Tensor & values, bool accumulate) {
  auto l_indices = bridge::XlaCreateTensorList(indices);
  return at::index_put(xlatens[0], l_indices, xlatens[1], accumulate);
}

at::Tensor & AtenIpexTypeDefault::_index_put_impl_(at::Tensor & self, at::TensorList indices, const at::Tensor & values, bool accumulate, bool unsafe) {
  auto l_indices = bridge::XlaCreateTensorList(indices);
  return at::_index_put_impl_(xlatens[0], l_indices, xlatens[1], accumulate, unsafe);
}

at::Tensor AtenIpexTypeDefault::instance_norm(const at::Tensor & input, const at::Tensor & weight, const at::Tensor & bias, const at::Tensor & running_mean, const at::Tensor & running_var, bool use_input_stats, double momentum, double eps, bool cudnn_enabled) {
  return at::instance_norm(xlatens[0], xlatens[1], xlatens[2], xlatens[3], xlatens[4], use_input_stats, momentum, eps, cudnn_enabled);
}

at::Tensor AtenIpexTypeDefault::inverse(const at::Tensor & self) {
  return at::inverse(xlatens[0]);
}

at::Tensor & AtenIpexTypeDefault::inverse_out(at::Tensor & out, const at::Tensor & self) {
  return at::inverse_out(xlatens[0], xlatens[1]);
}

at::Tensor AtenIpexTypeDefault::_inverse_helper(const at::Tensor & self) {
  return at::_inverse_helper(xlatens[0]);
}

at::Tensor AtenIpexTypeDefault::isclose(const at::Tensor & self, const at::Tensor & other, double rtol, double atol, bool equal_nan) {
  return at::isclose(xlatens[0], xlatens[1], rtol, atol, equal_nan);
}

at::Tensor AtenIpexTypeDefault::isnan(const at::Tensor & self) {
  return at::isnan(xlatens[0]);
}

bool AtenIpexTypeDefault::is_distributed(const at::Tensor & self) {
  return at::is_distributed(xlatens[0]);
}

bool AtenIpexTypeDefault::is_floating_point(const at::Tensor & self) {
  return at::is_floating_point(xlatens[0]);
}

bool AtenIpexTypeDefault::is_complex(const at::Tensor & self) {
  return at::is_complex(xlatens[0]);
}

bool AtenIpexTypeDefault::is_nonzero(const at::Tensor & self) {
  return at::is_nonzero(xlatens[0]);
}

bool AtenIpexTypeDefault::is_same_size(const at::Tensor & self, const at::Tensor & other) {
  return at::is_same_size(xlatens[0], xlatens[1]);
}

bool AtenIpexTypeDefault::is_signed(const at::Tensor & self) {
  return at::is_signed(xlatens[0]);
}

at::Tensor AtenIpexTypeDefault::kl_div(const at::Tensor & self, const at::Tensor & target, int64_t reduction) {
  return at::kl_div(xlatens[0], xlatens[1], reduction);
}

at::Tensor AtenIpexTypeDefault::kl_div_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & target, int64_t reduction) {
  return at::kl_div_backward(xlatens[0], xlatens[1], xlatens[2], reduction);
}

std::tuple<at::Tensor,at::Tensor> AtenIpexTypeDefault::kthvalue(const at::Tensor & self, int64_t k, int64_t dim, bool keepdim) {
  return at::kthvalue(xlatens[0], k, dim, keepdim);
}

std::tuple<at::Tensor &,at::Tensor &> AtenIpexTypeDefault::kthvalue_out(at::Tensor & values, at::Tensor & indices, const at::Tensor & self, int64_t k, int64_t dim, bool keepdim) {
  auto kthvalue_out_tmp = AtenXlaType::kthvalue(self, k, dim, keepdim);
  values.unsafeGetTensorImpl()->shallow_copy_from(std::get<0>(kthvalue_out_tmp).getIntrusivePtr());
  indices.unsafeGetTensorImpl()->shallow_copy_from(std::get<1>(kthvalue_out_tmp).getIntrusivePtr());
  return std::tuple<at::Tensor &,at::Tensor &>(values, indices);
}

at::Tensor AtenIpexTypeDefault::layer_norm(const at::Tensor & input, at::IntArrayRef normalized_shape, const at::Tensor & weight, const at::Tensor & bias, double eps, bool cudnn_enable) {
  return at::layer_norm(xlatens[0], normalized_shape, xlatens[1], xlatens[2], eps, cudnn_enable);
}

std::tuple<at::Tensor,at::Tensor,at::Tensor> AtenIpexTypeDefault::native_layer_norm(const at::Tensor & input, const at::Tensor & weight, const at::Tensor & bias, int64_t M, int64_t N, double eps) {
  return at::native_layer_norm(xlatens[0], xlatens[1], xlatens[2], M, N, eps);
}

std::tuple<at::Tensor,at::Tensor,at::Tensor> AtenIpexTypeDefault::native_layer_norm_backward(const at::Tensor & grad_out, const at::Tensor & input, const at::Tensor & mean, const at::Tensor & rstd, const at::Tensor & weight, int64_t M, int64_t N, std::array<bool,3> output_mask) {
  return at::native_layer_norm_backward(xlatens[0], xlatens[1], xlatens[2], xlatens[3], xlatens[4], M, N, output_mask);
}

std::tuple<at::Tensor,at::Tensor,at::Tensor> AtenIpexTypeDefault::native_layer_norm_double_backward(const at::Tensor & ggI, const at::Tensor & ggW, const at::Tensor & ggb, const at::Tensor & gO, const at::Tensor & input, const at::Tensor & mean, const at::Tensor & rstd, const at::Tensor & weight, int64_t M, int64_t N, std::array<bool,3> output_mask) {
  return at::native_layer_norm_double_backward(xlatens[0], xlatens[1], xlatens[2], xlatens[3], xlatens[4], xlatens[5], xlatens[6], xlatens[7], M, N, output_mask);
}

at::Tensor AtenIpexTypeDefault::linear(const at::Tensor & input, const at::Tensor & weight, const at::Tensor & bias) {
  return at::linear(xlatens[0], xlatens[1], xlatens[2]);
}

at::Tensor AtenIpexTypeDefault::mkldnn_linear(const at::Tensor & input, const at::Tensor & weight, const at::Tensor & bias) {
  return at::mkldnn_linear(xlatens[0], xlatens[1], xlatens[2]);
}

at::Tensor AtenIpexTypeDefault::fbgemm_linear_int8_weight_fp32_activation(const at::Tensor & input, const at::Tensor & weight, const at::Tensor & packed, const at::Tensor & col_offsets, at::Scalar weight_scale, at::Scalar weight_zero_point, const at::Tensor & bias) {
  return at::fbgemm_linear_int8_weight_fp32_activation(xlatens[0], xlatens[1], xlatens[2], xlatens[3], weight_scale, weight_zero_point, xlatens[4]);
}

at::Tensor AtenIpexTypeDefault::fbgemm_linear_int8_weight(const at::Tensor & input, const at::Tensor & weight, const at::Tensor & packed, const at::Tensor & col_offsets, at::Scalar weight_scale, at::Scalar weight_zero_point, const at::Tensor & bias) {
  return at::fbgemm_linear_int8_weight(xlatens[0], xlatens[1], xlatens[2], xlatens[3], weight_scale, weight_zero_point, xlatens[4]);
}

std::tuple<at::Tensor,at::Tensor,double,int64_t> AtenIpexTypeDefault::fbgemm_linear_quantize_weight(const at::Tensor & input) {
  return at::fbgemm_linear_quantize_weight(xlatens[0]);
}

at::Tensor AtenIpexTypeDefault::fbgemm_pack_gemm_matrix_fp16(const at::Tensor & input) {
  return at::fbgemm_pack_gemm_matrix_fp16(xlatens[0]);
}

at::Tensor AtenIpexTypeDefault::fbgemm_linear_fp16_weight_fp32_activation(const at::Tensor & input, const at::Tensor & packed_weight, const at::Tensor & bias) {
  return at::fbgemm_linear_fp16_weight_fp32_activation(xlatens[0], xlatens[1], xlatens[2]);
}

at::Tensor AtenIpexTypeDefault::fbgemm_linear_fp16_weight(const at::Tensor & input, const at::Tensor & packed_weight, const at::Tensor & bias) {
  return at::fbgemm_linear_fp16_weight(xlatens[0], xlatens[1], xlatens[2]);
}

at::Tensor AtenIpexTypeDefault::fbgemm_pack_quantized_matrix(const at::Tensor & input) {
  return at::fbgemm_pack_quantized_matrix(xlatens[0]);
}

at::Tensor AtenIpexTypeDefault::fbgemm_pack_quantized_matrix(const at::Tensor & input, int64_t K, int64_t N) {
  return at::fbgemm_pack_quantized_matrix(xlatens[0], K, N);
}

at::Tensor AtenIpexTypeDefault::linspace(at::Scalar start, at::Scalar end, int64_t steps, const at::TensorOptions & options) {
  at::TensorOptions o_options = options.device(at::DeviceType::CPU);
  return at::linspace(start, end, steps, o_options);
}

at::Tensor & AtenIpexTypeDefault::linspace_out(at::Tensor & out, at::Scalar start, at::Scalar end, int64_t steps) {
  return at::linspace_out(xlatens[0], start, end, steps);
}

at::Tensor AtenIpexTypeDefault::log(const at::Tensor & self) {
  return at::log(xlatens[0]);
}

at::Tensor & AtenIpexTypeDefault::log_(at::Tensor & self) {
  return at::log_(xlatens[0]);
}

at::Tensor & AtenIpexTypeDefault::log_out(at::Tensor & out, const at::Tensor & self) {
  auto log_out_tmp = AtenXlaType::log(self);
  out.unsafeGetTensorImpl()->shallow_copy_from(log_out_tmp.getIntrusivePtr());
  return out;
}

at::Tensor AtenIpexTypeDefault::log10(const at::Tensor & self) {
  return at::log10(xlatens[0]);
}

at::Tensor & AtenIpexTypeDefault::log10_(at::Tensor & self) {
  return at::log10_(xlatens[0]);
}

at::Tensor & AtenIpexTypeDefault::log10_out(at::Tensor & out, const at::Tensor & self) {
  return at::log10_out(xlatens[0], xlatens[1]);
}

at::Tensor AtenIpexTypeDefault::log1p(const at::Tensor & self) {
  return at::log1p(xlatens[0]);
}

at::Tensor & AtenIpexTypeDefault::log1p_(at::Tensor & self) {
  return at::log1p_(xlatens[0]);
}

at::Tensor & AtenIpexTypeDefault::log1p_out(at::Tensor & out, const at::Tensor & self) {
  return at::log1p_out(xlatens[0], xlatens[1]);
}

at::Tensor AtenIpexTypeDefault::log2(const at::Tensor & self) {
  return at::log2(xlatens[0]);
}

at::Tensor & AtenIpexTypeDefault::log2_(at::Tensor & self) {
  return at::log2_(xlatens[0]);
}

at::Tensor & AtenIpexTypeDefault::log2_out(at::Tensor & out, const at::Tensor & self) {
  return at::log2_out(xlatens[0], xlatens[1]);
}

at::Tensor AtenIpexTypeDefault::logdet(const at::Tensor & self) {
  return at::logdet(xlatens[0]);
}

at::Tensor AtenIpexTypeDefault::logspace(at::Scalar start, at::Scalar end, int64_t steps, double base, const at::TensorOptions & options) {
  at::TensorOptions o_options = options.device(at::DeviceType::CPU);
  return at::logspace(start, end, steps, base, o_options);
}

at::Tensor & AtenIpexTypeDefault::logspace_out(at::Tensor & out, at::Scalar start, at::Scalar end, int64_t steps, double base) {
  return at::logspace_out(xlatens[0], start, end, steps, base);
}

at::Tensor AtenIpexTypeDefault::log_softmax(const at::Tensor & self, int64_t dim, c10::optional<at::ScalarType> dtype) {
  return at::log_softmax(xlatens[0], dim, dtype);
}

at::Tensor AtenIpexTypeDefault::_log_softmax(const at::Tensor & self, int64_t dim, bool half_to_float) {
  return at::_log_softmax(xlatens[0], dim, half_to_float);
}

at::Tensor AtenIpexTypeDefault::_log_softmax_backward_data(const at::Tensor & grad_output, const at::Tensor & output, int64_t dim, const at::Tensor & self) {
  return at::_log_softmax_backward_data(xlatens[0], xlatens[1], dim, xlatens[2]);
}

at::Tensor AtenIpexTypeDefault::logsumexp(const at::Tensor & self, at::IntArrayRef dim, bool keepdim) {
  return at::logsumexp(xlatens[0], dim, keepdim);
}

at::Tensor & AtenIpexTypeDefault::logsumexp_out(at::Tensor & out, const at::Tensor & self, at::IntArrayRef dim, bool keepdim) {
  return at::logsumexp_out(xlatens[0], xlatens[1], dim, keepdim);
}

at::Tensor AtenIpexTypeDefault::margin_ranking_loss(const at::Tensor & input1, const at::Tensor & input2, const at::Tensor & target, double margin, int64_t reduction) {
  return at::margin_ranking_loss(xlatens[0], xlatens[1], xlatens[2], margin, reduction);
}

at::Tensor AtenIpexTypeDefault::matmul(const at::Tensor & self, const at::Tensor & other) {
  return at::matmul(xlatens[0], xlatens[1]);
}

at::Tensor & AtenIpexTypeDefault::matmul_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & other) {
  return at::matmul_out(xlatens[0], xlatens[1], xlatens[2]);
}

at::Tensor AtenIpexTypeDefault::matrix_rank(const at::Tensor & self, double tol, bool symmetric) {
  return at::matrix_rank(xlatens[0], tol, symmetric);
}

at::Tensor AtenIpexTypeDefault::matrix_rank(const at::Tensor & self, bool symmetric) {
  return at::matrix_rank(xlatens[0], symmetric);
}

at::Tensor AtenIpexTypeDefault::matrix_power(const at::Tensor & self, int64_t n) {
  return at::matrix_power(xlatens[0], n);
}

std::tuple<at::Tensor,at::Tensor> AtenIpexTypeDefault::max(const at::Tensor & self, int64_t dim, bool keepdim) {
  return at::max(xlatens[0], dim, keepdim);
}

std::tuple<at::Tensor &,at::Tensor &> AtenIpexTypeDefault::max_out(at::Tensor & max, at::Tensor & max_values, const at::Tensor & self, int64_t dim, bool keepdim) {
  return at::max_out(xlatens[0], xlatens[1], xlatens[2], dim, keepdim);
}

at::Tensor AtenIpexTypeDefault::max_values(const at::Tensor & self, at::IntArrayRef dim, bool keepdim) {
  return at::max_values(xlatens[0], dim, keepdim);
}

std::tuple<at::Tensor,at::Tensor> AtenIpexTypeDefault::max_pool1d_with_indices(const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef dilation, bool ceil_mode) {
  return at::max_pool1d_with_indices(xlatens[0], kernel_size, stride, padding, dilation, ceil_mode);
}

at::Tensor AtenIpexTypeDefault::max_pool1d(const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef dilation, bool ceil_mode) {
  return at::max_pool1d(xlatens[0], kernel_size, stride, padding, dilation, ceil_mode);
}

at::Tensor AtenIpexTypeDefault::max_pool2d(const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef dilation, bool ceil_mode) {
  return at::max_pool2d(xlatens[0], kernel_size, stride, padding, dilation, ceil_mode);
}

at::Tensor AtenIpexTypeDefault::mkldnn_max_pool2d(const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef dilation, bool ceil_mode) {
  return at::mkldnn_max_pool2d(xlatens[0], kernel_size, stride, padding, dilation, ceil_mode);
}

at::Tensor AtenIpexTypeDefault::quantized_max_pool2d(const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef dilation) {
  return at::quantized_max_pool2d(xlatens[0], kernel_size, stride, padding, dilation);
}

at::Tensor AtenIpexTypeDefault::max_pool3d(const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef dilation, bool ceil_mode) {
  return at::max_pool3d(xlatens[0], kernel_size, stride, padding, dilation, ceil_mode);
}

at::Tensor AtenIpexTypeDefault::mean(const at::Tensor & self, c10::optional<at::ScalarType> dtype) {
  return at::mean(xlatens[0], dtype);
}

at::Tensor AtenIpexTypeDefault::mean(const at::Tensor & self, at::IntArrayRef dim, bool keepdim, c10::optional<at::ScalarType> dtype) {
  return at::mean(xlatens[0], dim, keepdim, dtype);
}

at::Tensor & AtenIpexTypeDefault::mean_out(at::Tensor & out, const at::Tensor & self, at::IntArrayRef dim, bool keepdim, c10::optional<at::ScalarType> dtype) {
  return at::mean_out(xlatens[0], xlatens[1], dim, keepdim, dtype);
}

std::tuple<at::Tensor,at::Tensor> AtenIpexTypeDefault::median(const at::Tensor & self, int64_t dim, bool keepdim) {
  return at::median(xlatens[0], dim, keepdim);
}

std::tuple<at::Tensor &,at::Tensor &> AtenIpexTypeDefault::median_out(at::Tensor & values, at::Tensor & indices, const at::Tensor & self, int64_t dim, bool keepdim) {
  return at::median_out(xlatens[0], xlatens[1], xlatens[2], dim, keepdim);
}

std::tuple<at::Tensor,at::Tensor> AtenIpexTypeDefault::min(const at::Tensor & self, int64_t dim, bool keepdim) {
  return at::min(xlatens[0], dim, keepdim);
}

std::tuple<at::Tensor &,at::Tensor &> AtenIpexTypeDefault::min_out(at::Tensor & min, at::Tensor & min_indices, const at::Tensor & self, int64_t dim, bool keepdim) {
  return at::min_out(xlatens[0], xlatens[1], xlatens[2], dim, keepdim);
}

at::Tensor AtenIpexTypeDefault::min_values(const at::Tensor & self, at::IntArrayRef dim, bool keepdim) {
  return at::min_values(xlatens[0], dim, keepdim);
}

at::Tensor AtenIpexTypeDefault::mkldnn_convolution_forward(const at::Tensor & self, const at::Tensor & weight, const at::Tensor & bias, at::IntArrayRef padding, at::IntArrayRef stride, at::IntArrayRef dilation, int64_t groups) {
  return at::mkldnn_convolution_forward(xlatens[0], xlatens[1], xlatens[2], padding, stride, dilation, groups);
}

at::Tensor AtenIpexTypeDefault::mkldnn_convolution_backward_input(at::IntArrayRef self_size, const at::Tensor & grad_output, const at::Tensor & weight, at::IntArrayRef padding, at::IntArrayRef stride, at::IntArrayRef dilation, int64_t groups, bool bias_defined) {
  return at::mkldnn_convolution_backward_input(self_size, xlatens[0], xlatens[1], padding, stride, dilation, groups, bias_defined);
}

std::tuple<at::Tensor,at::Tensor> AtenIpexTypeDefault::mkldnn_convolution_backward_weights(at::IntArrayRef weight_size, const at::Tensor & grad_output, const at::Tensor & self, at::IntArrayRef padding, at::IntArrayRef stride, at::IntArrayRef dilation, int64_t groups, bool bias_defined) {
  return at::mkldnn_convolution_backward_weights(weight_size, xlatens[0], xlatens[1], padding, stride, dilation, groups, bias_defined);
}

std::tuple<at::Tensor,at::Tensor,at::Tensor> AtenIpexTypeDefault::mkldnn_convolution_backward(const at::Tensor & self, const at::Tensor & grad_output, const at::Tensor & weight, at::IntArrayRef padding, at::IntArrayRef stride, at::IntArrayRef dilation, int64_t groups, std::array<bool,3> output_mask) {
  return at::mkldnn_convolution_backward(xlatens[0], xlatens[1], xlatens[2], padding, stride, dilation, groups, output_mask);
}

at::Tensor AtenIpexTypeDefault::sycl_convolution(const at::Tensor & self, const at::Tensor & weight, const at::Tensor & bias, at::IntArrayRef padding, at::IntArrayRef stride, at::IntArrayRef dilation, int64_t groups) {
  return at::sycl_convolution(xlatens[0], xlatens[1], xlatens[2], padding, stride, dilation, groups);
}

at::Tensor AtenIpexTypeDefault::sycl_convolution_backward_input(at::IntArrayRef self_size, const at::Tensor & grad_output, const at::Tensor & weight, at::IntArrayRef padding, at::IntArrayRef stride, at::IntArrayRef dilation, int64_t groups, bool bias_defined) {
  return at::sycl_convolution_backward_input(self_size, xlatens[0], xlatens[1], padding, stride, dilation, groups, bias_defined);
}

std::tuple<at::Tensor,at::Tensor> AtenIpexTypeDefault::sycl_convolution_backward_weights(at::IntArrayRef weight_size, const at::Tensor & grad_output, const at::Tensor & self, at::IntArrayRef padding, at::IntArrayRef stride, at::IntArrayRef dilation, int64_t groups, bool bias_defined) {
  return at::sycl_convolution_backward_weights(weight_size, xlatens[0], xlatens[1], padding, stride, dilation, groups, bias_defined);
}

std::tuple<at::Tensor,at::Tensor,at::Tensor> AtenIpexTypeDefault::sycl_convolution_backward(const at::Tensor & self, const at::Tensor & grad_output, const at::Tensor & weight, at::IntArrayRef padding, at::IntArrayRef stride, at::IntArrayRef dilation, int64_t groups, std::array<bool,3> output_mask) {
  return at::sycl_convolution_backward(xlatens[0], xlatens[1], xlatens[2], padding, stride, dilation, groups, output_mask);
}

std::tuple<at::Tensor,at::Tensor,at::Tensor> AtenIpexTypeDefault::miopen_batch_norm(const at::Tensor & input, const at::Tensor & weight, const at::Tensor & bias, const at::Tensor & running_mean, const at::Tensor & running_var, bool training, double exponential_average_factor, double epsilon) {
  return at::miopen_batch_norm(xlatens[0], xlatens[1], xlatens[2], xlatens[3], xlatens[4], training, exponential_average_factor, epsilon);
}

std::tuple<at::Tensor,at::Tensor,at::Tensor> AtenIpexTypeDefault::miopen_batch_norm_backward(const at::Tensor & input, const at::Tensor & grad_output, const at::Tensor & weight, const at::Tensor & running_mean, const at::Tensor & running_var, const at::Tensor & save_mean, const at::Tensor & save_var, double epsilon) {
  return at::miopen_batch_norm_backward(xlatens[0], xlatens[1], xlatens[2], xlatens[3], xlatens[4], xlatens[5], xlatens[6], epsilon);
}

at::Tensor AtenIpexTypeDefault::miopen_convolution(const at::Tensor & self, const at::Tensor & weight, const at::Tensor & bias, at::IntArrayRef padding, at::IntArrayRef stride, at::IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic) {
  return at::miopen_convolution(xlatens[0], xlatens[1], xlatens[2], padding, stride, dilation, groups, benchmark, deterministic);
}

at::Tensor AtenIpexTypeDefault::miopen_convolution_backward_input(at::IntArrayRef self_size, const at::Tensor & grad_output, const at::Tensor & weight, at::IntArrayRef padding, at::IntArrayRef stride, at::IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic) {
  return at::miopen_convolution_backward_input(self_size, xlatens[0], xlatens[1], padding, stride, dilation, groups, benchmark, deterministic);
}

std::tuple<at::Tensor,at::Tensor,at::Tensor> AtenIpexTypeDefault::miopen_convolution_backward(const at::Tensor & self, const at::Tensor & grad_output, const at::Tensor & weight, at::IntArrayRef padding, at::IntArrayRef stride, at::IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic, std::array<bool,3> output_mask) {
  return at::miopen_convolution_backward(xlatens[0], xlatens[1], xlatens[2], padding, stride, dilation, groups, benchmark, deterministic, output_mask);
}

at::Tensor AtenIpexTypeDefault::miopen_convolution_backward_bias(const at::Tensor & grad_output) {
  return at::miopen_convolution_backward_bias(xlatens[0]);
}

at::Tensor AtenIpexTypeDefault::miopen_convolution_backward_weight(at::IntArrayRef weight_size, const at::Tensor & grad_output, const at::Tensor & self, at::IntArrayRef padding, at::IntArrayRef stride, at::IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic) {
  return at::miopen_convolution_backward_weight(weight_size, xlatens[0], xlatens[1], padding, stride, dilation, groups, benchmark, deterministic);
}

at::Tensor AtenIpexTypeDefault::miopen_convolution_transpose(const at::Tensor & self, const at::Tensor & weight, const at::Tensor & bias, at::IntArrayRef padding, at::IntArrayRef output_padding, at::IntArrayRef stride, at::IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic) {
  return at::miopen_convolution_transpose(xlatens[0], xlatens[1], xlatens[2], padding, output_padding, stride, dilation, groups, benchmark, deterministic);
}

std::tuple<at::Tensor,at::Tensor,at::Tensor> AtenIpexTypeDefault::miopen_convolution_transpose_backward(const at::Tensor & self, const at::Tensor & grad_output, const at::Tensor & weight, at::IntArrayRef padding, at::IntArrayRef output_padding, at::IntArrayRef stride, at::IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic, std::array<bool,3> output_mask) {
  return at::miopen_convolution_transpose_backward(xlatens[0], xlatens[1], xlatens[2], padding, output_padding, stride, dilation, groups, benchmark, deterministic, output_mask);
}

at::Tensor AtenIpexTypeDefault::miopen_convolution_transpose_backward_input(const at::Tensor & grad_output, const at::Tensor & weight, at::IntArrayRef padding, at::IntArrayRef stride, at::IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic) {
  return at::miopen_convolution_transpose_backward_input(xlatens[0], xlatens[1], padding, stride, dilation, groups, benchmark, deterministic);
}

at::Tensor AtenIpexTypeDefault::miopen_convolution_transpose_backward_weight(at::IntArrayRef weight_size, const at::Tensor & grad_output, const at::Tensor & self, at::IntArrayRef padding, at::IntArrayRef stride, at::IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic) {
  return at::miopen_convolution_transpose_backward_weight(weight_size, xlatens[0], xlatens[1], padding, stride, dilation, groups, benchmark, deterministic);
}

at::Tensor AtenIpexTypeDefault::miopen_depthwise_convolution(const at::Tensor & self, const at::Tensor & weight, const at::Tensor & bias, at::IntArrayRef padding, at::IntArrayRef stride, at::IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic) {
  return at::miopen_depthwise_convolution(xlatens[0], xlatens[1], xlatens[2], padding, stride, dilation, groups, benchmark, deterministic);
}

at::Tensor AtenIpexTypeDefault::miopen_depthwise_convolution_backward_input(at::IntArrayRef self_size, const at::Tensor & grad_output, const at::Tensor & weight, at::IntArrayRef padding, at::IntArrayRef stride, at::IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic) {
  return at::miopen_depthwise_convolution_backward_input(self_size, xlatens[0], xlatens[1], padding, stride, dilation, groups, benchmark, deterministic);
}

std::tuple<at::Tensor,at::Tensor,at::Tensor> AtenIpexTypeDefault::miopen_depthwise_convolution_backward(const at::Tensor & self, const at::Tensor & grad_output, const at::Tensor & weight, at::IntArrayRef padding, at::IntArrayRef stride, at::IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic, std::array<bool,3> output_mask) {
  return at::miopen_depthwise_convolution_backward(xlatens[0], xlatens[1], xlatens[2], padding, stride, dilation, groups, benchmark, deterministic, output_mask);
}

at::Tensor AtenIpexTypeDefault::miopen_depthwise_convolution_backward_weight(at::IntArrayRef weight_size, const at::Tensor & grad_output, const at::Tensor & self, at::IntArrayRef padding, at::IntArrayRef stride, at::IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic) {
  return at::miopen_depthwise_convolution_backward_weight(weight_size, xlatens[0], xlatens[1], padding, stride, dilation, groups, benchmark, deterministic);
}

std::tuple<at::Tensor,at::Tensor,at::Tensor,at::Tensor,at::Tensor> AtenIpexTypeDefault::miopen_rnn(const at::Tensor & input, at::TensorList weight, int64_t weight_stride0, const at::Tensor & hx, const at::Tensor & cx, int64_t mode, int64_t hidden_size, int64_t num_layers, bool batch_first, double dropout, bool train, bool bidirectional, at::IntArrayRef batch_sizes, const at::Tensor & dropout_state) {
  auto l_weight = bridge::XlaCreateTensorList(weight);
  return at::miopen_rnn(xlatens[0], l_weight, weight_stride0, xlatens[1], xlatens[2], mode, hidden_size, num_layers, batch_first, dropout, train, bidirectional, batch_sizes, xlatens[3]);
}

std::tuple<at::Tensor,at::Tensor,at::Tensor,std::vector<at::Tensor>> AtenIpexTypeDefault::miopen_rnn_backward(const at::Tensor & input, at::TensorList weight, int64_t weight_stride0, const at::Tensor & weight_buf, const at::Tensor & hx, const at::Tensor & cx, const at::Tensor & output, const at::Tensor & grad_output, const at::Tensor & grad_hy, const at::Tensor & grad_cy, int64_t mode, int64_t hidden_size, int64_t num_layers, bool batch_first, double dropout, bool train, bool bidirectional, at::IntArrayRef batch_sizes, const at::Tensor & dropout_state, const at::Tensor & reserve, std::array<bool,4> output_mask) {
  auto l_weight = bridge::XlaCreateTensorList(weight);
  return at::miopen_rnn_backward(xlatens[0], l_weight, weight_stride0, xlatens[1], xlatens[2], xlatens[3], xlatens[4], xlatens[5], xlatens[6], xlatens[7], mode, hidden_size, num_layers, batch_first, dropout, train, bidirectional, batch_sizes, xlatens[8], xlatens[9], output_mask);
}

at::Tensor AtenIpexTypeDefault::mm(const at::Tensor & self, const at::Tensor & mat2) {
  return at::mm(xlatens[0], xlatens[1]);
}

at::Tensor & AtenIpexTypeDefault::mm_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & mat2) {
  return at::mm_out(xlatens[0], xlatens[1], xlatens[2]);
}

at::Tensor AtenIpexTypeDefault::_sparse_mm(const at::Tensor & sparse, const at::Tensor & dense) {
  return at::_sparse_mm(xlatens[0], xlatens[1]);
}

std::tuple<at::Tensor,at::Tensor> AtenIpexTypeDefault::mode(const at::Tensor & self, int64_t dim, bool keepdim) {
  return at::mode(xlatens[0], dim, keepdim);
}

std::tuple<at::Tensor &,at::Tensor &> AtenIpexTypeDefault::mode_out(at::Tensor & values, at::Tensor & indices, const at::Tensor & self, int64_t dim, bool keepdim) {
  return at::mode_out(xlatens[0], xlatens[1], xlatens[2], dim, keepdim);
}

at::Tensor AtenIpexTypeDefault::mul(const at::Tensor & self, const at::Tensor & other) {
  return at::mul(xlatens[0], xlatens[1]);
}

at::Tensor & AtenIpexTypeDefault::mul_(at::Tensor & self, const at::Tensor & other) {
  return xlatens[0].mul_(xlatens[1]);
}

at::Tensor & AtenIpexTypeDefault::mul_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & other) {
  return at::mul_out(xlatens[0], xlatens[1], xlatens[2]);
}

at::Tensor AtenIpexTypeDefault::mul(const at::Tensor & self, at::Scalar other) {
  return at::mul(xlatens[0], other);
}

at::Tensor & AtenIpexTypeDefault::mul_(at::Tensor & self, at::Scalar other) {
  return xlatens[0].mul_(other);
}

at::Tensor AtenIpexTypeDefault::mv(const at::Tensor & self, const at::Tensor & vec) {
  return at::mv(xlatens[0], xlatens[1]);
}

at::Tensor & AtenIpexTypeDefault::mv_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & vec) {
  return at::mv_out(xlatens[0], xlatens[1], xlatens[2]);
}

at::Tensor AtenIpexTypeDefault::mvlgamma(const at::Tensor & self, int64_t p) {
  return at::mvlgamma(xlatens[0], p);
}

at::Tensor & AtenIpexTypeDefault::mvlgamma_(at::Tensor & self, int64_t p) {
  return xlatens[0].mvlgamma_(p);
}

at::Tensor AtenIpexTypeDefault::narrow_copy(const at::Tensor & self, int64_t dim, int64_t start, int64_t length) {
  return xlatens[0].narrow_copy(dim, start, length);
}

at::Tensor AtenIpexTypeDefault::narrow(const at::Tensor & self, int64_t dim, int64_t start, int64_t length) {
  return at::narrow(xlatens[0], dim, start, length);
}

std::tuple<at::Tensor,at::Tensor,at::Tensor> AtenIpexTypeDefault::native_batch_norm(const at::Tensor & input, const at::Tensor & weight, const at::Tensor & bias, const at::Tensor & running_mean, const at::Tensor & running_var, bool training, double momentum, double eps) {
  return at::native_batch_norm(xlatens[0], xlatens[1], xlatens[2], xlatens[3], xlatens[4], training, momentum, eps);
}

std::tuple<at::Tensor,at::Tensor> AtenIpexTypeDefault::batch_norm_stats(const at::Tensor & input, double eps) {
  return at::batch_norm_stats(xlatens[0], eps);
}

at::Tensor AtenIpexTypeDefault::batch_norm_elemt(const at::Tensor & input, const at::Tensor & weight, const at::Tensor & bias, const at::Tensor & mean, const at::Tensor & invstd, double eps) {
  return at::batch_norm_elemt(xlatens[0], xlatens[1], xlatens[2], xlatens[3], xlatens[4], eps);
}

std::tuple<at::Tensor,at::Tensor> AtenIpexTypeDefault::batch_norm_gather_stats(const at::Tensor & input, const at::Tensor & mean, const at::Tensor & invstd, const at::Tensor & running_mean, const at::Tensor & running_var, double momentum, double eps, int64_t count) {
  return at::batch_norm_gather_stats(xlatens[0], xlatens[1], xlatens[2], xlatens[3], xlatens[4], momentum, eps, count);
}

std::tuple<at::Tensor,at::Tensor> AtenIpexTypeDefault::batch_norm_gather_stats_with_counts(const at::Tensor & input, const at::Tensor & mean, const at::Tensor & invstd, const at::Tensor & running_mean, const at::Tensor & running_var, double momentum, double eps, at::IntArrayRef counts) {
  return at::batch_norm_gather_stats_with_counts(xlatens[0], xlatens[1], xlatens[2], xlatens[3], xlatens[4], momentum, eps, counts);
}

std::tuple<at::Tensor,at::Tensor,at::Tensor> AtenIpexTypeDefault::native_batch_norm_backward(const at::Tensor & grad_out, const at::Tensor & input, const at::Tensor & weight, const at::Tensor & running_mean, const at::Tensor & running_var, const at::Tensor & save_mean, const at::Tensor & save_invstd, bool train, double eps, std::array<bool,3> output_mask) {
  return at::native_batch_norm_backward(xlatens[0], xlatens[1], xlatens[2], xlatens[3], xlatens[4], xlatens[5], xlatens[6], train, eps, output_mask);
}

std::tuple<at::Tensor,at::Tensor,at::Tensor,at::Tensor> AtenIpexTypeDefault::batch_norm_backward_reduce(const at::Tensor & grad_out, const at::Tensor & input, const at::Tensor & mean, const at::Tensor & invstd, bool input_g, bool weight_g, bool bias_g) {
  return at::batch_norm_backward_reduce(xlatens[0], xlatens[1], xlatens[2], xlatens[3], input_g, weight_g, bias_g);
}

at::Tensor AtenIpexTypeDefault::batch_norm_backward_elemt(const at::Tensor & grad_out, const at::Tensor & input, const at::Tensor & mean, const at::Tensor & invstd, const at::Tensor & weight, const at::Tensor & mean_dy, const at::Tensor & mean_dy_xmu) {
  return at::batch_norm_backward_elemt(xlatens[0], xlatens[1], xlatens[2], xlatens[3], xlatens[4], xlatens[5], xlatens[6]);
}

std::tuple<at::Tensor,at::Tensor> AtenIpexTypeDefault::batch_norm_update_stats(const at::Tensor & input, const at::Tensor & running_mean, const at::Tensor & running_var, double momentum) {
  return at::batch_norm_update_stats(xlatens[0], xlatens[1], xlatens[2], momentum);
}

at::Tensor AtenIpexTypeDefault::_nnpack_spatial_convolution(const at::Tensor & input, const at::Tensor & weight, const at::Tensor & bias, at::IntArrayRef padding) {
  return at::_nnpack_spatial_convolution(xlatens[0], xlatens[1], xlatens[2], padding);
}

std::tuple<at::Tensor,at::Tensor,at::Tensor> AtenIpexTypeDefault::_nnpack_spatial_convolution_backward(const at::Tensor & input, const at::Tensor & grad_output, const at::Tensor & weight, at::IntArrayRef padding, std::array<bool,3> output_mask) {
  return at::_nnpack_spatial_convolution_backward(xlatens[0], xlatens[1], xlatens[2], padding, output_mask);
}

at::Tensor AtenIpexTypeDefault::_nnpack_spatial_convolution_backward_input(const at::Tensor & input, const at::Tensor & grad_output, const at::Tensor & weight, at::IntArrayRef padding) {
  return at::_nnpack_spatial_convolution_backward_input(xlatens[0], xlatens[1], xlatens[2], padding);
}

at::Tensor AtenIpexTypeDefault::_nnpack_spatial_convolution_backward_weight(const at::Tensor & input, at::IntArrayRef weightsize, const at::Tensor & grad_output, at::IntArrayRef padding) {
  return at::_nnpack_spatial_convolution_backward_weight(xlatens[0], weightsize, xlatens[1], padding);
}

at::Tensor & AtenIpexTypeDefault::ones_out(at::Tensor & out, at::IntArrayRef size) {
  return at::ones_out(xlatens[0], size);
}

at::Tensor AtenIpexTypeDefault::pairwise_distance(const at::Tensor & x1, const at::Tensor & x2, double p, double eps, bool keepdim) {
  return at::pairwise_distance(xlatens[0], xlatens[1], p, eps, keepdim);
}

at::Tensor AtenIpexTypeDefault::cdist(const at::Tensor & x1, const at::Tensor & x2, double p) {
  return at::cdist(xlatens[0], xlatens[1], p);
}

at::Tensor AtenIpexTypeDefault::_cdist_backward(const at::Tensor & grad, const at::Tensor & x1, const at::Tensor & x2, double p, const at::Tensor & cdist) {
  return at::_cdist_backward(xlatens[0], xlatens[1], xlatens[2], p, xlatens[3]);
}

at::Tensor AtenIpexTypeDefault::pdist(const at::Tensor & self, double p) {
  return at::pdist(xlatens[0], p);
}

at::Tensor AtenIpexTypeDefault::_pdist_forward(const at::Tensor & self, double p) {
  return at::_pdist_forward(xlatens[0], p);
}

at::Tensor AtenIpexTypeDefault::_pdist_backward(const at::Tensor & grad, const at::Tensor & self, double p, const at::Tensor & pdist) {
  return at::_pdist_backward(xlatens[0], xlatens[1], p, xlatens[2]);
}

at::Tensor AtenIpexTypeDefault::cosine_similarity(const at::Tensor & x1, const at::Tensor & x2, int64_t dim, double eps) {
  return at::cosine_similarity(xlatens[0], xlatens[1], dim, eps);
}

at::Tensor AtenIpexTypeDefault::permute(const at::Tensor & self, at::IntArrayRef dims) {
  return xlatens[0].permute(dims);
}

at::Tensor AtenIpexTypeDefault::numpy_T(const at::Tensor & self) {
  return xlatens[0].numpy_T();
}

at::Tensor AtenIpexTypeDefault::pixel_shuffle(const at::Tensor & self, int64_t upscale_factor) {
  return at::pixel_shuffle(xlatens[0], upscale_factor);
}

bool AtenIpexTypeDefault::is_pinned(const at::Tensor & self) {
  return xlatens[0].is_pinned();
}

at::Tensor AtenIpexTypeDefault::pin_memory(const at::Tensor & self) {
  return xlatens[0].pin_memory();
}

at::Tensor AtenIpexTypeDefault::pinverse(const at::Tensor & self, double rcond) {
  return at::pinverse(xlatens[0], rcond);
}

at::Tensor AtenIpexTypeDefault::poisson_nll_loss(const at::Tensor & input, const at::Tensor & target, bool log_input, bool full, double eps, int64_t reduction) {
  return at::poisson_nll_loss(xlatens[0], xlatens[1], log_input, full, eps, reduction);
}

at::Tensor AtenIpexTypeDefault::scalar_tensor(at::Scalar s, const at::TensorOptions & options) {
  at::TensorOptions o_options = options.device(at::DeviceType::CPU);
  return at::scalar_tensor(s, o_options);
}

at::Tensor AtenIpexTypeDefault::rand(at::IntArrayRef size, const at::TensorOptions & options) {
  at::TensorOptions o_options = options.device(at::DeviceType::CPU);
  return at::rand(size, o_options);
}

at::Tensor AtenIpexTypeDefault::rand(at::IntArrayRef size, at::Generator * generator, const at::TensorOptions & options) {
  at::TensorOptions o_options = options.device(at::DeviceType::CPU);
  return at::rand(size, generator, o_options);
}

at::Tensor & AtenIpexTypeDefault::rand_out(at::Tensor & out, at::IntArrayRef size) {
  return at::rand_out(xlatens[0], size);
}

at::Tensor & AtenIpexTypeDefault::rand_out(at::Tensor & out, at::IntArrayRef size, at::Generator * generator) {
  return at::rand_out(xlatens[0], size, generator);
}

at::Tensor AtenIpexTypeDefault::rand_like(const at::Tensor & self) {
  return at::rand_like(xlatens[0]);
}

at::Tensor AtenIpexTypeDefault::rand_like(const at::Tensor & self, const at::TensorOptions & options) {
  at::TensorOptions o_options = options.device(at::DeviceType::CPU);
  return at::rand_like(xlatens[0], o_options);
}

at::Tensor AtenIpexTypeDefault::randint(int64_t high, at::IntArrayRef size, const at::TensorOptions & options) {
  at::TensorOptions o_options = options.device(at::DeviceType::CPU);
  return at::randint(high, size, o_options);
}

at::Tensor AtenIpexTypeDefault::randint(int64_t high, at::IntArrayRef size, at::Generator * generator, const at::TensorOptions & options) {
  at::TensorOptions o_options = options.device(at::DeviceType::CPU);
  return at::randint(high, size, generator, o_options);
}

at::Tensor AtenIpexTypeDefault::randint(int64_t low, int64_t high, at::IntArrayRef size, const at::TensorOptions & options) {
  at::TensorOptions o_options = options.device(at::DeviceType::CPU);
  return at::randint(low, high, size, o_options);
}

at::Tensor AtenIpexTypeDefault::randint(int64_t low, int64_t high, at::IntArrayRef size, at::Generator * generator, const at::TensorOptions & options) {
  at::TensorOptions o_options = options.device(at::DeviceType::CPU);
  return at::randint(low, high, size, generator, o_options);
}

at::Tensor & AtenIpexTypeDefault::randint_out(at::Tensor & out, int64_t high, at::IntArrayRef size) {
  return at::randint_out(xlatens[0], high, size);
}

at::Tensor & AtenIpexTypeDefault::randint_out(at::Tensor & out, int64_t high, at::IntArrayRef size, at::Generator * generator) {
  return at::randint_out(xlatens[0], high, size, generator);
}

at::Tensor & AtenIpexTypeDefault::randint_out(at::Tensor & out, int64_t low, int64_t high, at::IntArrayRef size) {
  return at::randint_out(xlatens[0], low, high, size);
}

at::Tensor & AtenIpexTypeDefault::randint_out(at::Tensor & out, int64_t low, int64_t high, at::IntArrayRef size, at::Generator * generator) {
  return at::randint_out(xlatens[0], low, high, size, generator);
}

at::Tensor AtenIpexTypeDefault::randint_like(const at::Tensor & self, int64_t high) {
  return at::randint_like(xlatens[0], high);
}

at::Tensor AtenIpexTypeDefault::randint_like(const at::Tensor & self, int64_t low, int64_t high) {
  return at::randint_like(xlatens[0], low, high);
}

at::Tensor AtenIpexTypeDefault::randint_like(const at::Tensor & self, int64_t high, const at::TensorOptions & options) {
  at::TensorOptions o_options = options.device(at::DeviceType::CPU);
  return at::randint_like(xlatens[0], high, o_options);
}

at::Tensor AtenIpexTypeDefault::randint_like(const at::Tensor & self, int64_t low, int64_t high, const at::TensorOptions & options) {
  at::TensorOptions o_options = options.device(at::DeviceType::CPU);
  return at::randint_like(xlatens[0], low, high, o_options);
}

at::Tensor AtenIpexTypeDefault::randn(at::IntArrayRef size, const at::TensorOptions & options) {
  at::TensorOptions o_options = options.device(at::DeviceType::CPU);
  return at::randn(size, o_options);
}

at::Tensor AtenIpexTypeDefault::randn(at::IntArrayRef size, at::Generator * generator, const at::TensorOptions & options) {
  at::TensorOptions o_options = options.device(at::DeviceType::CPU);
  return at::randn(size, generator, o_options);
}

at::Tensor & AtenIpexTypeDefault::randn_out(at::Tensor & out, at::IntArrayRef size) {
  return at::randn_out(xlatens[0], size);
}

at::Tensor & AtenIpexTypeDefault::randn_out(at::Tensor & out, at::IntArrayRef size, at::Generator * generator) {
  return at::randn_out(xlatens[0], size, generator);
}

at::Tensor AtenIpexTypeDefault::randn_like(const at::Tensor & self) {
  return at::randn_like(xlatens[0]);
}

at::Tensor AtenIpexTypeDefault::randn_like(const at::Tensor & self, const at::TensorOptions & options) {
  at::TensorOptions o_options = options.device(at::DeviceType::CPU);
  return at::randn_like(xlatens[0], o_options);
}

at::Tensor AtenIpexTypeDefault::randperm(int64_t n, const at::TensorOptions & options) {
  at::TensorOptions o_options = options.device(at::DeviceType::CPU);
  return at::randperm(n, o_options);
}

at::Tensor AtenIpexTypeDefault::randperm(int64_t n, at::Generator * generator, const at::TensorOptions & options) {
  at::TensorOptions o_options = options.device(at::DeviceType::CPU);
  return at::randperm(n, generator, o_options);
}

at::Tensor & AtenIpexTypeDefault::randperm_out(at::Tensor & out, int64_t n) {
  return at::randperm_out(xlatens[0], n);
}

at::Tensor & AtenIpexTypeDefault::randperm_out(at::Tensor & out, int64_t n, at::Generator * generator) {
  return at::randperm_out(xlatens[0], n, generator);
}

at::Tensor AtenIpexTypeDefault::range(at::Scalar start, at::Scalar end, at::Scalar step, const at::TensorOptions & options) {
  return at::range(start, end, step, options);
}

at::Tensor AtenIpexTypeDefault::range(at::Scalar start, at::Scalar end, const at::TensorOptions & options) {
  return at::range(start, end, options);
}

at::Tensor & AtenIpexTypeDefault::range_out(at::Tensor & out, at::Scalar start, at::Scalar end, at::Scalar step) {
  return at::range_out(xlatens[0], start, end, step);
}

at::Tensor AtenIpexTypeDefault::reciprocal(const at::Tensor & self) {
  return at::reciprocal(xlatens[0]);
}

at::Tensor & AtenIpexTypeDefault::reciprocal_(at::Tensor & self) {
  return at::reciprocal_(xlatens[0]);
}

at::Tensor & AtenIpexTypeDefault::reciprocal_out(at::Tensor & out, const at::Tensor & self) {
  return at::reciprocal_out(xlatens[0], xlatens[1]);
}

at::Tensor AtenIpexTypeDefault::neg(const at::Tensor & self) {
  return at::neg(xlatens[0]);
}

at::Tensor & AtenIpexTypeDefault::neg_(at::Tensor & self) {
  return at::neg_(xlatens[0]);
}

at::Tensor & AtenIpexTypeDefault::neg_out(at::Tensor & out, const at::Tensor & self) {
  return at::neg_out(xlatens[0], xlatens[1]);
}

at::Tensor AtenIpexTypeDefault::repeat(const at::Tensor & self, at::IntArrayRef repeats) {
  return xlatens[0].repeat(repeats);
}

at::Tensor AtenIpexTypeDefault::repeat_interleave(const at::Tensor & repeats) {
  return at::repeat_interleave(xlatens[0]);
}

at::Tensor AtenIpexTypeDefault::repeat_interleave(const at::Tensor & self, const at::Tensor & repeats, c10::optional<int64_t> dim) {
  return at::repeat_interleave(xlatens[0], xlatens[1], dim);
}

at::Tensor AtenIpexTypeDefault::repeat_interleave(const at::Tensor & self, int64_t repeats, c10::optional<int64_t> dim) {
  return at::repeat_interleave(xlatens[0], repeats, dim);
}

at::Tensor AtenIpexTypeDefault::reshape(const at::Tensor & self, at::IntArrayRef shape) {
  return at::reshape(xlatens[0], shape);
}

at::Tensor AtenIpexTypeDefault::_mkldnn_reshape(const at::Tensor & self, at::IntArrayRef shape) {
  return at::_mkldnn_reshape(xlatens[0], shape);
}

at::Tensor AtenIpexTypeDefault::reshape_as(const at::Tensor & self, const at::Tensor & other) {
  return xlatens[0].reshape_as(xlatens[1]);
}

at::Tensor AtenIpexTypeDefault::round(const at::Tensor & self) {
  return at::round(xlatens[0]);
}

at::Tensor & AtenIpexTypeDefault::round_(at::Tensor & self) {
  return at::round_(xlatens[0]);
}

at::Tensor & AtenIpexTypeDefault::round_out(at::Tensor & out, const at::Tensor & self) {
  return at::round_out(xlatens[0], xlatens[1]);
}

at::Tensor AtenIpexTypeDefault::rrelu(const at::Tensor & self, at::Scalar lower, at::Scalar upper, bool training, at::Generator * generator) {
  return at::rrelu(xlatens[0], lower, upper, training, generator);
}

at::Tensor & AtenIpexTypeDefault::rrelu_(at::Tensor & self, at::Scalar lower, at::Scalar upper, bool training, at::Generator * generator) {
  return at::rrelu_(xlatens[0], lower, upper, training, generator);
}

at::Tensor AtenIpexTypeDefault::relu(const at::Tensor & self) {
  return at::relu(xlatens[0]);
}

at::Tensor & AtenIpexTypeDefault::relu_(at::Tensor & self) {
  return at::relu_(xlatens[0]);
}

at::Tensor AtenIpexTypeDefault::prelu(const at::Tensor & self, const at::Tensor & weight) {
  return at::prelu(xlatens[0], xlatens[1]);
}

std::tuple<at::Tensor,at::Tensor> AtenIpexTypeDefault::prelu_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & weight) {
  return at::prelu_backward(xlatens[0], xlatens[1], xlatens[2]);
}

at::Tensor AtenIpexTypeDefault::gelu(const at::Tensor & self) {
  return at::gelu(xlatens[0]);
}

at::Tensor AtenIpexTypeDefault::gelu_backward(const at::Tensor & grad, const at::Tensor & self) {
  return at::gelu_backward(xlatens[0], xlatens[1]);
}

at::Tensor AtenIpexTypeDefault::hardshrink(const at::Tensor & self, at::Scalar lambd) {
  return at::hardshrink(xlatens[0], lambd);
}

at::Tensor AtenIpexTypeDefault::hardshrink_backward(const at::Tensor & grad_out, const at::Tensor & self, at::Scalar lambd) {
  return at::hardshrink_backward(xlatens[0], xlatens[1], lambd);
}

at::Tensor AtenIpexTypeDefault::rsqrt(const at::Tensor & self) {
  return at::rsqrt(xlatens[0]);
}

at::Tensor & AtenIpexTypeDefault::rsqrt_(at::Tensor & self) {
  return at::rsqrt_(xlatens[0]);
}

at::Tensor & AtenIpexTypeDefault::rsqrt_out(at::Tensor & out, const at::Tensor & self) {
  return at::rsqrt_out(xlatens[0], xlatens[1]);
}

at::Tensor AtenIpexTypeDefault::select(const at::Tensor & self, int64_t dim, int64_t index) {
  return at::select(xlatens[0], dim, index);
}

at::Tensor AtenIpexTypeDefault::selu(const at::Tensor & self) {
  return at::selu(xlatens[0]);
}

at::Tensor & AtenIpexTypeDefault::selu_(at::Tensor & self) {
  return at::selu_(xlatens[0]);
}

at::Tensor AtenIpexTypeDefault::celu(const at::Tensor & self, at::Scalar alpha) {
  return at::celu(xlatens[0], alpha);
}

at::Tensor & AtenIpexTypeDefault::celu_(at::Tensor & self, at::Scalar alpha) {
  return at::celu_(xlatens[0], alpha);
}

at::Tensor AtenIpexTypeDefault::sigmoid(const at::Tensor & self) {
  return at::sigmoid(xlatens[0]);
}

at::Tensor & AtenIpexTypeDefault::sigmoid_(at::Tensor & self) {
  return at::sigmoid_(xlatens[0]);
}

at::Tensor & AtenIpexTypeDefault::sigmoid_out(at::Tensor & out, const at::Tensor & self) {
  return at::sigmoid_out(xlatens[0], xlatens[1]);
}

at::Tensor AtenIpexTypeDefault::sin(const at::Tensor & self) {
  return at::sin(xlatens[0]);
}

at::Tensor & AtenIpexTypeDefault::sin_(at::Tensor & self) {
  return at::sin_(xlatens[0]);
}

at::Tensor & AtenIpexTypeDefault::sin_out(at::Tensor & out, const at::Tensor & self) {
  return at::sin_out(xlatens[0], xlatens[1]);
}

at::Tensor AtenIpexTypeDefault::sinh(const at::Tensor & self) {
  return at::sinh(xlatens[0]);
}

at::Tensor & AtenIpexTypeDefault::sinh_(at::Tensor & self) {
  return at::sinh_(xlatens[0]);
}

at::Tensor & AtenIpexTypeDefault::sinh_out(at::Tensor & out, const at::Tensor & self) {
  return at::sinh_out(xlatens[0], xlatens[1]);
}

at::Tensor AtenIpexTypeDefault::detach(const at::Tensor & self) {
  return at::detach(xlatens[0]);
}

at::Tensor & AtenIpexTypeDefault::detach_(at::Tensor & self) {
  return at::detach_(xlatens[0]);
}

int64_t AtenIpexTypeDefault::size(const at::Tensor & self, int64_t dim) {
  return at::size(xlatens[0], dim);
}

at::Tensor AtenIpexTypeDefault::slice(const at::Tensor & self, int64_t dim, int64_t start, int64_t end, int64_t step) {
  return at::slice(xlatens[0], dim, start, end, step);
}

std::tuple<at::Tensor,at::Tensor> AtenIpexTypeDefault::slogdet(const at::Tensor & self) {
  return at::slogdet(xlatens[0]);
}

at::Tensor AtenIpexTypeDefault::smm(const at::Tensor & self, const at::Tensor & mat2) {
  return at::smm(xlatens[0], xlatens[1]);
}

at::Tensor AtenIpexTypeDefault::softmax(const at::Tensor & self, int64_t dim, c10::optional<at::ScalarType> dtype) {
  return at::softmax(xlatens[0], dim, dtype);
}

at::Tensor AtenIpexTypeDefault::_softmax(const at::Tensor & self, int64_t dim, bool half_to_float) {
  return at::_softmax(xlatens[0], dim, half_to_float);
}

at::Tensor AtenIpexTypeDefault::_softmax_backward_data(const at::Tensor & grad_output, const at::Tensor & output, int64_t dim, const at::Tensor & self) {
  return at::_softmax_backward_data(xlatens[0], xlatens[1], dim, xlatens[2]);
}

at::Tensor & AtenIpexTypeDefault::_sparse_add_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & other, at::Scalar alpha) {
  return at::_sparse_add_out(xlatens[0], xlatens[1], xlatens[2], alpha);
}

at::Tensor & AtenIpexTypeDefault::_sparse_dense_add_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & other, at::Scalar alpha) {
  return at::_sparse_dense_add_out(xlatens[0], xlatens[1], xlatens[2], alpha);
}

at::Tensor & AtenIpexTypeDefault::_sparse_div_zerodim_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & other) {
  return at::_sparse_div_zerodim_out(xlatens[0], xlatens[1], xlatens[2]);
}

at::Tensor & AtenIpexTypeDefault::_sparse_div_scalar_out(at::Tensor & out, const at::Tensor & self, at::Scalar other) {
  return at::_sparse_div_scalar_out(xlatens[0], xlatens[1], other);
}

at::Tensor & AtenIpexTypeDefault::_sparse_mul_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & other) {
  return at::_sparse_mul_out(xlatens[0], xlatens[1], xlatens[2]);
}

at::Tensor & AtenIpexTypeDefault::_sparse_mul_zerodim_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & other) {
  return at::_sparse_mul_zerodim_out(xlatens[0], xlatens[1], xlatens[2]);
}

at::Tensor & AtenIpexTypeDefault::_sparse_mul_scalar_out(at::Tensor & out, const at::Tensor & self, at::Scalar other) {
  return at::_sparse_mul_scalar_out(xlatens[0], xlatens[1], other);
}

std::vector<at::Tensor> AtenIpexTypeDefault::split(const at::Tensor & self, int64_t split_size, int64_t dim) {
  return at::split(xlatens[0], split_size, dim);
}

std::vector<at::Tensor> AtenIpexTypeDefault::split_with_sizes(const at::Tensor & self, at::IntArrayRef split_sizes, int64_t dim) {
  return at::split_with_sizes(xlatens[0], split_sizes, dim);
}

at::Tensor AtenIpexTypeDefault::squeeze(const at::Tensor & self) {
  return at::squeeze(xlatens[0]);
}

at::Tensor AtenIpexTypeDefault::squeeze(const at::Tensor & self, int64_t dim) {
  return at::squeeze(xlatens[0], dim);
}

at::Tensor & AtenIpexTypeDefault::squeeze_(at::Tensor & self) {
  return xlatens[0].squeeze_();
}

at::Tensor & AtenIpexTypeDefault::squeeze_(at::Tensor & self, int64_t dim) {
  return xlatens[0].squeeze_(dim);
}

at::Tensor AtenIpexTypeDefault::sspaddmm(const at::Tensor & self, const at::Tensor & mat1, const at::Tensor & mat2, at::Scalar beta, at::Scalar alpha) {
  return at::sspaddmm(xlatens[0], xlatens[1], xlatens[2], beta, alpha);
}

at::Tensor & AtenIpexTypeDefault::sspaddmm_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & mat1, const at::Tensor & mat2, at::Scalar beta, at::Scalar alpha) {
  return at::sspaddmm_out(xlatens[0], xlatens[1], xlatens[2], xlatens[3], beta, alpha);
}

at::Tensor AtenIpexTypeDefault::stack(at::TensorList tensors, int64_t dim) {
  auto l_tensors = bridge::XlaCreateTensorList(tensors);
  return at::stack(l_tensors, dim);
}

at::Tensor & AtenIpexTypeDefault::stack_out(at::Tensor & out, at::TensorList tensors, int64_t dim) {
  auto l_tensors = bridge::XlaCreateTensorList(tensors);
  return at::stack_out(xlatens[0], l_tensors, dim);
}

at::Tensor AtenIpexTypeDefault::stft(const at::Tensor & self, int64_t n_fft, c10::optional<int64_t> hop_length, c10::optional<int64_t> win_length, const at::Tensor & window, bool normalized, bool onesided) {
  return at::stft(xlatens[0], n_fft, hop_length, win_length, xlatens[1], normalized, onesided);
}

int64_t AtenIpexTypeDefault::stride(const at::Tensor & self, int64_t dim) {
  return at::stride(xlatens[0], dim);
}

at::Tensor AtenIpexTypeDefault::sum(const at::Tensor & self, c10::optional<at::ScalarType> dtype) {
  return at::sum(xlatens[0], dtype);
}

at::Tensor AtenIpexTypeDefault::sum(const at::Tensor & self, at::IntArrayRef dim, bool keepdim, c10::optional<at::ScalarType> dtype) {
  return at::sum(xlatens[0], dim, keepdim, dtype);
}

at::Tensor & AtenIpexTypeDefault::sum_out(at::Tensor & out, const at::Tensor & self, at::IntArrayRef dim, bool keepdim, c10::optional<at::ScalarType> dtype) {
  return at::sum_out(xlatens[0], xlatens[1], dim, keepdim, dtype);
}

at::Tensor AtenIpexTypeDefault::sum_to_size(const at::Tensor & self, at::IntArrayRef size) {
  return xlatens[0].sum_to_size(size);
}

at::Tensor AtenIpexTypeDefault::sqrt(const at::Tensor & self) {
  return at::sqrt(xlatens[0]);
}

at::Tensor & AtenIpexTypeDefault::sqrt_(at::Tensor & self) {
  return at::sqrt_(xlatens[0]);
}

at::Tensor & AtenIpexTypeDefault::sqrt_out(at::Tensor & out, const at::Tensor & self) {
  return at::sqrt_out(xlatens[0], xlatens[1]);
}

at::Tensor AtenIpexTypeDefault::std(const at::Tensor & self, bool unbiased) {
  return at::std(xlatens[0], unbiased);
}

at::Tensor AtenIpexTypeDefault::std(const at::Tensor & self, at::IntArrayRef dim, bool unbiased, bool keepdim) {
  return at::std(xlatens[0], dim, unbiased, keepdim);
}

std::tuple<at::Tensor,at::Tensor> AtenIpexTypeDefault::std_mean(const at::Tensor & self, bool unbiased) {
  return at::std_mean(xlatens[0], unbiased);
}

std::tuple<at::Tensor,at::Tensor> AtenIpexTypeDefault::std_mean(const at::Tensor & self, at::IntArrayRef dim, bool unbiased, bool keepdim) {
  return at::std_mean(xlatens[0], dim, unbiased, keepdim);
}

at::Tensor & AtenIpexTypeDefault::std_out(at::Tensor & out, const at::Tensor & self, at::IntArrayRef dim, bool unbiased, bool keepdim) {
  return at::std_out(xlatens[0], xlatens[1], dim, unbiased, keepdim);
}

at::Tensor AtenIpexTypeDefault::prod(const at::Tensor & self, c10::optional<at::ScalarType> dtype) {
  return at::prod(xlatens[0], dtype);
}

at::Tensor AtenIpexTypeDefault::prod(const at::Tensor & self, int64_t dim, bool keepdim, c10::optional<at::ScalarType> dtype) {
  return at::prod(xlatens[0], dim, keepdim, dtype);
}

at::Tensor & AtenIpexTypeDefault::prod_out(at::Tensor & out, const at::Tensor & self, int64_t dim, bool keepdim, c10::optional<at::ScalarType> dtype) {
  return at::prod_out(xlatens[0], xlatens[1], dim, keepdim, dtype);
}

at::Tensor AtenIpexTypeDefault::t(const at::Tensor & self) {
  return at::t(xlatens[0]);
}

at::Tensor & AtenIpexTypeDefault::t_(at::Tensor & self) {
  return xlatens[0].t_();
}

at::Tensor AtenIpexTypeDefault::tan(const at::Tensor & self) {
  return at::tan(xlatens[0]);
}

at::Tensor & AtenIpexTypeDefault::tan_(at::Tensor & self) {
  return at::tan_(xlatens[0]);
}

at::Tensor & AtenIpexTypeDefault::tan_out(at::Tensor & out, const at::Tensor & self) {
  return at::tan_out(xlatens[0], xlatens[1]);
}

at::Tensor AtenIpexTypeDefault::tanh(const at::Tensor & self) {
  return at::tanh(xlatens[0]);
}

at::Tensor & AtenIpexTypeDefault::tanh_(at::Tensor & self) {
  return at::tanh_(xlatens[0]);
}

at::Tensor & AtenIpexTypeDefault::tanh_out(at::Tensor & out, const at::Tensor & self) {
  return at::tanh_out(xlatens[0], xlatens[1]);
}

at::Tensor AtenIpexTypeDefault::tensordot(const at::Tensor & self, const at::Tensor & other, at::IntArrayRef dims_self, at::IntArrayRef dims_other) {
  return at::tensordot(xlatens[0], xlatens[1], dims_self, dims_other);
}

at::Tensor AtenIpexTypeDefault::threshold(const at::Tensor & self, at::Scalar threshold, at::Scalar value) {
  return at::threshold(xlatens[0], threshold, value);
}

at::Tensor & AtenIpexTypeDefault::threshold_(at::Tensor & self, at::Scalar threshold, at::Scalar value) {
  return at::threshold_(xlatens[0], threshold, value);
}

at::Tensor & AtenIpexTypeDefault::threshold_out(at::Tensor & out, const at::Tensor & self, at::Scalar threshold, at::Scalar value) {
  return at::threshold_out(xlatens[0], xlatens[1], threshold, value);
}

at::Tensor AtenIpexTypeDefault::threshold_backward(const at::Tensor & grad_output, const at::Tensor & self, at::Scalar threshold) {
  return at::threshold_backward(xlatens[0], xlatens[1], threshold);
}

at::Tensor AtenIpexTypeDefault::transpose(const at::Tensor & self, int64_t dim0, int64_t dim1) {
  return at::transpose(xlatens[0], dim0, dim1);
}

at::Tensor AtenIpexTypeDefault::_mkldnn_transpose(const at::Tensor & self, int64_t dim0, int64_t dim1) {
  return at::_mkldnn_transpose(xlatens[0], dim0, dim1);
}

at::Tensor & AtenIpexTypeDefault::transpose_(at::Tensor & self, int64_t dim0, int64_t dim1) {
  return xlatens[0].transpose_(dim0, dim1);
}

at::Tensor & AtenIpexTypeDefault::_mkldnn_transpose_(at::Tensor & self, int64_t dim0, int64_t dim1) {
  return at::_mkldnn_transpose_(xlatens[0], dim0, dim1);
}

at::Tensor AtenIpexTypeDefault::one_hot(const at::Tensor & self, int64_t num_classes) {
  return at::one_hot(xlatens[0], num_classes);
}

at::Tensor AtenIpexTypeDefault::flip(const at::Tensor & self, at::IntArrayRef dims) {
  return at::flip(xlatens[0], dims);
}

at::Tensor AtenIpexTypeDefault::roll(const at::Tensor & self, at::IntArrayRef shifts, at::IntArrayRef dims) {
  return at::roll(xlatens[0], shifts, dims);
}

at::Tensor AtenIpexTypeDefault::rot90(const at::Tensor & self, int64_t k, at::IntArrayRef dims) {
  return at::rot90(xlatens[0], k, dims);
}

at::Tensor AtenIpexTypeDefault::trapz(const at::Tensor & y, const at::Tensor & x, int64_t dim) {
  return at::trapz(xlatens[0], xlatens[1], dim);
}

at::Tensor AtenIpexTypeDefault::trapz(const at::Tensor & y, double dx, int64_t dim) {
  return at::trapz(xlatens[0], dx, dim);
}

at::Tensor AtenIpexTypeDefault::_trilinear(const at::Tensor & i1, const at::Tensor & i2, const at::Tensor & i3, at::IntArrayRef expand1, at::IntArrayRef expand2, at::IntArrayRef expand3, at::IntArrayRef sumdim, int64_t unroll_dim) {
  return at::_trilinear(xlatens[0], xlatens[1], xlatens[2], expand1, expand2, expand3, sumdim, unroll_dim);
}

at::Tensor AtenIpexTypeDefault::triplet_margin_loss(const at::Tensor & anchor, const at::Tensor & positive, const at::Tensor & negative, double margin, double p, double eps, bool swap, int64_t reduction) {
  return at::triplet_margin_loss(xlatens[0], xlatens[1], xlatens[2], margin, p, eps, swap, reduction);
}

at::Tensor AtenIpexTypeDefault::trunc(const at::Tensor & self) {
  return at::trunc(xlatens[0]);
}

at::Tensor & AtenIpexTypeDefault::trunc_(at::Tensor & self) {
  return at::trunc_(xlatens[0]);
}

at::Tensor & AtenIpexTypeDefault::trunc_out(at::Tensor & out, const at::Tensor & self) {
  return at::trunc_out(xlatens[0], xlatens[1]);
}

at::Tensor AtenIpexTypeDefault::type_as(const at::Tensor & self, const at::Tensor & other) {
  return xlatens[0].type_as(xlatens[1]);
}

bool AtenIpexTypeDefault::_has_compatible_shallow_copy_type(const at::Tensor & self, const at::Tensor & from) {
  return at::_has_compatible_shallow_copy_type(xlatens[0], xlatens[1]);
}

std::tuple<at::Tensor,at::Tensor> AtenIpexTypeDefault::_unique(const at::Tensor & self, bool sorted, bool return_inverse) {
  return at::_unique(xlatens[0], sorted, return_inverse);
}

std::tuple<at::Tensor,at::Tensor,at::Tensor> AtenIpexTypeDefault::unique_dim(const at::Tensor & self, int64_t dim, bool sorted, bool return_inverse, bool return_counts) {
  return at::unique_dim(xlatens[0], dim, sorted, return_inverse, return_counts);
}

std::tuple<at::Tensor,at::Tensor,at::Tensor> AtenIpexTypeDefault::unique_consecutive(const at::Tensor & self, bool return_inverse, bool return_counts, c10::optional<int64_t> dim) {
  return at::unique_consecutive(xlatens[0], return_inverse, return_counts, dim);
}

std::tuple<at::Tensor,at::Tensor,at::Tensor> AtenIpexTypeDefault::unique_dim_consecutive(const at::Tensor & self, int64_t dim, bool return_inverse, bool return_counts) {
  return at::unique_dim_consecutive(xlatens[0], dim, return_inverse, return_counts);
}

std::tuple<at::Tensor,at::Tensor,at::Tensor> AtenIpexTypeDefault::_unique2(const at::Tensor & self, bool sorted, bool return_inverse, bool return_counts) {
  return at::_unique2(xlatens[0], sorted, return_inverse, return_counts);
}

at::Tensor AtenIpexTypeDefault::_unsafe_view(const at::Tensor & self, at::IntArrayRef size) {
  return at::_unsafe_view(xlatens[0], size);
}

at::Tensor AtenIpexTypeDefault::unsqueeze(const at::Tensor & self, int64_t dim) {
  return at::unsqueeze(xlatens[0], dim);
}

at::Tensor & AtenIpexTypeDefault::unsqueeze_(at::Tensor & self, int64_t dim) {
  return xlatens[0].unsqueeze_(dim);
}

at::Tensor AtenIpexTypeDefault::var(const at::Tensor & self, bool unbiased) {
  return at::var(xlatens[0], unbiased);
}

at::Tensor AtenIpexTypeDefault::var(const at::Tensor & self, at::IntArrayRef dim, bool unbiased, bool keepdim) {
  return at::var(xlatens[0], dim, unbiased, keepdim);
}

at::Tensor & AtenIpexTypeDefault::var_out(at::Tensor & out, const at::Tensor & self, at::IntArrayRef dim, bool unbiased, bool keepdim) {
  return at::var_out(xlatens[0], xlatens[1], dim, unbiased, keepdim);
}

std::tuple<at::Tensor,at::Tensor> AtenIpexTypeDefault::var_mean(const at::Tensor & self, bool unbiased) {
  return at::var_mean(xlatens[0], unbiased);
}

std::tuple<at::Tensor,at::Tensor> AtenIpexTypeDefault::var_mean(const at::Tensor & self, at::IntArrayRef dim, bool unbiased, bool keepdim) {
  return at::var_mean(xlatens[0], dim, unbiased, keepdim);
}

at::Tensor AtenIpexTypeDefault::view_as(const at::Tensor & self, const at::Tensor & other) {
  return xlatens[0].view_as(xlatens[1]);
}

at::Tensor AtenIpexTypeDefault::where(const at::Tensor & condition, const at::Tensor & self, const at::Tensor & other) {
  return at::where(xlatens[0], xlatens[1], xlatens[2]);
}

std::vector<at::Tensor> AtenIpexTypeDefault::where(const at::Tensor & condition) {
  return at::where(xlatens[0]);
}

at::Tensor AtenIpexTypeDefault::_s_where(const at::Tensor & condition, const at::Tensor & self, const at::Tensor & other) {
  XLA_CHECK(condition.sizes() == self.sizes()) << "Operand shapes must be identical for _s_where, mismatch for arguments 1 and 2";
  XLA_CHECK(condition.sizes() == other.sizes()) << "Operand shapes must be identical for _s_where, mismatch for arguments 1 and 3";
  return AtenXlaType::where(condition, self, other);
}

at::Tensor AtenIpexTypeDefault::norm_except_dim(const at::Tensor & v, int64_t pow, int64_t dim) {
  return at::norm_except_dim(xlatens[0], pow, dim);
}

at::Tensor AtenIpexTypeDefault::_weight_norm(const at::Tensor & v, const at::Tensor & g, int64_t dim) {
  return at::_weight_norm(xlatens[0], xlatens[1], dim);
}

std::tuple<at::Tensor,at::Tensor> AtenIpexTypeDefault::_weight_norm_cuda_interface(const at::Tensor & v, const at::Tensor & g, int64_t dim) {
  return at::_weight_norm_cuda_interface(xlatens[0], xlatens[1], dim);
}

std::tuple<at::Tensor,at::Tensor> AtenIpexTypeDefault::_weight_norm_cuda_interface_backward(const at::Tensor & grad_w, const at::Tensor & saved_v, const at::Tensor & saved_g, const at::Tensor & saved_norms, int64_t dim) {
  return at::_weight_norm_cuda_interface_backward(xlatens[0], xlatens[1], xlatens[2], xlatens[3], dim);
}

std::tuple<at::Tensor,at::Tensor> AtenIpexTypeDefault::_weight_norm_differentiable_backward(const at::Tensor & grad_w, const at::Tensor & saved_v, const at::Tensor & saved_g, const at::Tensor & saved_norms, int64_t dim) {
  return at::_weight_norm_differentiable_backward(xlatens[0], xlatens[1], xlatens[2], xlatens[3], dim);
}

at::Tensor & AtenIpexTypeDefault::zeros_out(at::Tensor & out, at::IntArrayRef size) {
  return at::zeros_out(xlatens[0], size);
}

at::Tensor AtenIpexTypeDefault::_standard_gamma_grad(const at::Tensor & self, const at::Tensor & output) {
  return at::_standard_gamma_grad(xlatens[0], xlatens[1]);
}

at::Tensor AtenIpexTypeDefault::_standard_gamma(const at::Tensor & self, at::Generator * generator) {
  return at::_standard_gamma(xlatens[0], generator);
}

at::Tensor AtenIpexTypeDefault::_dirichlet_grad(const at::Tensor & x, const at::Tensor & alpha, const at::Tensor & total) {
  return at::_dirichlet_grad(xlatens[0], xlatens[1], xlatens[2]);
}

at::Tensor AtenIpexTypeDefault::_sample_dirichlet(const at::Tensor & self, at::Generator * generator) {
  return at::_sample_dirichlet(xlatens[0], generator);
}

at::Tensor AtenIpexTypeDefault::poisson(const at::Tensor & self, at::Generator * generator) {
  return at::poisson(xlatens[0], generator);
}

at::Tensor AtenIpexTypeDefault::native_norm(const at::Tensor & self, at::Scalar p) {
  return at::native_norm(xlatens[0], p);
}

at::Tensor AtenIpexTypeDefault::_sparse_sum(const at::Tensor & self) {
  return at::_sparse_sum(xlatens[0]);
}

at::Tensor AtenIpexTypeDefault::_sparse_sum(const at::Tensor & self, at::ScalarType dtype) {
  return at::_sparse_sum(xlatens[0], dtype);
}

at::Tensor AtenIpexTypeDefault::_sparse_sum(const at::Tensor & self, at::IntArrayRef dim) {
  return at::_sparse_sum(xlatens[0], dim);
}

at::Tensor AtenIpexTypeDefault::_sparse_sum(const at::Tensor & self, at::IntArrayRef dim, at::ScalarType dtype) {
  return at::_sparse_sum(xlatens[0], dim, dtype);
}

at::Tensor AtenIpexTypeDefault::_sparse_sum_backward(const at::Tensor & grad, const at::Tensor & self, at::IntArrayRef dim) {
  return at::_sparse_sum_backward(xlatens[0], xlatens[1], dim);
}

at::Tensor AtenIpexTypeDefault::norm(const at::Tensor & self, c10::optional<at::Scalar> p, at::ScalarType dtype) {
  return at::norm(xlatens[0], p, dtype);
}

at::Tensor AtenIpexTypeDefault::norm(const at::Tensor & self, at::Scalar p) {
  return at::norm(xlatens[0], p);
}

at::Tensor AtenIpexTypeDefault::norm(const at::Tensor & self, c10::optional<at::Scalar> p, at::IntArrayRef dim, bool keepdim, at::ScalarType dtype) {
  return at::norm(xlatens[0], p, dim, keepdim, dtype);
}

at::Tensor AtenIpexTypeDefault::norm(const at::Tensor & self, c10::optional<at::Scalar> p, at::IntArrayRef dim, bool keepdim) {
  return at::norm(xlatens[0], p, dim, keepdim);
}

at::Tensor & AtenIpexTypeDefault::norm_out(at::Tensor & out, const at::Tensor & self, c10::optional<at::Scalar> p, at::IntArrayRef dim, bool keepdim, at::ScalarType dtype) {
  return at::norm_out(xlatens[0], xlatens[1], p, dim, keepdim, dtype);
}

at::Tensor & AtenIpexTypeDefault::norm_out(at::Tensor & out, const at::Tensor & self, c10::optional<at::Scalar> p, at::IntArrayRef dim, bool keepdim) {
  return at::norm_out(xlatens[0], xlatens[1], p, dim, keepdim);
}

at::Tensor AtenIpexTypeDefault::frobenius_norm(const at::Tensor & self) {
  return at::frobenius_norm(xlatens[0]);
}

at::Tensor AtenIpexTypeDefault::frobenius_norm(const at::Tensor & self, at::IntArrayRef dim, bool keepdim) {
  return at::frobenius_norm(xlatens[0], dim, keepdim);
}

at::Tensor & AtenIpexTypeDefault::frobenius_norm_out(at::Tensor & out, const at::Tensor & self, at::IntArrayRef dim, bool keepdim) {
  return at::frobenius_norm_out(xlatens[0], xlatens[1], dim, keepdim);
}

at::Tensor AtenIpexTypeDefault::nuclear_norm(const at::Tensor & self, bool keepdim) {
  return at::nuclear_norm(xlatens[0], keepdim);
}

at::Tensor & AtenIpexTypeDefault::nuclear_norm_out(at::Tensor & out, const at::Tensor & self, bool keepdim) {
  return at::nuclear_norm_out(xlatens[0], xlatens[1], keepdim);
}

at::Tensor AtenIpexTypeDefault::nuclear_norm(const at::Tensor & self, at::IntArrayRef dim, bool keepdim) {
  return at::nuclear_norm(xlatens[0], dim, keepdim);
}

at::Tensor & AtenIpexTypeDefault::nuclear_norm_out(at::Tensor & out, const at::Tensor & self, at::IntArrayRef dim, bool keepdim) {
  return at::nuclear_norm_out(xlatens[0], xlatens[1], dim, keepdim);
}

at::Tensor AtenIpexTypeDefault::clone(const at::Tensor & self) {
  return at::clone(xlatens[0]);
}

at::Tensor & AtenIpexTypeDefault::resize_as_(at::Tensor & self, const at::Tensor & the_template) {
  return at::resize_as_(xlatens[0], xlatens[1]);
}

at::Tensor & AtenIpexTypeDefault::pow_out(at::Tensor & out, const at::Tensor & self, at::Scalar exponent) {
  return at::pow_out(xlatens[0], xlatens[1], exponent);
}

at::Tensor AtenIpexTypeDefault::pow(const at::Tensor & self, at::Scalar exponent) {
  return at::pow(xlatens[0], exponent);
}

at::Tensor & AtenIpexTypeDefault::sub_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & other, at::Scalar alpha) {
  return at::sub_out(xlatens[0], xlatens[1], xlatens[2], alpha);
}

at::Tensor AtenIpexTypeDefault::sub(const at::Tensor & self, const at::Tensor & other, at::Scalar alpha) {
  return at::sub(xlatens[0], xlatens[1], alpha);
}

at::Tensor & AtenIpexTypeDefault::sub_(at::Tensor & self, const at::Tensor & other, at::Scalar alpha) {
  return xlatens[0].sub_(xlatens[1], alpha);
}

at::Tensor AtenIpexTypeDefault::sub(const at::Tensor & self, at::Scalar other, at::Scalar alpha) {
  return at::sub(xlatens[0], other, alpha);
}

at::Tensor & AtenIpexTypeDefault::sub_(at::Tensor & self, at::Scalar other, at::Scalar alpha) {
  return xlatens[0].sub_(other, alpha);
}

at::Tensor AtenIpexTypeDefault::rsub(const at::Tensor & self, const at::Tensor & other, at::Scalar alpha) {
  return at::rsub(xlatens[0], xlatens[1], alpha);
}

at::Tensor AtenIpexTypeDefault::rsub(const at::Tensor & self, at::Scalar other, at::Scalar alpha) {
  return at::rsub(xlatens[0], other, alpha);
}

at::Tensor & AtenIpexTypeDefault::s_native_addmm_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & mat1, const at::Tensor & mat2, at::Scalar beta, at::Scalar alpha) {
  return at::s_native_addmm_out(xlatens[0], xlatens[1], xlatens[2], xlatens[3], beta, alpha);
}

at::Tensor AtenIpexTypeDefault::s_native_addmm(const at::Tensor & self, const at::Tensor & mat1, const at::Tensor & mat2, at::Scalar beta, at::Scalar alpha) {
  return at::s_native_addmm(xlatens[0], xlatens[1], xlatens[2], beta, alpha);
}

at::Tensor & AtenIpexTypeDefault::s_native_addmm_(at::Tensor & self, const at::Tensor & mat1, const at::Tensor & mat2, at::Scalar beta, at::Scalar alpha) {
  return at::s_native_addmm_(xlatens[0], xlatens[1], xlatens[2], beta, alpha);
}

at::Tensor AtenIpexTypeDefault::_sparse_addmm(const at::Tensor & self, const at::Tensor & sparse, const at::Tensor & dense, at::Scalar beta, at::Scalar alpha) {
  return at::_sparse_addmm(xlatens[0], xlatens[1], xlatens[2], beta, alpha);
}

at::Tensor & AtenIpexTypeDefault::addmm_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & mat1, const at::Tensor & mat2, at::Scalar beta, at::Scalar alpha) {
  return at::addmm_out(xlatens[0], xlatens[1], xlatens[2], xlatens[3], beta, alpha);
}

at::Tensor AtenIpexTypeDefault::addmm(const at::Tensor & self, const at::Tensor & mat1, const at::Tensor & mat2, at::Scalar beta, at::Scalar alpha) {
  return at::addmm(xlatens[0], xlatens[1], xlatens[2], beta, alpha);
}

at::Tensor & AtenIpexTypeDefault::addmm_(at::Tensor & self, const at::Tensor & mat1, const at::Tensor & mat2, at::Scalar beta, at::Scalar alpha) {
  return xlatens[0].addmm_(xlatens[1], xlatens[2], beta, alpha);
}

at::Tensor AtenIpexTypeDefault::sparse_coo_tensor(at::IntArrayRef size, const at::TensorOptions & options) {
  return at::sparse_coo_tensor(size, options);
}

at::Tensor AtenIpexTypeDefault::sparse_coo_tensor(const at::Tensor & indices, const at::Tensor & values, const at::TensorOptions & options) {
  return at::sparse_coo_tensor(xlatens[0], xlatens[1], options);
}

at::Tensor AtenIpexTypeDefault::sparse_coo_tensor(const at::Tensor & indices, const at::Tensor & values, at::IntArrayRef size, const at::TensorOptions & options) {
  return at::sparse_coo_tensor(xlatens[0], xlatens[1], size, options);
}

at::Tensor AtenIpexTypeDefault::_sparse_coo_tensor_unsafe(const at::Tensor & indices, const at::Tensor & values, at::IntArrayRef size, const at::TensorOptions & options) {
  return at::_sparse_coo_tensor_unsafe(xlatens[0], xlatens[1], size, options);
}

at::Tensor AtenIpexTypeDefault::_sparse_coo_tensor_with_dims(int64_t sparse_dim, int64_t dense_dim, at::IntArrayRef size, const at::TensorOptions & options) {
  return at::_sparse_coo_tensor_with_dims(sparse_dim, dense_dim, size, options);
}

at::Tensor AtenIpexTypeDefault::_sparse_coo_tensor_with_dims_and_tensors(int64_t sparse_dim, int64_t dense_dim, at::IntArrayRef size, const at::Tensor & indices, const at::Tensor & values, const at::TensorOptions & options) {
  return at::_sparse_coo_tensor_with_dims_and_tensors(sparse_dim, dense_dim, size, xlatens[0], xlatens[1], options);
}

at::Tensor & AtenIpexTypeDefault::sparse_resize_(at::Tensor & self, at::IntArrayRef size, int64_t sparse_dim, int64_t dense_dim) {
  return xlatens[0].sparse_resize_(size, sparse_dim, dense_dim);
}

at::Tensor & AtenIpexTypeDefault::sparse_resize_and_clear_(at::Tensor & self, at::IntArrayRef size, int64_t sparse_dim, int64_t dense_dim) {
  return xlatens[0].sparse_resize_and_clear_(size, sparse_dim, dense_dim);
}

at::Tensor AtenIpexTypeDefault::sparse_mask(const at::Tensor & self, const at::Tensor & mask) {
  return xlatens[0].sparse_mask(xlatens[1]);
}

at::Tensor AtenIpexTypeDefault::to_dense(const at::Tensor & self) {
  return xlatens[0].to_dense();
}

at::Tensor AtenIpexTypeDefault::to_dense_backward(const at::Tensor & grad, const at::Tensor & input) {
  return at::to_dense_backward(xlatens[0], xlatens[1]);
}

int64_t AtenIpexTypeDefault::sparse_dim(const at::Tensor & self) {
  return xlatens[0].sparse_dim();
}

int64_t AtenIpexTypeDefault::_dimI(const at::Tensor & self) {
  return xlatens[0]._dimI();
}

int64_t AtenIpexTypeDefault::dense_dim(const at::Tensor & self) {
  return xlatens[0].dense_dim();
}

int64_t AtenIpexTypeDefault::_dimV(const at::Tensor & self) {
  return xlatens[0]._dimV();
}

int64_t AtenIpexTypeDefault::_nnz(const at::Tensor & self) {
  return xlatens[0]._nnz();
}

at::Tensor AtenIpexTypeDefault::coalesce(const at::Tensor & self) {
  return xlatens[0].coalesce();
}

bool AtenIpexTypeDefault::is_coalesced(const at::Tensor & self) {
  return xlatens[0].is_coalesced();
}

at::Tensor AtenIpexTypeDefault::_indices(const at::Tensor & self) {
  return xlatens[0]._indices();
}

at::Tensor AtenIpexTypeDefault::_values(const at::Tensor & self) {
  return xlatens[0]._values();
}

at::Tensor & AtenIpexTypeDefault::_coalesced_(at::Tensor & self, bool coalesced) {
  return xlatens[0]._coalesced_(coalesced);
}

at::Tensor AtenIpexTypeDefault::indices(const at::Tensor & self) {
  return xlatens[0].indices();
}

at::Tensor AtenIpexTypeDefault::values(const at::Tensor & self) {
  return xlatens[0].values();
}

at::Tensor & AtenIpexTypeDefault::hspmm_out(at::Tensor & out, const at::Tensor & mat1, const at::Tensor & mat2) {
  return at::hspmm_out(xlatens[0], xlatens[1], xlatens[2]);
}

at::Tensor AtenIpexTypeDefault::hspmm(const at::Tensor & mat1, const at::Tensor & mat2) {
  return at::hspmm(xlatens[0], xlatens[1]);
}

at::Tensor & AtenIpexTypeDefault::copy_sparse_to_sparse_(at::Tensor & self, const at::Tensor & src, bool non_blocking) {
  return at::copy_sparse_to_sparse_(xlatens[0], xlatens[1], non_blocking);
}

std::vector<at::Tensor> AtenIpexTypeDefault::unbind(const at::Tensor & self, int64_t dim) {
  return at::unbind(xlatens[0], dim);
}

at::Tensor AtenIpexTypeDefault::to_sparse(const at::Tensor & self, int64_t sparse_dim) {
  return xlatens[0].to_sparse(sparse_dim);
}

at::Tensor AtenIpexTypeDefault::to_sparse(const at::Tensor & self) {
  return xlatens[0].to_sparse();
}

at::Tensor AtenIpexTypeDefault::to_mkldnn(const at::Tensor & self) {
  return xlatens[0].to_mkldnn();
}

at::Tensor AtenIpexTypeDefault::mkldnn_reorder_conv2d_weight(const at::Tensor & self, at::IntArrayRef padding, at::IntArrayRef stride, at::IntArrayRef dilation, int64_t groups) {
  return at::mkldnn_reorder_conv2d_weight(xlatens[0], padding, stride, dilation, groups);
}

at::Tensor AtenIpexTypeDefault::to_mkldnn_backward(const at::Tensor & grad, const at::Tensor & input) {
  return at::to_mkldnn_backward(xlatens[0], xlatens[1]);
}

at::Tensor AtenIpexTypeDefault::quantize_linear(const at::Tensor & self, double scale, int64_t zero_point, at::ScalarType dtype) {
  return at::quantize_linear(xlatens[0], scale, zero_point, dtype);
}

at::Tensor AtenIpexTypeDefault::quantize_linear_per_channel(const at::Tensor & self, const at::Tensor & scales, const at::Tensor & zero_points, at::IntArrayRef axis, at::ScalarType dtype) {
  return at::quantize_linear_per_channel(xlatens[0], xlatens[1], xlatens[2], axis, dtype);
}

at::Tensor AtenIpexTypeDefault::dequantize(const at::Tensor & self) {
  return at::dequantize(xlatens[0]);
}

at::Tensor AtenIpexTypeDefault::_dequantize_linear(const at::Tensor & self, double scale, int64_t zero_point, at::ScalarType dtype) {
  return at::_dequantize_linear(xlatens[0], scale, zero_point, dtype);
}

double AtenIpexTypeDefault::q_scale(const at::Tensor & self) {
  return at::q_scale(xlatens[0]);
}

int64_t AtenIpexTypeDefault::q_zero_point(const at::Tensor & self) {
  return at::q_zero_point(xlatens[0]);
}

at::Tensor AtenIpexTypeDefault::int_repr(const at::Tensor & self) {
  return at::int_repr(xlatens[0]);
}

at::Tensor AtenIpexTypeDefault::_per_tensor_affine_qtensor(const at::Tensor & self, double scale, int64_t zero_point) {
  return at::_per_tensor_affine_qtensor(xlatens[0], scale, zero_point);
}

at::QScheme AtenIpexTypeDefault::qscheme(const at::Tensor & self) {
  return xlatens[0].qscheme();
}

at::Tensor AtenIpexTypeDefault::fake_quantize_per_tensor_affine(const at::Tensor & self, double scale, int64_t zero_point, int64_t quant_min, int64_t quant_max) {
  return at::fake_quantize_per_tensor_affine(xlatens[0], scale, zero_point, quant_min, quant_max);
}

at::Tensor AtenIpexTypeDefault::fake_quantize_per_tensor_affine_backward(const at::Tensor & grad, const at::Tensor & self, double scale, int64_t zero_point, int64_t quant_min, int64_t quant_max) {
  return at::fake_quantize_per_tensor_affine_backward(xlatens[0], xlatens[1], scale, zero_point, quant_min, quant_max);
}

at::Tensor AtenIpexTypeDefault::to(const at::Tensor & self, const at::TensorOptions & options, bool non_blocking, bool copy) {
  return xlatens[0].to(options, non_blocking, copy);
}

at::Tensor AtenIpexTypeDefault::to(const at::Tensor & self, c10::Device device, at::ScalarType dtype, bool non_blocking, bool copy) {
  return xlatens[0].to(device, dtype, non_blocking, copy);
}

at::Tensor AtenIpexTypeDefault::to(const at::Tensor & self, at::ScalarType dtype, bool non_blocking, bool copy) {
  return xlatens[0].to(dtype, non_blocking, copy);
}

at::Tensor AtenIpexTypeDefault::to(const at::Tensor & self, const at::Tensor & other, bool non_blocking, bool copy) {
  return xlatens[0].to(xlatens[1], non_blocking, copy);
}

std::vector<at::Tensor> AtenIpexTypeDefault::meshgrid(at::TensorList tensors) {
  auto l_tensors = bridge::XlaCreateTensorList(tensors);
  return at::meshgrid(l_tensors);
}

at::Tensor AtenIpexTypeDefault::cartesian_prod(at::TensorList tensors) {
  auto l_tensors = bridge::XlaCreateTensorList(tensors);
  return at::cartesian_prod(l_tensors);
}

at::Tensor AtenIpexTypeDefault::combinations(const at::Tensor & self, int64_t r, bool with_replacement) {
  return at::combinations(xlatens[0], r, with_replacement);
}

at::Scalar AtenIpexTypeDefault::item(const at::Tensor & self) {
  return xlatens[0].item();
}

at::Scalar AtenIpexTypeDefault::_local_scalar_dense(const at::Tensor & self) {
  return at::_local_scalar_dense(xlatens[0]);
}

std::tuple<at::Tensor,at::Tensor,at::Tensor> AtenIpexTypeDefault::_thnn_fused_lstm_cell(const at::Tensor & input_gates, const at::Tensor & hidden_gates, const at::Tensor & cx, const at::Tensor & input_bias, const at::Tensor & hidden_bias) {
  return at::_thnn_fused_lstm_cell(xlatens[0], xlatens[1], xlatens[2], xlatens[3], xlatens[4]);
}

std::tuple<at::Tensor,at::Tensor,at::Tensor,at::Tensor,at::Tensor> AtenIpexTypeDefault::_thnn_fused_lstm_cell_backward(const at::Tensor & grad_hy, const at::Tensor & grad_cy, const at::Tensor & cx, const at::Tensor & cy, const at::Tensor & workspace, bool has_bias) {
  return at::_thnn_fused_lstm_cell_backward(xlatens[0], xlatens[1], xlatens[2], xlatens[3], xlatens[4], has_bias);
}

std::tuple<at::Tensor,at::Tensor> AtenIpexTypeDefault::_thnn_fused_gru_cell(const at::Tensor & input_gates, const at::Tensor & hidden_gates, const at::Tensor & hx, const at::Tensor & input_bias, const at::Tensor & hidden_bias) {
  return at::_thnn_fused_gru_cell(xlatens[0], xlatens[1], xlatens[2], xlatens[3], xlatens[4]);
}

std::tuple<at::Tensor,at::Tensor,at::Tensor,at::Tensor,at::Tensor> AtenIpexTypeDefault::_thnn_fused_gru_cell_backward(const at::Tensor & grad_hy, const at::Tensor & workspace, bool has_bias) {
  return at::_thnn_fused_gru_cell_backward(xlatens[0], xlatens[1], has_bias);
}

std::tuple<at::Tensor,at::Tensor,at::Tensor> AtenIpexTypeDefault::lstm(const at::Tensor & input, at::TensorList hx, at::TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional, bool batch_first) {
  auto l_hx = bridge::XlaCreateTensorList(hx);
  auto l_params = bridge::XlaCreateTensorList(params);
  return at::lstm(xlatens[0], l_hx, l_params, has_biases, num_layers, dropout, train, bidirectional, batch_first);
}

std::tuple<at::Tensor,at::Tensor,at::Tensor> AtenIpexTypeDefault::lstm(const at::Tensor & data, const at::Tensor & batch_sizes, at::TensorList hx, at::TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional) {
  auto l_hx = bridge::XlaCreateTensorList(hx);
  auto l_params = bridge::XlaCreateTensorList(params);
  return at::lstm(xlatens[0], xlatens[1], l_hx, l_params, has_biases, num_layers, dropout, train, bidirectional);
}

std::tuple<at::Tensor,at::Tensor> AtenIpexTypeDefault::gru(const at::Tensor & input, const at::Tensor & hx, at::TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional, bool batch_first) {
  auto l_params = bridge::XlaCreateTensorList(params);
  return at::gru(xlatens[0], xlatens[1], l_params, has_biases, num_layers, dropout, train, bidirectional, batch_first);
}

std::tuple<at::Tensor,at::Tensor> AtenIpexTypeDefault::gru(const at::Tensor & data, const at::Tensor & batch_sizes, const at::Tensor & hx, at::TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional) {
  auto l_params = bridge::XlaCreateTensorList(params);
  return at::gru(xlatens[0], xlatens[1], xlatens[2], l_params, has_biases, num_layers, dropout, train, bidirectional);
}

std::tuple<at::Tensor,at::Tensor> AtenIpexTypeDefault::rnn_tanh(const at::Tensor & input, const at::Tensor & hx, at::TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional, bool batch_first) {
  auto l_params = bridge::XlaCreateTensorList(params);
  return at::rnn_tanh(xlatens[0], xlatens[1], l_params, has_biases, num_layers, dropout, train, bidirectional, batch_first);
}

std::tuple<at::Tensor,at::Tensor> AtenIpexTypeDefault::rnn_tanh(const at::Tensor & data, const at::Tensor & batch_sizes, const at::Tensor & hx, at::TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional) {
  auto l_params = bridge::XlaCreateTensorList(params);
  return at::rnn_tanh(xlatens[0], xlatens[1], xlatens[2], l_params, has_biases, num_layers, dropout, train, bidirectional);
}

std::tuple<at::Tensor,at::Tensor> AtenIpexTypeDefault::rnn_relu(const at::Tensor & input, const at::Tensor & hx, at::TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional, bool batch_first) {
  auto l_params = bridge::XlaCreateTensorList(params);
  return at::rnn_relu(xlatens[0], xlatens[1], l_params, has_biases, num_layers, dropout, train, bidirectional, batch_first);
}

std::tuple<at::Tensor,at::Tensor> AtenIpexTypeDefault::rnn_relu(const at::Tensor & data, const at::Tensor & batch_sizes, const at::Tensor & hx, at::TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional) {
  auto l_params = bridge::XlaCreateTensorList(params);
  return at::rnn_relu(xlatens[0], xlatens[1], xlatens[2], l_params, has_biases, num_layers, dropout, train, bidirectional);
}

std::tuple<at::Tensor,at::Tensor> AtenIpexTypeDefault::lstm_cell(const at::Tensor & input, at::TensorList hx, const at::Tensor & w_ih, const at::Tensor & w_hh, const at::Tensor & b_ih, const at::Tensor & b_hh) {
  auto l_hx = bridge::XlaCreateTensorList(hx);
  return at::lstm_cell(xlatens[0], l_hx, xlatens[1], xlatens[2], xlatens[3], xlatens[4]);
}

at::Tensor AtenIpexTypeDefault::gru_cell(const at::Tensor & input, const at::Tensor & hx, const at::Tensor & w_ih, const at::Tensor & w_hh, const at::Tensor & b_ih, const at::Tensor & b_hh) {
  return at::gru_cell(xlatens[0], xlatens[1], xlatens[2], xlatens[3], xlatens[4], xlatens[5]);
}

at::Tensor AtenIpexTypeDefault::rnn_tanh_cell(const at::Tensor & input, const at::Tensor & hx, const at::Tensor & w_ih, const at::Tensor & w_hh, const at::Tensor & b_ih, const at::Tensor & b_hh) {
  return at::rnn_tanh_cell(xlatens[0], xlatens[1], xlatens[2], xlatens[3], xlatens[4], xlatens[5]);
}

at::Tensor AtenIpexTypeDefault::rnn_relu_cell(const at::Tensor & input, const at::Tensor & hx, const at::Tensor & w_ih, const at::Tensor & w_hh, const at::Tensor & b_ih, const at::Tensor & b_hh) {
  return at::rnn_relu_cell(xlatens[0], xlatens[1], xlatens[2], xlatens[3], xlatens[4], xlatens[5]);
}

std::tuple<at::Tensor,at::Tensor,at::Tensor> AtenIpexTypeDefault::quantized_lstm(const at::Tensor & input, at::TensorList hx, at::TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional, bool batch_first, c10::optional<at::ScalarType> dtype) {
  auto l_hx = bridge::XlaCreateTensorList(hx);
  auto l_params = bridge::XlaCreateTensorList(params);
  return at::quantized_lstm(xlatens[0], l_hx, l_params, has_biases, num_layers, dropout, train, bidirectional, batch_first, dtype);
}

std::tuple<at::Tensor,at::Tensor> AtenIpexTypeDefault::quantized_gru(const at::Tensor & input, const at::Tensor & hx, at::TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional, bool batch_first) {
  auto l_params = bridge::XlaCreateTensorList(params);
  return at::quantized_gru(xlatens[0], xlatens[1], l_params, has_biases, num_layers, dropout, train, bidirectional, batch_first);
}

std::tuple<at::Tensor,at::Tensor> AtenIpexTypeDefault::quantized_gru(const at::Tensor & data, const at::Tensor & batch_sizes, const at::Tensor & hx, at::TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional) {
  auto l_params = bridge::XlaCreateTensorList(params);
  return at::quantized_gru(xlatens[0], xlatens[1], xlatens[2], l_params, has_biases, num_layers, dropout, train, bidirectional);
}

std::tuple<at::Tensor,at::Tensor> AtenIpexTypeDefault::quantized_lstm_cell(const at::Tensor & input, at::TensorList hx, const at::Tensor & w_ih, const at::Tensor & w_hh, const at::Tensor & b_ih, const at::Tensor & b_hh, const at::Tensor & packed_ih, const at::Tensor & packed_hh, const at::Tensor & col_offsets_ih, const at::Tensor & col_offsets_hh, at::Scalar scale_ih, at::Scalar scale_hh, at::Scalar zero_point_ih, at::Scalar zero_point_hh) {
  auto l_hx = bridge::XlaCreateTensorList(hx);
  return at::quantized_lstm_cell(xlatens[0], l_hx, xlatens[1], xlatens[2], xlatens[3], xlatens[4], xlatens[5], xlatens[6], xlatens[7], xlatens[8], scale_ih, scale_hh, zero_point_ih, zero_point_hh);
}

at::Tensor AtenIpexTypeDefault::quantized_gru_cell(const at::Tensor & input, const at::Tensor & hx, const at::Tensor & w_ih, const at::Tensor & w_hh, const at::Tensor & b_ih, const at::Tensor & b_hh, const at::Tensor & packed_ih, const at::Tensor & packed_hh, const at::Tensor & col_offsets_ih, const at::Tensor & col_offsets_hh, at::Scalar scale_ih, at::Scalar scale_hh, at::Scalar zero_point_ih, at::Scalar zero_point_hh) {
  return at::quantized_gru_cell(xlatens[0], xlatens[1], xlatens[2], xlatens[3], xlatens[4], xlatens[5], xlatens[6], xlatens[7], xlatens[8], xlatens[9], scale_ih, scale_hh, zero_point_ih, zero_point_hh);
}

at::Tensor AtenIpexTypeDefault::quantized_rnn_relu_cell(const at::Tensor & input, const at::Tensor & hx, const at::Tensor & w_ih, const at::Tensor & w_hh, const at::Tensor & b_ih, const at::Tensor & b_hh, const at::Tensor & packed_ih, const at::Tensor & packed_hh, const at::Tensor & col_offsets_ih, const at::Tensor & col_offsets_hh, at::Scalar scale_ih, at::Scalar scale_hh, at::Scalar zero_point_ih, at::Scalar zero_point_hh) {
  return at::quantized_rnn_relu_cell(xlatens[0], xlatens[1], xlatens[2], xlatens[3], xlatens[4], xlatens[5], xlatens[6], xlatens[7], xlatens[8], xlatens[9], scale_ih, scale_hh, zero_point_ih, zero_point_hh);
}

at::Tensor AtenIpexTypeDefault::quantized_rnn_tanh_cell(const at::Tensor & input, const at::Tensor & hx, const at::Tensor & w_ih, const at::Tensor & w_hh, const at::Tensor & b_ih, const at::Tensor & b_hh, const at::Tensor & packed_ih, const at::Tensor & packed_hh, const at::Tensor & col_offsets_ih, const at::Tensor & col_offsets_hh, at::Scalar scale_ih, at::Scalar scale_hh, at::Scalar zero_point_ih, at::Scalar zero_point_hh) {
  return at::quantized_rnn_tanh_cell(xlatens[0], xlatens[1], xlatens[2], xlatens[3], xlatens[4], xlatens[5], xlatens[6], xlatens[7], xlatens[8], xlatens[9], scale_ih, scale_hh, zero_point_ih, zero_point_hh);
}

std::tuple<at::Tensor,at::Tensor> AtenIpexTypeDefault::_pack_padded_sequence(const at::Tensor & input, const at::Tensor & lengths, bool batch_first) {
  return at::_pack_padded_sequence(xlatens[0], xlatens[1], batch_first);
}

at::Tensor AtenIpexTypeDefault::_pack_padded_sequence_backward(const at::Tensor & grad, at::IntArrayRef input_size, const at::Tensor & batch_sizes, bool batch_first) {
  return at::_pack_padded_sequence_backward(xlatens[0], input_size, xlatens[1], batch_first);
}

std::tuple<at::Tensor,at::Tensor> AtenIpexTypeDefault::_pad_packed_sequence(const at::Tensor & data, const at::Tensor & batch_sizes, bool batch_first, at::Scalar padding_value, int64_t total_length) {
  return at::_pad_packed_sequence(xlatens[0], xlatens[1], batch_first, padding_value, total_length);
}

at::Tensor & AtenIpexTypeDefault::set_(at::Tensor & self, at::Storage source) {
  return xlatens[0].set_(source);
}

at::Tensor & AtenIpexTypeDefault::set_(at::Tensor & self, at::Storage source, int64_t storage_offset, at::IntArrayRef size, at::IntArrayRef stride) {
  return xlatens[0].set_(source, storage_offset, size, stride);
}

at::Tensor & AtenIpexTypeDefault::set_(at::Tensor & self, const at::Tensor & source) {
  return xlatens[0].set_(xlatens[1]);
}

at::Tensor & AtenIpexTypeDefault::set_(at::Tensor & self) {
  return xlatens[0].set_();
}

at::Tensor & AtenIpexTypeDefault::set_quantizer_(at::Tensor & self, at::ConstQuantizerPtr quantizer) {
  return xlatens[0].set_quantizer_(quantizer);
}

bool AtenIpexTypeDefault::is_set_to(const at::Tensor & self, const at::Tensor & tensor) {
  return xlatens[0].is_set_to(xlatens[1]);
}

at::Tensor & AtenIpexTypeDefault::masked_fill_(at::Tensor & self, const at::Tensor & mask, at::Scalar value) {
  return xlatens[0].masked_fill_(xlatens[1], value);
}

at::Tensor AtenIpexTypeDefault::masked_fill(const at::Tensor & self, const at::Tensor & mask, at::Scalar value) {
  return at::masked_fill(xlatens[0], xlatens[1], value);
}

at::Tensor & AtenIpexTypeDefault::masked_fill_(at::Tensor & self, const at::Tensor & mask, const at::Tensor & value) {
  return xlatens[0].masked_fill_(xlatens[1], xlatens[2]);
}

at::Tensor AtenIpexTypeDefault::masked_fill(const at::Tensor & self, const at::Tensor & mask, const at::Tensor & value) {
  return at::masked_fill(xlatens[0], xlatens[1], xlatens[2]);
}

at::Tensor & AtenIpexTypeDefault::masked_scatter_(at::Tensor & self, const at::Tensor & mask, const at::Tensor & source) {
  return xlatens[0].masked_scatter_(xlatens[1], xlatens[2]);
}

at::Tensor AtenIpexTypeDefault::masked_scatter(const at::Tensor & self, const at::Tensor & mask, const at::Tensor & source) {
  return at::masked_scatter(xlatens[0], xlatens[1], xlatens[2]);
}

at::Tensor AtenIpexTypeDefault::view(const at::Tensor & self, at::IntArrayRef size) {
  return xlatens[0].view(size);
}

at::Tensor & AtenIpexTypeDefault::put_(at::Tensor & self, const at::Tensor & index, const at::Tensor & source, bool accumulate) {
  return xlatens[0].put_(xlatens[1], xlatens[2], accumulate);
}

at::Tensor & AtenIpexTypeDefault::index_add_(at::Tensor & self, int64_t dim, const at::Tensor & index, const at::Tensor & source) {
  return xlatens[0].index_add_(dim, xlatens[1], xlatens[2]);
}

at::Tensor AtenIpexTypeDefault::index_add(const at::Tensor & self, int64_t dim, const at::Tensor & index, const at::Tensor & source) {
  return at::index_add(xlatens[0], dim, xlatens[1], xlatens[2]);
}

at::Tensor & AtenIpexTypeDefault::index_fill_(at::Tensor & self, int64_t dim, const at::Tensor & index, at::Scalar value) {
  return xlatens[0].index_fill_(dim, xlatens[1], value);
}

at::Tensor AtenIpexTypeDefault::index_fill(const at::Tensor & self, int64_t dim, const at::Tensor & index, at::Scalar value) {
  return at::index_fill(xlatens[0], dim, xlatens[1], value);
}

at::Tensor & AtenIpexTypeDefault::index_fill_(at::Tensor & self, int64_t dim, const at::Tensor & index, const at::Tensor & value) {
  return xlatens[0].index_fill_(dim, xlatens[1], xlatens[2]);
}

at::Tensor AtenIpexTypeDefault::index_fill(const at::Tensor & self, int64_t dim, const at::Tensor & index, const at::Tensor & value) {
  return at::index_fill(xlatens[0], dim, xlatens[1], xlatens[2]);
}

at::Tensor & AtenIpexTypeDefault::scatter_(at::Tensor & self, int64_t dim, const at::Tensor & index, const at::Tensor & src) {
  return xlatens[0].scatter_(dim, xlatens[1], xlatens[2]);
}

at::Tensor AtenIpexTypeDefault::scatter(const at::Tensor & self, int64_t dim, const at::Tensor & index, const at::Tensor & src) {
  return at::scatter(xlatens[0], dim, xlatens[1], xlatens[2]);
}

at::Tensor & AtenIpexTypeDefault::scatter_(at::Tensor & self, int64_t dim, const at::Tensor & index, at::Scalar value) {
  return xlatens[0].scatter_(dim, xlatens[1], value);
}

at::Tensor AtenIpexTypeDefault::scatter(const at::Tensor & self, int64_t dim, const at::Tensor & index, at::Scalar value) {
  return at::scatter(xlatens[0], dim, xlatens[1], value);
}

at::Tensor & AtenIpexTypeDefault::scatter_add_(at::Tensor & self, int64_t dim, const at::Tensor & index, const at::Tensor & src) {
  return xlatens[0].scatter_add_(dim, xlatens[1], xlatens[2]);
}

at::Tensor AtenIpexTypeDefault::scatter_add(const at::Tensor & self, int64_t dim, const at::Tensor & index, const at::Tensor & src) {
  return at::scatter_add(xlatens[0], dim, xlatens[1], xlatens[2]);
}

at::Tensor & AtenIpexTypeDefault::lt_(at::Tensor & self, at::Scalar other) {
  return xlatens[0].lt_(other);
}

at::Tensor & AtenIpexTypeDefault::lt_(at::Tensor & self, const at::Tensor & other) {
  return xlatens[0].lt_(xlatens[1]);
}

at::Tensor & AtenIpexTypeDefault::gt_(at::Tensor & self, at::Scalar other) {
  return xlatens[0].gt_(other);
}

at::Tensor & AtenIpexTypeDefault::gt_(at::Tensor & self, const at::Tensor & other) {
  return xlatens[0].gt_(xlatens[1]);
}

at::Tensor & AtenIpexTypeDefault::le_(at::Tensor & self, at::Scalar other) {
  return xlatens[0].le_(other);
}

at::Tensor & AtenIpexTypeDefault::le_(at::Tensor & self, const at::Tensor & other) {
  return xlatens[0].le_(xlatens[1]);
}

at::Tensor & AtenIpexTypeDefault::ge_(at::Tensor & self, at::Scalar other) {
  return xlatens[0].ge_(other);
}

at::Tensor & AtenIpexTypeDefault::ge_(at::Tensor & self, const at::Tensor & other) {
  return xlatens[0].ge_(xlatens[1]);
}

at::Tensor & AtenIpexTypeDefault::eq_(at::Tensor & self, at::Scalar other) {
  return xlatens[0].eq_(other);
}

at::Tensor & AtenIpexTypeDefault::eq_(at::Tensor & self, const at::Tensor & other) {
  return xlatens[0].eq_(xlatens[1]);
}

at::Tensor & AtenIpexTypeDefault::ne_(at::Tensor & self, at::Scalar other) {
  return xlatens[0].ne_(other);
}

at::Tensor & AtenIpexTypeDefault::ne_(at::Tensor & self, const at::Tensor & other) {
  return xlatens[0].ne_(xlatens[1]);
}

at::Tensor AtenIpexTypeDefault::__and__(const at::Tensor & self, at::Scalar other) {
  return at::__and__(xlatens[0], other);
}

at::Tensor AtenIpexTypeDefault::__and__(const at::Tensor & self, const at::Tensor & other) {
  return at::__and__(xlatens[0], xlatens[1]);
}

at::Tensor & AtenIpexTypeDefault::__iand__(at::Tensor & self, at::Scalar other) {
  return xlatens[0].__iand__(other);
}

at::Tensor & AtenIpexTypeDefault::__iand__(at::Tensor & self, const at::Tensor & other) {
  return xlatens[0].__iand__(xlatens[1]);
}

at::Tensor AtenIpexTypeDefault::__or__(const at::Tensor & self, at::Scalar other) {
  return at::__or__(xlatens[0], other);
}

at::Tensor AtenIpexTypeDefault::__or__(const at::Tensor & self, const at::Tensor & other) {
  return at::__or__(xlatens[0], xlatens[1]);
}

at::Tensor & AtenIpexTypeDefault::__ior__(at::Tensor & self, at::Scalar other) {
  return xlatens[0].__ior__(other);
}

at::Tensor & AtenIpexTypeDefault::__ior__(at::Tensor & self, const at::Tensor & other) {
  return xlatens[0].__ior__(xlatens[1]);
}

at::Tensor AtenIpexTypeDefault::__xor__(const at::Tensor & self, at::Scalar other) {
  return at::__xor__(xlatens[0], other);
}

at::Tensor AtenIpexTypeDefault::__xor__(const at::Tensor & self, const at::Tensor & other) {
  return at::__xor__(xlatens[0], xlatens[1]);
}

at::Tensor & AtenIpexTypeDefault::__ixor__(at::Tensor & self, at::Scalar other) {
  return xlatens[0].__ixor__(other);
}

at::Tensor & AtenIpexTypeDefault::__ixor__(at::Tensor & self, const at::Tensor & other) {
  return xlatens[0].__ixor__(xlatens[1]);
}

at::Tensor AtenIpexTypeDefault::__lshift__(const at::Tensor & self, at::Scalar other) {
  return at::__lshift__(xlatens[0], other);
}

at::Tensor AtenIpexTypeDefault::__lshift__(const at::Tensor & self, const at::Tensor & other) {
  return at::__lshift__(xlatens[0], xlatens[1]);
}

at::Tensor & AtenIpexTypeDefault::__ilshift__(at::Tensor & self, at::Scalar other) {
  return xlatens[0].__ilshift__(other);
}

at::Tensor & AtenIpexTypeDefault::__ilshift__(at::Tensor & self, const at::Tensor & other) {
  return xlatens[0].__ilshift__(xlatens[1]);
}

at::Tensor AtenIpexTypeDefault::__rshift__(const at::Tensor & self, at::Scalar other) {
  return at::__rshift__(xlatens[0], other);
}

at::Tensor AtenIpexTypeDefault::__rshift__(const at::Tensor & self, const at::Tensor & other) {
  return at::__rshift__(xlatens[0], xlatens[1]);
}

at::Tensor & AtenIpexTypeDefault::__irshift__(at::Tensor & self, at::Scalar other) {
  return xlatens[0].__irshift__(other);
}

at::Tensor & AtenIpexTypeDefault::__irshift__(at::Tensor & self, const at::Tensor & other) {
  return xlatens[0].__irshift__(xlatens[1]);
}

at::Tensor & AtenIpexTypeDefault::lgamma_(at::Tensor & self) {
  return xlatens[0].lgamma_();
}

at::Tensor & AtenIpexTypeDefault::atan2_(at::Tensor & self, const at::Tensor & other) {
  return xlatens[0].atan2_(xlatens[1]);
}

at::Tensor & AtenIpexTypeDefault::tril_(at::Tensor & self, int64_t diagonal) {
  return xlatens[0].tril_(diagonal);
}

at::Tensor & AtenIpexTypeDefault::triu_(at::Tensor & self, int64_t diagonal) {
  return xlatens[0].triu_(diagonal);
}

at::Tensor & AtenIpexTypeDefault::digamma_(at::Tensor & self) {
  return xlatens[0].digamma_();
}

at::Tensor & AtenIpexTypeDefault::polygamma_(at::Tensor & self, int64_t n) {
  return xlatens[0].polygamma_(n);
}

at::Tensor & AtenIpexTypeDefault::erfinv_(at::Tensor & self) {
  return xlatens[0].erfinv_();
}

at::Tensor & AtenIpexTypeDefault::renorm_(at::Tensor & self, at::Scalar p, int64_t dim, at::Scalar maxnorm) {
  return xlatens[0].renorm_(p, dim, maxnorm);
}

at::Tensor & AtenIpexTypeDefault::pow_(at::Tensor & self, at::Scalar exponent) {
  return xlatens[0].pow_(exponent);
}

at::Tensor & AtenIpexTypeDefault::pow_(at::Tensor & self, const at::Tensor & exponent) {
  return xlatens[0].pow_(xlatens[1]);
}

at::Tensor & AtenIpexTypeDefault::lerp_(at::Tensor & self, const at::Tensor & end, at::Scalar weight) {
  return xlatens[0].lerp_(xlatens[1], weight);
}

at::Tensor & AtenIpexTypeDefault::lerp_(at::Tensor & self, const at::Tensor & end, const at::Tensor & weight) {
  return xlatens[0].lerp_(xlatens[1], xlatens[2]);
}

at::Tensor & AtenIpexTypeDefault::sign_(at::Tensor & self) {
  return xlatens[0].sign_();
}

at::Tensor & AtenIpexTypeDefault::fmod_(at::Tensor & self, at::Scalar other) {
  return xlatens[0].fmod_(other);
}

at::Tensor & AtenIpexTypeDefault::fmod_(at::Tensor & self, const at::Tensor & other) {
  return xlatens[0].fmod_(xlatens[1]);
}

at::Tensor & AtenIpexTypeDefault::remainder_(at::Tensor & self, at::Scalar other) {
  return xlatens[0].remainder_(other);
}

at::Tensor & AtenIpexTypeDefault::remainder_(at::Tensor & self, const at::Tensor & other) {
  return xlatens[0].remainder_(xlatens[1]);
}

at::Tensor & AtenIpexTypeDefault::addbmm_(at::Tensor & self, const at::Tensor & batch1, const at::Tensor & batch2, at::Scalar beta, at::Scalar alpha) {
  return xlatens[0].addbmm_(xlatens[1], xlatens[2], beta, alpha);
}

at::Tensor & AtenIpexTypeDefault::addbmm_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & batch1, const at::Tensor & batch2, at::Scalar beta, at::Scalar alpha) {
  return at::addbmm_out(xlatens[0], xlatens[1], xlatens[2], xlatens[3], beta, alpha);
}

at::Tensor AtenIpexTypeDefault::addbmm(const at::Tensor & self, const at::Tensor & batch1, const at::Tensor & batch2, at::Scalar beta, at::Scalar alpha) {
  return at::addbmm(xlatens[0], xlatens[1], xlatens[2], beta, alpha);
}

at::Tensor & AtenIpexTypeDefault::addcdiv_(at::Tensor & self, const at::Tensor & tensor1, const at::Tensor & tensor2, at::Scalar value) {
  return xlatens[0].addcdiv_(xlatens[1], xlatens[2], value);
}

at::Tensor & AtenIpexTypeDefault::random_(at::Tensor & self, int64_t from, int64_t to, at::Generator * generator) {
  return xlatens[0].random_(from, to, generator);
}

at::Tensor & AtenIpexTypeDefault::random_(at::Tensor & self, int64_t to, at::Generator * generator) {
  return xlatens[0].random_(to, generator);
}

at::Tensor & AtenIpexTypeDefault::random_(at::Tensor & self, at::Generator * generator) {
  return xlatens[0].random_(generator);
}

at::Tensor & AtenIpexTypeDefault::uniform_(at::Tensor & self, double from, double to, at::Generator * generator) {
  return xlatens[0].uniform_(from, to, generator);
}

at::Tensor & AtenIpexTypeDefault::normal_(at::Tensor & self, double mean, double std, at::Generator * generator) {
  return xlatens[0].normal_(mean, std, generator);
}

at::Tensor & AtenIpexTypeDefault::cauchy_(at::Tensor & self, double median, double sigma, at::Generator * generator) {
  return xlatens[0].cauchy_(median, sigma, generator);
}

at::Tensor & AtenIpexTypeDefault::log_normal_(at::Tensor & self, double mean, double std, at::Generator * generator) {
  return xlatens[0].log_normal_(mean, std, generator);
}

at::Tensor & AtenIpexTypeDefault::exponential_(at::Tensor & self, double lambd, at::Generator * generator) {
  return xlatens[0].exponential_(lambd, generator);
}

at::Tensor & AtenIpexTypeDefault::geometric_(at::Tensor & self, double p, at::Generator * generator) {
  return xlatens[0].geometric_(p, generator);
}

at::Tensor & AtenIpexTypeDefault::diag_out(at::Tensor & out, const at::Tensor & self, int64_t diagonal) {
  return at::diag_out(xlatens[0], xlatens[1], diagonal);
}

at::Tensor AtenIpexTypeDefault::diag(const at::Tensor & self, int64_t diagonal) {
  return at::diag(xlatens[0], diagonal);
}

at::Tensor & AtenIpexTypeDefault::cross_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & other, c10::optional<int64_t> dim) {
  return at::cross_out(xlatens[0], xlatens[1], xlatens[2], dim);
}

at::Tensor AtenIpexTypeDefault::cross(const at::Tensor & self, const at::Tensor & other, c10::optional<int64_t> dim) {
  return at::cross(xlatens[0], xlatens[1], dim);
}

at::Tensor & AtenIpexTypeDefault::triu_out(at::Tensor & out, const at::Tensor & self, int64_t diagonal) {
  return at::triu_out(xlatens[0], xlatens[1], diagonal);
}

at::Tensor AtenIpexTypeDefault::triu(const at::Tensor & self, int64_t diagonal) {
  return at::triu(xlatens[0], diagonal);
}

at::Tensor & AtenIpexTypeDefault::tril_out(at::Tensor & out, const at::Tensor & self, int64_t diagonal) {
  return at::tril_out(xlatens[0], xlatens[1], diagonal);
}

at::Tensor AtenIpexTypeDefault::tril(const at::Tensor & self, int64_t diagonal) {
  return at::tril(xlatens[0], diagonal);
}

at::Tensor AtenIpexTypeDefault::tril_indices(int64_t row, int64_t col, int64_t offset, const at::TensorOptions & options) {
  return at::tril_indices(row, col, offset, options);
}

at::Tensor AtenIpexTypeDefault::triu_indices(int64_t row, int64_t col, int64_t offset, const at::TensorOptions & options) {
  return at::triu_indices(row, col, offset, options);
}

at::Tensor AtenIpexTypeDefault::trace(const at::Tensor & self) {
  return at::trace(xlatens[0]);
}

at::Tensor & AtenIpexTypeDefault::ne_out(at::Tensor & out, const at::Tensor & self, at::Scalar other) {
  return at::ne_out(xlatens[0], xlatens[1], other);
}

at::Tensor AtenIpexTypeDefault::ne(const at::Tensor & self, at::Scalar other) {
  return at::ne(xlatens[0], other);
}

at::Tensor & AtenIpexTypeDefault::ne_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & other) {
  return at::ne_out(xlatens[0], xlatens[1], xlatens[2]);
}

at::Tensor AtenIpexTypeDefault::ne(const at::Tensor & self, const at::Tensor & other) {
  return at::ne(xlatens[0], xlatens[1]);
}

at::Tensor & AtenIpexTypeDefault::eq_out(at::Tensor & out, const at::Tensor & self, at::Scalar other) {
  return at::eq_out(xlatens[0], xlatens[1], other);
}

at::Tensor AtenIpexTypeDefault::eq(const at::Tensor & self, at::Scalar other) {
  return at::eq(xlatens[0], other);
}

at::Tensor & AtenIpexTypeDefault::eq_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & other) {
  return at::eq_out(xlatens[0], xlatens[1], xlatens[2]);
}

at::Tensor AtenIpexTypeDefault::eq(const at::Tensor & self, const at::Tensor & other) {
  return at::eq(xlatens[0], xlatens[1]);
}

at::Tensor & AtenIpexTypeDefault::ge_out(at::Tensor & out, const at::Tensor & self, at::Scalar other) {
  return at::ge_out(xlatens[0], xlatens[1], other);
}

at::Tensor AtenIpexTypeDefault::ge(const at::Tensor & self, at::Scalar other) {
  return at::ge(xlatens[0], other);
}

at::Tensor & AtenIpexTypeDefault::ge_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & other) {
  return at::ge_out(xlatens[0], xlatens[1], xlatens[2]);
}

at::Tensor AtenIpexTypeDefault::ge(const at::Tensor & self, const at::Tensor & other) {
  return at::ge(xlatens[0], xlatens[1]);
}

at::Tensor & AtenIpexTypeDefault::le_out(at::Tensor & out, const at::Tensor & self, at::Scalar other) {
  return at::le_out(xlatens[0], xlatens[1], other);
}

at::Tensor AtenIpexTypeDefault::le(const at::Tensor & self, at::Scalar other) {
  return at::le(xlatens[0], other);
}

at::Tensor & AtenIpexTypeDefault::le_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & other) {
  return at::le_out(xlatens[0], xlatens[1], xlatens[2]);
}

at::Tensor AtenIpexTypeDefault::le(const at::Tensor & self, const at::Tensor & other) {
  return at::le(xlatens[0], xlatens[1]);
}

at::Tensor & AtenIpexTypeDefault::gt_out(at::Tensor & out, const at::Tensor & self, at::Scalar other) {
  return at::gt_out(xlatens[0], xlatens[1], other);
}

at::Tensor AtenIpexTypeDefault::gt(const at::Tensor & self, at::Scalar other) {
  return at::gt(xlatens[0], other);
}

at::Tensor & AtenIpexTypeDefault::gt_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & other) {
  return at::gt_out(xlatens[0], xlatens[1], xlatens[2]);
}

at::Tensor AtenIpexTypeDefault::gt(const at::Tensor & self, const at::Tensor & other) {
  return at::gt(xlatens[0], xlatens[1]);
}

at::Tensor & AtenIpexTypeDefault::lt_out(at::Tensor & out, const at::Tensor & self, at::Scalar other) {
  return at::lt_out(xlatens[0], xlatens[1], other);
}

at::Tensor AtenIpexTypeDefault::lt(const at::Tensor & self, at::Scalar other) {
  return at::lt(xlatens[0], other);
}

at::Tensor & AtenIpexTypeDefault::lt_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & other) {
  return at::lt_out(xlatens[0], xlatens[1], xlatens[2]);
}

at::Tensor AtenIpexTypeDefault::lt(const at::Tensor & self, const at::Tensor & other) {
  return at::lt(xlatens[0], xlatens[1]);
}

at::Tensor & AtenIpexTypeDefault::take_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & index) {
  return at::take_out(xlatens[0], xlatens[1], xlatens[2]);
}

at::Tensor AtenIpexTypeDefault::take(const at::Tensor & self, const at::Tensor & index) {
  return at::take(xlatens[0], xlatens[1]);
}

at::Tensor & AtenIpexTypeDefault::index_select_out(at::Tensor & out, const at::Tensor & self, int64_t dim, const at::Tensor & index) {
  auto index_select_out_tmp = AtenXlaType::index_select(self, dim, index);
  out.unsafeGetTensorImpl()->shallow_copy_from(index_select_out_tmp.getIntrusivePtr());
  return out;
}

at::Tensor AtenIpexTypeDefault::index_select(const at::Tensor & self, int64_t dim, const at::Tensor & index) {
  return at::index_select(xlatens[0], dim, xlatens[1]);
}

at::Tensor & AtenIpexTypeDefault::masked_select_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & mask) {
  return at::masked_select_out(xlatens[0], xlatens[1], xlatens[2]);
}

at::Tensor AtenIpexTypeDefault::masked_select(const at::Tensor & self, const at::Tensor & mask) {
  return at::masked_select(xlatens[0], xlatens[1]);
}

at::Tensor & AtenIpexTypeDefault::nonzero_out(at::Tensor & out, const at::Tensor & self) {
  return at::nonzero_out(xlatens[0], xlatens[1]);
}

at::Tensor AtenIpexTypeDefault::nonzero(const at::Tensor & self) {
  return at::nonzero(xlatens[0]);
}

std::vector<at::Tensor> AtenIpexTypeDefault::nonzero_numpy(const at::Tensor & self) {
  return at::nonzero_numpy(xlatens[0]);
}

at::Tensor & AtenIpexTypeDefault::gather_out(at::Tensor & out, const at::Tensor & self, int64_t dim, const at::Tensor & index, bool sparse_grad) {
  auto gather_out_tmp = AtenXlaType::gather(self, dim, index, sparse_grad);
  out.unsafeGetTensorImpl()->shallow_copy_from(gather_out_tmp.getIntrusivePtr());
  return out;
}

at::Tensor AtenIpexTypeDefault::gather(const at::Tensor & self, int64_t dim, const at::Tensor & index, bool sparse_grad) {
  return at::gather(xlatens[0], dim, xlatens[1], sparse_grad);
}

at::Tensor AtenIpexTypeDefault::_gather_sparse_backward(const at::Tensor & self, int64_t dim, const at::Tensor & index, const at::Tensor & grad) {
  return at::_gather_sparse_backward(xlatens[0], dim, xlatens[1], xlatens[2]);
}

at::Tensor & AtenIpexTypeDefault::addcmul_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & tensor1, const at::Tensor & tensor2, at::Scalar value) {
  return at::addcmul_out(xlatens[0], xlatens[1], xlatens[2], xlatens[3], value);
}

at::Tensor AtenIpexTypeDefault::addcmul(const at::Tensor & self, const at::Tensor & tensor1, const at::Tensor & tensor2, at::Scalar value) {
  return at::addcmul(xlatens[0], xlatens[1], xlatens[2], value);
}

at::Tensor & AtenIpexTypeDefault::addcmul_(at::Tensor & self, const at::Tensor & tensor1, const at::Tensor & tensor2, at::Scalar value) {
  return xlatens[0].addcmul_(xlatens[1], xlatens[2], value);
}

at::Tensor & AtenIpexTypeDefault::addcdiv_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & tensor1, const at::Tensor & tensor2, at::Scalar value) {
  return at::addcdiv_out(xlatens[0], xlatens[1], xlatens[2], xlatens[3], value);
}

at::Tensor AtenIpexTypeDefault::addcdiv(const at::Tensor & self, const at::Tensor & tensor1, const at::Tensor & tensor2, at::Scalar value) {
  return at::addcdiv(xlatens[0], xlatens[1], xlatens[2], value);
}

std::tuple<at::Tensor &,at::Tensor &> AtenIpexTypeDefault::lstsq_out(at::Tensor & X, at::Tensor & qr, const at::Tensor & self, const at::Tensor & A) {
  return at::lstsq_out(xlatens[0], xlatens[1], xlatens[2], xlatens[3]);
}

std::tuple<at::Tensor,at::Tensor> AtenIpexTypeDefault::lstsq(const at::Tensor & self, const at::Tensor & A) {
  return at::lstsq(xlatens[0], xlatens[1]);
}

std::tuple<at::Tensor &,at::Tensor &> AtenIpexTypeDefault::triangular_solve_out(at::Tensor & X, at::Tensor & M, const at::Tensor & self, const at::Tensor & A, bool upper, bool transpose, bool unitriangular) {
  return at::triangular_solve_out(xlatens[0], xlatens[1], xlatens[2], xlatens[3], upper, transpose, unitriangular);
}

std::tuple<at::Tensor,at::Tensor> AtenIpexTypeDefault::triangular_solve(const at::Tensor & self, const at::Tensor & A, bool upper, bool transpose, bool unitriangular) {
  return at::triangular_solve(xlatens[0], xlatens[1], upper, transpose, unitriangular);
}

std::tuple<at::Tensor,at::Tensor> AtenIpexTypeDefault::_triangular_solve_helper(const at::Tensor & self, const at::Tensor & A, bool upper, bool transpose, bool unitriangular) {
  return at::_triangular_solve_helper(xlatens[0], xlatens[1], upper, transpose, unitriangular);
}

std::tuple<at::Tensor &,at::Tensor &> AtenIpexTypeDefault::symeig_out(at::Tensor & e, at::Tensor & V, const at::Tensor & self, bool eigenvectors, bool upper) {
  return at::symeig_out(xlatens[0], xlatens[1], xlatens[2], eigenvectors, upper);
}

std::tuple<at::Tensor,at::Tensor> AtenIpexTypeDefault::symeig(const at::Tensor & self, bool eigenvectors, bool upper) {
  return at::symeig(xlatens[0], eigenvectors, upper);
}

std::tuple<at::Tensor,at::Tensor> AtenIpexTypeDefault::_symeig_helper(const at::Tensor & self, bool eigenvectors, bool upper) {
  return at::_symeig_helper(xlatens[0], eigenvectors, upper);
}

std::tuple<at::Tensor &,at::Tensor &> AtenIpexTypeDefault::eig_out(at::Tensor & e, at::Tensor & v, const at::Tensor & self, bool eigenvectors) {
  return at::eig_out(xlatens[0], xlatens[1], xlatens[2], eigenvectors);
}

std::tuple<at::Tensor,at::Tensor> AtenIpexTypeDefault::eig(const at::Tensor & self, bool eigenvectors) {
  return at::eig(xlatens[0], eigenvectors);
}

std::tuple<at::Tensor &,at::Tensor &,at::Tensor &> AtenIpexTypeDefault::svd_out(at::Tensor & U, at::Tensor & S, at::Tensor & V, const at::Tensor & self, bool some, bool compute_uv) {
  return at::svd_out(xlatens[0], xlatens[1], xlatens[2], xlatens[3], some, compute_uv);
}

std::tuple<at::Tensor,at::Tensor,at::Tensor> AtenIpexTypeDefault::svd(const at::Tensor & self, bool some, bool compute_uv) {
  return at::svd(xlatens[0], some, compute_uv);
}

std::tuple<at::Tensor,at::Tensor,at::Tensor> AtenIpexTypeDefault::_svd_helper(const at::Tensor & self, bool some, bool compute_uv) {
  return at::_svd_helper(xlatens[0], some, compute_uv);
}

at::Tensor & AtenIpexTypeDefault::cholesky_out(at::Tensor & out, const at::Tensor & self, bool upper) {
  return at::cholesky_out(xlatens[0], xlatens[1], upper);
}

at::Tensor AtenIpexTypeDefault::cholesky(const at::Tensor & self, bool upper) {
  return at::cholesky(xlatens[0], upper);
}

at::Tensor AtenIpexTypeDefault::_cholesky_helper(const at::Tensor & self, bool upper) {
  return at::_cholesky_helper(xlatens[0], upper);
}

at::Tensor & AtenIpexTypeDefault::cholesky_solve_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & input2, bool upper) {
  return at::cholesky_solve_out(xlatens[0], xlatens[1], xlatens[2], upper);
}

at::Tensor AtenIpexTypeDefault::cholesky_solve(const at::Tensor & self, const at::Tensor & input2, bool upper) {
  return at::cholesky_solve(xlatens[0], xlatens[1], upper);
}

at::Tensor AtenIpexTypeDefault::_cholesky_solve_helper(const at::Tensor & self, const at::Tensor & A, bool upper) {
  return at::_cholesky_solve_helper(xlatens[0], xlatens[1], upper);
}

std::tuple<at::Tensor,at::Tensor> AtenIpexTypeDefault::solve(const at::Tensor & self, const at::Tensor & A) {
  return at::solve(xlatens[0], xlatens[1]);
}

std::tuple<at::Tensor &,at::Tensor &> AtenIpexTypeDefault::solve_out(at::Tensor & solution, at::Tensor & lu, const at::Tensor & self, const at::Tensor & A) {
  return at::solve_out(xlatens[0], xlatens[1], xlatens[2], xlatens[3]);
}

std::tuple<at::Tensor,at::Tensor> AtenIpexTypeDefault::_solve_helper(const at::Tensor & self, const at::Tensor & A) {
  return at::_solve_helper(xlatens[0], xlatens[1]);
}

at::Tensor & AtenIpexTypeDefault::cholesky_inverse_out(at::Tensor & out, const at::Tensor & self, bool upper) {
  return at::cholesky_inverse_out(xlatens[0], xlatens[1], upper);
}

at::Tensor AtenIpexTypeDefault::cholesky_inverse(const at::Tensor & self, bool upper) {
  return at::cholesky_inverse(xlatens[0], upper);
}

std::tuple<at::Tensor &,at::Tensor &> AtenIpexTypeDefault::qr_out(at::Tensor & Q, at::Tensor & R, const at::Tensor & self, bool some) {
  return at::qr_out(xlatens[0], xlatens[1], xlatens[2], some);
}

std::tuple<at::Tensor,at::Tensor> AtenIpexTypeDefault::qr(const at::Tensor & self, bool some) {
  return at::qr(xlatens[0], some);
}

std::tuple<at::Tensor,at::Tensor> AtenIpexTypeDefault::_qr_helper(const at::Tensor & self, bool some) {
  return at::_qr_helper(xlatens[0], some);
}

std::tuple<at::Tensor &,at::Tensor &> AtenIpexTypeDefault::geqrf_out(at::Tensor & a, at::Tensor & tau, const at::Tensor & self) {
  return at::geqrf_out(xlatens[0], xlatens[1], xlatens[2]);
}

std::tuple<at::Tensor,at::Tensor> AtenIpexTypeDefault::geqrf(const at::Tensor & self) {
  return at::geqrf(xlatens[0]);
}

at::Tensor & AtenIpexTypeDefault::orgqr_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & input2) {
  return at::orgqr_out(xlatens[0], xlatens[1], xlatens[2]);
}

at::Tensor AtenIpexTypeDefault::orgqr(const at::Tensor & self, const at::Tensor & input2) {
  return at::orgqr(xlatens[0], xlatens[1]);
}

at::Tensor & AtenIpexTypeDefault::ormqr_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & input2, const at::Tensor & input3, bool left, bool transpose) {
  return at::ormqr_out(xlatens[0], xlatens[1], xlatens[2], xlatens[3], left, transpose);
}

at::Tensor AtenIpexTypeDefault::ormqr(const at::Tensor & self, const at::Tensor & input2, const at::Tensor & input3, bool left, bool transpose) {
  return at::ormqr(xlatens[0], xlatens[1], xlatens[2], left, transpose);
}

std::tuple<at::Tensor,at::Tensor,at::Tensor> AtenIpexTypeDefault::_lu_with_info(const at::Tensor & self, bool pivot, bool check_errors) {
  return at::_lu_with_info(xlatens[0], pivot, check_errors);
}

at::Tensor & AtenIpexTypeDefault::lu_solve_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & LU_data, const at::Tensor & LU_pivots) {
  return at::lu_solve_out(xlatens[0], xlatens[1], xlatens[2], xlatens[3]);
}

at::Tensor AtenIpexTypeDefault::lu_solve(const at::Tensor & self, const at::Tensor & LU_data, const at::Tensor & LU_pivots) {
  return at::lu_solve(xlatens[0], xlatens[1], xlatens[2]);
}

at::Tensor AtenIpexTypeDefault::_lu_solve_helper(const at::Tensor & self, const at::Tensor & LU_data, const at::Tensor & LU_pivots) {
  return at::_lu_solve_helper(xlatens[0], xlatens[1], xlatens[2]);
}

at::Tensor & AtenIpexTypeDefault::multinomial_out(at::Tensor & out, const at::Tensor & self, int64_t num_samples, bool replacement, at::Generator * generator) {
  return at::multinomial_out(xlatens[0], xlatens[1], num_samples, replacement, generator);
}

at::Tensor AtenIpexTypeDefault::multinomial(const at::Tensor & self, int64_t num_samples, bool replacement, at::Generator * generator) {
  return at::multinomial(xlatens[0], num_samples, replacement, generator);
}

std::tuple<at::Tensor,at::Tensor> AtenIpexTypeDefault::_multinomial_alias_setup(const at::Tensor & probs) {
  return at::_multinomial_alias_setup(xlatens[0]);
}

at::Tensor AtenIpexTypeDefault::_multinomial_alias_draw(const at::Tensor & J, const at::Tensor & q, int64_t num_samples, at::Generator * generator) {
  return at::_multinomial_alias_draw(xlatens[0], xlatens[1], num_samples, generator);
}

at::Tensor & AtenIpexTypeDefault::lgamma_out(at::Tensor & out, const at::Tensor & self) {
  return at::lgamma_out(xlatens[0], xlatens[1]);
}

at::Tensor AtenIpexTypeDefault::lgamma(const at::Tensor & self) {
  return at::lgamma(xlatens[0]);
}

at::Tensor & AtenIpexTypeDefault::digamma_out(at::Tensor & out, const at::Tensor & self) {
  return at::digamma_out(xlatens[0], xlatens[1]);
}

at::Tensor AtenIpexTypeDefault::digamma(const at::Tensor & self) {
  return at::digamma(xlatens[0]);
}

at::Tensor & AtenIpexTypeDefault::polygamma_out(at::Tensor & out, int64_t n, const at::Tensor & self) {
  return at::polygamma_out(xlatens[0], n, xlatens[1]);
}

at::Tensor AtenIpexTypeDefault::polygamma(int64_t n, const at::Tensor & self) {
  return at::polygamma(n, xlatens[0]);
}

at::Tensor & AtenIpexTypeDefault::erfinv_out(at::Tensor & out, const at::Tensor & self) {
  return at::erfinv_out(xlatens[0], xlatens[1]);
}

at::Tensor AtenIpexTypeDefault::erfinv(const at::Tensor & self) {
  return at::erfinv(xlatens[0]);
}

at::Tensor AtenIpexTypeDefault::dist(const at::Tensor & self, const at::Tensor & other, at::Scalar p) {
  return at::dist(xlatens[0], xlatens[1], p);
}

at::Tensor & AtenIpexTypeDefault::atan2_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & other) {
  return at::atan2_out(xlatens[0], xlatens[1], xlatens[2]);
}

at::Tensor AtenIpexTypeDefault::atan2(const at::Tensor & self, const at::Tensor & other) {
  return at::atan2(xlatens[0], xlatens[1]);
}

at::Tensor & AtenIpexTypeDefault::lerp_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & end, at::Scalar weight) {
  return at::lerp_out(xlatens[0], xlatens[1], xlatens[2], weight);
}

at::Tensor & AtenIpexTypeDefault::lerp_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & end, const at::Tensor & weight) {
  return at::lerp_out(xlatens[0], xlatens[1], xlatens[2], xlatens[3]);
}

at::Tensor AtenIpexTypeDefault::lerp(const at::Tensor & self, const at::Tensor & end, at::Scalar weight) {
  return at::lerp(xlatens[0], xlatens[1], weight);
}

at::Tensor AtenIpexTypeDefault::lerp(const at::Tensor & self, const at::Tensor & end, const at::Tensor & weight) {
  return at::lerp(xlatens[0], xlatens[1], xlatens[2]);
}

at::Tensor & AtenIpexTypeDefault::histc_out(at::Tensor & out, const at::Tensor & self, int64_t bins, at::Scalar min, at::Scalar max) {
  return at::histc_out(xlatens[0], xlatens[1], bins, min, max);
}

at::Tensor AtenIpexTypeDefault::histc(const at::Tensor & self, int64_t bins, at::Scalar min, at::Scalar max) {
  return at::histc(xlatens[0], bins, min, max);
}

at::Tensor & AtenIpexTypeDefault::sign_out(at::Tensor & out, const at::Tensor & self) {
  return at::sign_out(xlatens[0], xlatens[1]);
}

at::Tensor AtenIpexTypeDefault::sign(const at::Tensor & self) {
  return at::sign(xlatens[0]);
}

at::Tensor & AtenIpexTypeDefault::fmod_out(at::Tensor & out, const at::Tensor & self, at::Scalar other) {
  return at::fmod_out(xlatens[0], xlatens[1], other);
}

at::Tensor AtenIpexTypeDefault::fmod(const at::Tensor & self, at::Scalar other) {
  return at::fmod(xlatens[0], other);
}

at::Tensor & AtenIpexTypeDefault::fmod_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & other) {
  return at::fmod_out(xlatens[0], xlatens[1], xlatens[2]);
}

at::Tensor AtenIpexTypeDefault::fmod(const at::Tensor & self, const at::Tensor & other) {
  return at::fmod(xlatens[0], xlatens[1]);
}

at::Tensor & AtenIpexTypeDefault::remainder_out(at::Tensor & out, const at::Tensor & self, at::Scalar other) {
  return at::remainder_out(xlatens[0], xlatens[1], other);
}

at::Tensor AtenIpexTypeDefault::remainder(const at::Tensor & self, at::Scalar other) {
  return at::remainder(xlatens[0], other);
}

at::Tensor & AtenIpexTypeDefault::remainder_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & other) {
  return at::remainder_out(xlatens[0], xlatens[1], xlatens[2]);
}

at::Tensor AtenIpexTypeDefault::remainder(const at::Tensor & self, const at::Tensor & other) {
  return at::remainder(xlatens[0], xlatens[1]);
}

at::Tensor & AtenIpexTypeDefault::min_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & other) {
  return at::min_out(xlatens[0], xlatens[1], xlatens[2]);
}

at::Tensor AtenIpexTypeDefault::min(const at::Tensor & self, const at::Tensor & other) {
  return at::min(xlatens[0], xlatens[1]);
}

at::Tensor AtenIpexTypeDefault::min(const at::Tensor & self) {
  return at::min(xlatens[0]);
}

at::Tensor & AtenIpexTypeDefault::max_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & other) {
  return at::max_out(xlatens[0], xlatens[1], xlatens[2]);
}

at::Tensor AtenIpexTypeDefault::max(const at::Tensor & self, const at::Tensor & other) {
  return at::max(xlatens[0], xlatens[1]);
}

at::Tensor AtenIpexTypeDefault::max(const at::Tensor & self) {
  return at::max(xlatens[0]);
}

at::Tensor AtenIpexTypeDefault::median(const at::Tensor & self) {
  return at::median(xlatens[0]);
}

std::tuple<at::Tensor &,at::Tensor &> AtenIpexTypeDefault::sort_out(at::Tensor & values, at::Tensor & indices, const at::Tensor & self, int64_t dim, bool descending) {
  return at::sort_out(xlatens[0], xlatens[1], xlatens[2], dim, descending);
}

std::tuple<at::Tensor,at::Tensor> AtenIpexTypeDefault::sort(const at::Tensor & self, int64_t dim, bool descending) {
  return at::sort(xlatens[0], dim, descending);
}

at::Tensor AtenIpexTypeDefault::argsort(const at::Tensor & self, int64_t dim, bool descending) {
  return at::argsort(xlatens[0], dim, descending);
}

std::tuple<at::Tensor &,at::Tensor &> AtenIpexTypeDefault::topk_out(at::Tensor & values, at::Tensor & indices, const at::Tensor & self, int64_t k, int64_t dim, bool largest, bool sorted) {
  auto topk_out_tmp = AtenXlaType::topk(self, k, dim, largest, sorted);
  values.unsafeGetTensorImpl()->shallow_copy_from(std::get<0>(topk_out_tmp).getIntrusivePtr());
  indices.unsafeGetTensorImpl()->shallow_copy_from(std::get<1>(topk_out_tmp).getIntrusivePtr());
  return std::tuple<at::Tensor &,at::Tensor &>(values, indices);
}

std::tuple<at::Tensor,at::Tensor> AtenIpexTypeDefault::topk(const at::Tensor & self, int64_t k, int64_t dim, bool largest, bool sorted) {
  return at::topk(xlatens[0], k, dim, largest, sorted);
}

at::Tensor AtenIpexTypeDefault::all(const at::Tensor & self) {
  return at::all(xlatens[0]);
}

at::Tensor AtenIpexTypeDefault::any(const at::Tensor & self) {
  return at::any(xlatens[0]);
}

at::Tensor & AtenIpexTypeDefault::renorm_out(at::Tensor & out, const at::Tensor & self, at::Scalar p, int64_t dim, at::Scalar maxnorm) {
  return at::renorm_out(xlatens[0], xlatens[1], p, dim, maxnorm);
}

at::Tensor AtenIpexTypeDefault::renorm(const at::Tensor & self, at::Scalar p, int64_t dim, at::Scalar maxnorm) {
  return at::renorm(xlatens[0], p, dim, maxnorm);
}

at::Tensor AtenIpexTypeDefault::unfold(const at::Tensor & self, int64_t dimension, int64_t size, int64_t step) {
  return xlatens[0].unfold(dimension, size, step);
}

bool AtenIpexTypeDefault::equal(const at::Tensor & self, const at::Tensor & other) {
  return at::equal(xlatens[0], xlatens[1]);
}

at::Tensor & AtenIpexTypeDefault::pow_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & exponent) {
  return at::pow_out(xlatens[0], xlatens[1], xlatens[2]);
}

at::Tensor AtenIpexTypeDefault::pow(const at::Tensor & self, const at::Tensor & exponent) {
  return at::pow(xlatens[0], xlatens[1]);
}

at::Tensor & AtenIpexTypeDefault::pow_out(at::Tensor & out, at::Scalar self, const at::Tensor & exponent) {
  return at::pow_out(xlatens[0], self, xlatens[1]);
}

at::Tensor AtenIpexTypeDefault::pow(at::Scalar self, const at::Tensor & exponent) {
  return at::pow(self, xlatens[0]);
}

at::Tensor & AtenIpexTypeDefault::normal_out(at::Tensor & out, const at::Tensor & mean, double std, at::Generator * generator) {
  return at::normal_out(xlatens[0], xlatens[1], std, generator);
}

at::Tensor AtenIpexTypeDefault::normal(const at::Tensor & mean, double std, at::Generator * generator) {
  return at::normal(xlatens[0], std, generator);
}

at::Tensor & AtenIpexTypeDefault::normal_out(at::Tensor & out, double mean, const at::Tensor & std, at::Generator * generator) {
  return at::normal_out(xlatens[0], mean, xlatens[1], generator);
}

at::Tensor AtenIpexTypeDefault::normal(double mean, const at::Tensor & std, at::Generator * generator) {
  return at::normal(mean, xlatens[0], generator);
}

at::Tensor & AtenIpexTypeDefault::normal_out(at::Tensor & out, const at::Tensor & mean, const at::Tensor & std, at::Generator * generator) {
  return at::normal_out(xlatens[0], xlatens[1], xlatens[2], generator);
}

at::Tensor AtenIpexTypeDefault::normal(const at::Tensor & mean, const at::Tensor & std, at::Generator * generator) {
  return at::normal(xlatens[0], xlatens[1], generator);
}

at::Tensor AtenIpexTypeDefault::normal(double mean, double std, at::IntArrayRef size, at::Generator * generator, const at::TensorOptions & options) {
  return at::normal(mean, std, size, generator, options);
}

at::Tensor & AtenIpexTypeDefault::normal_out(at::Tensor & out, double mean, double std, at::IntArrayRef size, at::Generator * generator) {
  return at::normal_out(xlatens[0], mean, std, size, generator);
}

at::Tensor AtenIpexTypeDefault::alias(const at::Tensor & self) {
  return at::alias(xlatens[0]);
}

at::Tensor AtenIpexTypeDefault::_addr(const at::Tensor & self, const at::Tensor & vec1, const at::Tensor & vec2, at::Scalar beta, at::Scalar alpha) {
  return at::_addr(xlatens[0], xlatens[1], xlatens[2], beta, alpha);
}

at::Tensor & AtenIpexTypeDefault::_addr_(at::Tensor & self, const at::Tensor & vec1, const at::Tensor & vec2, at::Scalar beta, at::Scalar alpha) {
  return at::_addr_(xlatens[0], xlatens[1], xlatens[2], beta, alpha);
}

at::Tensor & AtenIpexTypeDefault::_addr_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & vec1, const at::Tensor & vec2, at::Scalar beta, at::Scalar alpha) {
  return at::_addr_out(xlatens[0], xlatens[1], xlatens[2], xlatens[3], beta, alpha);
}

at::Tensor & AtenIpexTypeDefault::_index_copy_(at::Tensor & self, int64_t dim, const at::Tensor & index, const at::Tensor & source) {
  return at::_index_copy_(xlatens[0], dim, xlatens[1], xlatens[2]);
}

at::Tensor AtenIpexTypeDefault::_cumsum(const at::Tensor & self, int64_t dim) {
  return at::_cumsum(xlatens[0], dim);
}

at::Tensor & AtenIpexTypeDefault::_cumsum_out(at::Tensor & out, const at::Tensor & self, int64_t dim) {
  return at::_cumsum_out(xlatens[0], xlatens[1], dim);
}

at::Tensor AtenIpexTypeDefault::_cumprod(const at::Tensor & self, int64_t dim) {
  return at::_cumprod(xlatens[0], dim);
}

at::Tensor & AtenIpexTypeDefault::_cumprod_out(at::Tensor & out, const at::Tensor & self, int64_t dim) {
  return at::_cumprod_out(xlatens[0], xlatens[1], dim);
}

at::Tensor AtenIpexTypeDefault::_var(const at::Tensor & self, bool unbiased) {
  return at::_var(xlatens[0], unbiased);
}

at::Tensor AtenIpexTypeDefault::_std(const at::Tensor & self, bool unbiased) {
  return at::_std(xlatens[0], unbiased);
}

at::Tensor & AtenIpexTypeDefault::_addmm_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & mat1, const at::Tensor & mat2, at::Scalar beta, at::Scalar alpha) {
  return at::_addmm_out(xlatens[0], xlatens[1], xlatens[2], xlatens[3], beta, alpha);
}

at::Tensor AtenIpexTypeDefault::_addmm(const at::Tensor & self, const at::Tensor & mat1, const at::Tensor & mat2, at::Scalar beta, at::Scalar alpha) {
  return at::_addmm(xlatens[0], xlatens[1], xlatens[2], beta, alpha);
}

at::Tensor & AtenIpexTypeDefault::_addmm_(at::Tensor & self, const at::Tensor & mat1, const at::Tensor & mat2, at::Scalar beta, at::Scalar alpha) {
  return at::_addmm_(xlatens[0], xlatens[1], xlatens[2], beta, alpha);
}

at::Tensor AtenIpexTypeDefault::_cat(at::TensorList tensors, int64_t dim) {
  auto l_tensors = bridge::XlaCreateTensorList(tensors);
  return at::_cat(l_tensors, dim);
}

at::Tensor & AtenIpexTypeDefault::_cat_out(at::Tensor & out, at::TensorList tensors, int64_t dim) {
  auto l_tensors = bridge::XlaCreateTensorList(tensors);
  return at::_cat_out(xlatens[0], l_tensors, dim);
}

std::tuple<at::Tensor,at::Tensor> AtenIpexTypeDefault::_mode(const at::Tensor & self, int64_t dim, bool keepdim) {
  return at::_mode(xlatens[0], dim, keepdim);
}

std::tuple<at::Tensor &,at::Tensor &> AtenIpexTypeDefault::_mode_out(at::Tensor & values, at::Tensor & indices, const at::Tensor & self, int64_t dim, bool keepdim) {
  return at::_mode_out(xlatens[0], xlatens[1], xlatens[2], dim, keepdim);
}

std::tuple<at::Tensor,at::Tensor> AtenIpexTypeDefault::_max(const at::Tensor & self, int64_t dim, bool keepdim) {
  return at::_max(xlatens[0], dim, keepdim);
}

std::tuple<at::Tensor &,at::Tensor &> AtenIpexTypeDefault::_max_out(at::Tensor & max, at::Tensor & max_indices, const at::Tensor & self, int64_t dim, bool keepdim) {
  return at::_max_out(xlatens[0], xlatens[1], xlatens[2], dim, keepdim);
}

std::tuple<at::Tensor,at::Tensor> AtenIpexTypeDefault::_min(const at::Tensor & self, int64_t dim, bool keepdim) {
  return at::_min(xlatens[0], dim, keepdim);
}

std::tuple<at::Tensor &,at::Tensor &> AtenIpexTypeDefault::_min_out(at::Tensor & min, at::Tensor & min_indices, const at::Tensor & self, int64_t dim, bool keepdim) {
  return at::_min_out(xlatens[0], xlatens[1], xlatens[2], dim, keepdim);
}

at::Tensor & AtenIpexTypeDefault::binary_cross_entropy_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & target, const at::Tensor & weight, int64_t reduction) {
  return at::binary_cross_entropy_out(xlatens[0], xlatens[1], xlatens[2], xlatens[3], reduction);
}

at::Tensor AtenIpexTypeDefault::binary_cross_entropy(const at::Tensor & self, const at::Tensor & target, const at::Tensor & weight, int64_t reduction) {
  return at::binary_cross_entropy(xlatens[0], xlatens[1], xlatens[2], reduction);
}

at::Tensor & AtenIpexTypeDefault::binary_cross_entropy_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & target, const at::Tensor & weight, int64_t reduction) {
  return at::binary_cross_entropy_backward_out(xlatens[0], xlatens[1], xlatens[2], xlatens[3], xlatens[4], reduction);
}

at::Tensor AtenIpexTypeDefault::binary_cross_entropy_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & target, const at::Tensor & weight, int64_t reduction) {
  return at::binary_cross_entropy_backward(xlatens[0], xlatens[1], xlatens[2], xlatens[3], reduction);
}

at::Tensor & AtenIpexTypeDefault::mse_loss_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & target, int64_t reduction) {
  return at::mse_loss_out(xlatens[0], xlatens[1], xlatens[2], reduction);
}

at::Tensor AtenIpexTypeDefault::mse_loss(const at::Tensor & self, const at::Tensor & target, int64_t reduction) {
  return at::mse_loss(xlatens[0], xlatens[1], reduction);
}

at::Tensor & AtenIpexTypeDefault::mse_loss_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & target, int64_t reduction) {
  return at::mse_loss_backward_out(xlatens[0], xlatens[1], xlatens[2], xlatens[3], reduction);
}

at::Tensor AtenIpexTypeDefault::mse_loss_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & target, int64_t reduction) {
  return at::mse_loss_backward(xlatens[0], xlatens[1], xlatens[2], reduction);
}

at::Tensor & AtenIpexTypeDefault::l1_loss_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & target, int64_t reduction) {
  return at::l1_loss_out(xlatens[0], xlatens[1], xlatens[2], reduction);
}

at::Tensor AtenIpexTypeDefault::l1_loss(const at::Tensor & self, const at::Tensor & target, int64_t reduction) {
  return at::l1_loss(xlatens[0], xlatens[1], reduction);
}

at::Tensor & AtenIpexTypeDefault::l1_loss_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & target, int64_t reduction) {
  return at::l1_loss_backward_out(xlatens[0], xlatens[1], xlatens[2], xlatens[3], reduction);
}

at::Tensor AtenIpexTypeDefault::l1_loss_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & target, int64_t reduction) {
  return at::l1_loss_backward(xlatens[0], xlatens[1], xlatens[2], reduction);
}

at::Tensor & AtenIpexTypeDefault::multi_margin_loss_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & target, at::Scalar p, at::Scalar margin, const at::Tensor & weight, int64_t reduction) {
  return at::multi_margin_loss_out(xlatens[0], xlatens[1], xlatens[2], p, margin, xlatens[3], reduction);
}

at::Tensor AtenIpexTypeDefault::multi_margin_loss(const at::Tensor & self, const at::Tensor & target, at::Scalar p, at::Scalar margin, const at::Tensor & weight, int64_t reduction) {
  return at::multi_margin_loss(xlatens[0], xlatens[1], p, margin, xlatens[2], reduction);
}

at::Tensor & AtenIpexTypeDefault::multi_margin_loss_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & target, at::Scalar p, at::Scalar margin, const at::Tensor & weight, int64_t reduction) {
  return at::multi_margin_loss_backward_out(xlatens[0], xlatens[1], xlatens[2], xlatens[3], p, margin, xlatens[4], reduction);
}

at::Tensor AtenIpexTypeDefault::multi_margin_loss_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & target, at::Scalar p, at::Scalar margin, const at::Tensor & weight, int64_t reduction) {
  return at::multi_margin_loss_backward(xlatens[0], xlatens[1], xlatens[2], p, margin, xlatens[3], reduction);
}

at::Tensor & AtenIpexTypeDefault::multilabel_margin_loss_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & target, int64_t reduction) {
  return at::multilabel_margin_loss_out(xlatens[0], xlatens[1], xlatens[2], reduction);
}

at::Tensor AtenIpexTypeDefault::multilabel_margin_loss(const at::Tensor & self, const at::Tensor & target, int64_t reduction) {
  return at::multilabel_margin_loss(xlatens[0], xlatens[1], reduction);
}

std::tuple<at::Tensor &,at::Tensor &> AtenIpexTypeDefault::multilabel_margin_loss_forward_out(at::Tensor & output, at::Tensor & is_target, const at::Tensor & self, const at::Tensor & target, int64_t reduction) {
  return at::multilabel_margin_loss_forward_out(xlatens[0], xlatens[1], xlatens[2], xlatens[3], reduction);
}

std::tuple<at::Tensor,at::Tensor> AtenIpexTypeDefault::multilabel_margin_loss_forward(const at::Tensor & self, const at::Tensor & target, int64_t reduction) {
  return at::multilabel_margin_loss_forward(xlatens[0], xlatens[1], reduction);
}

at::Tensor & AtenIpexTypeDefault::multilabel_margin_loss_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & target, int64_t reduction, const at::Tensor & is_target) {
  return at::multilabel_margin_loss_backward_out(xlatens[0], xlatens[1], xlatens[2], xlatens[3], reduction, xlatens[4]);
}

at::Tensor AtenIpexTypeDefault::multilabel_margin_loss_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & target, int64_t reduction, const at::Tensor & is_target) {
  return at::multilabel_margin_loss_backward(xlatens[0], xlatens[1], xlatens[2], reduction, xlatens[3]);
}

at::Tensor & AtenIpexTypeDefault::nll_loss_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & target, const at::Tensor & weight, int64_t reduction, int64_t ignore_index) {
  return at::nll_loss_out(xlatens[0], xlatens[1], xlatens[2], xlatens[3], reduction, ignore_index);
}

at::Tensor AtenIpexTypeDefault::nll_loss(const at::Tensor & self, const at::Tensor & target, const at::Tensor & weight, int64_t reduction, int64_t ignore_index) {
  return at::nll_loss(xlatens[0], xlatens[1], xlatens[2], reduction, ignore_index);
}

std::tuple<at::Tensor &,at::Tensor &> AtenIpexTypeDefault::nll_loss_forward_out(at::Tensor & output, at::Tensor & total_weight, const at::Tensor & self, const at::Tensor & target, const at::Tensor & weight, int64_t reduction, int64_t ignore_index) {
  return at::nll_loss_forward_out(xlatens[0], xlatens[1], xlatens[2], xlatens[3], xlatens[4], reduction, ignore_index);
}

std::tuple<at::Tensor,at::Tensor> AtenIpexTypeDefault::nll_loss_forward(const at::Tensor & self, const at::Tensor & target, const at::Tensor & weight, int64_t reduction, int64_t ignore_index) {
  return at::nll_loss_forward(xlatens[0], xlatens[1], xlatens[2], reduction, ignore_index);
}

at::Tensor & AtenIpexTypeDefault::nll_loss_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & target, const at::Tensor & weight, int64_t reduction, int64_t ignore_index, const at::Tensor & total_weight) {
  return at::nll_loss_backward_out(xlatens[0], xlatens[1], xlatens[2], xlatens[3], xlatens[4], reduction, ignore_index, xlatens[5]);
}

at::Tensor AtenIpexTypeDefault::nll_loss_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & target, const at::Tensor & weight, int64_t reduction, int64_t ignore_index, const at::Tensor & total_weight) {
  return at::nll_loss_backward(xlatens[0], xlatens[1], xlatens[2], xlatens[3], reduction, ignore_index, xlatens[4]);
}

at::Tensor & AtenIpexTypeDefault::nll_loss2d_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & target, const at::Tensor & weight, int64_t reduction, int64_t ignore_index) {
  return at::nll_loss2d_out(xlatens[0], xlatens[1], xlatens[2], xlatens[3], reduction, ignore_index);
}

at::Tensor AtenIpexTypeDefault::nll_loss2d(const at::Tensor & self, const at::Tensor & target, const at::Tensor & weight, int64_t reduction, int64_t ignore_index) {
  return at::nll_loss2d(xlatens[0], xlatens[1], xlatens[2], reduction, ignore_index);
}

std::tuple<at::Tensor &,at::Tensor &> AtenIpexTypeDefault::nll_loss2d_forward_out(at::Tensor & output, at::Tensor & total_weight, const at::Tensor & self, const at::Tensor & target, const at::Tensor & weight, int64_t reduction, int64_t ignore_index) {
  return at::nll_loss2d_forward_out(xlatens[0], xlatens[1], xlatens[2], xlatens[3], xlatens[4], reduction, ignore_index);
}

std::tuple<at::Tensor,at::Tensor> AtenIpexTypeDefault::nll_loss2d_forward(const at::Tensor & self, const at::Tensor & target, const at::Tensor & weight, int64_t reduction, int64_t ignore_index) {
  return at::nll_loss2d_forward(xlatens[0], xlatens[1], xlatens[2], reduction, ignore_index);
}

at::Tensor & AtenIpexTypeDefault::nll_loss2d_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & target, const at::Tensor & weight, int64_t reduction, int64_t ignore_index, const at::Tensor & total_weight) {
  return at::nll_loss2d_backward_out(xlatens[0], xlatens[1], xlatens[2], xlatens[3], xlatens[4], reduction, ignore_index, xlatens[5]);
}

at::Tensor AtenIpexTypeDefault::nll_loss2d_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & target, const at::Tensor & weight, int64_t reduction, int64_t ignore_index, const at::Tensor & total_weight) {
  return at::nll_loss2d_backward(xlatens[0], xlatens[1], xlatens[2], xlatens[3], reduction, ignore_index, xlatens[4]);
}

at::Tensor & AtenIpexTypeDefault::smooth_l1_loss_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & target, int64_t reduction) {
  return at::smooth_l1_loss_out(xlatens[0], xlatens[1], xlatens[2], reduction);
}

at::Tensor AtenIpexTypeDefault::smooth_l1_loss(const at::Tensor & self, const at::Tensor & target, int64_t reduction) {
  return at::smooth_l1_loss(xlatens[0], xlatens[1], reduction);
}

at::Tensor & AtenIpexTypeDefault::smooth_l1_loss_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & target, int64_t reduction) {
  return at::smooth_l1_loss_backward_out(xlatens[0], xlatens[1], xlatens[2], xlatens[3], reduction);
}

at::Tensor AtenIpexTypeDefault::smooth_l1_loss_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & target, int64_t reduction) {
  return at::smooth_l1_loss_backward(xlatens[0], xlatens[1], xlatens[2], reduction);
}

at::Tensor & AtenIpexTypeDefault::soft_margin_loss_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & target, int64_t reduction) {
  return at::soft_margin_loss_out(xlatens[0], xlatens[1], xlatens[2], reduction);
}

at::Tensor AtenIpexTypeDefault::soft_margin_loss(const at::Tensor & self, const at::Tensor & target, int64_t reduction) {
  return at::soft_margin_loss(xlatens[0], xlatens[1], reduction);
}

at::Tensor & AtenIpexTypeDefault::soft_margin_loss_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & target, int64_t reduction) {
  return at::soft_margin_loss_backward_out(xlatens[0], xlatens[1], xlatens[2], xlatens[3], reduction);
}

at::Tensor AtenIpexTypeDefault::soft_margin_loss_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & target, int64_t reduction) {
  return at::soft_margin_loss_backward(xlatens[0], xlatens[1], xlatens[2], reduction);
}

at::Tensor & AtenIpexTypeDefault::elu_out(at::Tensor & out, const at::Tensor & self, at::Scalar alpha, at::Scalar scale, at::Scalar input_scale) {
  return at::elu_out(xlatens[0], xlatens[1], alpha, scale, input_scale);
}

at::Tensor AtenIpexTypeDefault::elu(const at::Tensor & self, at::Scalar alpha, at::Scalar scale, at::Scalar input_scale) {
  return at::elu(xlatens[0], alpha, scale, input_scale);
}

at::Tensor & AtenIpexTypeDefault::elu_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, at::Scalar alpha, at::Scalar scale, at::Scalar input_scale, const at::Tensor & output) {
  return at::elu_backward_out(xlatens[0], xlatens[1], alpha, scale, input_scale, xlatens[2]);
}

at::Tensor AtenIpexTypeDefault::elu_backward(const at::Tensor & grad_output, at::Scalar alpha, at::Scalar scale, at::Scalar input_scale, const at::Tensor & output) {
  return at::elu_backward(xlatens[0], alpha, scale, input_scale, xlatens[1]);
}

at::Tensor & AtenIpexTypeDefault::elu_(at::Tensor & self, at::Scalar alpha, at::Scalar scale, at::Scalar input_scale) {
  return at::elu_(xlatens[0], alpha, scale, input_scale);
}

at::Tensor & AtenIpexTypeDefault::glu_out(at::Tensor & out, const at::Tensor & self, int64_t dim) {
  return at::glu_out(xlatens[0], xlatens[1], dim);
}

at::Tensor AtenIpexTypeDefault::glu(const at::Tensor & self, int64_t dim) {
  return at::glu(xlatens[0], dim);
}

at::Tensor & AtenIpexTypeDefault::glu_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self, int64_t dim) {
  return at::glu_backward_out(xlatens[0], xlatens[1], xlatens[2], dim);
}

at::Tensor AtenIpexTypeDefault::glu_backward(const at::Tensor & grad_output, const at::Tensor & self, int64_t dim) {
  return at::glu_backward(xlatens[0], xlatens[1], dim);
}

at::Tensor & AtenIpexTypeDefault::hardtanh_out(at::Tensor & out, const at::Tensor & self, at::Scalar min_val, at::Scalar max_val) {
  return at::hardtanh_out(xlatens[0], xlatens[1], min_val, max_val);
}

at::Tensor AtenIpexTypeDefault::hardtanh(const at::Tensor & self, at::Scalar min_val, at::Scalar max_val) {
  return at::hardtanh(xlatens[0], min_val, max_val);
}

at::Tensor & AtenIpexTypeDefault::hardtanh_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self, at::Scalar min_val, at::Scalar max_val) {
  return at::hardtanh_backward_out(xlatens[0], xlatens[1], xlatens[2], min_val, max_val);
}

at::Tensor AtenIpexTypeDefault::hardtanh_backward(const at::Tensor & grad_output, const at::Tensor & self, at::Scalar min_val, at::Scalar max_val) {
  return at::hardtanh_backward(xlatens[0], xlatens[1], min_val, max_val);
}

at::Tensor & AtenIpexTypeDefault::hardtanh_(at::Tensor & self, at::Scalar min_val, at::Scalar max_val) {
  return at::hardtanh_(xlatens[0], min_val, max_val);
}

at::Tensor & AtenIpexTypeDefault::leaky_relu_out(at::Tensor & out, const at::Tensor & self, at::Scalar negative_slope) {
  return at::leaky_relu_out(xlatens[0], xlatens[1], negative_slope);
}

at::Tensor AtenIpexTypeDefault::leaky_relu(const at::Tensor & self, at::Scalar negative_slope) {
  return at::leaky_relu(xlatens[0], negative_slope);
}

at::Tensor & AtenIpexTypeDefault::leaky_relu_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self, at::Scalar negative_slope) {
  return at::leaky_relu_backward_out(xlatens[0], xlatens[1], xlatens[2], negative_slope);
}

at::Tensor AtenIpexTypeDefault::leaky_relu_backward(const at::Tensor & grad_output, const at::Tensor & self, at::Scalar negative_slope) {
  return at::leaky_relu_backward(xlatens[0], xlatens[1], negative_slope);
}

at::Tensor & AtenIpexTypeDefault::leaky_relu_(at::Tensor & self, at::Scalar negative_slope) {
  return at::leaky_relu_(xlatens[0], negative_slope);
}

at::Tensor & AtenIpexTypeDefault::log_sigmoid_out(at::Tensor & out, const at::Tensor & self) {
  return at::log_sigmoid_out(xlatens[0], xlatens[1]);
}

at::Tensor AtenIpexTypeDefault::log_sigmoid(const at::Tensor & self) {
  return at::log_sigmoid(xlatens[0]);
}

std::tuple<at::Tensor &,at::Tensor &> AtenIpexTypeDefault::log_sigmoid_forward_out(at::Tensor & output, at::Tensor & buffer, const at::Tensor & self) {
  return at::log_sigmoid_forward_out(xlatens[0], xlatens[1], xlatens[2]);
}

std::tuple<at::Tensor,at::Tensor> AtenIpexTypeDefault::log_sigmoid_forward(const at::Tensor & self) {
  return at::log_sigmoid_forward(xlatens[0]);
}

at::Tensor & AtenIpexTypeDefault::log_sigmoid_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & buffer) {
  return at::log_sigmoid_backward_out(xlatens[0], xlatens[1], xlatens[2], xlatens[3]);
}

at::Tensor AtenIpexTypeDefault::log_sigmoid_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & buffer) {
  return at::log_sigmoid_backward(xlatens[0], xlatens[1], xlatens[2]);
}

at::Tensor & AtenIpexTypeDefault::rrelu_with_noise_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & noise, at::Scalar lower, at::Scalar upper, bool training, at::Generator * generator) {
  return at::rrelu_with_noise_out(xlatens[0], xlatens[1], xlatens[2], lower, upper, training, generator);
}

at::Tensor AtenIpexTypeDefault::rrelu_with_noise(const at::Tensor & self, const at::Tensor & noise, at::Scalar lower, at::Scalar upper, bool training, at::Generator * generator) {
  return at::rrelu_with_noise(xlatens[0], xlatens[1], lower, upper, training, generator);
}

at::Tensor & AtenIpexTypeDefault::rrelu_with_noise_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & noise, at::Scalar lower, at::Scalar upper, bool training) {
  return at::rrelu_with_noise_backward_out(xlatens[0], xlatens[1], xlatens[2], xlatens[3], lower, upper, training);
}

at::Tensor AtenIpexTypeDefault::rrelu_with_noise_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & noise, at::Scalar lower, at::Scalar upper, bool training) {
  return at::rrelu_with_noise_backward(xlatens[0], xlatens[1], xlatens[2], lower, upper, training);
}

at::Tensor & AtenIpexTypeDefault::rrelu_with_noise_(at::Tensor & self, const at::Tensor & noise, at::Scalar lower, at::Scalar upper, bool training, at::Generator * generator) {
  return at::rrelu_with_noise_(xlatens[0], xlatens[1], lower, upper, training, generator);
}

at::Tensor & AtenIpexTypeDefault::softplus_out(at::Tensor & out, const at::Tensor & self, at::Scalar beta, at::Scalar threshold) {
  return at::softplus_out(xlatens[0], xlatens[1], beta, threshold);
}

at::Tensor AtenIpexTypeDefault::softplus(const at::Tensor & self, at::Scalar beta, at::Scalar threshold) {
  return at::softplus(xlatens[0], beta, threshold);
}

at::Tensor & AtenIpexTypeDefault::softplus_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self, at::Scalar beta, at::Scalar threshold, const at::Tensor & output) {
  return at::softplus_backward_out(xlatens[0], xlatens[1], xlatens[2], beta, threshold, xlatens[3]);
}

at::Tensor AtenIpexTypeDefault::softplus_backward(const at::Tensor & grad_output, const at::Tensor & self, at::Scalar beta, at::Scalar threshold, const at::Tensor & output) {
  return at::softplus_backward(xlatens[0], xlatens[1], beta, threshold, xlatens[2]);
}

at::Tensor & AtenIpexTypeDefault::softshrink_out(at::Tensor & out, const at::Tensor & self, at::Scalar lambd) {
  return at::softshrink_out(xlatens[0], xlatens[1], lambd);
}

at::Tensor AtenIpexTypeDefault::softshrink(const at::Tensor & self, at::Scalar lambd) {
  return at::softshrink(xlatens[0], lambd);
}

at::Tensor & AtenIpexTypeDefault::softshrink_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self, at::Scalar lambd) {
  return at::softshrink_backward_out(xlatens[0], xlatens[1], xlatens[2], lambd);
}

at::Tensor AtenIpexTypeDefault::softshrink_backward(const at::Tensor & grad_output, const at::Tensor & self, at::Scalar lambd) {
  return at::softshrink_backward(xlatens[0], xlatens[1], lambd);
}

at::Tensor & AtenIpexTypeDefault::adaptive_avg_pool2d_out(at::Tensor & out, const at::Tensor & self, at::IntArrayRef output_size) {
  return at::adaptive_avg_pool2d_out(xlatens[0], xlatens[1], output_size);
}

at::Tensor AtenIpexTypeDefault::adaptive_avg_pool2d(const at::Tensor & self, at::IntArrayRef output_size) {
  return at::adaptive_avg_pool2d(xlatens[0], output_size);
}

at::Tensor AtenIpexTypeDefault::mkldnn_adaptive_avg_pool2d(const at::Tensor & self, at::IntArrayRef output_size) {
  return at::mkldnn_adaptive_avg_pool2d(xlatens[0], output_size);
}

at::Tensor AtenIpexTypeDefault::_adaptive_avg_pool2d(const at::Tensor & self, at::IntArrayRef output_size) {
  return at::_adaptive_avg_pool2d(xlatens[0], output_size);
}

at::Tensor AtenIpexTypeDefault::_adaptive_avg_pool2d_backward(const at::Tensor & grad_output, const at::Tensor & self) {
  return at::_adaptive_avg_pool2d_backward(xlatens[0], xlatens[1]);
}

at::Tensor & AtenIpexTypeDefault::adaptive_avg_pool3d_out(at::Tensor & out, const at::Tensor & self, at::IntArrayRef output_size) {
  return at::adaptive_avg_pool3d_out(xlatens[0], xlatens[1], output_size);
}

at::Tensor AtenIpexTypeDefault::adaptive_avg_pool3d(const at::Tensor & self, at::IntArrayRef output_size) {
  return at::adaptive_avg_pool3d(xlatens[0], output_size);
}

at::Tensor & AtenIpexTypeDefault::adaptive_avg_pool3d_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self) {
  return at::adaptive_avg_pool3d_backward_out(xlatens[0], xlatens[1], xlatens[2]);
}

at::Tensor AtenIpexTypeDefault::adaptive_avg_pool3d_backward(const at::Tensor & grad_output, const at::Tensor & self) {
  return at::adaptive_avg_pool3d_backward(xlatens[0], xlatens[1]);
}

std::tuple<at::Tensor &,at::Tensor &> AtenIpexTypeDefault::adaptive_max_pool2d_out(at::Tensor & out, at::Tensor & indices, const at::Tensor & self, at::IntArrayRef output_size) {
  return at::adaptive_max_pool2d_out(xlatens[0], xlatens[1], xlatens[2], output_size);
}

std::tuple<at::Tensor,at::Tensor> AtenIpexTypeDefault::adaptive_max_pool2d(const at::Tensor & self, at::IntArrayRef output_size) {
  return at::adaptive_max_pool2d(xlatens[0], output_size);
}

at::Tensor & AtenIpexTypeDefault::adaptive_max_pool2d_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & indices) {
  return at::adaptive_max_pool2d_backward_out(xlatens[0], xlatens[1], xlatens[2], xlatens[3]);
}

at::Tensor AtenIpexTypeDefault::adaptive_max_pool2d_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & indices) {
  return at::adaptive_max_pool2d_backward(xlatens[0], xlatens[1], xlatens[2]);
}

std::tuple<at::Tensor &,at::Tensor &> AtenIpexTypeDefault::adaptive_max_pool3d_out(at::Tensor & out, at::Tensor & indices, const at::Tensor & self, at::IntArrayRef output_size) {
  return at::adaptive_max_pool3d_out(xlatens[0], xlatens[1], xlatens[2], output_size);
}

std::tuple<at::Tensor,at::Tensor> AtenIpexTypeDefault::adaptive_max_pool3d(const at::Tensor & self, at::IntArrayRef output_size) {
  return at::adaptive_max_pool3d(xlatens[0], output_size);
}

at::Tensor & AtenIpexTypeDefault::adaptive_max_pool3d_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & indices) {
  return at::adaptive_max_pool3d_backward_out(xlatens[0], xlatens[1], xlatens[2], xlatens[3]);
}

at::Tensor AtenIpexTypeDefault::adaptive_max_pool3d_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & indices) {
  return at::adaptive_max_pool3d_backward(xlatens[0], xlatens[1], xlatens[2]);
}

at::Tensor & AtenIpexTypeDefault::avg_pool2d_out(at::Tensor & out, const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override) {
  return at::avg_pool2d_out(xlatens[0], xlatens[1], kernel_size, stride, padding, ceil_mode, count_include_pad, divisor_override);
}

at::Tensor AtenIpexTypeDefault::avg_pool2d(const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override) {
  return at::avg_pool2d(xlatens[0], kernel_size, stride, padding, ceil_mode, count_include_pad, divisor_override);
}

at::Tensor & AtenIpexTypeDefault::avg_pool2d_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override) {
  return at::avg_pool2d_backward_out(xlatens[0], xlatens[1], xlatens[2], kernel_size, stride, padding, ceil_mode, count_include_pad, divisor_override);
}

at::Tensor AtenIpexTypeDefault::avg_pool2d_backward(const at::Tensor & grad_output, const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override) {
  return at::avg_pool2d_backward(xlatens[0], xlatens[1], kernel_size, stride, padding, ceil_mode, count_include_pad, divisor_override);
}

at::Tensor & AtenIpexTypeDefault::avg_pool3d_out(at::Tensor & out, const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override) {
  return at::avg_pool3d_out(xlatens[0], xlatens[1], kernel_size, stride, padding, ceil_mode, count_include_pad, divisor_override);
}

at::Tensor AtenIpexTypeDefault::avg_pool3d(const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override) {
  return at::avg_pool3d(xlatens[0], kernel_size, stride, padding, ceil_mode, count_include_pad, divisor_override);
}

at::Tensor & AtenIpexTypeDefault::avg_pool3d_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override) {
  return at::avg_pool3d_backward_out(xlatens[0], xlatens[1], xlatens[2], kernel_size, stride, padding, ceil_mode, count_include_pad, divisor_override);
}

at::Tensor AtenIpexTypeDefault::avg_pool3d_backward(const at::Tensor & grad_output, const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override) {
  return at::avg_pool3d_backward(xlatens[0], xlatens[1], kernel_size, stride, padding, ceil_mode, count_include_pad, divisor_override);
}

std::tuple<at::Tensor &,at::Tensor &> AtenIpexTypeDefault::fractional_max_pool2d_out(at::Tensor & output, at::Tensor & indices, const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef output_size, const at::Tensor & random_samples) {
  return at::fractional_max_pool2d_out(xlatens[0], xlatens[1], xlatens[2], kernel_size, output_size, xlatens[3]);
}

std::tuple<at::Tensor,at::Tensor> AtenIpexTypeDefault::fractional_max_pool2d(const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef output_size, const at::Tensor & random_samples) {
  return at::fractional_max_pool2d(xlatens[0], kernel_size, output_size, xlatens[1]);
}

at::Tensor & AtenIpexTypeDefault::fractional_max_pool2d_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef output_size, const at::Tensor & indices) {
  return at::fractional_max_pool2d_backward_out(xlatens[0], xlatens[1], xlatens[2], kernel_size, output_size, xlatens[3]);
}

at::Tensor AtenIpexTypeDefault::fractional_max_pool2d_backward(const at::Tensor & grad_output, const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef output_size, const at::Tensor & indices) {
  return at::fractional_max_pool2d_backward(xlatens[0], xlatens[1], kernel_size, output_size, xlatens[2]);
}

std::tuple<at::Tensor &,at::Tensor &> AtenIpexTypeDefault::fractional_max_pool3d_out(at::Tensor & output, at::Tensor & indices, const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef output_size, const at::Tensor & random_samples) {
  return at::fractional_max_pool3d_out(xlatens[0], xlatens[1], xlatens[2], kernel_size, output_size, xlatens[3]);
}

std::tuple<at::Tensor,at::Tensor> AtenIpexTypeDefault::fractional_max_pool3d(const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef output_size, const at::Tensor & random_samples) {
  return at::fractional_max_pool3d(xlatens[0], kernel_size, output_size, xlatens[1]);
}

at::Tensor & AtenIpexTypeDefault::fractional_max_pool3d_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef output_size, const at::Tensor & indices) {
  return at::fractional_max_pool3d_backward_out(xlatens[0], xlatens[1], xlatens[2], kernel_size, output_size, xlatens[3]);
}

at::Tensor AtenIpexTypeDefault::fractional_max_pool3d_backward(const at::Tensor & grad_output, const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef output_size, const at::Tensor & indices) {
  return at::fractional_max_pool3d_backward(xlatens[0], xlatens[1], kernel_size, output_size, xlatens[2]);
}

std::tuple<at::Tensor &,at::Tensor &> AtenIpexTypeDefault::max_pool2d_with_indices_out(at::Tensor & out, at::Tensor & indices, const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef dilation, bool ceil_mode) {
  return at::max_pool2d_with_indices_out(xlatens[0], xlatens[1], xlatens[2], kernel_size, stride, padding, dilation, ceil_mode);
}

std::tuple<at::Tensor,at::Tensor> AtenIpexTypeDefault::max_pool2d_with_indices(const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef dilation, bool ceil_mode) {
  return at::max_pool2d_with_indices(xlatens[0], kernel_size, stride, padding, dilation, ceil_mode);
}

at::Tensor & AtenIpexTypeDefault::max_pool2d_with_indices_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef dilation, bool ceil_mode, const at::Tensor & indices) {
  return at::max_pool2d_with_indices_backward_out(xlatens[0], xlatens[1], xlatens[2], kernel_size, stride, padding, dilation, ceil_mode, xlatens[3]);
}

at::Tensor AtenIpexTypeDefault::max_pool2d_with_indices_backward(const at::Tensor & grad_output, const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef dilation, bool ceil_mode, const at::Tensor & indices) {
  return at::max_pool2d_with_indices_backward(xlatens[0], xlatens[1], kernel_size, stride, padding, dilation, ceil_mode, xlatens[2]);
}

std::tuple<at::Tensor &,at::Tensor &> AtenIpexTypeDefault::max_pool3d_with_indices_out(at::Tensor & out, at::Tensor & indices, const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef dilation, bool ceil_mode) {
  return at::max_pool3d_with_indices_out(xlatens[0], xlatens[1], xlatens[2], kernel_size, stride, padding, dilation, ceil_mode);
}

std::tuple<at::Tensor,at::Tensor> AtenIpexTypeDefault::max_pool3d_with_indices(const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef dilation, bool ceil_mode) {
  return at::max_pool3d_with_indices(xlatens[0], kernel_size, stride, padding, dilation, ceil_mode);
}

at::Tensor & AtenIpexTypeDefault::max_pool3d_with_indices_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef dilation, bool ceil_mode, const at::Tensor & indices) {
  return at::max_pool3d_with_indices_backward_out(xlatens[0], xlatens[1], xlatens[2], kernel_size, stride, padding, dilation, ceil_mode, xlatens[3]);
}

at::Tensor AtenIpexTypeDefault::max_pool3d_with_indices_backward(const at::Tensor & grad_output, const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef dilation, bool ceil_mode, const at::Tensor & indices) {
  return at::max_pool3d_with_indices_backward(xlatens[0], xlatens[1], kernel_size, stride, padding, dilation, ceil_mode, xlatens[2]);
}

at::Tensor & AtenIpexTypeDefault::max_unpool2d_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & indices, at::IntArrayRef output_size) {
  return at::max_unpool2d_out(xlatens[0], xlatens[1], xlatens[2], output_size);
}

at::Tensor AtenIpexTypeDefault::max_unpool2d(const at::Tensor & self, const at::Tensor & indices, at::IntArrayRef output_size) {
  return at::max_unpool2d(xlatens[0], xlatens[1], output_size);
}

at::Tensor & AtenIpexTypeDefault::max_unpool2d_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & indices, at::IntArrayRef output_size) {
  return at::max_unpool2d_backward_out(xlatens[0], xlatens[1], xlatens[2], xlatens[3], output_size);
}

at::Tensor AtenIpexTypeDefault::max_unpool2d_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & indices, at::IntArrayRef output_size) {
  return at::max_unpool2d_backward(xlatens[0], xlatens[1], xlatens[2], output_size);
}

at::Tensor & AtenIpexTypeDefault::max_unpool3d_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & indices, at::IntArrayRef output_size, at::IntArrayRef stride, at::IntArrayRef padding) {
  return at::max_unpool3d_out(xlatens[0], xlatens[1], xlatens[2], output_size, stride, padding);
}

at::Tensor AtenIpexTypeDefault::max_unpool3d(const at::Tensor & self, const at::Tensor & indices, at::IntArrayRef output_size, at::IntArrayRef stride, at::IntArrayRef padding) {
  return at::max_unpool3d(xlatens[0], xlatens[1], output_size, stride, padding);
}

at::Tensor & AtenIpexTypeDefault::max_unpool3d_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & indices, at::IntArrayRef output_size, at::IntArrayRef stride, at::IntArrayRef padding) {
  return at::max_unpool3d_backward_out(xlatens[0], xlatens[1], xlatens[2], xlatens[3], output_size, stride, padding);
}

at::Tensor AtenIpexTypeDefault::max_unpool3d_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & indices, at::IntArrayRef output_size, at::IntArrayRef stride, at::IntArrayRef padding) {
  return at::max_unpool3d_backward(xlatens[0], xlatens[1], xlatens[2], output_size, stride, padding);
}

at::Tensor & AtenIpexTypeDefault::reflection_pad1d_out(at::Tensor & out, const at::Tensor & self, at::IntArrayRef padding) {
  return at::reflection_pad1d_out(xlatens[0], xlatens[1], padding);
}

at::Tensor AtenIpexTypeDefault::reflection_pad1d(const at::Tensor & self, at::IntArrayRef padding) {
  return at::reflection_pad1d(xlatens[0], padding);
}

at::Tensor & AtenIpexTypeDefault::reflection_pad1d_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self, at::IntArrayRef padding) {
  return at::reflection_pad1d_backward_out(xlatens[0], xlatens[1], xlatens[2], padding);
}

at::Tensor AtenIpexTypeDefault::reflection_pad1d_backward(const at::Tensor & grad_output, const at::Tensor & self, at::IntArrayRef padding) {
  return at::reflection_pad1d_backward(xlatens[0], xlatens[1], padding);
}

at::Tensor & AtenIpexTypeDefault::reflection_pad2d_out(at::Tensor & out, const at::Tensor & self, at::IntArrayRef padding) {
  return at::reflection_pad2d_out(xlatens[0], xlatens[1], padding);
}

at::Tensor AtenIpexTypeDefault::reflection_pad2d(const at::Tensor & self, at::IntArrayRef padding) {
  return at::reflection_pad2d(xlatens[0], padding);
}

at::Tensor & AtenIpexTypeDefault::reflection_pad2d_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self, at::IntArrayRef padding) {
  return at::reflection_pad2d_backward_out(xlatens[0], xlatens[1], xlatens[2], padding);
}

at::Tensor AtenIpexTypeDefault::reflection_pad2d_backward(const at::Tensor & grad_output, const at::Tensor & self, at::IntArrayRef padding) {
  return at::reflection_pad2d_backward(xlatens[0], xlatens[1], padding);
}

at::Tensor & AtenIpexTypeDefault::replication_pad1d_out(at::Tensor & out, const at::Tensor & self, at::IntArrayRef padding) {
  return at::replication_pad1d_out(xlatens[0], xlatens[1], padding);
}

at::Tensor AtenIpexTypeDefault::replication_pad1d(const at::Tensor & self, at::IntArrayRef padding) {
  return at::replication_pad1d(xlatens[0], padding);
}

at::Tensor & AtenIpexTypeDefault::replication_pad1d_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self, at::IntArrayRef padding) {
  return at::replication_pad1d_backward_out(xlatens[0], xlatens[1], xlatens[2], padding);
}

at::Tensor AtenIpexTypeDefault::replication_pad1d_backward(const at::Tensor & grad_output, const at::Tensor & self, at::IntArrayRef padding) {
  return at::replication_pad1d_backward(xlatens[0], xlatens[1], padding);
}

at::Tensor & AtenIpexTypeDefault::replication_pad2d_out(at::Tensor & out, const at::Tensor & self, at::IntArrayRef padding) {
  return at::replication_pad2d_out(xlatens[0], xlatens[1], padding);
}

at::Tensor AtenIpexTypeDefault::replication_pad2d(const at::Tensor & self, at::IntArrayRef padding) {
  return at::replication_pad2d(xlatens[0], padding);
}

at::Tensor & AtenIpexTypeDefault::replication_pad2d_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self, at::IntArrayRef padding) {
  return at::replication_pad2d_backward_out(xlatens[0], xlatens[1], xlatens[2], padding);
}

at::Tensor AtenIpexTypeDefault::replication_pad2d_backward(const at::Tensor & grad_output, const at::Tensor & self, at::IntArrayRef padding) {
  return at::replication_pad2d_backward(xlatens[0], xlatens[1], padding);
}

at::Tensor & AtenIpexTypeDefault::replication_pad3d_out(at::Tensor & out, const at::Tensor & self, at::IntArrayRef padding) {
  return at::replication_pad3d_out(xlatens[0], xlatens[1], padding);
}

at::Tensor AtenIpexTypeDefault::replication_pad3d(const at::Tensor & self, at::IntArrayRef padding) {
  return at::replication_pad3d(xlatens[0], padding);
}

at::Tensor & AtenIpexTypeDefault::replication_pad3d_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self, at::IntArrayRef padding) {
  return at::replication_pad3d_backward_out(xlatens[0], xlatens[1], xlatens[2], padding);
}

at::Tensor AtenIpexTypeDefault::replication_pad3d_backward(const at::Tensor & grad_output, const at::Tensor & self, at::IntArrayRef padding) {
  return at::replication_pad3d_backward(xlatens[0], xlatens[1], padding);
}

at::Tensor & AtenIpexTypeDefault::upsample_linear1d_out(at::Tensor & out, const at::Tensor & self, at::IntArrayRef output_size, bool align_corners) {
  return at::upsample_linear1d_out(xlatens[0], xlatens[1], output_size, align_corners);
}

at::Tensor AtenIpexTypeDefault::upsample_linear1d(const at::Tensor & self, at::IntArrayRef output_size, bool align_corners) {
  return at::upsample_linear1d(xlatens[0], output_size, align_corners);
}

at::Tensor & AtenIpexTypeDefault::upsample_linear1d_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, at::IntArrayRef output_size, at::IntArrayRef input_size, bool align_corners) {
  return at::upsample_linear1d_backward_out(xlatens[0], xlatens[1], output_size, input_size, align_corners);
}

at::Tensor AtenIpexTypeDefault::upsample_linear1d_backward(const at::Tensor & grad_output, at::IntArrayRef output_size, at::IntArrayRef input_size, bool align_corners) {
  return at::upsample_linear1d_backward(xlatens[0], output_size, input_size, align_corners);
}

at::Tensor & AtenIpexTypeDefault::upsample_bilinear2d_out(at::Tensor & out, const at::Tensor & self, at::IntArrayRef output_size, bool align_corners) {
  return at::upsample_bilinear2d_out(xlatens[0], xlatens[1], output_size, align_corners);
}

at::Tensor AtenIpexTypeDefault::upsample_bilinear2d(const at::Tensor & self, at::IntArrayRef output_size, bool align_corners) {
  return at::upsample_bilinear2d(xlatens[0], output_size, align_corners);
}

at::Tensor & AtenIpexTypeDefault::upsample_bilinear2d_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, at::IntArrayRef output_size, at::IntArrayRef input_size, bool align_corners) {
  return at::upsample_bilinear2d_backward_out(xlatens[0], xlatens[1], output_size, input_size, align_corners);
}

at::Tensor AtenIpexTypeDefault::upsample_bilinear2d_backward(const at::Tensor & grad_output, at::IntArrayRef output_size, at::IntArrayRef input_size, bool align_corners) {
  return at::upsample_bilinear2d_backward(xlatens[0], output_size, input_size, align_corners);
}

at::Tensor & AtenIpexTypeDefault::upsample_bicubic2d_out(at::Tensor & out, const at::Tensor & self, at::IntArrayRef output_size, bool align_corners) {
  return at::upsample_bicubic2d_out(xlatens[0], xlatens[1], output_size, align_corners);
}

at::Tensor AtenIpexTypeDefault::upsample_bicubic2d(const at::Tensor & self, at::IntArrayRef output_size, bool align_corners) {
  return at::upsample_bicubic2d(xlatens[0], output_size, align_corners);
}

at::Tensor & AtenIpexTypeDefault::upsample_bicubic2d_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, at::IntArrayRef output_size, at::IntArrayRef input_size, bool align_corners) {
  return at::upsample_bicubic2d_backward_out(xlatens[0], xlatens[1], output_size, input_size, align_corners);
}

at::Tensor AtenIpexTypeDefault::upsample_bicubic2d_backward(const at::Tensor & grad_output, at::IntArrayRef output_size, at::IntArrayRef input_size, bool align_corners) {
  return at::upsample_bicubic2d_backward(xlatens[0], output_size, input_size, align_corners);
}

at::Tensor & AtenIpexTypeDefault::upsample_trilinear3d_out(at::Tensor & out, const at::Tensor & self, at::IntArrayRef output_size, bool align_corners) {
  return at::upsample_trilinear3d_out(xlatens[0], xlatens[1], output_size, align_corners);
}

at::Tensor AtenIpexTypeDefault::upsample_trilinear3d(const at::Tensor & self, at::IntArrayRef output_size, bool align_corners) {
  return at::upsample_trilinear3d(xlatens[0], output_size, align_corners);
}

at::Tensor & AtenIpexTypeDefault::upsample_trilinear3d_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, at::IntArrayRef output_size, at::IntArrayRef input_size, bool align_corners) {
  return at::upsample_trilinear3d_backward_out(xlatens[0], xlatens[1], output_size, input_size, align_corners);
}

at::Tensor AtenIpexTypeDefault::upsample_trilinear3d_backward(const at::Tensor & grad_output, at::IntArrayRef output_size, at::IntArrayRef input_size, bool align_corners) {
  return at::upsample_trilinear3d_backward(xlatens[0], output_size, input_size, align_corners);
}

at::Tensor & AtenIpexTypeDefault::upsample_nearest1d_out(at::Tensor & out, const at::Tensor & self, at::IntArrayRef output_size) {
  return at::upsample_nearest1d_out(xlatens[0], xlatens[1], output_size);
}

at::Tensor AtenIpexTypeDefault::upsample_nearest1d(const at::Tensor & self, at::IntArrayRef output_size) {
  return at::upsample_nearest1d(xlatens[0], output_size);
}

at::Tensor & AtenIpexTypeDefault::upsample_nearest1d_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, at::IntArrayRef output_size, at::IntArrayRef input_size) {
  return at::upsample_nearest1d_backward_out(xlatens[0], xlatens[1], output_size, input_size);
}

at::Tensor AtenIpexTypeDefault::upsample_nearest1d_backward(const at::Tensor & grad_output, at::IntArrayRef output_size, at::IntArrayRef input_size) {
  return at::upsample_nearest1d_backward(xlatens[0], output_size, input_size);
}

at::Tensor & AtenIpexTypeDefault::upsample_nearest2d_out(at::Tensor & out, const at::Tensor & self, at::IntArrayRef output_size) {
  return at::upsample_nearest2d_out(xlatens[0], xlatens[1], output_size);
}

at::Tensor AtenIpexTypeDefault::upsample_nearest2d(const at::Tensor & self, at::IntArrayRef output_size) {
  return at::upsample_nearest2d(xlatens[0], output_size);
}

at::Tensor & AtenIpexTypeDefault::upsample_nearest2d_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, at::IntArrayRef output_size, at::IntArrayRef input_size) {
  return at::upsample_nearest2d_backward_out(xlatens[0], xlatens[1], output_size, input_size);
}

at::Tensor AtenIpexTypeDefault::upsample_nearest2d_backward(const at::Tensor & grad_output, at::IntArrayRef output_size, at::IntArrayRef input_size) {
  return at::upsample_nearest2d_backward(xlatens[0], output_size, input_size);
}

at::Tensor & AtenIpexTypeDefault::upsample_nearest3d_out(at::Tensor & out, const at::Tensor & self, at::IntArrayRef output_size) {
  return at::upsample_nearest3d_out(xlatens[0], xlatens[1], output_size);
}

at::Tensor AtenIpexTypeDefault::upsample_nearest3d(const at::Tensor & self, at::IntArrayRef output_size) {
  return at::upsample_nearest3d(xlatens[0], output_size);
}

at::Tensor & AtenIpexTypeDefault::upsample_nearest3d_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, at::IntArrayRef output_size, at::IntArrayRef input_size) {
  return at::upsample_nearest3d_backward_out(xlatens[0], xlatens[1], output_size, input_size);
}

at::Tensor AtenIpexTypeDefault::upsample_nearest3d_backward(const at::Tensor & grad_output, at::IntArrayRef output_size, at::IntArrayRef input_size) {
  return at::upsample_nearest3d_backward(xlatens[0], output_size, input_size);
}

at::Tensor & AtenIpexTypeDefault::sigmoid_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & output) {
  return at::sigmoid_backward_out(xlatens[0], xlatens[1], xlatens[2]);
}

at::Tensor AtenIpexTypeDefault::sigmoid_backward(const at::Tensor & grad_output, const at::Tensor & output) {
  return at::sigmoid_backward(xlatens[0], xlatens[1]);
}

at::Tensor & AtenIpexTypeDefault::tanh_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & output) {
  return at::tanh_backward_out(xlatens[0], xlatens[1], xlatens[2]);
}

at::Tensor AtenIpexTypeDefault::tanh_backward(const at::Tensor & grad_output, const at::Tensor & output) {
  return at::tanh_backward(xlatens[0], xlatens[1]);
}

at::Tensor & AtenIpexTypeDefault::slow_conv_transpose2d_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & weight, at::IntArrayRef kernel_size, const at::Tensor & bias, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef output_padding, at::IntArrayRef dilation) {
  return at::slow_conv_transpose2d_out(xlatens[0], xlatens[1], xlatens[2], kernel_size, xlatens[3], stride, padding, output_padding, dilation);
}

at::Tensor AtenIpexTypeDefault::slow_conv_transpose2d(const at::Tensor & self, const at::Tensor & weight, at::IntArrayRef kernel_size, const at::Tensor & bias, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef output_padding, at::IntArrayRef dilation) {
  return at::slow_conv_transpose2d(xlatens[0], xlatens[1], kernel_size, xlatens[2], stride, padding, output_padding, dilation);
}

std::tuple<at::Tensor &,at::Tensor &,at::Tensor &> AtenIpexTypeDefault::slow_conv_transpose2d_backward_out(at::Tensor & grad_input, at::Tensor & grad_weight, at::Tensor & grad_bias, const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & weight, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef output_padding, at::IntArrayRef dilation, const at::Tensor & columns, const at::Tensor & ones) {
  return at::slow_conv_transpose2d_backward_out(xlatens[0], xlatens[1], xlatens[2], xlatens[3], xlatens[4], xlatens[5], kernel_size, stride, padding, output_padding, dilation, xlatens[6], xlatens[7]);
}

std::tuple<at::Tensor,at::Tensor,at::Tensor> AtenIpexTypeDefault::slow_conv_transpose2d_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & weight, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef output_padding, at::IntArrayRef dilation, const at::Tensor & columns, const at::Tensor & ones, std::array<bool,3> output_mask) {
  return at::slow_conv_transpose2d_backward(xlatens[0], xlatens[1], xlatens[2], kernel_size, stride, padding, output_padding, dilation, xlatens[3], xlatens[4], output_mask);
}

at::Tensor & AtenIpexTypeDefault::slow_conv_transpose3d_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & weight, at::IntArrayRef kernel_size, const at::Tensor & bias, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef output_padding, at::IntArrayRef dilation) {
  return at::slow_conv_transpose3d_out(xlatens[0], xlatens[1], xlatens[2], kernel_size, xlatens[3], stride, padding, output_padding, dilation);
}

at::Tensor AtenIpexTypeDefault::slow_conv_transpose3d(const at::Tensor & self, const at::Tensor & weight, at::IntArrayRef kernel_size, const at::Tensor & bias, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef output_padding, at::IntArrayRef dilation) {
  return at::slow_conv_transpose3d(xlatens[0], xlatens[1], kernel_size, xlatens[2], stride, padding, output_padding, dilation);
}

std::tuple<at::Tensor &,at::Tensor &,at::Tensor &> AtenIpexTypeDefault::slow_conv_transpose3d_backward_out(at::Tensor & grad_input, at::Tensor & grad_weight, at::Tensor & grad_bias, const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & weight, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef output_padding, at::IntArrayRef dilation, const at::Tensor & finput, const at::Tensor & fgrad_input) {
  return at::slow_conv_transpose3d_backward_out(xlatens[0], xlatens[1], xlatens[2], xlatens[3], xlatens[4], xlatens[5], kernel_size, stride, padding, output_padding, dilation, xlatens[6], xlatens[7]);
}

std::tuple<at::Tensor,at::Tensor,at::Tensor> AtenIpexTypeDefault::slow_conv_transpose3d_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & weight, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef output_padding, at::IntArrayRef dilation, const at::Tensor & finput, const at::Tensor & fgrad_input, std::array<bool,3> output_mask) {
  return at::slow_conv_transpose3d_backward(xlatens[0], xlatens[1], xlatens[2], kernel_size, stride, padding, output_padding, dilation, xlatens[3], xlatens[4], output_mask);
}

at::Tensor & AtenIpexTypeDefault::thnn_conv2d_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & weight, at::IntArrayRef kernel_size, const at::Tensor & bias, at::IntArrayRef stride, at::IntArrayRef padding) {
  return at::thnn_conv2d_out(xlatens[0], xlatens[1], xlatens[2], kernel_size, xlatens[3], stride, padding);
}

at::Tensor AtenIpexTypeDefault::thnn_conv2d(const at::Tensor & self, const at::Tensor & weight, at::IntArrayRef kernel_size, const at::Tensor & bias, at::IntArrayRef stride, at::IntArrayRef padding) {
  return at::thnn_conv2d(xlatens[0], xlatens[1], kernel_size, xlatens[2], stride, padding);
}

std::tuple<at::Tensor &,at::Tensor &,at::Tensor &> AtenIpexTypeDefault::thnn_conv2d_forward_out(at::Tensor & output, at::Tensor & finput, at::Tensor & fgrad_input, const at::Tensor & self, const at::Tensor & weight, at::IntArrayRef kernel_size, const at::Tensor & bias, at::IntArrayRef stride, at::IntArrayRef padding) {
  return at::thnn_conv2d_forward_out(xlatens[0], xlatens[1], xlatens[2], xlatens[3], xlatens[4], kernel_size, xlatens[5], stride, padding);
}

std::tuple<at::Tensor,at::Tensor,at::Tensor> AtenIpexTypeDefault::thnn_conv2d_forward(const at::Tensor & self, const at::Tensor & weight, at::IntArrayRef kernel_size, const at::Tensor & bias, at::IntArrayRef stride, at::IntArrayRef padding) {
  return at::thnn_conv2d_forward(xlatens[0], xlatens[1], kernel_size, xlatens[2], stride, padding);
}

std::tuple<at::Tensor &,at::Tensor &,at::Tensor &> AtenIpexTypeDefault::thnn_conv2d_backward_out(at::Tensor & grad_input, at::Tensor & grad_weight, at::Tensor & grad_bias, const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & weight, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, const at::Tensor & finput, const at::Tensor & fgrad_input) {
  return at::thnn_conv2d_backward_out(xlatens[0], xlatens[1], xlatens[2], xlatens[3], xlatens[4], xlatens[5], kernel_size, stride, padding, xlatens[6], xlatens[7]);
}

std::tuple<at::Tensor,at::Tensor,at::Tensor> AtenIpexTypeDefault::thnn_conv2d_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & weight, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, const at::Tensor & finput, const at::Tensor & fgrad_input, std::array<bool,3> output_mask) {
  return at::thnn_conv2d_backward(xlatens[0], xlatens[1], xlatens[2], kernel_size, stride, padding, xlatens[3], xlatens[4], output_mask);
}

at::Tensor & AtenIpexTypeDefault::thnn_conv_depthwise2d_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & weight, at::IntArrayRef kernel_size, const at::Tensor & bias, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef dilation) {
  return at::thnn_conv_depthwise2d_out(xlatens[0], xlatens[1], xlatens[2], kernel_size, xlatens[3], stride, padding, dilation);
}

at::Tensor AtenIpexTypeDefault::thnn_conv_depthwise2d(const at::Tensor & self, const at::Tensor & weight, at::IntArrayRef kernel_size, const at::Tensor & bias, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef dilation) {
  return at::thnn_conv_depthwise2d(xlatens[0], xlatens[1], kernel_size, xlatens[2], stride, padding, dilation);
}

at::Tensor & AtenIpexTypeDefault::thnn_conv_depthwise2d_forward_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & weight, at::IntArrayRef kernel_size, const at::Tensor & bias, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef dilation) {
  return at::thnn_conv_depthwise2d_forward_out(xlatens[0], xlatens[1], xlatens[2], kernel_size, xlatens[3], stride, padding, dilation);
}

at::Tensor AtenIpexTypeDefault::thnn_conv_depthwise2d_forward(const at::Tensor & self, const at::Tensor & weight, at::IntArrayRef kernel_size, const at::Tensor & bias, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef dilation) {
  return at::thnn_conv_depthwise2d_forward(xlatens[0], xlatens[1], kernel_size, xlatens[2], stride, padding, dilation);
}

std::tuple<at::Tensor &,at::Tensor &> AtenIpexTypeDefault::thnn_conv_depthwise2d_backward_out(at::Tensor & grad_input, at::Tensor & grad_weight, const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & weight, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef dilation) {
  return at::thnn_conv_depthwise2d_backward_out(xlatens[0], xlatens[1], xlatens[2], xlatens[3], xlatens[4], kernel_size, stride, padding, dilation);
}

std::tuple<at::Tensor,at::Tensor> AtenIpexTypeDefault::thnn_conv_depthwise2d_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & weight, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef dilation, std::array<bool,2> output_mask) {
  return at::thnn_conv_depthwise2d_backward(xlatens[0], xlatens[1], xlatens[2], kernel_size, stride, padding, dilation, output_mask);
}

at::Tensor & AtenIpexTypeDefault::thnn_conv3d_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & weight, at::IntArrayRef kernel_size, const at::Tensor & bias, at::IntArrayRef stride, at::IntArrayRef padding) {
  return at::thnn_conv3d_out(xlatens[0], xlatens[1], xlatens[2], kernel_size, xlatens[3], stride, padding);
}

at::Tensor AtenIpexTypeDefault::thnn_conv3d(const at::Tensor & self, const at::Tensor & weight, at::IntArrayRef kernel_size, const at::Tensor & bias, at::IntArrayRef stride, at::IntArrayRef padding) {
  return at::thnn_conv3d(xlatens[0], xlatens[1], kernel_size, xlatens[2], stride, padding);
}

std::tuple<at::Tensor &,at::Tensor &,at::Tensor &> AtenIpexTypeDefault::thnn_conv3d_forward_out(at::Tensor & output, at::Tensor & finput, at::Tensor & fgrad_input, const at::Tensor & self, const at::Tensor & weight, at::IntArrayRef kernel_size, const at::Tensor & bias, at::IntArrayRef stride, at::IntArrayRef padding) {
  return at::thnn_conv3d_forward_out(xlatens[0], xlatens[1], xlatens[2], xlatens[3], xlatens[4], kernel_size, xlatens[5], stride, padding);
}

std::tuple<at::Tensor,at::Tensor,at::Tensor> AtenIpexTypeDefault::thnn_conv3d_forward(const at::Tensor & self, const at::Tensor & weight, at::IntArrayRef kernel_size, const at::Tensor & bias, at::IntArrayRef stride, at::IntArrayRef padding) {
  return at::thnn_conv3d_forward(xlatens[0], xlatens[1], kernel_size, xlatens[2], stride, padding);
}

std::tuple<at::Tensor &,at::Tensor &,at::Tensor &> AtenIpexTypeDefault::thnn_conv3d_backward_out(at::Tensor & grad_input, at::Tensor & grad_weight, at::Tensor & grad_bias, const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & weight, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, const at::Tensor & finput, const at::Tensor & fgrad_input) {
  return at::thnn_conv3d_backward_out(xlatens[0], xlatens[1], xlatens[2], xlatens[3], xlatens[4], xlatens[5], kernel_size, stride, padding, xlatens[6], xlatens[7]);
}

std::tuple<at::Tensor,at::Tensor,at::Tensor> AtenIpexTypeDefault::thnn_conv3d_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & weight, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, const at::Tensor & finput, const at::Tensor & fgrad_input, std::array<bool,3> output_mask) {
  return at::thnn_conv3d_backward(xlatens[0], xlatens[1], xlatens[2], kernel_size, stride, padding, xlatens[3], xlatens[4], output_mask);
}

at::Tensor AtenIpexTypeDefault::slow_conv_dilated2d(const at::Tensor & self, const at::Tensor & weight, at::IntArrayRef kernel_size, const at::Tensor & bias, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef dilation) {
  return at::slow_conv_dilated2d(xlatens[0], xlatens[1], kernel_size, xlatens[2], stride, padding, dilation);
}

std::tuple<at::Tensor,at::Tensor,at::Tensor> AtenIpexTypeDefault::slow_conv_dilated2d_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & weight, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef dilation, std::array<bool,3> output_mask) {
  return at::slow_conv_dilated2d_backward(xlatens[0], xlatens[1], xlatens[2], kernel_size, stride, padding, dilation, output_mask);
}

at::Tensor AtenIpexTypeDefault::slow_conv_dilated3d(const at::Tensor & self, const at::Tensor & weight, at::IntArrayRef kernel_size, const at::Tensor & bias, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef dilation) {
  return at::slow_conv_dilated3d(xlatens[0], xlatens[1], kernel_size, xlatens[2], stride, padding, dilation);
}

std::tuple<at::Tensor,at::Tensor,at::Tensor> AtenIpexTypeDefault::slow_conv_dilated3d_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & weight, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef dilation, std::array<bool,3> output_mask) {
  return at::slow_conv_dilated3d_backward(xlatens[0], xlatens[1], xlatens[2], kernel_size, stride, padding, dilation, output_mask);
}

at::Tensor & AtenIpexTypeDefault::col2im_out(at::Tensor & out, const at::Tensor & self, at::IntArrayRef output_size, at::IntArrayRef kernel_size, at::IntArrayRef dilation, at::IntArrayRef padding, at::IntArrayRef stride) {
  return at::col2im_out(xlatens[0], xlatens[1], output_size, kernel_size, dilation, padding, stride);
}

at::Tensor AtenIpexTypeDefault::col2im(const at::Tensor & self, at::IntArrayRef output_size, at::IntArrayRef kernel_size, at::IntArrayRef dilation, at::IntArrayRef padding, at::IntArrayRef stride) {
  return at::col2im(xlatens[0], output_size, kernel_size, dilation, padding, stride);
}

at::Tensor & AtenIpexTypeDefault::col2im_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, at::IntArrayRef kernel_size, at::IntArrayRef dilation, at::IntArrayRef padding, at::IntArrayRef stride) {
  return at::col2im_backward_out(xlatens[0], xlatens[1], kernel_size, dilation, padding, stride);
}

at::Tensor AtenIpexTypeDefault::col2im_backward(const at::Tensor & grad_output, at::IntArrayRef kernel_size, at::IntArrayRef dilation, at::IntArrayRef padding, at::IntArrayRef stride) {
  return at::col2im_backward(xlatens[0], kernel_size, dilation, padding, stride);
}

at::Tensor & AtenIpexTypeDefault::im2col_out(at::Tensor & out, const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef dilation, at::IntArrayRef padding, at::IntArrayRef stride) {
  return at::im2col_out(xlatens[0], xlatens[1], kernel_size, dilation, padding, stride);
}

at::Tensor AtenIpexTypeDefault::im2col(const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef dilation, at::IntArrayRef padding, at::IntArrayRef stride) {
  return at::im2col(xlatens[0], kernel_size, dilation, padding, stride);
}

at::Tensor & AtenIpexTypeDefault::im2col_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, at::IntArrayRef input_size, at::IntArrayRef kernel_size, at::IntArrayRef dilation, at::IntArrayRef padding, at::IntArrayRef stride) {
  return at::im2col_backward_out(xlatens[0], xlatens[1], input_size, kernel_size, dilation, padding, stride);
}

at::Tensor AtenIpexTypeDefault::im2col_backward(const at::Tensor & grad_output, at::IntArrayRef input_size, at::IntArrayRef kernel_size, at::IntArrayRef dilation, at::IntArrayRef padding, at::IntArrayRef stride) {
  return at::im2col_backward(xlatens[0], input_size, kernel_size, dilation, padding, stride);
}



void RegisterAtenTypeFunctions() {
  static auto dispatch = torch::RegisterOperators()
  .op(torch::RegisterOperators::options().schema("aten::_cast_Byte(Tensor self, bool non_blocking=False) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, bool), &AtenXlaType::_cast_Byte>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::_cast_Char(Tensor self, bool non_blocking=False) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, bool), &AtenXlaType::_cast_Char>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::_cast_Double(Tensor self, bool non_blocking=False) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, bool), &AtenIpexTypeDefault::_cast_Double>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::_cast_Float(Tensor self, bool non_blocking=False) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, bool), &AtenXlaType::_cast_Float>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::_cast_Int(Tensor self, bool non_blocking=False) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, bool), &AtenXlaType::_cast_Int>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::_cast_Long(Tensor self, bool non_blocking=False) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, bool), &AtenXlaType::_cast_Long>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::_cast_Short(Tensor self, bool non_blocking=False) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, bool), &AtenXlaType::_cast_Short>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::_cast_Half(Tensor self, bool non_blocking=False) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, bool), &AtenIpexTypeDefault::_cast_Half>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::backward(Tensor self, Tensor? gradient=None, bool keep_graph=False, bool create_graph=False) -> void")
      .impl_unboxedOnlyKernel<void(const at::Tensor &, const at::Tensor &, bool, bool), &AtenIpexTypeDefault::backward>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::set_data(Tensor(a!) self, Tensor new_data) -> void")
      .impl_unboxedOnlyKernel<void(const at::Tensor &, const at::Tensor &), &AtenIpexTypeDefault::set_data>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::_debug_has_internal_overlap(Tensor self) -> int")
      .impl_unboxedOnlyKernel<int64_t(const at::Tensor &), &AtenIpexTypeDefault::_debug_has_internal_overlap>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::_fused_dropout(Tensor self, float p, Generator? generator=None) -> (Tensor, Tensor)")
      .impl_unboxedOnlyKernel<std::tuple<at::Tensor,at::Tensor>(const at::Tensor &, double, at::Generator *), &AtenIpexTypeDefault::_fused_dropout>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::_masked_scale(Tensor self, Tensor mask, float scale) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &, double), &AtenIpexTypeDefault::_masked_scale>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::_sobol_engine_draw(Tensor quasi, int n, Tensor sobolstate, int dimension, int num_generated, ScalarType? dtype) -> (Tensor, Tensor)")
      .impl_unboxedOnlyKernel<std::tuple<at::Tensor,at::Tensor>(const at::Tensor &, int64_t, const at::Tensor &, int64_t, int64_t, c10::optional<at::ScalarType>), &AtenIpexTypeDefault::_sobol_engine_draw>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::_sobol_engine_ff_(Tensor(a!) self, int n, Tensor sobolstate, int dimension, int num_generated) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, int64_t, const at::Tensor &, int64_t, int64_t), &AtenIpexTypeDefault::_sobol_engine_ff_>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::_sobol_engine_scramble_(Tensor(a!) self, Tensor ltm, int dimension) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, int64_t), &AtenIpexTypeDefault::_sobol_engine_scramble_>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::_sobol_engine_initialize_state_(Tensor(a!) self, int dimension) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, int64_t), &AtenIpexTypeDefault::_sobol_engine_initialize_state_>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::_reshape_from_tensor(Tensor self, Tensor shape) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &), &AtenIpexTypeDefault::_reshape_from_tensor>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::_shape_as_tensor(Tensor self) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &), &AtenIpexTypeDefault::_shape_as_tensor>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::dropout(Tensor input, float p, bool train) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, double, bool), &AtenXlaType::dropout>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::dropout_(Tensor(a!) self, float p, bool train) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, double, bool), &AtenXlaType::dropout_>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::feature_dropout(Tensor input, float p, bool train) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, double, bool), &AtenIpexTypeDefault::feature_dropout>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::feature_dropout_(Tensor(a!) self, float p, bool train) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, double, bool), &AtenIpexTypeDefault::feature_dropout_>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::alpha_dropout(Tensor input, float p, bool train) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, double, bool), &AtenIpexTypeDefault::alpha_dropout>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::alpha_dropout_(Tensor(a!) self, float p, bool train) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, double, bool), &AtenIpexTypeDefault::alpha_dropout_>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::feature_alpha_dropout(Tensor input, float p, bool train) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, double, bool), &AtenIpexTypeDefault::feature_alpha_dropout>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::feature_alpha_dropout_(Tensor(a!) self, float p, bool train) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, double, bool), &AtenIpexTypeDefault::feature_alpha_dropout_>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::abs(Tensor self) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &), &AtenXlaType::abs>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::abs_(Tensor(a!) self) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &), &AtenXlaType::abs_>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::abs.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &), &AtenIpexTypeDefault::abs_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::acos(Tensor self) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &), &AtenXlaType::acos>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::acos_(Tensor(a!) self) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &), &AtenXlaType::acos_>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::acos.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &), &AtenIpexTypeDefault::acos_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::avg_pool1d(Tensor self, int[1] kernel_size, int[1] stride=[], int[1] padding=0, bool ceil_mode=False, bool count_include_pad=True) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, at::IntArrayRef, at::IntArrayRef, at::IntArrayRef, bool, bool), &AtenXlaType::avg_pool1d>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::adaptive_avg_pool1d(Tensor self, int[1] output_size) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, at::IntArrayRef), &AtenIpexTypeDefault::adaptive_avg_pool1d>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::adaptive_max_pool1d(Tensor self, int[1] output_size) -> (Tensor, Tensor)")
      .impl_unboxedOnlyKernel<std::tuple<at::Tensor,at::Tensor>(const at::Tensor &, at::IntArrayRef), &AtenIpexTypeDefault::adaptive_max_pool1d>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::add.Tensor(Tensor self, Tensor other, *, Scalar alpha=1) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &, at::Scalar), &AtenXlaType::add>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::add_.Tensor(Tensor(a!) self, Tensor other, *, Scalar alpha=1) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, at::Scalar), &AtenXlaType::add_>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::add.out(Tensor self, Tensor other, *, Scalar alpha=1, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, const at::Tensor &, at::Scalar), &AtenIpexTypeDefault::add_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::add.Scalar(Tensor self, Scalar other, Scalar alpha=1) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, at::Scalar, at::Scalar), &AtenXlaType::add>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::add_.Scalar(Tensor(a!) self, Scalar other, Scalar alpha=1) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, at::Scalar, at::Scalar), &AtenXlaType::add_>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::addmv(Tensor self, Tensor mat, Tensor vec, *, Scalar beta=1, Scalar alpha=1) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &, const at::Tensor &, at::Scalar, at::Scalar), &AtenIpexTypeDefault::addmv>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::addmv_(Tensor(a!) self, Tensor mat, Tensor vec, *, Scalar beta=1, Scalar alpha=1) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, const at::Tensor &, at::Scalar, at::Scalar), &AtenIpexTypeDefault::addmv_>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::addmv.out(Tensor self, Tensor mat, Tensor vec, *, Scalar beta=1, Scalar alpha=1, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, const at::Tensor &, const at::Tensor &, at::Scalar, at::Scalar), &AtenIpexTypeDefault::addmv_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::addr(Tensor self, Tensor vec1, Tensor vec2, *, Scalar beta=1, Scalar alpha=1) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &, const at::Tensor &, at::Scalar, at::Scalar), &AtenIpexTypeDefault::addr>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::addr_(Tensor(a!) self, Tensor vec1, Tensor vec2, *, Scalar beta=1, Scalar alpha=1) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, const at::Tensor &, at::Scalar, at::Scalar), &AtenIpexTypeDefault::addr_>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::addr.out(Tensor self, Tensor vec1, Tensor vec2, *, Scalar beta=1, Scalar alpha=1, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, const at::Tensor &, const at::Tensor &, at::Scalar, at::Scalar), &AtenIpexTypeDefault::addr_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::affine_grid_generator(Tensor theta, int[] size, bool align_corners) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, at::IntArrayRef, bool), &AtenIpexTypeDefault::affine_grid_generator>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::affine_grid_generator_backward(Tensor grad, int[] size, bool align_corners) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, at::IntArrayRef, bool), &AtenIpexTypeDefault::affine_grid_generator_backward>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::all.dim(Tensor self, int dim, bool keepdim=False) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, int64_t, bool), &AtenXlaType::all>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::all.out(Tensor self, int dim, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, int64_t, bool), &AtenIpexTypeDefault::all_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::allclose(Tensor self, Tensor other, float rtol=1e-05, float atol=1e-08, bool equal_nan=False) -> bool")
      .impl_unboxedOnlyKernel<bool(const at::Tensor &, const at::Tensor &, double, double, bool), &AtenIpexTypeDefault::allclose>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::any.dim(Tensor self, int dim, bool keepdim=False) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, int64_t, bool), &AtenXlaType::any>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::any.out(Tensor self, int dim, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, int64_t, bool), &AtenIpexTypeDefault::any_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::arange(Scalar end, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(at::Scalar, const at::TensorOptions &), &AtenXlaType::arange>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::arange.start(Scalar start, Scalar end, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(at::Scalar, at::Scalar, const at::TensorOptions &), &AtenXlaType::arange>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::arange.start_step(Scalar start, Scalar end, Scalar step, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(at::Scalar, at::Scalar, at::Scalar, const at::TensorOptions &), &AtenXlaType::arange>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::arange.out(Scalar end, *, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, at::Scalar), &AtenIpexTypeDefault::arange_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::arange.start_out(Scalar start, Scalar end, Scalar step=1, *, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, at::Scalar, at::Scalar, at::Scalar), &AtenIpexTypeDefault::arange_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::_dim_arange(Tensor like, int dim) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, int64_t), &AtenXlaType::_dim_arange>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::argmax(Tensor self, int? dim=None, bool keepdim=False) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, c10::optional<int64_t>, bool), &AtenXlaType::argmax>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::argmin(Tensor self, int? dim=None, bool keepdim=False) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, c10::optional<int64_t>, bool), &AtenXlaType::argmin>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::as_strided(Tensor(a) self, int[] size, int[] stride, int? storage_offset=None) -> Tensor(a)")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, at::IntArrayRef, at::IntArrayRef, c10::optional<int64_t>), &AtenXlaType::as_strided>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::as_strided_(Tensor(a!) self, int[] size, int[] stride, int? storage_offset=None) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, at::IntArrayRef, at::IntArrayRef, c10::optional<int64_t>), &AtenXlaType::as_strided_>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::asin(Tensor self) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &), &AtenXlaType::asin>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::asin_(Tensor(a!) self) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &), &AtenXlaType::asin_>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::asin.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &), &AtenIpexTypeDefault::asin_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::atan(Tensor self) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &), &AtenXlaType::atan>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::atan_(Tensor(a!) self) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &), &AtenXlaType::atan_>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::atan.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &), &AtenIpexTypeDefault::atan_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::baddbmm(Tensor self, Tensor batch1, Tensor batch2, *, Scalar beta=1, Scalar alpha=1) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &, const at::Tensor &, at::Scalar, at::Scalar), &AtenIpexTypeDefault::baddbmm>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::baddbmm_(Tensor(a!) self, Tensor batch1, Tensor batch2, *, Scalar beta=1, Scalar alpha=1) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, const at::Tensor &, at::Scalar, at::Scalar), &AtenIpexTypeDefault::baddbmm_>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::_baddbmm_mkl_(Tensor(a!) self, Tensor batch1, Tensor batch2, *, Scalar beta=1, Scalar alpha=1) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, const at::Tensor &, at::Scalar, at::Scalar), &AtenIpexTypeDefault::_baddbmm_mkl_>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::baddbmm.out(Tensor self, Tensor batch1, Tensor batch2, *, Scalar beta=1, Scalar alpha=1, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, const at::Tensor &, const at::Tensor &, at::Scalar, at::Scalar), &AtenIpexTypeDefault::baddbmm_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::bartlett_window(int window_length, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(int64_t, const at::TensorOptions &), &AtenXlaType::bartlett_window>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::bartlett_window.periodic(int window_length, bool periodic, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(int64_t, bool, const at::TensorOptions &), &AtenXlaType::bartlett_window>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::batch_norm(Tensor input, Tensor? weight, Tensor? bias, Tensor? running_mean, Tensor? running_var, bool training, float momentum, float eps, bool cudnn_enabled) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &, const at::Tensor &, const at::Tensor &, const at::Tensor &, bool, double, double, bool), &AtenXlaType::batch_norm>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::_batch_norm_impl_index(Tensor input, Tensor? weight, Tensor? bias, Tensor? running_mean, Tensor? running_var, bool training, float momentum, float eps, bool cudnn_enabled) -> (Tensor, Tensor, Tensor, int)")
      .impl_unboxedOnlyKernel<std::tuple<at::Tensor,at::Tensor,at::Tensor,int64_t>(const at::Tensor &, const at::Tensor &, const at::Tensor &, const at::Tensor &, const at::Tensor &, bool, double, double, bool), &AtenIpexTypeDefault::_batch_norm_impl_index>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::_batch_norm_impl_index_backward(int impl_index, Tensor input, Tensor grad_output, Tensor? weight, Tensor? running_mean, Tensor? running_var, Tensor? save_mean, Tensor? save_var_transform, bool train, float eps, bool[3] output_mask) -> (Tensor, Tensor, Tensor)")
      .impl_unboxedOnlyKernel<std::tuple<at::Tensor,at::Tensor,at::Tensor>(int64_t, const at::Tensor &, const at::Tensor &, const at::Tensor &, const at::Tensor &, const at::Tensor &, const at::Tensor &, const at::Tensor &, bool, double, std::array<bool,3>), &AtenIpexTypeDefault::_batch_norm_impl_index_backward>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::bernoulli(Tensor self, *, Generator? generator=None) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, at::Generator *), &AtenXlaType::bernoulli>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::bernoulli.out(Tensor self, *, Generator? generator=None, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, at::Generator *), &AtenIpexTypeDefault::bernoulli_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::bernoulli_.Tensor(Tensor(a!) self, Tensor p, *, Generator? generator=None) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, at::Generator *), &AtenXlaType::bernoulli_>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::bernoulli_.float(Tensor(a!) self, float p=0.5, *, Generator? generator=None) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, double, at::Generator *), &AtenXlaType::bernoulli_>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::bernoulli.p(Tensor self, float p, *, Generator? generator=None) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, double, at::Generator *), &AtenXlaType::bernoulli>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::bilinear(Tensor input1, Tensor input2, Tensor weight, Tensor? bias) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &, const at::Tensor &, const at::Tensor &), &AtenXlaType::bilinear>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::binary_cross_entropy_with_logits(Tensor self, Tensor target, Tensor? weight=None, Tensor? pos_weight=None, int reduction=Mean) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &, const at::Tensor &, const at::Tensor &, int64_t), &AtenXlaType::binary_cross_entropy_with_logits>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::binary_cross_entropy_with_logits_backward(Tensor grad_output, Tensor self, Tensor target, Tensor? weight=None, Tensor? pos_weight=None, int reduction=Mean) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &, const at::Tensor &, const at::Tensor &, const at::Tensor &, int64_t), &AtenXlaType::binary_cross_entropy_with_logits_backward>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::bincount(Tensor self, Tensor? weights=None, int minlength=0) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &, int64_t), &AtenIpexTypeDefault::bincount>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::bitwise_not(Tensor self) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &), &AtenXlaType::bitwise_not>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::bitwise_not_(Tensor(a!) self) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &), &AtenXlaType::bitwise_not_>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::bitwise_not.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &), &AtenIpexTypeDefault::bitwise_not_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::logical_not(Tensor self) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &), &AtenIpexTypeDefault::logical_not>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::logical_not_(Tensor(a!) self) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &), &AtenIpexTypeDefault::logical_not_>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::logical_not.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &), &AtenIpexTypeDefault::logical_not_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::logical_xor(Tensor self, Tensor other) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &), &AtenIpexTypeDefault::logical_xor>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::logical_xor_(Tensor(a!) self, Tensor other) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &), &AtenIpexTypeDefault::logical_xor_>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::logical_xor.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, const at::Tensor &), &AtenIpexTypeDefault::logical_xor_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::blackman_window(int window_length, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(int64_t, const at::TensorOptions &), &AtenXlaType::blackman_window>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::blackman_window.periodic(int window_length, bool periodic, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(int64_t, bool, const at::TensorOptions &), &AtenXlaType::blackman_window>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::bmm(Tensor self, Tensor mat2) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &), &AtenXlaType::bmm>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::bmm.out(Tensor self, Tensor mat2, *, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, const at::Tensor &), &AtenIpexTypeDefault::bmm_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::broadcast_tensors(Tensor[] tensors) -> Tensor[]")
      .impl_unboxedOnlyKernel<std::vector<at::Tensor>(at::TensorList), &AtenXlaType::broadcast_tensors>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::cat(Tensor[] tensors, int dim=0) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(at::TensorList, int64_t), &AtenXlaType::cat>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::cat.out(Tensor[] tensors, int dim=0, *, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, at::TensorList, int64_t), &AtenIpexTypeDefault::cat_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::ceil(Tensor self) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &), &AtenXlaType::ceil>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::ceil_(Tensor(a!) self) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &), &AtenXlaType::ceil_>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::ceil.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &), &AtenIpexTypeDefault::ceil_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::chain_matmul(Tensor[] matrices) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(at::TensorList), &AtenXlaType::chain_matmul>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::chunk(Tensor(a) self, int chunks, int dim=0) -> Tensor(a)[]")
      .impl_unboxedOnlyKernel<std::vector<at::Tensor>(const at::Tensor &, int64_t, int64_t), &AtenIpexTypeDefault::chunk>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::clamp(Tensor self, Scalar? min=None, Scalar? max=None) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, c10::optional<at::Scalar>, c10::optional<at::Scalar>), &AtenXlaType::clamp>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::clamp_(Tensor(a!) self, Scalar? min=None, Scalar? max=None) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, c10::optional<at::Scalar>, c10::optional<at::Scalar>), &AtenXlaType::clamp_>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::clamp.out(Tensor self, Scalar? min=None, Scalar? max=None, *, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, c10::optional<at::Scalar>, c10::optional<at::Scalar>), &AtenIpexTypeDefault::clamp_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::clamp_max(Tensor self, Scalar max) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, at::Scalar), &AtenXlaType::clamp_max>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::clamp_max_(Tensor(a!) self, Scalar max) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, at::Scalar), &AtenXlaType::clamp_max_>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::clamp_max.out(Tensor self, Scalar max, *, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, at::Scalar), &AtenIpexTypeDefault::clamp_max_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::clamp_min(Tensor self, Scalar min) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, at::Scalar), &AtenXlaType::clamp_min>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::clamp_min_(Tensor(a!) self, Scalar min) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, at::Scalar), &AtenXlaType::clamp_min_>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::clamp_min.out(Tensor self, Scalar min, *, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, at::Scalar), &AtenIpexTypeDefault::clamp_min_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::constant_pad_nd(Tensor self, int[] pad, Scalar value=0) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, at::IntArrayRef, at::Scalar), &AtenXlaType::constant_pad_nd>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::contiguous(Tensor self, *, MemoryFormat memory_format=contiguous_format) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, at::MemoryFormat), &AtenXlaType::contiguous>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::convolution(Tensor input, Tensor weight, Tensor? bias, int[] stride, int[] padding, int[] dilation, bool transposed, int[] output_padding, int groups) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &, const at::Tensor &, at::IntArrayRef, at::IntArrayRef, at::IntArrayRef, bool, at::IntArrayRef, int64_t), &AtenIpexTypeDefault::convolution>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::_convolution(Tensor input, Tensor weight, Tensor? bias, int[] stride, int[] padding, int[] dilation, bool transposed, int[] output_padding, int groups, bool benchmark, bool deterministic, bool cudnn_enabled) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &, const at::Tensor &, at::IntArrayRef, at::IntArrayRef, at::IntArrayRef, bool, at::IntArrayRef, int64_t, bool, bool, bool), &AtenIpexTypeDefault::_convolution>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::_convolution_nogroup(Tensor input, Tensor weight, Tensor? bias, int[] stride, int[] padding, int[] dilation, bool transposed, int[] output_padding) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &, const at::Tensor &, at::IntArrayRef, at::IntArrayRef, at::IntArrayRef, bool, at::IntArrayRef), &AtenIpexTypeDefault::_convolution_nogroup>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::_convolution_double_backward(Tensor? ggI, Tensor? ggW, Tensor? ggb, Tensor gO, Tensor weight, Tensor self, int[] stride, int[] padding, int[] dilation, bool transposed, int[] output_padding, int groups, bool benchmark, bool deterministic, bool cudnn_enabled, bool[3] output_mask) -> (Tensor, Tensor, Tensor)")
      .impl_unboxedOnlyKernel<std::tuple<at::Tensor,at::Tensor,at::Tensor>(const at::Tensor &, const at::Tensor &, const at::Tensor &, const at::Tensor &, const at::Tensor &, const at::Tensor &, at::IntArrayRef, at::IntArrayRef, at::IntArrayRef, bool, at::IntArrayRef, int64_t, bool, bool, bool, std::array<bool,3>), &AtenIpexTypeDefault::_convolution_double_backward>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::conv1d(Tensor input, Tensor weight, Tensor? bias=None, int[1] stride=1, int[1] padding=0, int[1] dilation=1, int groups=1) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &, const at::Tensor &, at::IntArrayRef, at::IntArrayRef, at::IntArrayRef, int64_t), &AtenIpexTypeDefault::conv1d>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::conv2d(Tensor input, Tensor weight, Tensor? bias=None, int[2] stride=1, int[2] padding=0, int[2] dilation=1, int groups=1) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &, const at::Tensor &, at::IntArrayRef, at::IntArrayRef, at::IntArrayRef, int64_t), &AtenIpexTypeDefault::conv2d>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::conv3d(Tensor input, Tensor weight, Tensor? bias=None, int[3] stride=1, int[3] padding=0, int[3] dilation=1, int groups=1) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &, const at::Tensor &, at::IntArrayRef, at::IntArrayRef, at::IntArrayRef, int64_t), &AtenIpexTypeDefault::conv3d>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::conv_tbc(Tensor self, Tensor weight, Tensor bias, int pad=0) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &, const at::Tensor &, int64_t), &AtenIpexTypeDefault::conv_tbc>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::conv_tbc_backward(Tensor self, Tensor input, Tensor weight, Tensor bias, int pad) -> (Tensor, Tensor, Tensor)")
      .impl_unboxedOnlyKernel<std::tuple<at::Tensor,at::Tensor,at::Tensor>(const at::Tensor &, const at::Tensor &, const at::Tensor &, const at::Tensor &, int64_t), &AtenIpexTypeDefault::conv_tbc_backward>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::conv_transpose1d(Tensor input, Tensor weight, Tensor? bias=None, int[1] stride=1, int[1] padding=0, int[1] output_padding=0, int groups=1, int[1] dilation=1) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &, const at::Tensor &, at::IntArrayRef, at::IntArrayRef, at::IntArrayRef, int64_t, at::IntArrayRef), &AtenIpexTypeDefault::conv_transpose1d>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::conv_transpose2d.input(Tensor input, Tensor weight, Tensor? bias=None, int[2] stride=1, int[2] padding=0, int[2] output_padding=0, int groups=1, int[2] dilation=1) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &, const at::Tensor &, at::IntArrayRef, at::IntArrayRef, at::IntArrayRef, int64_t, at::IntArrayRef), &AtenIpexTypeDefault::conv_transpose2d>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::conv_transpose3d.input(Tensor input, Tensor weight, Tensor? bias=None, int[3] stride=1, int[3] padding=0, int[3] output_padding=0, int groups=1, int[3] dilation=1) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &, const at::Tensor &, at::IntArrayRef, at::IntArrayRef, at::IntArrayRef, int64_t, at::IntArrayRef), &AtenIpexTypeDefault::conv_transpose3d>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::copy_(Tensor(a!) self, Tensor src, bool non_blocking=False) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, bool), &AtenXlaType::copy_>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::_copy_from(Tensor self, Tensor dst, bool non_blocking=False) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &, bool), &AtenXlaType::_copy_from>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::cos(Tensor self) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &), &AtenXlaType::cos>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::cos_(Tensor(a!) self) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &), &AtenXlaType::cos_>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::cos.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &), &AtenIpexTypeDefault::cos_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::cosh(Tensor self) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &), &AtenXlaType::cosh>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::cosh_(Tensor(a!) self) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &), &AtenXlaType::cosh_>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::cosh.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &), &AtenIpexTypeDefault::cosh_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::cosine_embedding_loss(Tensor input1, Tensor input2, Tensor target, float margin=0.0, int reduction=Mean) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &, const at::Tensor &, double, int64_t), &AtenXlaType::cosine_embedding_loss>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::cumsum(Tensor self, int dim, *, ScalarType? dtype=None) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, int64_t, c10::optional<at::ScalarType>), &AtenXlaType::cumsum>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::cumsum.out(Tensor self, int dim, *, ScalarType? dtype=None, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, int64_t, c10::optional<at::ScalarType>), &AtenIpexTypeDefault::cumsum_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::cumprod(Tensor self, int dim, *, ScalarType? dtype=None) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, int64_t, c10::optional<at::ScalarType>), &AtenXlaType::cumprod>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::cumprod.out(Tensor self, int dim, *, ScalarType? dtype=None, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, int64_t, c10::optional<at::ScalarType>), &AtenIpexTypeDefault::cumprod_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::ctc_loss.IntList(Tensor log_probs, Tensor targets, int[] input_lengths, int[] target_lengths, int blank=0, int reduction=Mean, bool zero_infinity=False) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &, at::IntArrayRef, at::IntArrayRef, int64_t, int64_t, bool), &AtenIpexTypeDefault::ctc_loss>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::ctc_loss.Tensor(Tensor log_probs, Tensor targets, Tensor input_lengths, Tensor target_lengths, int blank=0, int reduction=Mean, bool zero_infinity=False) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &, const at::Tensor &, const at::Tensor &, int64_t, int64_t, bool), &AtenIpexTypeDefault::ctc_loss>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::_ctc_loss(Tensor log_probs, Tensor targets, int[] input_lengths, int[] target_lengths, int blank=0, bool zero_infinity=False) -> (Tensor, Tensor)")
      .impl_unboxedOnlyKernel<std::tuple<at::Tensor,at::Tensor>(const at::Tensor &, const at::Tensor &, at::IntArrayRef, at::IntArrayRef, int64_t, bool), &AtenIpexTypeDefault::_ctc_loss>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::_ctc_loss_backward(Tensor grad, Tensor log_probs, Tensor targets, int[] input_lengths, int[] target_lengths, Tensor neg_log_likelihood, Tensor log_alpha, int blank, bool zero_infinity=False) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &, const at::Tensor &, at::IntArrayRef, at::IntArrayRef, const at::Tensor &, const at::Tensor &, int64_t, bool), &AtenIpexTypeDefault::_ctc_loss_backward>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::det(Tensor self) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &), &AtenIpexTypeDefault::det>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::diag_embed(Tensor self, int offset=0, int dim1=-2, int dim2=-1) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, int64_t, int64_t, int64_t), &AtenIpexTypeDefault::diag_embed>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::diagflat(Tensor self, int offset=0) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, int64_t), &AtenXlaType::diagflat>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::diagonal(Tensor(a) self, int offset=0, int dim1=0, int dim2=1) -> Tensor(a)")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, int64_t, int64_t, int64_t), &AtenXlaType::diagonal>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::fill_diagonal_(Tensor(a!) self, Scalar fill_value, bool wrap=False) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, at::Scalar, bool), &AtenIpexTypeDefault::fill_diagonal_>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::div.Tensor(Tensor self, Tensor other) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &), &AtenXlaType::div>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::div_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &), &AtenXlaType::div_>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::div.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, const at::Tensor &), &AtenIpexTypeDefault::div_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::div.Scalar(Tensor self, Scalar other) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, at::Scalar), &AtenXlaType::div>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::div_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, at::Scalar), &AtenXlaType::div_>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::dot(Tensor self, Tensor tensor) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &), &AtenXlaType::dot>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::dot.out(Tensor self, Tensor tensor, *, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, const at::Tensor &), &AtenIpexTypeDefault::dot_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::einsum(str equation, Tensor[] tensors) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(std::string, at::TensorList), &AtenXlaType::einsum>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::embedding(Tensor weight, Tensor indices, int padding_idx=-1, bool scale_grad_by_freq=False, bool sparse=False) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &, int64_t, bool, bool), &AtenXlaType::embedding>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::embedding_backward(Tensor grad, Tensor indices, int num_weights, int padding_idx, bool scale_grad_by_freq, bool sparse) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &, int64_t, int64_t, bool, bool), &AtenIpexTypeDefault::embedding_backward>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::embedding_dense_backward(Tensor grad_output, Tensor indices, int num_weights, int padding_idx, bool scale_grad_by_freq) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &, int64_t, int64_t, bool), &AtenXlaType::embedding_dense_backward>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::embedding_renorm_(Tensor(a!) self, Tensor indices, float max_norm, float norm_type) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, double, double), &AtenIpexTypeDefault::embedding_renorm_>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::embedding_sparse_backward(Tensor grad, Tensor indices, int num_weights, int padding_idx, bool scale_grad_by_freq) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &, int64_t, int64_t, bool), &AtenIpexTypeDefault::embedding_sparse_backward>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::embedding_bag(Tensor weight, Tensor indices, Tensor offsets, bool scale_grad_by_freq=False, int mode=0, bool sparse=False, Tensor? per_sample_weights=None) -> (Tensor, Tensor, Tensor, Tensor)")
      .impl_unboxedOnlyKernel<std::tuple<at::Tensor,at::Tensor,at::Tensor,at::Tensor>(const at::Tensor &, const at::Tensor &, const at::Tensor &, bool, int64_t, bool, const at::Tensor &), &AtenIpexTypeDefault::embedding_bag>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::_embedding_bag(Tensor weight, Tensor indices, Tensor offsets, bool scale_grad_by_freq=False, int mode=0, bool sparse=False, Tensor? per_sample_weights=None) -> (Tensor, Tensor, Tensor, Tensor)")
      .impl_unboxedOnlyKernel<std::tuple<at::Tensor,at::Tensor,at::Tensor,at::Tensor>(const at::Tensor &, const at::Tensor &, const at::Tensor &, bool, int64_t, bool, const at::Tensor &), &AtenIpexTypeDefault::_embedding_bag>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::_embedding_bag_backward(Tensor grad, Tensor indices, Tensor offsets, Tensor offset2bag, Tensor bag_size, Tensor maximum_indices, int num_weights, bool scale_grad_by_freq, int mode, bool sparse, Tensor? per_sample_weights) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &, const at::Tensor &, const at::Tensor &, const at::Tensor &, const at::Tensor &, int64_t, bool, int64_t, bool, const at::Tensor &), &AtenIpexTypeDefault::_embedding_bag_backward>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::_embedding_bag_sparse_backward(Tensor grad, Tensor indices, Tensor offsets, Tensor offset2bag, Tensor bag_size, int num_weights, bool scale_grad_by_freq, int mode, Tensor? per_sample_weights) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &, const at::Tensor &, const at::Tensor &, const at::Tensor &, int64_t, bool, int64_t, const at::Tensor &), &AtenIpexTypeDefault::_embedding_bag_sparse_backward>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::_embedding_bag_dense_backward(Tensor grad, Tensor indices, Tensor offsets, Tensor offset2bag, Tensor bag_size, Tensor maximum_indices, int num_weights, bool scale_grad_by_freq, int mode, Tensor? per_sample_weights) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &, const at::Tensor &, const at::Tensor &, const at::Tensor &, const at::Tensor &, int64_t, bool, int64_t, const at::Tensor &), &AtenIpexTypeDefault::_embedding_bag_dense_backward>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::_embedding_bag_per_sample_weights_backward(Tensor grad, Tensor weight, Tensor indices, Tensor offsets, Tensor offset2bag, int mode) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &, const at::Tensor &, const at::Tensor &, const at::Tensor &, int64_t), &AtenIpexTypeDefault::_embedding_bag_per_sample_weights_backward>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::empty.memory_format(int[] size, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None, MemoryFormat? memory_format=None) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(at::IntArrayRef, const at::TensorOptions &, c10::optional<at::MemoryFormat>), &AtenXlaType::empty>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::_empty_affine_quantized(int[] size, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None, float scale=1, int zero_point=0, MemoryFormat? memory_format=contiguous_format) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(at::IntArrayRef, const at::TensorOptions &, double, int64_t, c10::optional<at::MemoryFormat>), &AtenIpexTypeDefault::_empty_affine_quantized>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::resize_(Tensor(a!) self, int[] size) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, at::IntArrayRef), &AtenXlaType::resize_>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::empty.out(int[] size, *, MemoryFormat? memory_format=None, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, at::IntArrayRef, c10::optional<at::MemoryFormat>), &AtenIpexTypeDefault::empty_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::empty_like(Tensor self) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &), &AtenXlaType::empty_like>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::empty_like.dtype(Tensor self, *, ScalarType dtype, Layout layout, Device device, bool pin_memory=False, MemoryFormat? memory_format=contiguous_format) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::TensorOptions &, c10::optional<at::MemoryFormat>), &AtenXlaType::empty_like>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::empty_strided(int[] size, int[] stride, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(at::IntArrayRef, at::IntArrayRef, const at::TensorOptions &), &AtenXlaType::empty_strided>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::erf(Tensor self) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &), &AtenXlaType::erf>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::erf_(Tensor(a!) self) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &), &AtenXlaType::erf_>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::erf.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &), &AtenIpexTypeDefault::erf_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::erfc(Tensor self) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &), &AtenXlaType::erfc>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::erfc_(Tensor(a!) self) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &), &AtenXlaType::erfc_>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::erfc.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &), &AtenIpexTypeDefault::erfc_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::exp(Tensor self) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &), &AtenXlaType::exp>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::exp_(Tensor(a!) self) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &), &AtenXlaType::exp_>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::exp.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &), &AtenIpexTypeDefault::exp_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::expm1(Tensor self) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &), &AtenXlaType::expm1>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::expm1_(Tensor(a!) self) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &), &AtenXlaType::expm1_>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::expm1.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &), &AtenIpexTypeDefault::expm1_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::expand(Tensor(a) self, int[] size, *, bool implicit=False) -> Tensor(a)")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, at::IntArrayRef, bool), &AtenXlaType::expand>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::expand_as(Tensor self, Tensor other) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &), &AtenXlaType::expand_as>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::eye(int n, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(int64_t, const at::TensorOptions &), &AtenXlaType::eye>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::eye.m(int n, int m, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(int64_t, int64_t, const at::TensorOptions &), &AtenXlaType::eye>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::eye.out(int n, *, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, int64_t), &AtenIpexTypeDefault::eye_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::eye.m_out(int n, int m, *, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, int64_t, int64_t), &AtenIpexTypeDefault::eye_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::flatten(Tensor self, int start_dim=0, int end_dim=-1) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, int64_t, int64_t), &AtenXlaType::flatten>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::fill_.Scalar(Tensor(a!) self, Scalar value) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, at::Scalar), &AtenXlaType::fill_>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::fill_.Tensor(Tensor(a!) self, Tensor value) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &), &AtenXlaType::fill_>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::floor(Tensor self) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &), &AtenXlaType::floor>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::floor_(Tensor(a!) self) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &), &AtenXlaType::floor_>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::floor.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &), &AtenIpexTypeDefault::floor_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::frac(Tensor self) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &), &AtenXlaType::frac>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::frac_(Tensor(a!) self) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &), &AtenXlaType::frac_>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::frac.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &), &AtenIpexTypeDefault::frac_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::full(int[] size, Scalar fill_value, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(at::IntArrayRef, at::Scalar, const at::TensorOptions &), &AtenXlaType::full>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::full.out(int[] size, Scalar fill_value, *, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, at::IntArrayRef, at::Scalar), &AtenIpexTypeDefault::full_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::full_like(Tensor self, Scalar fill_value) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, at::Scalar), &AtenXlaType::full_like>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::full_like.dtype(Tensor self, Scalar fill_value, *, ScalarType dtype, Layout layout, Device device, bool pin_memory=False) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, at::Scalar, const at::TensorOptions &), &AtenXlaType::full_like>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::from_file(str filename, bool? shared=None, int? size=0, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(std::string, c10::optional<bool>, c10::optional<int64_t>, const at::TensorOptions &), &AtenIpexTypeDefault::from_file>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::grid_sampler(Tensor input, Tensor grid, int interpolation_mode, int padding_mode, bool align_corners) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &, int64_t, int64_t, bool), &AtenIpexTypeDefault::grid_sampler>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::grid_sampler_2d(Tensor input, Tensor grid, int interpolation_mode, int padding_mode, bool align_corners) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &, int64_t, int64_t, bool), &AtenIpexTypeDefault::grid_sampler_2d>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::grid_sampler_2d_backward(Tensor grad_output, Tensor input, Tensor grid, int interpolation_mode, int padding_mode, bool align_corners) -> (Tensor, Tensor)")
      .impl_unboxedOnlyKernel<std::tuple<at::Tensor,at::Tensor>(const at::Tensor &, const at::Tensor &, const at::Tensor &, int64_t, int64_t, bool), &AtenIpexTypeDefault::grid_sampler_2d_backward>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::grid_sampler_3d(Tensor input, Tensor grid, int interpolation_mode, int padding_mode, bool align_corners) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &, int64_t, int64_t, bool), &AtenIpexTypeDefault::grid_sampler_3d>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::grid_sampler_3d_backward(Tensor grad_output, Tensor input, Tensor grid, int interpolation_mode, int padding_mode, bool align_corners) -> (Tensor, Tensor)")
      .impl_unboxedOnlyKernel<std::tuple<at::Tensor,at::Tensor>(const at::Tensor &, const at::Tensor &, const at::Tensor &, int64_t, int64_t, bool), &AtenIpexTypeDefault::grid_sampler_3d_backward>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::hann_window(int window_length, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(int64_t, const at::TensorOptions &), &AtenXlaType::hann_window>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::hann_window.periodic(int window_length, bool periodic, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(int64_t, bool, const at::TensorOptions &), &AtenXlaType::hann_window>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::hamming_window(int window_length, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(int64_t, const at::TensorOptions &), &AtenXlaType::hamming_window>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::hamming_window.periodic(int window_length, bool periodic, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(int64_t, bool, const at::TensorOptions &), &AtenXlaType::hamming_window>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::hamming_window.periodic_alpha(int window_length, bool periodic, float alpha, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(int64_t, bool, double, const at::TensorOptions &), &AtenXlaType::hamming_window>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::hamming_window.periodic_alpha_beta(int window_length, bool periodic, float alpha, float beta, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(int64_t, bool, double, double, const at::TensorOptions &), &AtenXlaType::hamming_window>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::hinge_embedding_loss(Tensor self, Tensor target, float margin=1.0, int reduction=Mean) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &, double, int64_t), &AtenXlaType::hinge_embedding_loss>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::ger(Tensor self, Tensor vec2) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &), &AtenIpexTypeDefault::ger>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::ger.out(Tensor self, Tensor vec2, *, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, const at::Tensor &), &AtenIpexTypeDefault::ger_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::group_norm(Tensor input, int num_groups, Tensor? weight=None, Tensor? bias=None, float eps=1e-05, bool cudnn_enabled=True) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, int64_t, const at::Tensor &, const at::Tensor &, double, bool), &AtenXlaType::group_norm>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::fft(Tensor self, int signal_ndim, bool normalized=False) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, int64_t, bool), &AtenIpexTypeDefault::fft>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::ifft(Tensor self, int signal_ndim, bool normalized=False) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, int64_t, bool), &AtenIpexTypeDefault::ifft>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::rfft(Tensor self, int signal_ndim, bool normalized=False, bool onesided=True) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, int64_t, bool, bool), &AtenIpexTypeDefault::rfft>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::irfft(Tensor self, int signal_ndim, bool normalized=False, bool onesided=True, int[] signal_sizes=[]) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, int64_t, bool, bool, at::IntArrayRef), &AtenIpexTypeDefault::irfft>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::_fft_with_size(Tensor self, int signal_ndim, bool complex_input, bool complex_output, bool inverse, int[] checked_signal_sizes, bool normalized, bool onesided, int[] output_sizes) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, int64_t, bool, bool, bool, at::IntArrayRef, bool, bool, at::IntArrayRef), &AtenIpexTypeDefault::_fft_with_size>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::_cufft_get_plan_cache_size(int device_index) -> int")
      .impl_unboxedOnlyKernel<int64_t(int64_t), &AtenIpexTypeDefault::_cufft_get_plan_cache_size>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::_cufft_get_plan_cache_max_size(int device_index) -> int")
      .impl_unboxedOnlyKernel<int64_t(int64_t), &AtenIpexTypeDefault::_cufft_get_plan_cache_max_size>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::_cufft_set_plan_cache_max_size(int device_index, int max_size) -> void")
      .impl_unboxedOnlyKernel<void(int64_t, int64_t), &AtenIpexTypeDefault::_cufft_set_plan_cache_max_size>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::_cufft_clear_plan_cache(int device_index) -> void")
      .impl_unboxedOnlyKernel<void(int64_t), &AtenIpexTypeDefault::_cufft_clear_plan_cache>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::index(Tensor self, Tensor?[] indices) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, at::TensorList), &AtenXlaType::index>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::index_copy_(Tensor(a!) self, int dim, Tensor index, Tensor source) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, int64_t, const at::Tensor &, const at::Tensor &), &AtenXlaType::index_copy_>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::index_copy(Tensor self, int dim, Tensor index, Tensor source) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, int64_t, const at::Tensor &, const at::Tensor &), &AtenXlaType::index_copy>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::index_put_(Tensor(a!) self, Tensor?[] indices, Tensor values, bool accumulate=False) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, at::TensorList, const at::Tensor &, bool), &AtenXlaType::index_put_>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::index_put(Tensor self, Tensor?[] indices, Tensor values, bool accumulate=False) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, at::TensorList, const at::Tensor &, bool), &AtenXlaType::index_put>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::_index_put_impl_(Tensor(a!) self, Tensor?[] indices, Tensor values, bool accumulate=False, bool unsafe=False) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, at::TensorList, const at::Tensor &, bool, bool), &AtenXlaType::_index_put_impl_>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::instance_norm(Tensor input, Tensor? weight, Tensor? bias, Tensor? running_mean, Tensor? running_var, bool use_input_stats, float momentum, float eps, bool cudnn_enabled) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &, const at::Tensor &, const at::Tensor &, const at::Tensor &, bool, double, double, bool), &AtenXlaType::instance_norm>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::inverse(Tensor self) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &), &AtenIpexTypeDefault::inverse>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::inverse.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &), &AtenIpexTypeDefault::inverse_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::_inverse_helper(Tensor self) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &), &AtenIpexTypeDefault::_inverse_helper>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::isclose(Tensor self, Tensor other, float rtol=1e-05, float atol=1e-08, bool equal_nan=False) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &, double, double, bool), &AtenIpexTypeDefault::isclose>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::isnan(Tensor self) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &), &AtenIpexTypeDefault::isnan>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::is_distributed(Tensor self) -> bool")
      .impl_unboxedOnlyKernel<bool(const at::Tensor &), &AtenIpexTypeDefault::is_distributed>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::is_floating_point(Tensor self) -> bool")
      .impl_unboxedOnlyKernel<bool(const at::Tensor &), &AtenXlaType::is_floating_point>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::is_complex(Tensor self) -> bool")
      .impl_unboxedOnlyKernel<bool(const at::Tensor &), &AtenIpexTypeDefault::is_complex>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::is_nonzero(Tensor self) -> bool")
      .impl_unboxedOnlyKernel<bool(const at::Tensor &), &AtenIpexTypeDefault::is_nonzero>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::is_same_size(Tensor self, Tensor other) -> bool")
      .impl_unboxedOnlyKernel<bool(const at::Tensor &, const at::Tensor &), &AtenIpexTypeDefault::is_same_size>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::is_signed(Tensor self) -> bool")
      .impl_unboxedOnlyKernel<bool(const at::Tensor &), &AtenXlaType::is_signed>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::kl_div(Tensor self, Tensor target, int reduction=Mean) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &, int64_t), &AtenXlaType::kl_div>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::kl_div_backward(Tensor grad_output, Tensor self, Tensor target, int reduction=Mean) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &, const at::Tensor &, int64_t), &AtenXlaType::kl_div_backward>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::kthvalue(Tensor self, int k, int dim=-1, bool keepdim=False) -> (Tensor values, Tensor indices)")
      .impl_unboxedOnlyKernel<std::tuple<at::Tensor,at::Tensor>(const at::Tensor &, int64_t, int64_t, bool), &AtenXlaType::kthvalue>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::kthvalue.values(Tensor self, int k, int dim=-1, bool keepdim=False, *, Tensor(a!) values, Tensor(b!) indices) -> (Tensor(a!) values, Tensor(b!) indices)")
      .impl_unboxedOnlyKernel<std::tuple<at::Tensor &,at::Tensor &>(at::Tensor &, at::Tensor &, const at::Tensor &, int64_t, int64_t, bool), &AtenIpexTypeDefault::kthvalue_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::layer_norm(Tensor input, int[] normalized_shape, Tensor? weight=None, Tensor? bias=None, float eps=1e-05, bool cudnn_enable=True) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, at::IntArrayRef, const at::Tensor &, const at::Tensor &, double, bool), &AtenXlaType::layer_norm>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::native_layer_norm(Tensor input, Tensor? weight, Tensor? bias, int M, int N, float eps) -> (Tensor, Tensor, Tensor)")
      .impl_unboxedOnlyKernel<std::tuple<at::Tensor,at::Tensor,at::Tensor>(const at::Tensor &, const at::Tensor &, const at::Tensor &, int64_t, int64_t, double), &AtenIpexTypeDefault::native_layer_norm>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::native_layer_norm_backward(Tensor grad_out, Tensor input, Tensor mean, Tensor rstd, Tensor? weight, int M, int N, bool[3] output_mask) -> (Tensor, Tensor, Tensor)")
      .impl_unboxedOnlyKernel<std::tuple<at::Tensor,at::Tensor,at::Tensor>(const at::Tensor &, const at::Tensor &, const at::Tensor &, const at::Tensor &, const at::Tensor &, int64_t, int64_t, std::array<bool,3>), &AtenIpexTypeDefault::native_layer_norm_backward>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::native_layer_norm_double_backward(Tensor? ggI, Tensor? ggW, Tensor? ggb, Tensor gO, Tensor input, Tensor mean, Tensor rstd, Tensor? weight, int M, int N, bool[3] output_mask) -> (Tensor, Tensor, Tensor)")
      .impl_unboxedOnlyKernel<std::tuple<at::Tensor,at::Tensor,at::Tensor>(const at::Tensor &, const at::Tensor &, const at::Tensor &, const at::Tensor &, const at::Tensor &, const at::Tensor &, const at::Tensor &, const at::Tensor &, int64_t, int64_t, std::array<bool,3>), &AtenIpexTypeDefault::native_layer_norm_double_backward>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::linear(Tensor input, Tensor weight, Tensor? bias=None) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &, const at::Tensor &), &AtenXlaType::linear>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::mkldnn_linear(Tensor input, Tensor weight, Tensor? bias=None) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &, const at::Tensor &), &AtenIpexTypeDefault::mkldnn_linear>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::fbgemm_linear_int8_weight_fp32_activation(Tensor input, Tensor weight, Tensor packed, Tensor col_offsets, Scalar weight_scale, Scalar weight_zero_point, Tensor bias) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &, const at::Tensor &, const at::Tensor &, at::Scalar, at::Scalar, const at::Tensor &), &AtenIpexTypeDefault::fbgemm_linear_int8_weight_fp32_activation>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::fbgemm_linear_int8_weight(Tensor input, Tensor weight, Tensor packed, Tensor col_offsets, Scalar weight_scale, Scalar weight_zero_point, Tensor bias) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &, const at::Tensor &, const at::Tensor &, at::Scalar, at::Scalar, const at::Tensor &), &AtenIpexTypeDefault::fbgemm_linear_int8_weight>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::fbgemm_linear_quantize_weight(Tensor input) -> (Tensor, Tensor, float, int)")
      .impl_unboxedOnlyKernel<std::tuple<at::Tensor,at::Tensor,double,int64_t>(const at::Tensor &), &AtenIpexTypeDefault::fbgemm_linear_quantize_weight>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::fbgemm_pack_gemm_matrix_fp16(Tensor input) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &), &AtenIpexTypeDefault::fbgemm_pack_gemm_matrix_fp16>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::fbgemm_linear_fp16_weight_fp32_activation(Tensor input, Tensor packed_weight, Tensor bias) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &, const at::Tensor &), &AtenIpexTypeDefault::fbgemm_linear_fp16_weight_fp32_activation>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::fbgemm_linear_fp16_weight(Tensor input, Tensor packed_weight, Tensor bias) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &, const at::Tensor &), &AtenIpexTypeDefault::fbgemm_linear_fp16_weight>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::fbgemm_pack_quantized_matrix(Tensor input) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &), &AtenIpexTypeDefault::fbgemm_pack_quantized_matrix>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::fbgemm_pack_quantized_matrix(Tensor input, int K, int N) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, int64_t, int64_t), &AtenIpexTypeDefault::fbgemm_pack_quantized_matrix>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::linspace(Scalar start, Scalar end, int steps=100, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(at::Scalar, at::Scalar, int64_t, const at::TensorOptions &), &AtenIpexTypeDefault::linspace>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::linspace.out(Scalar start, Scalar end, int steps=100, *, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, at::Scalar, at::Scalar, int64_t), &AtenIpexTypeDefault::linspace_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::log(Tensor self) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &), &AtenXlaType::log>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::log_(Tensor(a!) self) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &), &AtenXlaType::log_>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::log.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &), &AtenIpexTypeDefault::log_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::log10(Tensor self) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &), &AtenXlaType::log10>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::log10_(Tensor(a!) self) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &), &AtenXlaType::log10_>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::log10.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &), &AtenIpexTypeDefault::log10_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::log1p(Tensor self) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &), &AtenXlaType::log1p>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::log1p_(Tensor(a!) self) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &), &AtenXlaType::log1p_>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::log1p.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &), &AtenIpexTypeDefault::log1p_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::log2(Tensor self) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &), &AtenXlaType::log2>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::log2_(Tensor(a!) self) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &), &AtenXlaType::log2_>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::log2.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &), &AtenIpexTypeDefault::log2_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::logdet(Tensor self) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &), &AtenIpexTypeDefault::logdet>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::logspace(Scalar start, Scalar end, int steps=100, float base=10.0, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(at::Scalar, at::Scalar, int64_t, double, const at::TensorOptions &), &AtenIpexTypeDefault::logspace>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::logspace.out(Scalar start, Scalar end, int steps=100, float base=10.0, *, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, at::Scalar, at::Scalar, int64_t, double), &AtenIpexTypeDefault::logspace_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::log_softmax(Tensor self, int dim, ScalarType? dtype=None) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, int64_t, c10::optional<at::ScalarType>), &AtenXlaType::log_softmax>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::_log_softmax(Tensor self, int dim, bool half_to_float) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, int64_t, bool), &AtenXlaType::_log_softmax>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::_log_softmax_backward_data(Tensor grad_output, Tensor output, int dim, Tensor self) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &, int64_t, const at::Tensor &), &AtenXlaType::_log_softmax_backward_data>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::logsumexp(Tensor self, int[1] dim, bool keepdim=False) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, at::IntArrayRef, bool), &AtenIpexTypeDefault::logsumexp>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::logsumexp.out(Tensor self, int[1] dim, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, at::IntArrayRef, bool), &AtenIpexTypeDefault::logsumexp_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::margin_ranking_loss(Tensor input1, Tensor input2, Tensor target, float margin=0.0, int reduction=Mean) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &, const at::Tensor &, double, int64_t), &AtenXlaType::margin_ranking_loss>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::matmul(Tensor self, Tensor other) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &), &AtenXlaType::matmul>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::matmul.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, const at::Tensor &), &AtenIpexTypeDefault::matmul_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::matrix_rank.tol(Tensor self, float tol, bool symmetric=False) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, double, bool), &AtenIpexTypeDefault::matrix_rank>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::matrix_rank(Tensor self, bool symmetric=False) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, bool), &AtenIpexTypeDefault::matrix_rank>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::matrix_power(Tensor self, int n) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, int64_t), &AtenIpexTypeDefault::matrix_power>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::max.dim(Tensor self, int dim, bool keepdim=False) -> (Tensor values, Tensor indices)")
      .impl_unboxedOnlyKernel<std::tuple<at::Tensor,at::Tensor>(const at::Tensor &, int64_t, bool), &AtenXlaType::max>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::max.dim_max(Tensor self, int dim, bool keepdim=False, *, Tensor(a!) max, Tensor(b!) max_values) -> (Tensor(a!) values, Tensor(b!) indices)")
      .impl_unboxedOnlyKernel<std::tuple<at::Tensor &,at::Tensor &>(at::Tensor &, at::Tensor &, const at::Tensor &, int64_t, bool), &AtenIpexTypeDefault::max_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::max_values(Tensor self, int[1] dim, bool keepdim=False) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, at::IntArrayRef, bool), &AtenIpexTypeDefault::max_values>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::max_pool1d_with_indices(Tensor self, int[1] kernel_size, int[1] stride=[], int[1] padding=0, int[1] dilation=1, bool ceil_mode=False) -> (Tensor, Tensor)")
      .impl_unboxedOnlyKernel<std::tuple<at::Tensor,at::Tensor>(const at::Tensor &, at::IntArrayRef, at::IntArrayRef, at::IntArrayRef, at::IntArrayRef, bool), &AtenIpexTypeDefault::max_pool1d_with_indices>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::max_pool1d(Tensor self, int[1] kernel_size, int[1] stride=[], int[1] padding=0, int[1] dilation=1, bool ceil_mode=False) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, at::IntArrayRef, at::IntArrayRef, at::IntArrayRef, at::IntArrayRef, bool), &AtenXlaType::max_pool1d>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::max_pool2d(Tensor self, int[2] kernel_size, int[2] stride=[], int[2] padding=0, int[2] dilation=1, bool ceil_mode=False) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, at::IntArrayRef, at::IntArrayRef, at::IntArrayRef, at::IntArrayRef, bool), &AtenXlaType::max_pool2d>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::mkldnn_max_pool2d(Tensor self, int[2] kernel_size, int[2] stride=[], int[2] padding=0, int[2] dilation=1, bool ceil_mode=False) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, at::IntArrayRef, at::IntArrayRef, at::IntArrayRef, at::IntArrayRef, bool), &AtenIpexTypeDefault::mkldnn_max_pool2d>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::quantized_max_pool2d(Tensor self, int[2] kernel_size, int[2] stride=[], int[2] padding=0, int[2] dilation=1) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, at::IntArrayRef, at::IntArrayRef, at::IntArrayRef, at::IntArrayRef), &AtenIpexTypeDefault::quantized_max_pool2d>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::max_pool3d(Tensor self, int[3] kernel_size, int[3] stride=[], int[3] padding=0, int[3] dilation=1, bool ceil_mode=False) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, at::IntArrayRef, at::IntArrayRef, at::IntArrayRef, at::IntArrayRef, bool), &AtenXlaType::max_pool3d>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::mean(Tensor self, *, ScalarType? dtype=None) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, c10::optional<at::ScalarType>), &AtenXlaType::mean>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::mean.dim(Tensor self, int[1] dim, bool keepdim=False, *, ScalarType? dtype=None) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, at::IntArrayRef, bool, c10::optional<at::ScalarType>), &AtenXlaType::mean>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::mean.out(Tensor self, int[1] dim, bool keepdim=False, *, ScalarType? dtype=None, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, at::IntArrayRef, bool, c10::optional<at::ScalarType>), &AtenIpexTypeDefault::mean_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::median.dim(Tensor self, int dim, bool keepdim=False) -> (Tensor values, Tensor indices)")
      .impl_unboxedOnlyKernel<std::tuple<at::Tensor,at::Tensor>(const at::Tensor &, int64_t, bool), &AtenIpexTypeDefault::median>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::median.dim_values(Tensor self, int dim, bool keepdim=False, *, Tensor(a!) values, Tensor(b!) indices) -> (Tensor(a!) values, Tensor(b!) indices)")
      .impl_unboxedOnlyKernel<std::tuple<at::Tensor &,at::Tensor &>(at::Tensor &, at::Tensor &, const at::Tensor &, int64_t, bool), &AtenIpexTypeDefault::median_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::min.dim(Tensor self, int dim, bool keepdim=False) -> (Tensor values, Tensor indices)")
      .impl_unboxedOnlyKernel<std::tuple<at::Tensor,at::Tensor>(const at::Tensor &, int64_t, bool), &AtenXlaType::min>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::min.dim_min(Tensor self, int dim, bool keepdim=False, *, Tensor(a!) min, Tensor(b!) min_indices) -> (Tensor(a!) values, Tensor(b!) indices)")
      .impl_unboxedOnlyKernel<std::tuple<at::Tensor &,at::Tensor &>(at::Tensor &, at::Tensor &, const at::Tensor &, int64_t, bool), &AtenIpexTypeDefault::min_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::min_values(Tensor self, int[1] dim, bool keepdim=False) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, at::IntArrayRef, bool), &AtenIpexTypeDefault::min_values>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::mkldnn_convolution_forward(Tensor self, Tensor weight, Tensor? bias, int[] padding, int[] stride, int[] dilation, int groups) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &, const at::Tensor &, at::IntArrayRef, at::IntArrayRef, at::IntArrayRef, int64_t), &AtenIpexTypeDefault::mkldnn_convolution_forward>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::mkldnn_convolution_backward_input(int[] self_size, Tensor grad_output, Tensor weight, int[] padding, int[] stride, int[] dilation, int groups, bool bias_defined) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(at::IntArrayRef, const at::Tensor &, const at::Tensor &, at::IntArrayRef, at::IntArrayRef, at::IntArrayRef, int64_t, bool), &AtenIpexTypeDefault::mkldnn_convolution_backward_input>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::mkldnn_convolution_backward_weights(int[] weight_size, Tensor grad_output, Tensor self, int[] padding, int[] stride, int[] dilation, int groups, bool bias_defined) -> (Tensor, Tensor)")
      .impl_unboxedOnlyKernel<std::tuple<at::Tensor,at::Tensor>(at::IntArrayRef, const at::Tensor &, const at::Tensor &, at::IntArrayRef, at::IntArrayRef, at::IntArrayRef, int64_t, bool), &AtenIpexTypeDefault::mkldnn_convolution_backward_weights>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::mkldnn_convolution_backward(Tensor self, Tensor grad_output, Tensor weight, int[] padding, int[] stride, int[] dilation, int groups, bool[3] output_mask) -> (Tensor, Tensor, Tensor)")
      .impl_unboxedOnlyKernel<std::tuple<at::Tensor,at::Tensor,at::Tensor>(const at::Tensor &, const at::Tensor &, const at::Tensor &, at::IntArrayRef, at::IntArrayRef, at::IntArrayRef, int64_t, std::array<bool,3>), &AtenIpexTypeDefault::mkldnn_convolution_backward>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::sycl_convolution(Tensor self, Tensor weight, Tensor? bias, int[] padding, int[] stride, int[] dilation, int groups) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &, const at::Tensor &, at::IntArrayRef, at::IntArrayRef, at::IntArrayRef, int64_t), &AtenIpexTypeDefault::sycl_convolution>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::sycl_convolution_backward_input(int[] self_size, Tensor grad_output, Tensor weight, int[] padding, int[] stride, int[] dilation, int groups, bool bias_defined) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(at::IntArrayRef, const at::Tensor &, const at::Tensor &, at::IntArrayRef, at::IntArrayRef, at::IntArrayRef, int64_t, bool), &AtenIpexTypeDefault::sycl_convolution_backward_input>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::sycl_convolution_backward_weights(int[] weight_size, Tensor grad_output, Tensor self, int[] padding, int[] stride, int[] dilation, int groups, bool bias_defined) -> (Tensor, Tensor)")
      .impl_unboxedOnlyKernel<std::tuple<at::Tensor,at::Tensor>(at::IntArrayRef, const at::Tensor &, const at::Tensor &, at::IntArrayRef, at::IntArrayRef, at::IntArrayRef, int64_t, bool), &AtenIpexTypeDefault::sycl_convolution_backward_weights>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::sycl_convolution_backward(Tensor self, Tensor grad_output, Tensor weight, int[] padding, int[] stride, int[] dilation, int groups, bool[3] output_mask) -> (Tensor, Tensor, Tensor)")
      .impl_unboxedOnlyKernel<std::tuple<at::Tensor,at::Tensor,at::Tensor>(const at::Tensor &, const at::Tensor &, const at::Tensor &, at::IntArrayRef, at::IntArrayRef, at::IntArrayRef, int64_t, std::array<bool,3>), &AtenIpexTypeDefault::sycl_convolution_backward>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::miopen_batch_norm(Tensor input, Tensor weight, Tensor? bias, Tensor? running_mean, Tensor? running_var, bool training, float exponential_average_factor, float epsilon) -> (Tensor, Tensor, Tensor)")
      .impl_unboxedOnlyKernel<std::tuple<at::Tensor,at::Tensor,at::Tensor>(const at::Tensor &, const at::Tensor &, const at::Tensor &, const at::Tensor &, const at::Tensor &, bool, double, double), &AtenIpexTypeDefault::miopen_batch_norm>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::miopen_batch_norm_backward(Tensor input, Tensor grad_output, Tensor weight, Tensor? running_mean, Tensor? running_var, Tensor? save_mean, Tensor? save_var, float epsilon) -> (Tensor, Tensor, Tensor)")
      .impl_unboxedOnlyKernel<std::tuple<at::Tensor,at::Tensor,at::Tensor>(const at::Tensor &, const at::Tensor &, const at::Tensor &, const at::Tensor &, const at::Tensor &, const at::Tensor &, const at::Tensor &, double), &AtenIpexTypeDefault::miopen_batch_norm_backward>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::miopen_convolution(Tensor self, Tensor weight, Tensor? bias, int[] padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &, const at::Tensor &, at::IntArrayRef, at::IntArrayRef, at::IntArrayRef, int64_t, bool, bool), &AtenIpexTypeDefault::miopen_convolution>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::miopen_convolution_backward_input(int[] self_size, Tensor grad_output, Tensor weight, int[] padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(at::IntArrayRef, const at::Tensor &, const at::Tensor &, at::IntArrayRef, at::IntArrayRef, at::IntArrayRef, int64_t, bool, bool), &AtenIpexTypeDefault::miopen_convolution_backward_input>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::miopen_convolution_backward(Tensor self, Tensor grad_output, Tensor weight, int[] padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic, bool[3] output_mask) -> (Tensor, Tensor, Tensor)")
      .impl_unboxedOnlyKernel<std::tuple<at::Tensor,at::Tensor,at::Tensor>(const at::Tensor &, const at::Tensor &, const at::Tensor &, at::IntArrayRef, at::IntArrayRef, at::IntArrayRef, int64_t, bool, bool, std::array<bool,3>), &AtenIpexTypeDefault::miopen_convolution_backward>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::miopen_convolution_backward_bias(Tensor grad_output) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &), &AtenIpexTypeDefault::miopen_convolution_backward_bias>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::miopen_convolution_backward_weight(int[] weight_size, Tensor grad_output, Tensor self, int[] padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(at::IntArrayRef, const at::Tensor &, const at::Tensor &, at::IntArrayRef, at::IntArrayRef, at::IntArrayRef, int64_t, bool, bool), &AtenIpexTypeDefault::miopen_convolution_backward_weight>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::miopen_convolution_transpose(Tensor self, Tensor weight, Tensor? bias, int[] padding, int[] output_padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &, const at::Tensor &, at::IntArrayRef, at::IntArrayRef, at::IntArrayRef, at::IntArrayRef, int64_t, bool, bool), &AtenIpexTypeDefault::miopen_convolution_transpose>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::miopen_convolution_transpose_backward(Tensor self, Tensor grad_output, Tensor weight, int[] padding, int[] output_padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic, bool[3] output_mask) -> (Tensor, Tensor, Tensor)")
      .impl_unboxedOnlyKernel<std::tuple<at::Tensor,at::Tensor,at::Tensor>(const at::Tensor &, const at::Tensor &, const at::Tensor &, at::IntArrayRef, at::IntArrayRef, at::IntArrayRef, at::IntArrayRef, int64_t, bool, bool, std::array<bool,3>), &AtenIpexTypeDefault::miopen_convolution_transpose_backward>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::miopen_convolution_transpose_backward_input(Tensor grad_output, Tensor weight, int[] padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &, at::IntArrayRef, at::IntArrayRef, at::IntArrayRef, int64_t, bool, bool), &AtenIpexTypeDefault::miopen_convolution_transpose_backward_input>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::miopen_convolution_transpose_backward_weight(int[] weight_size, Tensor grad_output, Tensor self, int[] padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(at::IntArrayRef, const at::Tensor &, const at::Tensor &, at::IntArrayRef, at::IntArrayRef, at::IntArrayRef, int64_t, bool, bool), &AtenIpexTypeDefault::miopen_convolution_transpose_backward_weight>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::miopen_depthwise_convolution(Tensor self, Tensor weight, Tensor? bias, int[] padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &, const at::Tensor &, at::IntArrayRef, at::IntArrayRef, at::IntArrayRef, int64_t, bool, bool), &AtenIpexTypeDefault::miopen_depthwise_convolution>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::miopen_depthwise_convolution_backward_input(int[] self_size, Tensor grad_output, Tensor weight, int[] padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(at::IntArrayRef, const at::Tensor &, const at::Tensor &, at::IntArrayRef, at::IntArrayRef, at::IntArrayRef, int64_t, bool, bool), &AtenIpexTypeDefault::miopen_depthwise_convolution_backward_input>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::miopen_depthwise_convolution_backward(Tensor self, Tensor grad_output, Tensor weight, int[] padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic, bool[3] output_mask) -> (Tensor, Tensor, Tensor)")
      .impl_unboxedOnlyKernel<std::tuple<at::Tensor,at::Tensor,at::Tensor>(const at::Tensor &, const at::Tensor &, const at::Tensor &, at::IntArrayRef, at::IntArrayRef, at::IntArrayRef, int64_t, bool, bool, std::array<bool,3>), &AtenIpexTypeDefault::miopen_depthwise_convolution_backward>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::miopen_depthwise_convolution_backward_weight(int[] weight_size, Tensor grad_output, Tensor self, int[] padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(at::IntArrayRef, const at::Tensor &, const at::Tensor &, at::IntArrayRef, at::IntArrayRef, at::IntArrayRef, int64_t, bool, bool), &AtenIpexTypeDefault::miopen_depthwise_convolution_backward_weight>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::miopen_rnn(Tensor input, Tensor[] weight, int weight_stride0, Tensor hx, Tensor? cx, int mode, int hidden_size, int num_layers, bool batch_first, float dropout, bool train, bool bidirectional, int[] batch_sizes, Tensor? dropout_state) -> (Tensor, Tensor, Tensor, Tensor, Tensor)")
      .impl_unboxedOnlyKernel<std::tuple<at::Tensor,at::Tensor,at::Tensor,at::Tensor,at::Tensor>(const at::Tensor &, at::TensorList, int64_t, const at::Tensor &, const at::Tensor &, int64_t, int64_t, int64_t, bool, double, bool, bool, at::IntArrayRef, const at::Tensor &), &AtenIpexTypeDefault::miopen_rnn>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::miopen_rnn_backward(Tensor input, Tensor[] weight, int weight_stride0, Tensor weight_buf, Tensor hx, Tensor? cx, Tensor output, Tensor? grad_output, Tensor? grad_hy, Tensor? grad_cy, int mode, int hidden_size, int num_layers, bool batch_first, float dropout, bool train, bool bidirectional, int[] batch_sizes, Tensor? dropout_state, Tensor reserve, bool[4] output_mask) -> (Tensor, Tensor, Tensor, Tensor[])")
      .impl_unboxedOnlyKernel<std::tuple<at::Tensor,at::Tensor,at::Tensor,std::vector<at::Tensor>>(const at::Tensor &, at::TensorList, int64_t, const at::Tensor &, const at::Tensor &, const at::Tensor &, const at::Tensor &, const at::Tensor &, const at::Tensor &, const at::Tensor &, int64_t, int64_t, int64_t, bool, double, bool, bool, at::IntArrayRef, const at::Tensor &, const at::Tensor &, std::array<bool,4>), &AtenIpexTypeDefault::miopen_rnn_backward>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::mm(Tensor self, Tensor mat2) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &), &AtenXlaType::mm>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::mm.out(Tensor self, Tensor mat2, *, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, const at::Tensor &), &AtenIpexTypeDefault::mm_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::_sparse_mm(Tensor sparse, Tensor dense) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &), &AtenIpexTypeDefault::_sparse_mm>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::mode(Tensor self, int dim=-1, bool keepdim=False) -> (Tensor values, Tensor indices)")
      .impl_unboxedOnlyKernel<std::tuple<at::Tensor,at::Tensor>(const at::Tensor &, int64_t, bool), &AtenIpexTypeDefault::mode>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::mode.values(Tensor self, int dim=-1, bool keepdim=False, *, Tensor(a!) values, Tensor(b!) indices) -> (Tensor(a!) values, Tensor(b!) indices)")
      .impl_unboxedOnlyKernel<std::tuple<at::Tensor &,at::Tensor &>(at::Tensor &, at::Tensor &, const at::Tensor &, int64_t, bool), &AtenIpexTypeDefault::mode_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::mul.Tensor(Tensor self, Tensor other) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &), &AtenXlaType::mul>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::mul_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &), &AtenXlaType::mul_>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::mul.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, const at::Tensor &), &AtenIpexTypeDefault::mul_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::mul.Scalar(Tensor self, Scalar other) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, at::Scalar), &AtenXlaType::mul>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::mul_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, at::Scalar), &AtenXlaType::mul_>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::mv(Tensor self, Tensor vec) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &), &AtenIpexTypeDefault::mv>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::mv.out(Tensor self, Tensor vec, *, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, const at::Tensor &), &AtenIpexTypeDefault::mv_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::mvlgamma(Tensor self, int p) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, int64_t), &AtenIpexTypeDefault::mvlgamma>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::mvlgamma_(Tensor(a!) self, int p) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, int64_t), &AtenIpexTypeDefault::mvlgamma_>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::narrow_copy(Tensor self, int dim, int start, int length) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, int64_t, int64_t, int64_t), &AtenXlaType::narrow_copy>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::narrow(Tensor(a) self, int dim, int start, int length) -> Tensor(a)")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, int64_t, int64_t, int64_t), &AtenXlaType::narrow>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::native_batch_norm(Tensor input, Tensor? weight, Tensor? bias, Tensor? running_mean, Tensor? running_var, bool training, float momentum, float eps) -> (Tensor, Tensor, Tensor)")
      .impl_unboxedOnlyKernel<std::tuple<at::Tensor,at::Tensor,at::Tensor>(const at::Tensor &, const at::Tensor &, const at::Tensor &, const at::Tensor &, const at::Tensor &, bool, double, double), &AtenXlaType::native_batch_norm>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::batch_norm_stats(Tensor input, float eps) -> (Tensor, Tensor)")
      .impl_unboxedOnlyKernel<std::tuple<at::Tensor,at::Tensor>(const at::Tensor &, double), &AtenIpexTypeDefault::batch_norm_stats>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::batch_norm_elemt(Tensor input, Tensor? weight, Tensor? bias, Tensor mean, Tensor invstd, float eps) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &, const at::Tensor &, const at::Tensor &, const at::Tensor &, double), &AtenIpexTypeDefault::batch_norm_elemt>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::batch_norm_gather_stats(Tensor input, Tensor mean, Tensor invstd, Tensor? running_mean, Tensor? running_var, float momentum, float eps, int count) -> (Tensor, Tensor)")
      .impl_unboxedOnlyKernel<std::tuple<at::Tensor,at::Tensor>(const at::Tensor &, const at::Tensor &, const at::Tensor &, const at::Tensor &, const at::Tensor &, double, double, int64_t), &AtenIpexTypeDefault::batch_norm_gather_stats>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::batch_norm_gather_stats_with_counts(Tensor input, Tensor mean, Tensor invstd, Tensor? running_mean, Tensor? running_var, float momentum, float eps, int[] counts) -> (Tensor, Tensor)")
      .impl_unboxedOnlyKernel<std::tuple<at::Tensor,at::Tensor>(const at::Tensor &, const at::Tensor &, const at::Tensor &, const at::Tensor &, const at::Tensor &, double, double, at::IntArrayRef), &AtenIpexTypeDefault::batch_norm_gather_stats_with_counts>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::native_batch_norm_backward(Tensor grad_out, Tensor input, Tensor? weight, Tensor? running_mean, Tensor? running_var, Tensor? save_mean, Tensor? save_invstd, bool train, float eps, bool[3] output_mask) -> (Tensor, Tensor, Tensor)")
      .impl_unboxedOnlyKernel<std::tuple<at::Tensor,at::Tensor,at::Tensor>(const at::Tensor &, const at::Tensor &, const at::Tensor &, const at::Tensor &, const at::Tensor &, const at::Tensor &, const at::Tensor &, bool, double, std::array<bool,3>), &AtenXlaType::native_batch_norm_backward>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::batch_norm_backward_reduce(Tensor grad_out, Tensor input, Tensor mean, Tensor invstd, bool input_g, bool weight_g, bool bias_g) -> (Tensor, Tensor, Tensor, Tensor)")
      .impl_unboxedOnlyKernel<std::tuple<at::Tensor,at::Tensor,at::Tensor,at::Tensor>(const at::Tensor &, const at::Tensor &, const at::Tensor &, const at::Tensor &, bool, bool, bool), &AtenIpexTypeDefault::batch_norm_backward_reduce>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::batch_norm_backward_elemt(Tensor grad_out, Tensor input, Tensor mean, Tensor invstd, Tensor? weight, Tensor mean_dy, Tensor mean_dy_xmu) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &, const at::Tensor &, const at::Tensor &, const at::Tensor &, const at::Tensor &, const at::Tensor &), &AtenIpexTypeDefault::batch_norm_backward_elemt>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::batch_norm_update_stats(Tensor input, Tensor? running_mean, Tensor? running_var, float momentum) -> (Tensor, Tensor)")
      .impl_unboxedOnlyKernel<std::tuple<at::Tensor,at::Tensor>(const at::Tensor &, const at::Tensor &, const at::Tensor &, double), &AtenIpexTypeDefault::batch_norm_update_stats>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::_nnpack_spatial_convolution(Tensor input, Tensor weight, Tensor? bias, int[2] padding) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &, const at::Tensor &, at::IntArrayRef), &AtenIpexTypeDefault::_nnpack_spatial_convolution>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::_nnpack_spatial_convolution_backward(Tensor input, Tensor grad_output, Tensor weight, int[2] padding, bool[3] output_mask) -> (Tensor, Tensor, Tensor)")
      .impl_unboxedOnlyKernel<std::tuple<at::Tensor,at::Tensor,at::Tensor>(const at::Tensor &, const at::Tensor &, const at::Tensor &, at::IntArrayRef, std::array<bool,3>), &AtenIpexTypeDefault::_nnpack_spatial_convolution_backward>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::_nnpack_spatial_convolution_backward_input(Tensor input, Tensor grad_output, Tensor weight, int[2] padding) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &, const at::Tensor &, at::IntArrayRef), &AtenIpexTypeDefault::_nnpack_spatial_convolution_backward_input>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::_nnpack_spatial_convolution_backward_weight(Tensor input, int[] weightsize, Tensor grad_output, int[2] padding) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, at::IntArrayRef, const at::Tensor &, at::IntArrayRef), &AtenIpexTypeDefault::_nnpack_spatial_convolution_backward_weight>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::ones(int[] size, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(at::IntArrayRef, const at::TensorOptions &), &AtenXlaType::ones>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::ones.out(int[] size, *, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, at::IntArrayRef), &AtenIpexTypeDefault::ones_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::ones_like(Tensor self) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &), &AtenXlaType::ones_like>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::ones_like.dtype(Tensor self, *, ScalarType dtype, Layout layout, Device device, bool pin_memory=False) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::TensorOptions &), &AtenXlaType::ones_like>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::pairwise_distance(Tensor x1, Tensor x2, float p=2, float eps=1e-06, bool keepdim=False) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &, double, double, bool), &AtenXlaType::pairwise_distance>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::cdist(Tensor x1, Tensor x2, float p=2) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &, double), &AtenIpexTypeDefault::cdist>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::_cdist_backward(Tensor grad, Tensor x1, Tensor x2, float p, Tensor cdist) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &, const at::Tensor &, double, const at::Tensor &), &AtenIpexTypeDefault::_cdist_backward>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::pdist(Tensor self, float p=2) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, double), &AtenIpexTypeDefault::pdist>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::_pdist_forward(Tensor self, float p=2) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, double), &AtenIpexTypeDefault::_pdist_forward>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::_pdist_backward(Tensor grad, Tensor self, float p, Tensor pdist) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &, double, const at::Tensor &), &AtenIpexTypeDefault::_pdist_backward>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::cosine_similarity(Tensor x1, Tensor x2, int dim=1, float eps=1e-08) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &, int64_t, double), &AtenXlaType::cosine_similarity>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::permute(Tensor(a) self, int[] dims) -> Tensor(a)")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, at::IntArrayRef), &AtenXlaType::permute>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::numpy_T(Tensor(a) self) -> Tensor(a)")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &), &AtenIpexTypeDefault::numpy_T>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::pixel_shuffle(Tensor self, int upscale_factor) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, int64_t), &AtenXlaType::pixel_shuffle>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::is_pinned(Tensor self) -> bool")
      .impl_unboxedOnlyKernel<bool(const at::Tensor &), &AtenIpexTypeDefault::is_pinned>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::pin_memory(Tensor self) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &), &AtenIpexTypeDefault::pin_memory>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::pinverse(Tensor self, float rcond=1e-15) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, double), &AtenXlaType::pinverse>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::poisson_nll_loss(Tensor input, Tensor target, bool log_input, bool full, float eps, int reduction) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &, bool, bool, double, int64_t), &AtenIpexTypeDefault::poisson_nll_loss>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::scalar_tensor(Scalar s, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(at::Scalar, const at::TensorOptions &), &AtenIpexTypeDefault::scalar_tensor>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::rand(int[] size, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(at::IntArrayRef, const at::TensorOptions &), &AtenIpexTypeDefault::rand>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::rand.generator(int[] size, *, Generator? generator, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(at::IntArrayRef, at::Generator *, const at::TensorOptions &), &AtenIpexTypeDefault::rand>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::rand.out(int[] size, *, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, at::IntArrayRef), &AtenIpexTypeDefault::rand_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::rand.generator_out(int[] size, *, Generator? generator, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, at::IntArrayRef, at::Generator *), &AtenIpexTypeDefault::rand_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::rand_like(Tensor self) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &), &AtenIpexTypeDefault::rand_like>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::rand_like.dtype(Tensor self, *, ScalarType dtype, Layout layout, Device device, bool pin_memory=False) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::TensorOptions &), &AtenIpexTypeDefault::rand_like>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::randint(int high, int[] size, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(int64_t, at::IntArrayRef, const at::TensorOptions &), &AtenIpexTypeDefault::randint>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::randint.generator(int high, int[] size, *, Generator? generator, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(int64_t, at::IntArrayRef, at::Generator *, const at::TensorOptions &), &AtenIpexTypeDefault::randint>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::randint.low(int low, int high, int[] size, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(int64_t, int64_t, at::IntArrayRef, const at::TensorOptions &), &AtenIpexTypeDefault::randint>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::randint.low_generator(int low, int high, int[] size, *, Generator? generator, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(int64_t, int64_t, at::IntArrayRef, at::Generator *, const at::TensorOptions &), &AtenIpexTypeDefault::randint>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::randint.out(int high, int[] size, *, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, int64_t, at::IntArrayRef), &AtenIpexTypeDefault::randint_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::randint.generator_out(int high, int[] size, *, Generator? generator, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, int64_t, at::IntArrayRef, at::Generator *), &AtenIpexTypeDefault::randint_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::randint.low_out(int low, int high, int[] size, *, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, int64_t, int64_t, at::IntArrayRef), &AtenIpexTypeDefault::randint_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::randint.low_generator_out(int low, int high, int[] size, *, Generator? generator, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, int64_t, int64_t, at::IntArrayRef, at::Generator *), &AtenIpexTypeDefault::randint_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::randint_like(Tensor self, int high) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, int64_t), &AtenIpexTypeDefault::randint_like>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::randint_like.low(Tensor self, int low, int high) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, int64_t, int64_t), &AtenIpexTypeDefault::randint_like>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::randint_like.dtype(Tensor self, int high, *, ScalarType dtype, Layout layout, Device device, bool pin_memory=False) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, int64_t, const at::TensorOptions &), &AtenIpexTypeDefault::randint_like>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::randint_like.low_dtype(Tensor self, int low, int high, *, ScalarType dtype, Layout layout, Device device, bool pin_memory=False) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, int64_t, int64_t, const at::TensorOptions &), &AtenIpexTypeDefault::randint_like>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::randn(int[] size, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(at::IntArrayRef, const at::TensorOptions &), &AtenIpexTypeDefault::randn>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::randn.generator(int[] size, *, Generator? generator, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(at::IntArrayRef, at::Generator *, const at::TensorOptions &), &AtenIpexTypeDefault::randn>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::randn.out(int[] size, *, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, at::IntArrayRef), &AtenIpexTypeDefault::randn_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::randn.generator_out(int[] size, *, Generator? generator, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, at::IntArrayRef, at::Generator *), &AtenIpexTypeDefault::randn_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::randn_like(Tensor self) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &), &AtenIpexTypeDefault::randn_like>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::randn_like.dtype(Tensor self, *, ScalarType dtype, Layout layout, Device device, bool pin_memory=False) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::TensorOptions &), &AtenIpexTypeDefault::randn_like>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::randperm(int n, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(int64_t, const at::TensorOptions &), &AtenXlaType::randperm>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::randperm.generator(int n, *, Generator? generator, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(int64_t, at::Generator *, const at::TensorOptions &), &AtenXlaType::randperm>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::randperm.out(int n, *, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, int64_t), &AtenIpexTypeDefault::randperm_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::randperm.generator_out(int n, *, Generator? generator, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, int64_t, at::Generator *), &AtenIpexTypeDefault::randperm_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::range.step(Scalar start, Scalar end, Scalar step=1, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(at::Scalar, at::Scalar, at::Scalar, const at::TensorOptions &), &AtenIpexTypeDefault::range>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::range(Scalar start, Scalar end, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(at::Scalar, at::Scalar, const at::TensorOptions &), &AtenIpexTypeDefault::range>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::range.out(Scalar start, Scalar end, Scalar step=1, *, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, at::Scalar, at::Scalar, at::Scalar), &AtenIpexTypeDefault::range_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::reciprocal(Tensor self) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &), &AtenXlaType::reciprocal>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::reciprocal_(Tensor(a!) self) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &), &AtenXlaType::reciprocal_>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::reciprocal.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &), &AtenIpexTypeDefault::reciprocal_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::neg(Tensor self) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &), &AtenXlaType::neg>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::neg_(Tensor(a!) self) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &), &AtenXlaType::neg_>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::neg.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &), &AtenIpexTypeDefault::neg_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::repeat(Tensor self, int[] repeats) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, at::IntArrayRef), &AtenXlaType::repeat>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::repeat_interleave.Tensor(Tensor repeats) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &), &AtenIpexTypeDefault::repeat_interleave>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::repeat_interleave.self_Tensor(Tensor self, Tensor repeats, int? dim=None) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &, c10::optional<int64_t>), &AtenIpexTypeDefault::repeat_interleave>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::repeat_interleave.self_int(Tensor self, int repeats, int? dim=None) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, int64_t, c10::optional<int64_t>), &AtenIpexTypeDefault::repeat_interleave>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::reshape(Tensor self, int[] shape) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, at::IntArrayRef), &AtenXlaType::reshape>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::_mkldnn_reshape(Tensor self, int[] shape) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, at::IntArrayRef), &AtenIpexTypeDefault::_mkldnn_reshape>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::reshape_as(Tensor self, Tensor other) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &), &AtenIpexTypeDefault::reshape_as>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::round(Tensor self) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &), &AtenIpexTypeDefault::round>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::round_(Tensor(a!) self) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &), &AtenIpexTypeDefault::round_>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::round.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &), &AtenIpexTypeDefault::round_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::rrelu(Tensor self, Scalar lower=0.125, Scalar upper=0.3333333333333333, bool training=False, Generator? generator=None) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, at::Scalar, at::Scalar, bool, at::Generator *), &AtenIpexTypeDefault::rrelu>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::rrelu_(Tensor(a!) self, Scalar lower=0.125, Scalar upper=0.3333333333333333, bool training=False, Generator? generator=None) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, at::Scalar, at::Scalar, bool, at::Generator *), &AtenIpexTypeDefault::rrelu_>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::relu(Tensor self) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &), &AtenXlaType::relu>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::relu_(Tensor(a!) self) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &), &AtenXlaType::relu_>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::prelu(Tensor self, Tensor weight) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &), &AtenIpexTypeDefault::prelu>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::prelu_backward(Tensor grad_output, Tensor self, Tensor weight) -> (Tensor, Tensor)")
      .impl_unboxedOnlyKernel<std::tuple<at::Tensor,at::Tensor>(const at::Tensor &, const at::Tensor &, const at::Tensor &), &AtenIpexTypeDefault::prelu_backward>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::gelu(Tensor self) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &), &AtenIpexTypeDefault::gelu>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::gelu_backward(Tensor grad, Tensor self) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &), &AtenIpexTypeDefault::gelu_backward>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::hardshrink(Tensor self, Scalar lambd=0.5) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, at::Scalar), &AtenXlaType::hardshrink>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::hardshrink_backward(Tensor grad_out, Tensor self, Scalar lambd) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &, at::Scalar), &AtenXlaType::hardshrink_backward>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::rsqrt(Tensor self) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &), &AtenXlaType::rsqrt>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::rsqrt_(Tensor(a!) self) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &), &AtenXlaType::rsqrt_>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::rsqrt.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &), &AtenIpexTypeDefault::rsqrt_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::select.int(Tensor(a) self, int dim, int index) -> Tensor(a)")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, int64_t, int64_t), &AtenXlaType::select>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::selu(Tensor self) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &), &AtenXlaType::selu>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::selu_(Tensor(a!) self) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &), &AtenXlaType::selu_>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::celu(Tensor self, Scalar alpha=1.0) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, at::Scalar), &AtenXlaType::celu>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::celu_(Tensor(a!) self, Scalar alpha=1.0) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, at::Scalar), &AtenXlaType::celu_>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::sigmoid(Tensor self) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &), &AtenXlaType::sigmoid>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::sigmoid_(Tensor(a!) self) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &), &AtenXlaType::sigmoid_>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::sigmoid.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &), &AtenIpexTypeDefault::sigmoid_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::sin(Tensor self) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &), &AtenXlaType::sin>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::sin_(Tensor(a!) self) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &), &AtenXlaType::sin_>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::sin.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &), &AtenIpexTypeDefault::sin_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::sinh(Tensor self) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &), &AtenXlaType::sinh>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::sinh_(Tensor(a!) self) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &), &AtenXlaType::sinh_>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::sinh.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &), &AtenIpexTypeDefault::sinh_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::detach(Tensor self) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &), &AtenIpexTypeDefault::detach>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::detach_(Tensor(a!) self) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &), &AtenIpexTypeDefault::detach_>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::size.int(Tensor self, int dim) -> int")
      .impl_unboxedOnlyKernel<int64_t(const at::Tensor &, int64_t), &AtenXlaType::size>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::slice.Tensor(Tensor(a) self, int dim=0, int start=0, int end=9223372036854775807, int step=1) -> Tensor(a)")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, int64_t, int64_t, int64_t, int64_t), &AtenXlaType::slice>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::slogdet(Tensor self) -> (Tensor sign, Tensor logabsdet)")
      .impl_unboxedOnlyKernel<std::tuple<at::Tensor,at::Tensor>(const at::Tensor &), &AtenIpexTypeDefault::slogdet>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::smm(Tensor self, Tensor mat2) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &), &AtenIpexTypeDefault::smm>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::softmax(Tensor self, int dim, ScalarType? dtype=None) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, int64_t, c10::optional<at::ScalarType>), &AtenXlaType::softmax>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::_softmax(Tensor self, int dim, bool half_to_float) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, int64_t, bool), &AtenXlaType::_softmax>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::_softmax_backward_data(Tensor grad_output, Tensor output, int dim, Tensor self) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &, int64_t, const at::Tensor &), &AtenXlaType::_softmax_backward_data>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::_sparse_add.out(Tensor self, Tensor other, *, Scalar alpha=1, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, const at::Tensor &, at::Scalar), &AtenIpexTypeDefault::_sparse_add_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::_sparse_dense_add.out(Tensor self, Tensor other, *, Scalar alpha=1, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, const at::Tensor &, at::Scalar), &AtenIpexTypeDefault::_sparse_dense_add_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::_sparse_div_zerodim.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, const at::Tensor &), &AtenIpexTypeDefault::_sparse_div_zerodim_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::_sparse_div_scalar.out(Tensor self, Scalar other, *, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, at::Scalar), &AtenIpexTypeDefault::_sparse_div_scalar_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::_sparse_mul.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, const at::Tensor &), &AtenIpexTypeDefault::_sparse_mul_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::_sparse_mul_zerodim.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, const at::Tensor &), &AtenIpexTypeDefault::_sparse_mul_zerodim_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::_sparse_mul_scalar.out(Tensor self, Scalar other, *, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, at::Scalar), &AtenIpexTypeDefault::_sparse_mul_scalar_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::split.Tensor(Tensor(a) self, int split_size, int dim=0) -> Tensor(a)[]")
      .impl_unboxedOnlyKernel<std::vector<at::Tensor>(const at::Tensor &, int64_t, int64_t), &AtenXlaType::split>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::split_with_sizes(Tensor self, int[] split_sizes, int dim=0) -> Tensor[]")
      .impl_unboxedOnlyKernel<std::vector<at::Tensor>(const at::Tensor &, at::IntArrayRef, int64_t), &AtenXlaType::split_with_sizes>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::squeeze(Tensor(a) self) -> Tensor(a)")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &), &AtenXlaType::squeeze>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::squeeze.dim(Tensor(a) self, int dim) -> Tensor(a)")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, int64_t), &AtenXlaType::squeeze>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::squeeze_(Tensor(a!) self) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &), &AtenXlaType::squeeze_>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::squeeze_.dim(Tensor(a!) self, int dim) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, int64_t), &AtenXlaType::squeeze_>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::sspaddmm(Tensor self, Tensor mat1, Tensor mat2, *, Scalar beta=1, Scalar alpha=1) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &, const at::Tensor &, at::Scalar, at::Scalar), &AtenIpexTypeDefault::sspaddmm>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::sspaddmm.out(Tensor self, Tensor mat1, Tensor mat2, *, Scalar beta=1, Scalar alpha=1, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, const at::Tensor &, const at::Tensor &, at::Scalar, at::Scalar), &AtenIpexTypeDefault::sspaddmm_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::stack(Tensor[] tensors, int dim=0) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(at::TensorList, int64_t), &AtenXlaType::stack>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::stack.out(Tensor[] tensors, int dim=0, *, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, at::TensorList, int64_t), &AtenIpexTypeDefault::stack_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::stft(Tensor self, int n_fft, int? hop_length=None, int? win_length=None, Tensor? window=None, bool normalized=False, bool onesided=True) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, int64_t, c10::optional<int64_t>, c10::optional<int64_t>, const at::Tensor &, bool, bool), &AtenIpexTypeDefault::stft>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::stride.int(Tensor self, int dim) -> int")
      .impl_unboxedOnlyKernel<int64_t(const at::Tensor &, int64_t), &AtenIpexTypeDefault::stride>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::sum(Tensor self, *, ScalarType? dtype=None) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, c10::optional<at::ScalarType>), &AtenXlaType::sum>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::sum.dim_IntList(Tensor self, int[1] dim, bool keepdim=False, *, ScalarType? dtype=None) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, at::IntArrayRef, bool, c10::optional<at::ScalarType>), &AtenXlaType::sum>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::sum.IntList_out(Tensor self, int[1] dim, bool keepdim=False, *, ScalarType? dtype=None, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, at::IntArrayRef, bool, c10::optional<at::ScalarType>), &AtenIpexTypeDefault::sum_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::sum_to_size(Tensor self, int[] size) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, at::IntArrayRef), &AtenXlaType::sum_to_size>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::sqrt(Tensor self) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &), &AtenXlaType::sqrt>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::sqrt_(Tensor(a!) self) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &), &AtenXlaType::sqrt_>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::sqrt.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &), &AtenIpexTypeDefault::sqrt_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::std(Tensor self, bool unbiased=True) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, bool), &AtenXlaType::std>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::std.dim(Tensor self, int[1] dim, bool unbiased=True, bool keepdim=False) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, at::IntArrayRef, bool, bool), &AtenXlaType::std>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::std_mean(Tensor self, bool unbiased=True) -> (Tensor, Tensor)")
      .impl_unboxedOnlyKernel<std::tuple<at::Tensor,at::Tensor>(const at::Tensor &, bool), &AtenIpexTypeDefault::std_mean>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::std_mean.dim(Tensor self, int[1] dim, bool unbiased=True, bool keepdim=False) -> (Tensor, Tensor)")
      .impl_unboxedOnlyKernel<std::tuple<at::Tensor,at::Tensor>(const at::Tensor &, at::IntArrayRef, bool, bool), &AtenIpexTypeDefault::std_mean>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::std.out(Tensor self, int[1] dim, bool unbiased=True, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, at::IntArrayRef, bool, bool), &AtenIpexTypeDefault::std_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::prod(Tensor self, *, ScalarType? dtype=None) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, c10::optional<at::ScalarType>), &AtenXlaType::prod>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::prod.dim_int(Tensor self, int dim, bool keepdim=False, *, ScalarType? dtype=None) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, int64_t, bool, c10::optional<at::ScalarType>), &AtenXlaType::prod>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::prod.int_out(Tensor self, int dim, bool keepdim=False, *, ScalarType? dtype=None, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, int64_t, bool, c10::optional<at::ScalarType>), &AtenIpexTypeDefault::prod_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::t(Tensor(a) self) -> Tensor(a)")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &), &AtenXlaType::t>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::t_(Tensor(a!) self) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &), &AtenXlaType::t_>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::tan(Tensor self) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &), &AtenXlaType::tan>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::tan_(Tensor(a!) self) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &), &AtenXlaType::tan_>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::tan.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &), &AtenIpexTypeDefault::tan_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::tanh(Tensor self) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &), &AtenXlaType::tanh>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::tanh_(Tensor(a!) self) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &), &AtenXlaType::tanh_>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::tanh.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &), &AtenIpexTypeDefault::tanh_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::tensordot(Tensor self, Tensor other, int[] dims_self, int[] dims_other) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &, at::IntArrayRef, at::IntArrayRef), &AtenXlaType::tensordot>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::threshold(Tensor self, Scalar threshold, Scalar value) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, at::Scalar, at::Scalar), &AtenXlaType::threshold>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::threshold_(Tensor(a!) self, Scalar threshold, Scalar value) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, at::Scalar, at::Scalar), &AtenXlaType::threshold_>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::threshold.out(Tensor self, Scalar threshold, Scalar value, *, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, at::Scalar, at::Scalar), &AtenIpexTypeDefault::threshold_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::threshold_backward(Tensor grad_output, Tensor self, Scalar threshold) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &, at::Scalar), &AtenXlaType::threshold_backward>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::transpose(Tensor(a) self, int dim0, int dim1) -> Tensor(a)")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, int64_t, int64_t), &AtenXlaType::transpose>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::_mkldnn_transpose(Tensor self, int dim0, int dim1) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, int64_t, int64_t), &AtenIpexTypeDefault::_mkldnn_transpose>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::transpose_(Tensor(a!) self, int dim0, int dim1) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, int64_t, int64_t), &AtenXlaType::transpose_>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::_mkldnn_transpose_(Tensor(a!) self, int dim0, int dim1) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, int64_t, int64_t), &AtenIpexTypeDefault::_mkldnn_transpose_>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::one_hot(Tensor self, int num_classes=-1) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, int64_t), &AtenXlaType::one_hot>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::flip(Tensor self, int[] dims) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, at::IntArrayRef), &AtenXlaType::flip>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::roll(Tensor self, int[1] shifts, int[1] dims=[]) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, at::IntArrayRef, at::IntArrayRef), &AtenIpexTypeDefault::roll>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::rot90(Tensor self, int k=1, int[] dims=[0,1]) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, int64_t, at::IntArrayRef), &AtenIpexTypeDefault::rot90>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::trapz.x(Tensor y, Tensor x, *, int dim=-1) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &, int64_t), &AtenIpexTypeDefault::trapz>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::trapz.dx(Tensor y, *, float dx=1, int dim=-1) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, double, int64_t), &AtenIpexTypeDefault::trapz>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::_trilinear(Tensor i1, Tensor i2, Tensor i3, int[] expand1, int[] expand2, int[] expand3, int[] sumdim, int unroll_dim=1) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &, const at::Tensor &, at::IntArrayRef, at::IntArrayRef, at::IntArrayRef, at::IntArrayRef, int64_t), &AtenXlaType::_trilinear>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::triplet_margin_loss(Tensor anchor, Tensor positive, Tensor negative, float margin=1.0, float p=2, float eps=1e-06, bool swap=False, int reduction=Mean) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &, const at::Tensor &, double, double, double, bool, int64_t), &AtenXlaType::triplet_margin_loss>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::trunc(Tensor self) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &), &AtenXlaType::trunc>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::trunc_(Tensor(a!) self) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &), &AtenXlaType::trunc_>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::trunc.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &), &AtenIpexTypeDefault::trunc_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::type_as(Tensor self, Tensor other) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &), &AtenIpexTypeDefault::type_as>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::_has_compatible_shallow_copy_type(Tensor self, Tensor from) -> bool")
      .impl_unboxedOnlyKernel<bool(const at::Tensor &, const at::Tensor &), &AtenIpexTypeDefault::_has_compatible_shallow_copy_type>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::_unique(Tensor self, bool sorted=True, bool return_inverse=False) -> (Tensor, Tensor)")
      .impl_unboxedOnlyKernel<std::tuple<at::Tensor,at::Tensor>(const at::Tensor &, bool, bool), &AtenIpexTypeDefault::_unique>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::unique_dim(Tensor self, int dim, bool sorted=True, bool return_inverse=False, bool return_counts=False) -> (Tensor, Tensor, Tensor)")
      .impl_unboxedOnlyKernel<std::tuple<at::Tensor,at::Tensor,at::Tensor>(const at::Tensor &, int64_t, bool, bool, bool), &AtenIpexTypeDefault::unique_dim>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::unique_consecutive(Tensor self, bool return_inverse=False, bool return_counts=False, int? dim=None) -> (Tensor, Tensor, Tensor)")
      .impl_unboxedOnlyKernel<std::tuple<at::Tensor,at::Tensor,at::Tensor>(const at::Tensor &, bool, bool, c10::optional<int64_t>), &AtenIpexTypeDefault::unique_consecutive>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::unique_dim_consecutive(Tensor self, int dim, bool return_inverse=False, bool return_counts=False) -> (Tensor, Tensor, Tensor)")
      .impl_unboxedOnlyKernel<std::tuple<at::Tensor,at::Tensor,at::Tensor>(const at::Tensor &, int64_t, bool, bool), &AtenIpexTypeDefault::unique_dim_consecutive>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::_unique2(Tensor self, bool sorted=True, bool return_inverse=False, bool return_counts=False) -> (Tensor, Tensor, Tensor)")
      .impl_unboxedOnlyKernel<std::tuple<at::Tensor,at::Tensor,at::Tensor>(const at::Tensor &, bool, bool, bool), &AtenIpexTypeDefault::_unique2>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::_unsafe_view(Tensor self, int[] size) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, at::IntArrayRef), &AtenXlaType::_unsafe_view>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::unsqueeze(Tensor(a) self, int dim) -> Tensor(a)")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, int64_t), &AtenXlaType::unsqueeze>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::unsqueeze_(Tensor(a!) self, int dim) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, int64_t), &AtenXlaType::unsqueeze_>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::var(Tensor self, bool unbiased=True) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, bool), &AtenIpexTypeDefault::var>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::var.dim(Tensor self, int[1] dim, bool unbiased=True, bool keepdim=False) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, at::IntArrayRef, bool, bool), &AtenIpexTypeDefault::var>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::var.out(Tensor self, int[1] dim, bool unbiased=True, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, at::IntArrayRef, bool, bool), &AtenIpexTypeDefault::var_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::var_mean(Tensor self, bool unbiased=True) -> (Tensor, Tensor)")
      .impl_unboxedOnlyKernel<std::tuple<at::Tensor,at::Tensor>(const at::Tensor &, bool), &AtenIpexTypeDefault::var_mean>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::var_mean.dim(Tensor self, int[1] dim, bool unbiased=True, bool keepdim=False) -> (Tensor, Tensor)")
      .impl_unboxedOnlyKernel<std::tuple<at::Tensor,at::Tensor>(const at::Tensor &, at::IntArrayRef, bool, bool), &AtenIpexTypeDefault::var_mean>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::view_as(Tensor self, Tensor other) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &), &AtenXlaType::view_as>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::where.self(Tensor condition, Tensor self, Tensor other) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &, const at::Tensor &), &AtenXlaType::where>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::where(Tensor condition) -> Tensor[]")
      .impl_unboxedOnlyKernel<std::vector<at::Tensor>(const at::Tensor &), &AtenIpexTypeDefault::where>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::_s_where(Tensor condition, Tensor self, Tensor other) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &, const at::Tensor &), &AtenIpexTypeDefault::_s_where>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::norm_except_dim(Tensor v, int pow=2, int dim=0) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, int64_t, int64_t), &AtenIpexTypeDefault::norm_except_dim>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::_weight_norm(Tensor v, Tensor g, int dim=0) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &, int64_t), &AtenIpexTypeDefault::_weight_norm>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::_weight_norm_cuda_interface(Tensor v, Tensor g, int dim=0) -> (Tensor, Tensor)")
      .impl_unboxedOnlyKernel<std::tuple<at::Tensor,at::Tensor>(const at::Tensor &, const at::Tensor &, int64_t), &AtenIpexTypeDefault::_weight_norm_cuda_interface>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::_weight_norm_cuda_interface_backward(Tensor grad_w, Tensor saved_v, Tensor saved_g, Tensor saved_norms, int dim) -> (Tensor, Tensor)")
      .impl_unboxedOnlyKernel<std::tuple<at::Tensor,at::Tensor>(const at::Tensor &, const at::Tensor &, const at::Tensor &, const at::Tensor &, int64_t), &AtenIpexTypeDefault::_weight_norm_cuda_interface_backward>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::_weight_norm_differentiable_backward(Tensor grad_w, Tensor saved_v, Tensor saved_g, Tensor saved_norms, int dim) -> (Tensor, Tensor)")
      .impl_unboxedOnlyKernel<std::tuple<at::Tensor,at::Tensor>(const at::Tensor &, const at::Tensor &, const at::Tensor &, const at::Tensor &, int64_t), &AtenIpexTypeDefault::_weight_norm_differentiable_backward>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::zeros(int[] size, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(at::IntArrayRef, const at::TensorOptions &), &AtenXlaType::zeros>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::zeros.out(int[] size, *, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, at::IntArrayRef), &AtenIpexTypeDefault::zeros_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::zeros_like(Tensor self) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &), &AtenXlaType::zeros_like>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::zeros_like.dtype(Tensor self, *, ScalarType dtype, Layout layout, Device device, bool pin_memory=False) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::TensorOptions &), &AtenXlaType::zeros_like>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::_standard_gamma_grad(Tensor self, Tensor output) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &), &AtenIpexTypeDefault::_standard_gamma_grad>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::_standard_gamma(Tensor self, Generator? generator=None) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, at::Generator *), &AtenIpexTypeDefault::_standard_gamma>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::_dirichlet_grad(Tensor x, Tensor alpha, Tensor total) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &, const at::Tensor &), &AtenIpexTypeDefault::_dirichlet_grad>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::_sample_dirichlet(Tensor self, Generator? generator=None) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, at::Generator *), &AtenIpexTypeDefault::_sample_dirichlet>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::poisson(Tensor self, Generator? generator=None) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, at::Generator *), &AtenIpexTypeDefault::poisson>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::native_norm(Tensor self, Scalar p=2) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, at::Scalar), &AtenIpexTypeDefault::native_norm>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::_sparse_sum(Tensor self) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &), &AtenIpexTypeDefault::_sparse_sum>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::_sparse_sum.dtype(Tensor self, *, ScalarType dtype) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, at::ScalarType), &AtenIpexTypeDefault::_sparse_sum>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::_sparse_sum.dim(Tensor self, int[1] dim) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, at::IntArrayRef), &AtenIpexTypeDefault::_sparse_sum>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::_sparse_sum.dim_dtype(Tensor self, int[1] dim, *, ScalarType dtype) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, at::IntArrayRef, at::ScalarType), &AtenIpexTypeDefault::_sparse_sum>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::_sparse_sum_backward(Tensor grad, Tensor self, int[] dim) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &, at::IntArrayRef), &AtenIpexTypeDefault::_sparse_sum_backward>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::norm.ScalarOpt_dtype(Tensor self, Scalar? p, *, ScalarType dtype) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, c10::optional<at::Scalar>, at::ScalarType), &AtenXlaType::norm>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::norm.Scalar(Tensor self, Scalar p=2) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, at::Scalar), &AtenXlaType::norm>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::norm.ScalarOpt_dim_dtype(Tensor self, Scalar? p, int[1] dim, bool keepdim, *, ScalarType dtype) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, c10::optional<at::Scalar>, at::IntArrayRef, bool, at::ScalarType), &AtenXlaType::norm>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::norm.ScalarOpt_dim(Tensor self, Scalar? p, int[1] dim, bool keepdim=False) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, c10::optional<at::Scalar>, at::IntArrayRef, bool), &AtenXlaType::norm>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::norm.dtype_out(Tensor self, Scalar? p, int[1] dim, bool keepdim, *, ScalarType dtype, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, c10::optional<at::Scalar>, at::IntArrayRef, bool, at::ScalarType), &AtenIpexTypeDefault::norm_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::norm.out(Tensor self, Scalar? p, int[1] dim, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, c10::optional<at::Scalar>, at::IntArrayRef, bool), &AtenIpexTypeDefault::norm_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::frobenius_norm(Tensor self) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &), &AtenXlaType::frobenius_norm>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::frobenius_norm.dim(Tensor self, int[1] dim, bool keepdim=False) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, at::IntArrayRef, bool), &AtenXlaType::frobenius_norm>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::frobenius_norm.out(Tensor self, int[1] dim, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, at::IntArrayRef, bool), &AtenIpexTypeDefault::frobenius_norm_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::nuclear_norm(Tensor self, bool keepdim=False) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, bool), &AtenXlaType::nuclear_norm>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::nuclear_norm.out(Tensor self, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, bool), &AtenIpexTypeDefault::nuclear_norm_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::nuclear_norm.dim(Tensor self, int[2] dim, bool keepdim=False) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, at::IntArrayRef, bool), &AtenIpexTypeDefault::nuclear_norm>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::nuclear_norm.dim_out(Tensor self, int[2] dim, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, at::IntArrayRef, bool), &AtenIpexTypeDefault::nuclear_norm_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::clone(Tensor self) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &), &AtenIpexTypeDefault::clone>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::resize_as_(Tensor(a!) self, Tensor the_template) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &), &AtenIpexTypeDefault::resize_as_>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::pow.Tensor_Scalar_out(Tensor self, Scalar exponent, *, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, at::Scalar), &AtenIpexTypeDefault::pow_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::pow.Tensor_Scalar(Tensor self, Scalar exponent) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, at::Scalar), &AtenXlaType::pow>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::zero_(Tensor(a!) self) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &), &AtenXlaType::zero_>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::sub.out(Tensor self, Tensor other, *, Scalar alpha=1, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, const at::Tensor &, at::Scalar), &AtenIpexTypeDefault::sub_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::sub.Tensor(Tensor self, Tensor other, *, Scalar alpha=1) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &, at::Scalar), &AtenXlaType::sub>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::sub_.Tensor(Tensor(a!) self, Tensor other, *, Scalar alpha=1) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, at::Scalar), &AtenXlaType::sub_>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::sub.Scalar(Tensor self, Scalar other, Scalar alpha=1) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, at::Scalar, at::Scalar), &AtenXlaType::sub>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::sub_.Scalar(Tensor(a!) self, Scalar other, Scalar alpha=1) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, at::Scalar, at::Scalar), &AtenXlaType::sub_>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::rsub.Tensor(Tensor self, Tensor other, *, Scalar alpha=1) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &, at::Scalar), &AtenXlaType::rsub>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::rsub.Scalar(Tensor self, Scalar other, Scalar alpha=1) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, at::Scalar, at::Scalar), &AtenXlaType::rsub>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::s_native_addmm.out(Tensor self, Tensor mat1, Tensor mat2, *, Scalar beta=1, Scalar alpha=1, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, const at::Tensor &, const at::Tensor &, at::Scalar, at::Scalar), &AtenIpexTypeDefault::s_native_addmm_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::s_native_addmm(Tensor self, Tensor mat1, Tensor mat2, *, Scalar beta=1, Scalar alpha=1) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &, const at::Tensor &, at::Scalar, at::Scalar), &AtenIpexTypeDefault::s_native_addmm>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::s_native_addmm_(Tensor(a!) self, Tensor mat1, Tensor mat2, *, Scalar beta=1, Scalar alpha=1) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, const at::Tensor &, at::Scalar, at::Scalar), &AtenIpexTypeDefault::s_native_addmm_>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::_sparse_addmm(Tensor self, Tensor sparse, Tensor dense, *, Scalar beta=1, Scalar alpha=1) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &, const at::Tensor &, at::Scalar, at::Scalar), &AtenIpexTypeDefault::_sparse_addmm>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::addmm.out(Tensor self, Tensor mat1, Tensor mat2, *, Scalar beta=1, Scalar alpha=1, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, const at::Tensor &, const at::Tensor &, at::Scalar, at::Scalar), &AtenIpexTypeDefault::addmm_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::addmm(Tensor self, Tensor mat1, Tensor mat2, *, Scalar beta=1, Scalar alpha=1) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &, const at::Tensor &, at::Scalar, at::Scalar), &AtenXlaType::addmm>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::addmm_(Tensor(a!) self, Tensor mat1, Tensor mat2, *, Scalar beta=1, Scalar alpha=1) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, const at::Tensor &, at::Scalar, at::Scalar), &AtenIpexTypeDefault::addmm_>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::sparse_coo_tensor.size(int[] size, *, ScalarType dtype, Layout layout, Device device, bool pin_memory=False) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(at::IntArrayRef, const at::TensorOptions &), &AtenIpexTypeDefault::sparse_coo_tensor>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::sparse_coo_tensor.indices(Tensor indices, Tensor values, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &, const at::TensorOptions &), &AtenIpexTypeDefault::sparse_coo_tensor>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::sparse_coo_tensor.indices_size(Tensor indices, Tensor values, int[] size, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &, at::IntArrayRef, const at::TensorOptions &), &AtenIpexTypeDefault::sparse_coo_tensor>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::_sparse_coo_tensor_unsafe(Tensor indices, Tensor values, int[] size, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &, at::IntArrayRef, const at::TensorOptions &), &AtenIpexTypeDefault::_sparse_coo_tensor_unsafe>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::_sparse_coo_tensor_with_dims(int sparse_dim, int dense_dim, int[] size, *, ScalarType dtype, Layout layout, Device device, bool pin_memory=False) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(int64_t, int64_t, at::IntArrayRef, const at::TensorOptions &), &AtenIpexTypeDefault::_sparse_coo_tensor_with_dims>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::_sparse_coo_tensor_with_dims_and_tensors(int sparse_dim, int dense_dim, int[] size, Tensor indices, Tensor values, *, ScalarType dtype, Layout layout, Device device, bool pin_memory=False) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(int64_t, int64_t, at::IntArrayRef, const at::Tensor &, const at::Tensor &, const at::TensorOptions &), &AtenIpexTypeDefault::_sparse_coo_tensor_with_dims_and_tensors>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::sparse_resize_(Tensor(a!) self, int[] size, int sparse_dim, int dense_dim) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, at::IntArrayRef, int64_t, int64_t), &AtenIpexTypeDefault::sparse_resize_>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::sparse_resize_and_clear_(Tensor(a!) self, int[] size, int sparse_dim, int dense_dim) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, at::IntArrayRef, int64_t, int64_t), &AtenIpexTypeDefault::sparse_resize_and_clear_>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::sparse_mask(Tensor self, Tensor mask) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &), &AtenIpexTypeDefault::sparse_mask>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::to_dense(Tensor self) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &), &AtenIpexTypeDefault::to_dense>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::to_dense_backward(Tensor grad, Tensor input) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &), &AtenIpexTypeDefault::to_dense_backward>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::sparse_dim(Tensor self) -> int")
      .impl_unboxedOnlyKernel<int64_t(const at::Tensor &), &AtenIpexTypeDefault::sparse_dim>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::_dimI(Tensor self) -> int")
      .impl_unboxedOnlyKernel<int64_t(const at::Tensor &), &AtenIpexTypeDefault::_dimI>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::dense_dim(Tensor self) -> int")
      .impl_unboxedOnlyKernel<int64_t(const at::Tensor &), &AtenIpexTypeDefault::dense_dim>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::_dimV(Tensor self) -> int")
      .impl_unboxedOnlyKernel<int64_t(const at::Tensor &), &AtenIpexTypeDefault::_dimV>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::_nnz(Tensor self) -> int")
      .impl_unboxedOnlyKernel<int64_t(const at::Tensor &), &AtenIpexTypeDefault::_nnz>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::coalesce(Tensor self) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &), &AtenIpexTypeDefault::coalesce>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::is_coalesced(Tensor self) -> bool")
      .impl_unboxedOnlyKernel<bool(const at::Tensor &), &AtenIpexTypeDefault::is_coalesced>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::_indices(Tensor(a) self) -> Tensor(a)")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &), &AtenIpexTypeDefault::_indices>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::_values(Tensor(a) self) -> Tensor(a)")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &), &AtenIpexTypeDefault::_values>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::_coalesced_(Tensor(a!) self, bool coalesced) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, bool), &AtenIpexTypeDefault::_coalesced_>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::indices(Tensor(a) self) -> Tensor(a)")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &), &AtenIpexTypeDefault::indices>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::values(Tensor(a) self) -> Tensor(a)")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &), &AtenIpexTypeDefault::values>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::hspmm.out(Tensor mat1, Tensor mat2, *, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, const at::Tensor &), &AtenIpexTypeDefault::hspmm_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::hspmm(Tensor mat1, Tensor mat2) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &), &AtenIpexTypeDefault::hspmm>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::copy_sparse_to_sparse_(Tensor(a!) self, Tensor src, bool non_blocking=False) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, bool), &AtenIpexTypeDefault::copy_sparse_to_sparse_>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::unbind(Tensor(a) self, int dim=0) -> Tensor(a)[]")
      .impl_unboxedOnlyKernel<std::vector<at::Tensor>(const at::Tensor &, int64_t), &AtenXlaType::unbind>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::to_sparse.sparse_dim(Tensor self, int sparse_dim) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, int64_t), &AtenIpexTypeDefault::to_sparse>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::to_sparse(Tensor self) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &), &AtenIpexTypeDefault::to_sparse>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::to_mkldnn(Tensor self) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &), &AtenIpexTypeDefault::to_mkldnn>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::mkldnn_reorder_conv2d_weight(Tensor self, int[2] padding=0, int[2] stride=1, int[2] dilation=1, int groups=1) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, at::IntArrayRef, at::IntArrayRef, at::IntArrayRef, int64_t), &AtenIpexTypeDefault::mkldnn_reorder_conv2d_weight>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::to_mkldnn_backward(Tensor grad, Tensor input) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &), &AtenIpexTypeDefault::to_mkldnn_backward>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::quantize_linear(Tensor self, float scale, int zero_point, ScalarType dtype) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, double, int64_t, at::ScalarType), &AtenIpexTypeDefault::quantize_linear>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::quantize_linear_per_channel(Tensor self, Tensor scales, Tensor zero_points, int[] axis, ScalarType dtype) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &, const at::Tensor &, at::IntArrayRef, at::ScalarType), &AtenIpexTypeDefault::quantize_linear_per_channel>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::dequantize(Tensor self) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &), &AtenIpexTypeDefault::dequantize>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::_dequantize_linear(Tensor self, float scale, int zero_point, ScalarType dtype) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, double, int64_t, at::ScalarType), &AtenIpexTypeDefault::_dequantize_linear>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::q_scale(Tensor self) -> float")
      .impl_unboxedOnlyKernel<double(const at::Tensor &), &AtenIpexTypeDefault::q_scale>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::q_zero_point(Tensor self) -> int")
      .impl_unboxedOnlyKernel<int64_t(const at::Tensor &), &AtenIpexTypeDefault::q_zero_point>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::int_repr(Tensor self) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &), &AtenIpexTypeDefault::int_repr>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::_per_tensor_affine_qtensor(Tensor self, float scale, int zero_point) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, double, int64_t), &AtenIpexTypeDefault::_per_tensor_affine_qtensor>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::qscheme(Tensor self) -> QScheme")
      .impl_unboxedOnlyKernel<at::QScheme(const at::Tensor &), &AtenIpexTypeDefault::qscheme>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::fake_quantize_per_tensor_affine(Tensor self, float scale, int zero_point, int quant_min, int quant_max) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, double, int64_t, int64_t, int64_t), &AtenIpexTypeDefault::fake_quantize_per_tensor_affine>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::fake_quantize_per_tensor_affine_backward(Tensor grad, Tensor self, float scale, int zero_point, int quant_min, int quant_max) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &, double, int64_t, int64_t, int64_t), &AtenIpexTypeDefault::fake_quantize_per_tensor_affine_backward>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::to.dtype_layout(Tensor self, *, ScalarType dtype, Layout layout, Device device, bool pin_memory=False, bool non_blocking=False, bool copy=False) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::TensorOptions &, bool, bool), &AtenIpexTypeDefault::to>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::to.device(Tensor self, Device device, ScalarType dtype, bool non_blocking=False, bool copy=False) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, c10::Device, at::ScalarType, bool, bool), &AtenIpexTypeDefault::to>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::to.dtype(Tensor self, ScalarType dtype, bool non_blocking=False, bool copy=False) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, at::ScalarType, bool, bool), &AtenIpexTypeDefault::to>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::to.other(Tensor self, Tensor other, bool non_blocking=False, bool copy=False) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &, bool, bool), &AtenIpexTypeDefault::to>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::meshgrid(Tensor[] tensors) -> Tensor[]")
      .impl_unboxedOnlyKernel<std::vector<at::Tensor>(at::TensorList), &AtenXlaType::meshgrid>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::cartesian_prod(Tensor[] tensors) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(at::TensorList), &AtenIpexTypeDefault::cartesian_prod>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::combinations(Tensor self, int r=2, bool with_replacement=False) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, int64_t, bool), &AtenIpexTypeDefault::combinations>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::item(Tensor self) -> Scalar")
      .impl_unboxedOnlyKernel<at::Scalar(const at::Tensor &), &AtenIpexTypeDefault::item>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::_local_scalar_dense(Tensor self) -> Scalar")
      .impl_unboxedOnlyKernel<at::Scalar(const at::Tensor &), &AtenIpexTypeDefault::_local_scalar_dense>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::_thnn_fused_lstm_cell(Tensor input_gates, Tensor hidden_gates, Tensor cx, Tensor? input_bias=None, Tensor? hidden_bias=None) -> (Tensor, Tensor, Tensor)")
      .impl_unboxedOnlyKernel<std::tuple<at::Tensor,at::Tensor,at::Tensor>(const at::Tensor &, const at::Tensor &, const at::Tensor &, const at::Tensor &, const at::Tensor &), &AtenIpexTypeDefault::_thnn_fused_lstm_cell>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::_thnn_fused_lstm_cell_backward(Tensor? grad_hy, Tensor? grad_cy, Tensor cx, Tensor cy, Tensor workspace, bool has_bias) -> (Tensor, Tensor, Tensor, Tensor, Tensor)")
      .impl_unboxedOnlyKernel<std::tuple<at::Tensor,at::Tensor,at::Tensor,at::Tensor,at::Tensor>(const at::Tensor &, const at::Tensor &, const at::Tensor &, const at::Tensor &, const at::Tensor &, bool), &AtenIpexTypeDefault::_thnn_fused_lstm_cell_backward>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::_thnn_fused_gru_cell(Tensor input_gates, Tensor hidden_gates, Tensor hx, Tensor? input_bias=None, Tensor? hidden_bias=None) -> (Tensor, Tensor)")
      .impl_unboxedOnlyKernel<std::tuple<at::Tensor,at::Tensor>(const at::Tensor &, const at::Tensor &, const at::Tensor &, const at::Tensor &, const at::Tensor &), &AtenIpexTypeDefault::_thnn_fused_gru_cell>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::_thnn_fused_gru_cell_backward(Tensor grad_hy, Tensor workspace, bool has_bias) -> (Tensor, Tensor, Tensor, Tensor, Tensor)")
      .impl_unboxedOnlyKernel<std::tuple<at::Tensor,at::Tensor,at::Tensor,at::Tensor,at::Tensor>(const at::Tensor &, const at::Tensor &, bool), &AtenIpexTypeDefault::_thnn_fused_gru_cell_backward>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::lstm.input(Tensor input, Tensor[] hx, Tensor[] params, bool has_biases, int num_layers, float dropout, bool train, bool bidirectional, bool batch_first) -> (Tensor, Tensor, Tensor)")
      .impl_unboxedOnlyKernel<std::tuple<at::Tensor,at::Tensor,at::Tensor>(const at::Tensor &, at::TensorList, at::TensorList, bool, int64_t, double, bool, bool, bool), &AtenIpexTypeDefault::lstm>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::lstm.data(Tensor data, Tensor batch_sizes, Tensor[] hx, Tensor[] params, bool has_biases, int num_layers, float dropout, bool train, bool bidirectional) -> (Tensor, Tensor, Tensor)")
      .impl_unboxedOnlyKernel<std::tuple<at::Tensor,at::Tensor,at::Tensor>(const at::Tensor &, const at::Tensor &, at::TensorList, at::TensorList, bool, int64_t, double, bool, bool), &AtenIpexTypeDefault::lstm>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::gru.input(Tensor input, Tensor hx, Tensor[] params, bool has_biases, int num_layers, float dropout, bool train, bool bidirectional, bool batch_first) -> (Tensor, Tensor)")
      .impl_unboxedOnlyKernel<std::tuple<at::Tensor,at::Tensor>(const at::Tensor &, const at::Tensor &, at::TensorList, bool, int64_t, double, bool, bool, bool), &AtenIpexTypeDefault::gru>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::gru.data(Tensor data, Tensor batch_sizes, Tensor hx, Tensor[] params, bool has_biases, int num_layers, float dropout, bool train, bool bidirectional) -> (Tensor, Tensor)")
      .impl_unboxedOnlyKernel<std::tuple<at::Tensor,at::Tensor>(const at::Tensor &, const at::Tensor &, const at::Tensor &, at::TensorList, bool, int64_t, double, bool, bool), &AtenIpexTypeDefault::gru>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::rnn_tanh.input(Tensor input, Tensor hx, Tensor[] params, bool has_biases, int num_layers, float dropout, bool train, bool bidirectional, bool batch_first) -> (Tensor, Tensor)")
      .impl_unboxedOnlyKernel<std::tuple<at::Tensor,at::Tensor>(const at::Tensor &, const at::Tensor &, at::TensorList, bool, int64_t, double, bool, bool, bool), &AtenIpexTypeDefault::rnn_tanh>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::rnn_tanh.data(Tensor data, Tensor batch_sizes, Tensor hx, Tensor[] params, bool has_biases, int num_layers, float dropout, bool train, bool bidirectional) -> (Tensor, Tensor)")
      .impl_unboxedOnlyKernel<std::tuple<at::Tensor,at::Tensor>(const at::Tensor &, const at::Tensor &, const at::Tensor &, at::TensorList, bool, int64_t, double, bool, bool), &AtenIpexTypeDefault::rnn_tanh>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::rnn_relu.input(Tensor input, Tensor hx, Tensor[] params, bool has_biases, int num_layers, float dropout, bool train, bool bidirectional, bool batch_first) -> (Tensor, Tensor)")
      .impl_unboxedOnlyKernel<std::tuple<at::Tensor,at::Tensor>(const at::Tensor &, const at::Tensor &, at::TensorList, bool, int64_t, double, bool, bool, bool), &AtenIpexTypeDefault::rnn_relu>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::rnn_relu.data(Tensor data, Tensor batch_sizes, Tensor hx, Tensor[] params, bool has_biases, int num_layers, float dropout, bool train, bool bidirectional) -> (Tensor, Tensor)")
      .impl_unboxedOnlyKernel<std::tuple<at::Tensor,at::Tensor>(const at::Tensor &, const at::Tensor &, const at::Tensor &, at::TensorList, bool, int64_t, double, bool, bool), &AtenIpexTypeDefault::rnn_relu>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::lstm_cell(Tensor input, Tensor[] hx, Tensor w_ih, Tensor w_hh, Tensor? b_ih=None, Tensor? b_hh=None) -> (Tensor, Tensor)")
      .impl_unboxedOnlyKernel<std::tuple<at::Tensor,at::Tensor>(const at::Tensor &, at::TensorList, const at::Tensor &, const at::Tensor &, const at::Tensor &, const at::Tensor &), &AtenIpexTypeDefault::lstm_cell>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::gru_cell(Tensor input, Tensor hx, Tensor w_ih, Tensor w_hh, Tensor? b_ih=None, Tensor? b_hh=None) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &, const at::Tensor &, const at::Tensor &, const at::Tensor &, const at::Tensor &), &AtenIpexTypeDefault::gru_cell>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::rnn_tanh_cell(Tensor input, Tensor hx, Tensor w_ih, Tensor w_hh, Tensor? b_ih=None, Tensor? b_hh=None) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &, const at::Tensor &, const at::Tensor &, const at::Tensor &, const at::Tensor &), &AtenIpexTypeDefault::rnn_tanh_cell>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::rnn_relu_cell(Tensor input, Tensor hx, Tensor w_ih, Tensor w_hh, Tensor? b_ih=None, Tensor? b_hh=None) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &, const at::Tensor &, const at::Tensor &, const at::Tensor &, const at::Tensor &), &AtenIpexTypeDefault::rnn_relu_cell>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::quantized_lstm(Tensor input, Tensor[] hx, Tensor[] params, bool has_biases, int num_layers, float dropout, bool train, bool bidirectional, bool batch_first, *, ScalarType? dtype=None) -> (Tensor, Tensor, Tensor)")
      .impl_unboxedOnlyKernel<std::tuple<at::Tensor,at::Tensor,at::Tensor>(const at::Tensor &, at::TensorList, at::TensorList, bool, int64_t, double, bool, bool, bool, c10::optional<at::ScalarType>), &AtenIpexTypeDefault::quantized_lstm>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::quantized_gru.input(Tensor input, Tensor hx, Tensor[] params, bool has_biases, int num_layers, float dropout, bool train, bool bidirectional, bool batch_first) -> (Tensor, Tensor)")
      .impl_unboxedOnlyKernel<std::tuple<at::Tensor,at::Tensor>(const at::Tensor &, const at::Tensor &, at::TensorList, bool, int64_t, double, bool, bool, bool), &AtenIpexTypeDefault::quantized_gru>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::quantized_gru.data(Tensor data, Tensor batch_sizes, Tensor hx, Tensor[] params, bool has_biases, int num_layers, float dropout, bool train, bool bidirectional) -> (Tensor, Tensor)")
      .impl_unboxedOnlyKernel<std::tuple<at::Tensor,at::Tensor>(const at::Tensor &, const at::Tensor &, const at::Tensor &, at::TensorList, bool, int64_t, double, bool, bool), &AtenIpexTypeDefault::quantized_gru>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::quantized_lstm_cell(Tensor input, Tensor[] hx, Tensor w_ih, Tensor w_hh, Tensor b_ih, Tensor b_hh, Tensor packed_ih, Tensor packed_hh, Tensor col_offsets_ih, Tensor col_offsets_hh, Scalar scale_ih, Scalar scale_hh, Scalar zero_point_ih, Scalar zero_point_hh) -> (Tensor, Tensor)")
      .impl_unboxedOnlyKernel<std::tuple<at::Tensor,at::Tensor>(const at::Tensor &, at::TensorList, const at::Tensor &, const at::Tensor &, const at::Tensor &, const at::Tensor &, const at::Tensor &, const at::Tensor &, const at::Tensor &, const at::Tensor &, at::Scalar, at::Scalar, at::Scalar, at::Scalar), &AtenIpexTypeDefault::quantized_lstm_cell>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::quantized_gru_cell(Tensor input, Tensor hx, Tensor w_ih, Tensor w_hh, Tensor b_ih, Tensor b_hh, Tensor packed_ih, Tensor packed_hh, Tensor col_offsets_ih, Tensor col_offsets_hh, Scalar scale_ih, Scalar scale_hh, Scalar zero_point_ih, Scalar zero_point_hh) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &, const at::Tensor &, const at::Tensor &, const at::Tensor &, const at::Tensor &, const at::Tensor &, const at::Tensor &, const at::Tensor &, const at::Tensor &, at::Scalar, at::Scalar, at::Scalar, at::Scalar), &AtenIpexTypeDefault::quantized_gru_cell>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::quantized_rnn_relu_cell(Tensor input, Tensor hx, Tensor w_ih, Tensor w_hh, Tensor b_ih, Tensor b_hh, Tensor packed_ih, Tensor packed_hh, Tensor col_offsets_ih, Tensor col_offsets_hh, Scalar scale_ih, Scalar scale_hh, Scalar zero_point_ih, Scalar zero_point_hh) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &, const at::Tensor &, const at::Tensor &, const at::Tensor &, const at::Tensor &, const at::Tensor &, const at::Tensor &, const at::Tensor &, const at::Tensor &, at::Scalar, at::Scalar, at::Scalar, at::Scalar), &AtenIpexTypeDefault::quantized_rnn_relu_cell>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::quantized_rnn_tanh_cell(Tensor input, Tensor hx, Tensor w_ih, Tensor w_hh, Tensor b_ih, Tensor b_hh, Tensor packed_ih, Tensor packed_hh, Tensor col_offsets_ih, Tensor col_offsets_hh, Scalar scale_ih, Scalar scale_hh, Scalar zero_point_ih, Scalar zero_point_hh) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &, const at::Tensor &, const at::Tensor &, const at::Tensor &, const at::Tensor &, const at::Tensor &, const at::Tensor &, const at::Tensor &, const at::Tensor &, at::Scalar, at::Scalar, at::Scalar, at::Scalar), &AtenIpexTypeDefault::quantized_rnn_tanh_cell>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::_pack_padded_sequence(Tensor input, Tensor lengths, bool batch_first) -> (Tensor, Tensor)")
      .impl_unboxedOnlyKernel<std::tuple<at::Tensor,at::Tensor>(const at::Tensor &, const at::Tensor &, bool), &AtenIpexTypeDefault::_pack_padded_sequence>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::_pack_padded_sequence_backward(Tensor grad, int[] input_size, Tensor batch_sizes, bool batch_first) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, at::IntArrayRef, const at::Tensor &, bool), &AtenIpexTypeDefault::_pack_padded_sequence_backward>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::_pad_packed_sequence(Tensor data, Tensor batch_sizes, bool batch_first, Scalar padding_value, int total_length) -> (Tensor, Tensor)")
      .impl_unboxedOnlyKernel<std::tuple<at::Tensor,at::Tensor>(const at::Tensor &, const at::Tensor &, bool, at::Scalar, int64_t), &AtenIpexTypeDefault::_pad_packed_sequence>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::set_.source_Storage(Tensor(a!) self, Storage source) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, at::Storage), &AtenIpexTypeDefault::set_>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::set_.source_Storage_storage_offset(Tensor(a!) self, Storage source, int storage_offset, int[] size, int[] stride=[]) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, at::Storage, int64_t, at::IntArrayRef, at::IntArrayRef), &AtenIpexTypeDefault::set_>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::set_.source_Tensor(Tensor(a!) self, Tensor source) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &), &AtenIpexTypeDefault::set_>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::set_(Tensor(a!) self) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &), &AtenIpexTypeDefault::set_>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::set_quantizer_(Tensor(a!) self, ConstQuantizerPtr quantizer) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, at::ConstQuantizerPtr), &AtenIpexTypeDefault::set_quantizer_>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::is_set_to(Tensor self, Tensor tensor) -> bool")
      .impl_unboxedOnlyKernel<bool(const at::Tensor &, const at::Tensor &), &AtenIpexTypeDefault::is_set_to>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::masked_fill_.Scalar(Tensor(a!) self, Tensor mask, Scalar value) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, at::Scalar), &AtenXlaType::masked_fill_>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::masked_fill.Scalar(Tensor self, Tensor mask, Scalar value) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &, at::Scalar), &AtenXlaType::masked_fill>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::masked_fill_.Tensor(Tensor(a!) self, Tensor mask, Tensor value) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, const at::Tensor &), &AtenXlaType::masked_fill_>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::masked_fill.Tensor(Tensor self, Tensor mask, Tensor value) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &, const at::Tensor &), &AtenXlaType::masked_fill>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::masked_scatter_(Tensor(a!) self, Tensor mask, Tensor source) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, const at::Tensor &), &AtenIpexTypeDefault::masked_scatter_>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::masked_scatter(Tensor self, Tensor mask, Tensor source) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &, const at::Tensor &), &AtenIpexTypeDefault::masked_scatter>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::view(Tensor(a) self, int[] size) -> Tensor(a)")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, at::IntArrayRef), &AtenXlaType::view>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::put_(Tensor(a!) self, Tensor index, Tensor source, bool accumulate=False) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, const at::Tensor &, bool), &AtenIpexTypeDefault::put_>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::index_add_(Tensor(a!) self, int dim, Tensor index, Tensor source) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, int64_t, const at::Tensor &, const at::Tensor &), &AtenXlaType::index_add_>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::index_add(Tensor self, int dim, Tensor index, Tensor source) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, int64_t, const at::Tensor &, const at::Tensor &), &AtenXlaType::index_add>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::index_fill_.Scalar(Tensor(a!) self, int dim, Tensor index, Scalar value) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, int64_t, const at::Tensor &, at::Scalar), &AtenXlaType::index_fill_>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::index_fill.Scalar(Tensor self, int dim, Tensor index, Scalar value) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, int64_t, const at::Tensor &, at::Scalar), &AtenXlaType::index_fill>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::index_fill_.Tensor(Tensor(a!) self, int dim, Tensor index, Tensor value) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, int64_t, const at::Tensor &, const at::Tensor &), &AtenXlaType::index_fill_>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::index_fill.Tensor(Tensor self, int dim, Tensor index, Tensor value) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, int64_t, const at::Tensor &, const at::Tensor &), &AtenXlaType::index_fill>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::scatter_.src(Tensor(a!) self, int dim, Tensor index, Tensor src) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, int64_t, const at::Tensor &, const at::Tensor &), &AtenXlaType::scatter_>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::scatter.src(Tensor self, int dim, Tensor index, Tensor src) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, int64_t, const at::Tensor &, const at::Tensor &), &AtenXlaType::scatter>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::scatter_.value(Tensor(a!) self, int dim, Tensor index, Scalar value) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, int64_t, const at::Tensor &, at::Scalar), &AtenXlaType::scatter_>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::scatter.value(Tensor self, int dim, Tensor index, Scalar value) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, int64_t, const at::Tensor &, at::Scalar), &AtenXlaType::scatter>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::scatter_add_(Tensor(a!) self, int dim, Tensor index, Tensor src) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, int64_t, const at::Tensor &, const at::Tensor &), &AtenXlaType::scatter_add_>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::scatter_add(Tensor self, int dim, Tensor index, Tensor src) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, int64_t, const at::Tensor &, const at::Tensor &), &AtenXlaType::scatter_add>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::lt_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, at::Scalar), &AtenXlaType::lt_>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::lt_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &), &AtenXlaType::lt_>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::gt_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, at::Scalar), &AtenXlaType::gt_>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::gt_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &), &AtenXlaType::gt_>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::le_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, at::Scalar), &AtenXlaType::le_>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::le_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &), &AtenXlaType::le_>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::ge_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, at::Scalar), &AtenXlaType::ge_>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::ge_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &), &AtenXlaType::ge_>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::eq_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, at::Scalar), &AtenXlaType::eq_>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::eq_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &), &AtenXlaType::eq_>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::ne_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, at::Scalar), &AtenXlaType::ne_>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::ne_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &), &AtenXlaType::ne_>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::__and__.Scalar(Tensor self, Scalar other) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, at::Scalar), &AtenXlaType::__and__>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::__and__.Tensor(Tensor self, Tensor other) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &), &AtenXlaType::__and__>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::__iand__.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, at::Scalar), &AtenXlaType::__iand__>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::__iand__.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &), &AtenXlaType::__iand__>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::__or__.Scalar(Tensor self, Scalar other) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, at::Scalar), &AtenXlaType::__or__>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::__or__.Tensor(Tensor self, Tensor other) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &), &AtenXlaType::__or__>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::__ior__.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, at::Scalar), &AtenXlaType::__ior__>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::__ior__.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &), &AtenXlaType::__ior__>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::__xor__.Scalar(Tensor self, Scalar other) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, at::Scalar), &AtenXlaType::__xor__>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::__xor__.Tensor(Tensor self, Tensor other) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &), &AtenXlaType::__xor__>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::__ixor__.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, at::Scalar), &AtenXlaType::__ixor__>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::__ixor__.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &), &AtenXlaType::__ixor__>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::__lshift__.Scalar(Tensor self, Scalar other) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, at::Scalar), &AtenXlaType::__lshift__>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::__lshift__.Tensor(Tensor self, Tensor other) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &), &AtenXlaType::__lshift__>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::__ilshift__.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, at::Scalar), &AtenXlaType::__ilshift__>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::__ilshift__.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &), &AtenXlaType::__ilshift__>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::__rshift__.Scalar(Tensor self, Scalar other) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, at::Scalar), &AtenXlaType::__rshift__>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::__rshift__.Tensor(Tensor self, Tensor other) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &), &AtenXlaType::__rshift__>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::__irshift__.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, at::Scalar), &AtenXlaType::__irshift__>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::__irshift__.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &), &AtenXlaType::__irshift__>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::lgamma_(Tensor(a!) self) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &), &AtenIpexTypeDefault::lgamma_>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::atan2_(Tensor(a!) self, Tensor other) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &), &AtenXlaType::atan2_>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::tril_(Tensor(a!) self, int diagonal=0) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, int64_t), &AtenXlaType::tril_>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::triu_(Tensor(a!) self, int diagonal=0) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, int64_t), &AtenXlaType::triu_>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::digamma_(Tensor(a!) self) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &), &AtenIpexTypeDefault::digamma_>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::polygamma_(Tensor(a!) self, int n) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, int64_t), &AtenIpexTypeDefault::polygamma_>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::erfinv_(Tensor(a!) self) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &), &AtenXlaType::erfinv_>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::renorm_(Tensor(a!) self, Scalar p, int dim, Scalar maxnorm) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, at::Scalar, int64_t, at::Scalar), &AtenIpexTypeDefault::renorm_>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::pow_.Scalar(Tensor(a!) self, Scalar exponent) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, at::Scalar), &AtenXlaType::pow_>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::pow_.Tensor(Tensor(a!) self, Tensor exponent) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &), &AtenXlaType::pow_>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::lerp_.Scalar(Tensor(a!) self, Tensor end, Scalar weight) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, at::Scalar), &AtenIpexTypeDefault::lerp_>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::lerp_.Tensor(Tensor(a!) self, Tensor end, Tensor weight) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, const at::Tensor &), &AtenIpexTypeDefault::lerp_>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::sign_(Tensor(a!) self) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &), &AtenXlaType::sign_>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::fmod_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, at::Scalar), &AtenXlaType::fmod_>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::fmod_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &), &AtenXlaType::fmod_>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::remainder_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, at::Scalar), &AtenXlaType::remainder_>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::remainder_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &), &AtenXlaType::remainder_>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::addbmm_(Tensor(a!) self, Tensor batch1, Tensor batch2, *, Scalar beta=1, Scalar alpha=1) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, const at::Tensor &, at::Scalar, at::Scalar), &AtenIpexTypeDefault::addbmm_>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::addbmm.out(Tensor self, Tensor batch1, Tensor batch2, *, Scalar beta=1, Scalar alpha=1, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, const at::Tensor &, const at::Tensor &, at::Scalar, at::Scalar), &AtenIpexTypeDefault::addbmm_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::addbmm(Tensor self, Tensor batch1, Tensor batch2, *, Scalar beta=1, Scalar alpha=1) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &, const at::Tensor &, at::Scalar, at::Scalar), &AtenIpexTypeDefault::addbmm>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::addcdiv_(Tensor(a!) self, Tensor tensor1, Tensor tensor2, *, Scalar value=1) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, const at::Tensor &, at::Scalar), &AtenXlaType::addcdiv_>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::random_.from(Tensor(a!) self, int from, int to, *, Generator? generator=None) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, int64_t, int64_t, at::Generator *), &AtenIpexTypeDefault::random_>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::random_.to(Tensor(a!) self, int to, *, Generator? generator=None) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, int64_t, at::Generator *), &AtenIpexTypeDefault::random_>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::random_(Tensor(a!) self, *, Generator? generator=None) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, at::Generator *), &AtenIpexTypeDefault::random_>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::uniform_(Tensor(a!) self, float from=0, float to=1, *, Generator? generator=None) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, double, double, at::Generator *), &AtenIpexTypeDefault::uniform_>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::normal_(Tensor(a!) self, float mean=0, float std=1, *, Generator? generator=None) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, double, double, at::Generator *), &AtenIpexTypeDefault::normal_>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::cauchy_(Tensor(a!) self, float median=0, float sigma=1, *, Generator? generator=None) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, double, double, at::Generator *), &AtenIpexTypeDefault::cauchy_>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::log_normal_(Tensor(a!) self, float mean=1, float std=2, *, Generator? generator=None) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, double, double, at::Generator *), &AtenIpexTypeDefault::log_normal_>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::exponential_(Tensor(a!) self, float lambd=1, *, Generator? generator=None) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, double, at::Generator *), &AtenIpexTypeDefault::exponential_>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::geometric_(Tensor(a!) self, float p, *, Generator? generator=None) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, double, at::Generator *), &AtenIpexTypeDefault::geometric_>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::diag.out(Tensor self, int diagonal=0, *, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, int64_t), &AtenIpexTypeDefault::diag_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::diag(Tensor self, int diagonal=0) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, int64_t), &AtenXlaType::diag>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::cross.out(Tensor self, Tensor other, int? dim=None, *, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, const at::Tensor &, c10::optional<int64_t>), &AtenIpexTypeDefault::cross_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::cross(Tensor self, Tensor other, int? dim=None) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &, c10::optional<int64_t>), &AtenXlaType::cross>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::triu.out(Tensor self, int diagonal=0, *, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, int64_t), &AtenIpexTypeDefault::triu_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::triu(Tensor self, int diagonal=0) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, int64_t), &AtenXlaType::triu>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::tril.out(Tensor self, int diagonal=0, *, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, int64_t), &AtenIpexTypeDefault::tril_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::tril(Tensor self, int diagonal=0) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, int64_t), &AtenXlaType::tril>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::tril_indices(int row, int col, int offset=0, *, ScalarType? dtype=long, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(int64_t, int64_t, int64_t, const at::TensorOptions &), &AtenIpexTypeDefault::tril_indices>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::triu_indices(int row, int col, int offset=0, *, ScalarType? dtype=long, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(int64_t, int64_t, int64_t, const at::TensorOptions &), &AtenIpexTypeDefault::triu_indices>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::trace(Tensor self) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &), &AtenXlaType::trace>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::ne.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, at::Scalar), &AtenIpexTypeDefault::ne_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::ne.Scalar(Tensor self, Scalar other) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, at::Scalar), &AtenXlaType::ne>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::ne.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, const at::Tensor &), &AtenIpexTypeDefault::ne_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::ne.Tensor(Tensor self, Tensor other) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &), &AtenXlaType::ne>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::eq.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, at::Scalar), &AtenIpexTypeDefault::eq_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::eq.Scalar(Tensor self, Scalar other) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, at::Scalar), &AtenXlaType::eq>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::eq.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, const at::Tensor &), &AtenIpexTypeDefault::eq_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::eq.Tensor(Tensor self, Tensor other) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &), &AtenXlaType::eq>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::ge.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, at::Scalar), &AtenIpexTypeDefault::ge_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::ge.Scalar(Tensor self, Scalar other) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, at::Scalar), &AtenXlaType::ge>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::ge.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, const at::Tensor &), &AtenIpexTypeDefault::ge_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::ge.Tensor(Tensor self, Tensor other) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &), &AtenXlaType::ge>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::le.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, at::Scalar), &AtenIpexTypeDefault::le_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::le.Scalar(Tensor self, Scalar other) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, at::Scalar), &AtenXlaType::le>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::le.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, const at::Tensor &), &AtenIpexTypeDefault::le_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::le.Tensor(Tensor self, Tensor other) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &), &AtenXlaType::le>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::gt.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, at::Scalar), &AtenIpexTypeDefault::gt_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::gt.Scalar(Tensor self, Scalar other) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, at::Scalar), &AtenXlaType::gt>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::gt.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, const at::Tensor &), &AtenIpexTypeDefault::gt_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::gt.Tensor(Tensor self, Tensor other) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &), &AtenXlaType::gt>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::lt.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, at::Scalar), &AtenIpexTypeDefault::lt_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::lt.Scalar(Tensor self, Scalar other) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, at::Scalar), &AtenXlaType::lt>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::lt.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, const at::Tensor &), &AtenIpexTypeDefault::lt_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::lt.Tensor(Tensor self, Tensor other) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &), &AtenXlaType::lt>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::take.out(Tensor self, Tensor index, *, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, const at::Tensor &), &AtenIpexTypeDefault::take_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::take(Tensor self, Tensor index) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &), &AtenIpexTypeDefault::take>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::index_select.out(Tensor self, int dim, Tensor index, *, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, int64_t, const at::Tensor &), &AtenIpexTypeDefault::index_select_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::index_select(Tensor self, int dim, Tensor index) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, int64_t, const at::Tensor &), &AtenXlaType::index_select>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::masked_select.out(Tensor self, Tensor mask, *, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, const at::Tensor &), &AtenIpexTypeDefault::masked_select_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::masked_select(Tensor self, Tensor mask) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &), &AtenIpexTypeDefault::masked_select>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::nonzero.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &), &AtenIpexTypeDefault::nonzero_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::nonzero(Tensor self) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &), &AtenIpexTypeDefault::nonzero>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::nonzero_numpy(Tensor self) -> Tensor[]")
      .impl_unboxedOnlyKernel<std::vector<at::Tensor>(const at::Tensor &), &AtenIpexTypeDefault::nonzero_numpy>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::gather.out(Tensor self, int dim, Tensor index, *, bool sparse_grad=False, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, int64_t, const at::Tensor &, bool), &AtenIpexTypeDefault::gather_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::gather(Tensor self, int dim, Tensor index, *, bool sparse_grad=False) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, int64_t, const at::Tensor &, bool), &AtenXlaType::gather>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::_gather_sparse_backward(Tensor self, int dim, Tensor index, Tensor grad) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, int64_t, const at::Tensor &, const at::Tensor &), &AtenIpexTypeDefault::_gather_sparse_backward>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::addcmul.out(Tensor self, Tensor tensor1, Tensor tensor2, *, Scalar value=1, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, const at::Tensor &, const at::Tensor &, at::Scalar), &AtenIpexTypeDefault::addcmul_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::addcmul(Tensor self, Tensor tensor1, Tensor tensor2, *, Scalar value=1) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &, const at::Tensor &, at::Scalar), &AtenXlaType::addcmul>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::addcmul_(Tensor(a!) self, Tensor tensor1, Tensor tensor2, *, Scalar value=1) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, const at::Tensor &, at::Scalar), &AtenXlaType::addcmul_>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::addcdiv.out(Tensor self, Tensor tensor1, Tensor tensor2, *, Scalar value=1, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, const at::Tensor &, const at::Tensor &, at::Scalar), &AtenIpexTypeDefault::addcdiv_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::addcdiv(Tensor self, Tensor tensor1, Tensor tensor2, *, Scalar value=1) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &, const at::Tensor &, at::Scalar), &AtenXlaType::addcdiv>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::lstsq.X(Tensor self, Tensor A, *, Tensor(a!) X, Tensor(b!) qr) -> (Tensor(a!) solution, Tensor(b!) QR)")
      .impl_unboxedOnlyKernel<std::tuple<at::Tensor &,at::Tensor &>(at::Tensor &, at::Tensor &, const at::Tensor &, const at::Tensor &), &AtenIpexTypeDefault::lstsq_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::lstsq(Tensor self, Tensor A) -> (Tensor solution, Tensor QR)")
      .impl_unboxedOnlyKernel<std::tuple<at::Tensor,at::Tensor>(const at::Tensor &, const at::Tensor &), &AtenIpexTypeDefault::lstsq>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::triangular_solve.X(Tensor self, Tensor A, bool upper=True, bool transpose=False, bool unitriangular=False, *, Tensor(a!) X, Tensor(b!) M) -> (Tensor(a!) solution, Tensor(b!) cloned_coefficient)")
      .impl_unboxedOnlyKernel<std::tuple<at::Tensor &,at::Tensor &>(at::Tensor &, at::Tensor &, const at::Tensor &, const at::Tensor &, bool, bool, bool), &AtenIpexTypeDefault::triangular_solve_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::triangular_solve(Tensor self, Tensor A, bool upper=True, bool transpose=False, bool unitriangular=False) -> (Tensor solution, Tensor cloned_coefficient)")
      .impl_unboxedOnlyKernel<std::tuple<at::Tensor,at::Tensor>(const at::Tensor &, const at::Tensor &, bool, bool, bool), &AtenXlaType::triangular_solve>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::_triangular_solve_helper(Tensor self, Tensor A, bool upper, bool transpose, bool unitriangular) -> (Tensor, Tensor)")
      .impl_unboxedOnlyKernel<std::tuple<at::Tensor,at::Tensor>(const at::Tensor &, const at::Tensor &, bool, bool, bool), &AtenIpexTypeDefault::_triangular_solve_helper>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::symeig.e(Tensor self, bool eigenvectors=False, bool upper=True, *, Tensor(a!) e, Tensor(b!) V) -> (Tensor(a!) eigenvalues, Tensor(b!) eigenvectors)")
      .impl_unboxedOnlyKernel<std::tuple<at::Tensor &,at::Tensor &>(at::Tensor &, at::Tensor &, const at::Tensor &, bool, bool), &AtenIpexTypeDefault::symeig_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::symeig(Tensor self, bool eigenvectors=False, bool upper=True) -> (Tensor eigenvalues, Tensor eigenvectors)")
      .impl_unboxedOnlyKernel<std::tuple<at::Tensor,at::Tensor>(const at::Tensor &, bool, bool), &AtenXlaType::symeig>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::_symeig_helper(Tensor self, bool eigenvectors, bool upper) -> (Tensor, Tensor)")
      .impl_unboxedOnlyKernel<std::tuple<at::Tensor,at::Tensor>(const at::Tensor &, bool, bool), &AtenIpexTypeDefault::_symeig_helper>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::eig.e(Tensor self, bool eigenvectors=False, *, Tensor(a!) e, Tensor(b!) v) -> (Tensor(a!) eigenvalues, Tensor(b!) eigenvectors)")
      .impl_unboxedOnlyKernel<std::tuple<at::Tensor &,at::Tensor &>(at::Tensor &, at::Tensor &, const at::Tensor &, bool), &AtenIpexTypeDefault::eig_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::eig(Tensor self, bool eigenvectors=False) -> (Tensor eigenvalues, Tensor eigenvectors)")
      .impl_unboxedOnlyKernel<std::tuple<at::Tensor,at::Tensor>(const at::Tensor &, bool), &AtenIpexTypeDefault::eig>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::svd.U(Tensor self, bool some=True, bool compute_uv=True, *, Tensor(a!) U, Tensor(b!) S, Tensor(c!) V) -> (Tensor(a!) U, Tensor(b!) S, Tensor(c!) V)")
      .impl_unboxedOnlyKernel<std::tuple<at::Tensor &,at::Tensor &,at::Tensor &>(at::Tensor &, at::Tensor &, at::Tensor &, const at::Tensor &, bool, bool), &AtenIpexTypeDefault::svd_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::svd(Tensor self, bool some=True, bool compute_uv=True) -> (Tensor U, Tensor S, Tensor V)")
      .impl_unboxedOnlyKernel<std::tuple<at::Tensor,at::Tensor,at::Tensor>(const at::Tensor &, bool, bool), &AtenXlaType::svd>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::_svd_helper(Tensor self, bool some, bool compute_uv) -> (Tensor, Tensor, Tensor)")
      .impl_unboxedOnlyKernel<std::tuple<at::Tensor,at::Tensor,at::Tensor>(const at::Tensor &, bool, bool), &AtenIpexTypeDefault::_svd_helper>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::cholesky.out(Tensor self, bool upper=False, *, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, bool), &AtenIpexTypeDefault::cholesky_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::cholesky(Tensor self, bool upper=False) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, bool), &AtenXlaType::cholesky>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::_cholesky_helper(Tensor self, bool upper) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, bool), &AtenIpexTypeDefault::_cholesky_helper>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::cholesky_solve.out(Tensor self, Tensor input2, bool upper=False, *, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, const at::Tensor &, bool), &AtenIpexTypeDefault::cholesky_solve_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::cholesky_solve(Tensor self, Tensor input2, bool upper=False) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &, bool), &AtenIpexTypeDefault::cholesky_solve>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::_cholesky_solve_helper(Tensor self, Tensor A, bool upper) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &, bool), &AtenIpexTypeDefault::_cholesky_solve_helper>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::solve(Tensor self, Tensor A) -> (Tensor solution, Tensor LU)")
      .impl_unboxedOnlyKernel<std::tuple<at::Tensor,at::Tensor>(const at::Tensor &, const at::Tensor &), &AtenIpexTypeDefault::solve>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::solve.solution(Tensor self, Tensor A, *, Tensor(a!) solution, Tensor(b!) lu) -> (Tensor(a!) solution, Tensor(b!) LU)")
      .impl_unboxedOnlyKernel<std::tuple<at::Tensor &,at::Tensor &>(at::Tensor &, at::Tensor &, const at::Tensor &, const at::Tensor &), &AtenIpexTypeDefault::solve_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::_solve_helper(Tensor self, Tensor A) -> (Tensor, Tensor)")
      .impl_unboxedOnlyKernel<std::tuple<at::Tensor,at::Tensor>(const at::Tensor &, const at::Tensor &), &AtenIpexTypeDefault::_solve_helper>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::cholesky_inverse.out(Tensor self, bool upper=False, *, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, bool), &AtenIpexTypeDefault::cholesky_inverse_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::cholesky_inverse(Tensor self, bool upper=False) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, bool), &AtenIpexTypeDefault::cholesky_inverse>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::qr.Q(Tensor self, bool some=True, *, Tensor(a!) Q, Tensor(b!) R) -> (Tensor(a!) Q, Tensor(b!) R)")
      .impl_unboxedOnlyKernel<std::tuple<at::Tensor &,at::Tensor &>(at::Tensor &, at::Tensor &, const at::Tensor &, bool), &AtenIpexTypeDefault::qr_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::qr(Tensor self, bool some=True) -> (Tensor Q, Tensor R)")
      .impl_unboxedOnlyKernel<std::tuple<at::Tensor,at::Tensor>(const at::Tensor &, bool), &AtenXlaType::qr>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::_qr_helper(Tensor self, bool some) -> (Tensor, Tensor)")
      .impl_unboxedOnlyKernel<std::tuple<at::Tensor,at::Tensor>(const at::Tensor &, bool), &AtenIpexTypeDefault::_qr_helper>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::geqrf.a(Tensor self, *, Tensor(a!) a, Tensor(b!) tau) -> (Tensor(a!) a, Tensor(b!) tau)")
      .impl_unboxedOnlyKernel<std::tuple<at::Tensor &,at::Tensor &>(at::Tensor &, at::Tensor &, const at::Tensor &), &AtenIpexTypeDefault::geqrf_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::geqrf(Tensor self) -> (Tensor a, Tensor tau)")
      .impl_unboxedOnlyKernel<std::tuple<at::Tensor,at::Tensor>(const at::Tensor &), &AtenIpexTypeDefault::geqrf>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::orgqr.out(Tensor self, Tensor input2, *, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, const at::Tensor &), &AtenIpexTypeDefault::orgqr_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::orgqr(Tensor self, Tensor input2) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &), &AtenIpexTypeDefault::orgqr>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::ormqr.out(Tensor self, Tensor input2, Tensor input3, bool left=True, bool transpose=False, *, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, const at::Tensor &, const at::Tensor &, bool, bool), &AtenIpexTypeDefault::ormqr_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::ormqr(Tensor self, Tensor input2, Tensor input3, bool left=True, bool transpose=False) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &, const at::Tensor &, bool, bool), &AtenIpexTypeDefault::ormqr>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::_lu_with_info(Tensor self, bool pivot=True, bool check_errors=True) -> (Tensor, Tensor, Tensor)")
      .impl_unboxedOnlyKernel<std::tuple<at::Tensor,at::Tensor,at::Tensor>(const at::Tensor &, bool, bool), &AtenIpexTypeDefault::_lu_with_info>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::lu_solve.out(Tensor self, Tensor LU_data, Tensor LU_pivots, *, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, const at::Tensor &, const at::Tensor &), &AtenIpexTypeDefault::lu_solve_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::lu_solve(Tensor self, Tensor LU_data, Tensor LU_pivots) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &, const at::Tensor &), &AtenIpexTypeDefault::lu_solve>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::_lu_solve_helper(Tensor self, Tensor LU_data, Tensor LU_pivots) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &, const at::Tensor &), &AtenIpexTypeDefault::_lu_solve_helper>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::multinomial.out(Tensor self, int num_samples, bool replacement=False, *, Generator? generator=None, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, int64_t, bool, at::Generator *), &AtenIpexTypeDefault::multinomial_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::multinomial(Tensor self, int num_samples, bool replacement=False, *, Generator? generator=None) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, int64_t, bool, at::Generator *), &AtenIpexTypeDefault::multinomial>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::_multinomial_alias_setup(Tensor probs) -> (Tensor, Tensor)")
      .impl_unboxedOnlyKernel<std::tuple<at::Tensor,at::Tensor>(const at::Tensor &), &AtenIpexTypeDefault::_multinomial_alias_setup>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::_multinomial_alias_draw(Tensor J, Tensor q, int num_samples, *, Generator? generator=None) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &, int64_t, at::Generator *), &AtenIpexTypeDefault::_multinomial_alias_draw>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::lgamma.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &), &AtenIpexTypeDefault::lgamma_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::lgamma(Tensor self) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &), &AtenIpexTypeDefault::lgamma>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::digamma.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &), &AtenIpexTypeDefault::digamma_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::digamma(Tensor self) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &), &AtenIpexTypeDefault::digamma>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::polygamma.out(int n, Tensor self, *, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, int64_t, const at::Tensor &), &AtenIpexTypeDefault::polygamma_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::polygamma(int n, Tensor self) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(int64_t, const at::Tensor &), &AtenIpexTypeDefault::polygamma>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::erfinv.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &), &AtenIpexTypeDefault::erfinv_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::erfinv(Tensor self) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &), &AtenXlaType::erfinv>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::dist(Tensor self, Tensor other, Scalar p=2) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &, at::Scalar), &AtenIpexTypeDefault::dist>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::atan2.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, const at::Tensor &), &AtenIpexTypeDefault::atan2_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::atan2(Tensor self, Tensor other) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &), &AtenXlaType::atan2>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::lerp.Scalar_out(Tensor self, Tensor end, Scalar weight, *, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, const at::Tensor &, at::Scalar), &AtenIpexTypeDefault::lerp_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::lerp.Tensor_out(Tensor self, Tensor end, Tensor weight, *, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, const at::Tensor &, const at::Tensor &), &AtenIpexTypeDefault::lerp_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::lerp.Scalar(Tensor self, Tensor end, Scalar weight) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &, at::Scalar), &AtenIpexTypeDefault::lerp>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::lerp.Tensor(Tensor self, Tensor end, Tensor weight) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &, const at::Tensor &), &AtenIpexTypeDefault::lerp>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::histc.out(Tensor self, int bins=100, Scalar min=0, Scalar max=0, *, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, int64_t, at::Scalar, at::Scalar), &AtenIpexTypeDefault::histc_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::histc(Tensor self, int bins=100, Scalar min=0, Scalar max=0) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, int64_t, at::Scalar, at::Scalar), &AtenIpexTypeDefault::histc>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::sign.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &), &AtenIpexTypeDefault::sign_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::sign(Tensor self) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &), &AtenXlaType::sign>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::fmod.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, at::Scalar), &AtenIpexTypeDefault::fmod_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::fmod.Scalar(Tensor self, Scalar other) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, at::Scalar), &AtenXlaType::fmod>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::fmod.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, const at::Tensor &), &AtenIpexTypeDefault::fmod_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::fmod.Tensor(Tensor self, Tensor other) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &), &AtenXlaType::fmod>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::remainder.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, at::Scalar), &AtenIpexTypeDefault::remainder_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::remainder.Scalar(Tensor self, Scalar other) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, at::Scalar), &AtenXlaType::remainder>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::remainder.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, const at::Tensor &), &AtenIpexTypeDefault::remainder_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::remainder.Tensor(Tensor self, Tensor other) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &), &AtenXlaType::remainder>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::min.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, const at::Tensor &), &AtenIpexTypeDefault::min_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::min.other(Tensor self, Tensor other) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &), &AtenXlaType::min>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::min(Tensor self) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &), &AtenXlaType::min>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::max.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, const at::Tensor &), &AtenIpexTypeDefault::max_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::max.other(Tensor self, Tensor other) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &), &AtenXlaType::max>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::max(Tensor self) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &), &AtenXlaType::max>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::median(Tensor self) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &), &AtenIpexTypeDefault::median>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::sort.values(Tensor self, int dim=-1, bool descending=False, *, Tensor(a!) values, Tensor(b!) indices) -> (Tensor(a!) values, Tensor(b!) indices)")
      .impl_unboxedOnlyKernel<std::tuple<at::Tensor &,at::Tensor &>(at::Tensor &, at::Tensor &, const at::Tensor &, int64_t, bool), &AtenIpexTypeDefault::sort_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::sort(Tensor self, int dim=-1, bool descending=False) -> (Tensor values, Tensor indices)")
      .impl_unboxedOnlyKernel<std::tuple<at::Tensor,at::Tensor>(const at::Tensor &, int64_t, bool), &AtenXlaType::sort>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::argsort(Tensor self, int dim=-1, bool descending=False) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, int64_t, bool), &AtenXlaType::argsort>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::topk.values(Tensor self, int k, int dim=-1, bool largest=True, bool sorted=True, *, Tensor(a!) values, Tensor(b!) indices) ->(Tensor(a!) values, Tensor(b!) indices)")
      .impl_unboxedOnlyKernel<std::tuple<at::Tensor &,at::Tensor &>(at::Tensor &, at::Tensor &, const at::Tensor &, int64_t, int64_t, bool, bool), &AtenIpexTypeDefault::topk_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::topk(Tensor self, int k, int dim=-1, bool largest=True, bool sorted=True) -> (Tensor values, Tensor indices)")
      .impl_unboxedOnlyKernel<std::tuple<at::Tensor,at::Tensor>(const at::Tensor &, int64_t, int64_t, bool, bool), &AtenXlaType::topk>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::all(Tensor self) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &), &AtenXlaType::all>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::any(Tensor self) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &), &AtenXlaType::any>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::renorm.out(Tensor self, Scalar p, int dim, Scalar maxnorm, *, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, at::Scalar, int64_t, at::Scalar), &AtenIpexTypeDefault::renorm_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::renorm(Tensor self, Scalar p, int dim, Scalar maxnorm) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, at::Scalar, int64_t, at::Scalar), &AtenIpexTypeDefault::renorm>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::unfold(Tensor(a) self, int dimension, int size, int step) -> Tensor(a)")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, int64_t, int64_t, int64_t), &AtenIpexTypeDefault::unfold>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::equal(Tensor self, Tensor other) -> bool")
      .impl_unboxedOnlyKernel<bool(const at::Tensor &, const at::Tensor &), &AtenIpexTypeDefault::equal>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::pow.Tensor_Tensor_out(Tensor self, Tensor exponent, *, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, const at::Tensor &), &AtenIpexTypeDefault::pow_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::pow.Tensor_Tensor(Tensor self, Tensor exponent) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &), &AtenXlaType::pow>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::pow.Scalar_out(Scalar self, Tensor exponent, *, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, at::Scalar, const at::Tensor &), &AtenIpexTypeDefault::pow_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::pow.Scalar(Scalar self, Tensor exponent) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(at::Scalar, const at::Tensor &), &AtenXlaType::pow>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::normal.Tensor_float_out(Tensor mean, float std=1, *, Generator? generator=None, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, double, at::Generator *), &AtenIpexTypeDefault::normal_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::normal.Tensor_float(Tensor mean, float std=1, *, Generator? generator=None) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, double, at::Generator *), &AtenIpexTypeDefault::normal>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::normal.float_Tensor_out(float mean, Tensor std, *, Generator? generator=None, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, double, const at::Tensor &, at::Generator *), &AtenIpexTypeDefault::normal_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::normal.float_Tensor(float mean, Tensor std, *, Generator? generator=None) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(double, const at::Tensor &, at::Generator *), &AtenIpexTypeDefault::normal>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::normal.Tensor_Tensor_out(Tensor mean, Tensor std, *, Generator? generator=None, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, const at::Tensor &, at::Generator *), &AtenIpexTypeDefault::normal_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::normal.Tensor_Tensor(Tensor mean, Tensor std, *, Generator? generator=None) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &, at::Generator *), &AtenIpexTypeDefault::normal>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::normal.float_float(float mean, float std, int[] size, *, Generator? generator=None, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(double, double, at::IntArrayRef, at::Generator *, const at::TensorOptions &), &AtenIpexTypeDefault::normal>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::normal.float_float_out(float mean, float std, int[] size, *, Generator? generator=None, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, double, double, at::IntArrayRef, at::Generator *), &AtenIpexTypeDefault::normal_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::alias(Tensor(a) self) -> Tensor(a)")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &), &AtenXlaType::alias>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::_addr(Tensor self, Tensor vec1, Tensor vec2, *, Scalar beta=1, Scalar alpha=1) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &, const at::Tensor &, at::Scalar, at::Scalar), &AtenIpexTypeDefault::_addr>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::_addr_(Tensor(a!) self, Tensor vec1, Tensor vec2, *, Scalar beta=1, Scalar alpha=1) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, const at::Tensor &, at::Scalar, at::Scalar), &AtenIpexTypeDefault::_addr_>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::_addr.out(Tensor self, Tensor vec1, Tensor vec2, *, Scalar beta=1, Scalar alpha=1, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, const at::Tensor &, const at::Tensor &, at::Scalar, at::Scalar), &AtenIpexTypeDefault::_addr_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::_index_copy_(Tensor(a!) self, int dim, Tensor index, Tensor source) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, int64_t, const at::Tensor &, const at::Tensor &), &AtenIpexTypeDefault::_index_copy_>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::_cumsum(Tensor self, int dim) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, int64_t), &AtenIpexTypeDefault::_cumsum>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::_cumsum.out(Tensor self, int dim, *, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, int64_t), &AtenIpexTypeDefault::_cumsum_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::_cumprod(Tensor self, int dim) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, int64_t), &AtenIpexTypeDefault::_cumprod>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::_cumprod.out(Tensor self, int dim, *, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, int64_t), &AtenIpexTypeDefault::_cumprod_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::_var(Tensor self, bool unbiased=True) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, bool), &AtenIpexTypeDefault::_var>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::_std(Tensor self, bool unbiased=True) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, bool), &AtenIpexTypeDefault::_std>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::_addmm.out(Tensor self, Tensor mat1, Tensor mat2, *, Scalar beta=1, Scalar alpha=1, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, const at::Tensor &, const at::Tensor &, at::Scalar, at::Scalar), &AtenIpexTypeDefault::_addmm_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::_addmm(Tensor self, Tensor mat1, Tensor mat2, *, Scalar beta=1, Scalar alpha=1) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &, const at::Tensor &, at::Scalar, at::Scalar), &AtenIpexTypeDefault::_addmm>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::_addmm_(Tensor(a!) self, Tensor mat1, Tensor mat2, *, Scalar beta=1, Scalar alpha=1) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, const at::Tensor &, at::Scalar, at::Scalar), &AtenIpexTypeDefault::_addmm_>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::_cat(Tensor[] tensors, int dim=0) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(at::TensorList, int64_t), &AtenIpexTypeDefault::_cat>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::_cat.out(Tensor[] tensors, int dim=0, *, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, at::TensorList, int64_t), &AtenIpexTypeDefault::_cat_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::_mode(Tensor self, int dim=-1, bool keepdim=False) -> (Tensor, Tensor)")
      .impl_unboxedOnlyKernel<std::tuple<at::Tensor,at::Tensor>(const at::Tensor &, int64_t, bool), &AtenIpexTypeDefault::_mode>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::_mode.values(Tensor self, int dim=-1, bool keepdim=False, *, Tensor(a!) values, Tensor(b!) indices) -> (Tensor(a!), Tensor(b!))")
      .impl_unboxedOnlyKernel<std::tuple<at::Tensor &,at::Tensor &>(at::Tensor &, at::Tensor &, const at::Tensor &, int64_t, bool), &AtenIpexTypeDefault::_mode_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::_max(Tensor self, int dim, bool keepdim=False) -> (Tensor, Tensor)")
      .impl_unboxedOnlyKernel<std::tuple<at::Tensor,at::Tensor>(const at::Tensor &, int64_t, bool), &AtenIpexTypeDefault::_max>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::_max.max(Tensor self, int dim, bool keepdim=False, *, Tensor(a!) max, Tensor(b!) max_indices) -> (Tensor(a!), Tensor(b!))")
      .impl_unboxedOnlyKernel<std::tuple<at::Tensor &,at::Tensor &>(at::Tensor &, at::Tensor &, const at::Tensor &, int64_t, bool), &AtenIpexTypeDefault::_max_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::_min(Tensor self, int dim, bool keepdim=False) -> (Tensor, Tensor)")
      .impl_unboxedOnlyKernel<std::tuple<at::Tensor,at::Tensor>(const at::Tensor &, int64_t, bool), &AtenIpexTypeDefault::_min>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::_min.min(Tensor self, int dim, bool keepdim=False, *, Tensor(a!) min, Tensor(b!) min_indices) -> (Tensor(a!), Tensor(b!))")
      .impl_unboxedOnlyKernel<std::tuple<at::Tensor &,at::Tensor &>(at::Tensor &, at::Tensor &, const at::Tensor &, int64_t, bool), &AtenIpexTypeDefault::_min_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::binary_cross_entropy.out(Tensor self, Tensor target, Tensor? weight=None, int reduction=Mean, *, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, const at::Tensor &, const at::Tensor &, int64_t), &AtenIpexTypeDefault::binary_cross_entropy_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::binary_cross_entropy(Tensor self, Tensor target, Tensor? weight=None, int reduction=Mean) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &, const at::Tensor &, int64_t), &AtenIpexTypeDefault::binary_cross_entropy>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::binary_cross_entropy_backward.grad_input(Tensor grad_output, Tensor self, Tensor target, Tensor? weight=None, int reduction=Mean, *, Tensor(a!) grad_input) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, const at::Tensor &, const at::Tensor &, const at::Tensor &, int64_t), &AtenIpexTypeDefault::binary_cross_entropy_backward_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::binary_cross_entropy_backward(Tensor grad_output, Tensor self, Tensor target, Tensor? weight=None, int reduction=Mean) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &, const at::Tensor &, const at::Tensor &, int64_t), &AtenIpexTypeDefault::binary_cross_entropy_backward>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::mse_loss.out(Tensor self, Tensor target, int reduction=Mean, *, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, const at::Tensor &, int64_t), &AtenIpexTypeDefault::mse_loss_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::mse_loss(Tensor self, Tensor target, int reduction=Mean) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &, int64_t), &AtenIpexTypeDefault::mse_loss>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::mse_loss_backward.grad_input(Tensor grad_output, Tensor self, Tensor target, int reduction, *, Tensor(a!) grad_input) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, const at::Tensor &, const at::Tensor &, int64_t), &AtenIpexTypeDefault::mse_loss_backward_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::mse_loss_backward(Tensor grad_output, Tensor self, Tensor target, int reduction) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &, const at::Tensor &, int64_t), &AtenIpexTypeDefault::mse_loss_backward>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::l1_loss.out(Tensor self, Tensor target, int reduction=Mean, *, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, const at::Tensor &, int64_t), &AtenIpexTypeDefault::l1_loss_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::l1_loss(Tensor self, Tensor target, int reduction=Mean) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &, int64_t), &AtenXlaType::l1_loss>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::l1_loss_backward.grad_input(Tensor grad_output, Tensor self, Tensor target, int reduction, *, Tensor(a!) grad_input) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, const at::Tensor &, const at::Tensor &, int64_t), &AtenIpexTypeDefault::l1_loss_backward_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::l1_loss_backward(Tensor grad_output, Tensor self, Tensor target, int reduction) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &, const at::Tensor &, int64_t), &AtenXlaType::l1_loss_backward>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::multi_margin_loss.out(Tensor self, Tensor target, Scalar p=1, Scalar margin=1, Tensor? weight=None, int reduction=Mean, *, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, const at::Tensor &, at::Scalar, at::Scalar, const at::Tensor &, int64_t), &AtenIpexTypeDefault::multi_margin_loss_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::multi_margin_loss(Tensor self, Tensor target, Scalar p=1, Scalar margin=1, Tensor? weight=None, int reduction=Mean) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &, at::Scalar, at::Scalar, const at::Tensor &, int64_t), &AtenIpexTypeDefault::multi_margin_loss>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::multi_margin_loss_backward.grad_input(Tensor grad_output, Tensor self, Tensor target, Scalar p, Scalar margin, Tensor? weight=None, int reduction=Mean, *, Tensor(a!) grad_input) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, const at::Tensor &, const at::Tensor &, at::Scalar, at::Scalar, const at::Tensor &, int64_t), &AtenIpexTypeDefault::multi_margin_loss_backward_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::multi_margin_loss_backward(Tensor grad_output, Tensor self, Tensor target, Scalar p, Scalar margin, Tensor? weight=None, int reduction=Mean) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &, const at::Tensor &, at::Scalar, at::Scalar, const at::Tensor &, int64_t), &AtenIpexTypeDefault::multi_margin_loss_backward>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::multilabel_margin_loss.out(Tensor self, Tensor target, int reduction=Mean, *, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, const at::Tensor &, int64_t), &AtenIpexTypeDefault::multilabel_margin_loss_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::multilabel_margin_loss(Tensor self, Tensor target, int reduction=Mean) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &, int64_t), &AtenIpexTypeDefault::multilabel_margin_loss>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::multilabel_margin_loss_forward.output(Tensor self, Tensor target, int reduction, *, Tensor(a!) output, Tensor(b!) is_target) -> (Tensor(a!), Tensor(b!))")
      .impl_unboxedOnlyKernel<std::tuple<at::Tensor &,at::Tensor &>(at::Tensor &, at::Tensor &, const at::Tensor &, const at::Tensor &, int64_t), &AtenIpexTypeDefault::multilabel_margin_loss_forward_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::multilabel_margin_loss_forward(Tensor self, Tensor target, int reduction) -> (Tensor output, Tensor is_target)")
      .impl_unboxedOnlyKernel<std::tuple<at::Tensor,at::Tensor>(const at::Tensor &, const at::Tensor &, int64_t), &AtenIpexTypeDefault::multilabel_margin_loss_forward>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::multilabel_margin_loss_backward.grad_input(Tensor grad_output, Tensor self, Tensor target, int reduction, Tensor is_target, *, Tensor(a!) grad_input) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, const at::Tensor &, const at::Tensor &, int64_t, const at::Tensor &), &AtenIpexTypeDefault::multilabel_margin_loss_backward_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::multilabel_margin_loss_backward(Tensor grad_output, Tensor self, Tensor target, int reduction, Tensor is_target) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &, const at::Tensor &, int64_t, const at::Tensor &), &AtenIpexTypeDefault::multilabel_margin_loss_backward>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::nll_loss.out(Tensor self, Tensor target, Tensor? weight=None, int reduction=Mean, int ignore_index=-100, *, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, const at::Tensor &, const at::Tensor &, int64_t, int64_t), &AtenIpexTypeDefault::nll_loss_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::nll_loss(Tensor self, Tensor target, Tensor? weight=None, int reduction=Mean, int ignore_index=-100) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &, const at::Tensor &, int64_t, int64_t), &AtenXlaType::nll_loss>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::nll_loss_forward.output(Tensor self, Tensor target, Tensor? weight, int reduction, int ignore_index, *, Tensor(a!) output, Tensor(b!) total_weight) -> (Tensor(a!), Tensor(b!))")
      .impl_unboxedOnlyKernel<std::tuple<at::Tensor &,at::Tensor &>(at::Tensor &, at::Tensor &, const at::Tensor &, const at::Tensor &, const at::Tensor &, int64_t, int64_t), &AtenIpexTypeDefault::nll_loss_forward_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::nll_loss_forward(Tensor self, Tensor target, Tensor? weight, int reduction, int ignore_index) -> (Tensor output, Tensor total_weight)")
      .impl_unboxedOnlyKernel<std::tuple<at::Tensor,at::Tensor>(const at::Tensor &, const at::Tensor &, const at::Tensor &, int64_t, int64_t), &AtenXlaType::nll_loss_forward>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::nll_loss_backward.grad_input(Tensor grad_output, Tensor self, Tensor target, Tensor? weight, int reduction, int ignore_index, Tensor total_weight, *, Tensor(a!) grad_input) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, const at::Tensor &, const at::Tensor &, const at::Tensor &, int64_t, int64_t, const at::Tensor &), &AtenIpexTypeDefault::nll_loss_backward_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::nll_loss_backward(Tensor grad_output, Tensor self, Tensor target, Tensor? weight, int reduction, int ignore_index, Tensor total_weight) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &, const at::Tensor &, const at::Tensor &, int64_t, int64_t, const at::Tensor &), &AtenXlaType::nll_loss_backward>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::nll_loss2d.out(Tensor self, Tensor target, Tensor? weight=None, int reduction=Mean, int ignore_index=-100, *, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, const at::Tensor &, const at::Tensor &, int64_t, int64_t), &AtenIpexTypeDefault::nll_loss2d_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::nll_loss2d(Tensor self, Tensor target, Tensor? weight=None, int reduction=Mean, int ignore_index=-100) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &, const at::Tensor &, int64_t, int64_t), &AtenIpexTypeDefault::nll_loss2d>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::nll_loss2d_forward.output(Tensor self, Tensor target, Tensor? weight, int reduction, int ignore_index, *, Tensor(a!) output, Tensor(b!) total_weight) -> (Tensor(a!), Tensor(b!))")
      .impl_unboxedOnlyKernel<std::tuple<at::Tensor &,at::Tensor &>(at::Tensor &, at::Tensor &, const at::Tensor &, const at::Tensor &, const at::Tensor &, int64_t, int64_t), &AtenIpexTypeDefault::nll_loss2d_forward_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::nll_loss2d_forward(Tensor self, Tensor target, Tensor? weight, int reduction, int ignore_index) -> (Tensor output, Tensor total_weight)")
      .impl_unboxedOnlyKernel<std::tuple<at::Tensor,at::Tensor>(const at::Tensor &, const at::Tensor &, const at::Tensor &, int64_t, int64_t), &AtenIpexTypeDefault::nll_loss2d_forward>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::nll_loss2d_backward.grad_input(Tensor grad_output, Tensor self, Tensor target, Tensor? weight, int reduction, int ignore_index, Tensor total_weight, *, Tensor(a!) grad_input) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, const at::Tensor &, const at::Tensor &, const at::Tensor &, int64_t, int64_t, const at::Tensor &), &AtenIpexTypeDefault::nll_loss2d_backward_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::nll_loss2d_backward(Tensor grad_output, Tensor self, Tensor target, Tensor? weight, int reduction, int ignore_index, Tensor total_weight) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &, const at::Tensor &, const at::Tensor &, int64_t, int64_t, const at::Tensor &), &AtenIpexTypeDefault::nll_loss2d_backward>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::smooth_l1_loss.out(Tensor self, Tensor target, int reduction=Mean, *, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, const at::Tensor &, int64_t), &AtenIpexTypeDefault::smooth_l1_loss_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::smooth_l1_loss(Tensor self, Tensor target, int reduction=Mean) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &, int64_t), &AtenXlaType::smooth_l1_loss>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::smooth_l1_loss_backward.grad_input(Tensor grad_output, Tensor self, Tensor target, int reduction, *, Tensor(a!) grad_input) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, const at::Tensor &, const at::Tensor &, int64_t), &AtenIpexTypeDefault::smooth_l1_loss_backward_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::smooth_l1_loss_backward(Tensor grad_output, Tensor self, Tensor target, int reduction) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &, const at::Tensor &, int64_t), &AtenXlaType::smooth_l1_loss_backward>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::soft_margin_loss.out(Tensor self, Tensor target, int reduction=Mean, *, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, const at::Tensor &, int64_t), &AtenIpexTypeDefault::soft_margin_loss_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::soft_margin_loss(Tensor self, Tensor target, int reduction=Mean) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &, int64_t), &AtenIpexTypeDefault::soft_margin_loss>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::soft_margin_loss_backward.grad_input(Tensor grad_output, Tensor self, Tensor target, int reduction, *, Tensor(a!) grad_input) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, const at::Tensor &, const at::Tensor &, int64_t), &AtenIpexTypeDefault::soft_margin_loss_backward_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::soft_margin_loss_backward(Tensor grad_output, Tensor self, Tensor target, int reduction) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &, const at::Tensor &, int64_t), &AtenIpexTypeDefault::soft_margin_loss_backward>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::elu.out(Tensor self, Scalar alpha=1, Scalar scale=1, Scalar input_scale=1, *, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, at::Scalar, at::Scalar, at::Scalar), &AtenIpexTypeDefault::elu_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::elu(Tensor self, Scalar alpha=1, Scalar scale=1, Scalar input_scale=1) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, at::Scalar, at::Scalar, at::Scalar), &AtenXlaType::elu>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::elu_backward.grad_input(Tensor grad_output, Scalar alpha, Scalar scale, Scalar input_scale, Tensor output, *, Tensor(a!) grad_input) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, at::Scalar, at::Scalar, at::Scalar, const at::Tensor &), &AtenIpexTypeDefault::elu_backward_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::elu_backward(Tensor grad_output, Scalar alpha, Scalar scale, Scalar input_scale, Tensor output) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, at::Scalar, at::Scalar, at::Scalar, const at::Tensor &), &AtenXlaType::elu_backward>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::elu_(Tensor(a!) self, Scalar alpha=1, Scalar scale=1, Scalar input_scale=1) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, at::Scalar, at::Scalar, at::Scalar), &AtenXlaType::elu_>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::glu.out(Tensor self, int dim=-1, *, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, int64_t), &AtenIpexTypeDefault::glu_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::glu(Tensor self, int dim=-1) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, int64_t), &AtenIpexTypeDefault::glu>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::glu_backward.grad_input(Tensor grad_output, Tensor self, int dim, *, Tensor(a!) grad_input) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, const at::Tensor &, int64_t), &AtenIpexTypeDefault::glu_backward_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::glu_backward(Tensor grad_output, Tensor self, int dim) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &, int64_t), &AtenIpexTypeDefault::glu_backward>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::hardtanh.out(Tensor self, Scalar min_val=-1, Scalar max_val=1, *, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, at::Scalar, at::Scalar), &AtenIpexTypeDefault::hardtanh_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::hardtanh(Tensor self, Scalar min_val=-1, Scalar max_val=1) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, at::Scalar, at::Scalar), &AtenXlaType::hardtanh>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::hardtanh_backward.grad_input(Tensor grad_output, Tensor self, Scalar min_val, Scalar max_val, *, Tensor(a!) grad_input) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, const at::Tensor &, at::Scalar, at::Scalar), &AtenIpexTypeDefault::hardtanh_backward_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::hardtanh_backward(Tensor grad_output, Tensor self, Scalar min_val, Scalar max_val) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &, at::Scalar, at::Scalar), &AtenXlaType::hardtanh_backward>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::hardtanh_(Tensor(a!) self, Scalar min_val=-1, Scalar max_val=1) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, at::Scalar, at::Scalar), &AtenXlaType::hardtanh_>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::leaky_relu.out(Tensor self, Scalar negative_slope=0.01, *, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, at::Scalar), &AtenIpexTypeDefault::leaky_relu_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::leaky_relu(Tensor self, Scalar negative_slope=0.01) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, at::Scalar), &AtenXlaType::leaky_relu>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::leaky_relu_backward.grad_input(Tensor grad_output, Tensor self, Scalar negative_slope, *, Tensor(a!) grad_input) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, const at::Tensor &, at::Scalar), &AtenIpexTypeDefault::leaky_relu_backward_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::leaky_relu_backward(Tensor grad_output, Tensor self, Scalar negative_slope) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &, at::Scalar), &AtenXlaType::leaky_relu_backward>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::leaky_relu_(Tensor(a!) self, Scalar negative_slope=0.01) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, at::Scalar), &AtenXlaType::leaky_relu_>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::log_sigmoid.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &), &AtenIpexTypeDefault::log_sigmoid_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::log_sigmoid(Tensor self) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &), &AtenXlaType::log_sigmoid>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::log_sigmoid_forward.output(Tensor self, *, Tensor(a!) output, Tensor(b!) buffer) -> (Tensor(a!), Tensor(b!))")
      .impl_unboxedOnlyKernel<std::tuple<at::Tensor &,at::Tensor &>(at::Tensor &, at::Tensor &, const at::Tensor &), &AtenIpexTypeDefault::log_sigmoid_forward_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::log_sigmoid_forward(Tensor self) -> (Tensor output, Tensor buffer)")
      .impl_unboxedOnlyKernel<std::tuple<at::Tensor,at::Tensor>(const at::Tensor &), &AtenXlaType::log_sigmoid_forward>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::log_sigmoid_backward.grad_input(Tensor grad_output, Tensor self, Tensor buffer, *, Tensor(a!) grad_input) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, const at::Tensor &, const at::Tensor &), &AtenIpexTypeDefault::log_sigmoid_backward_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::log_sigmoid_backward(Tensor grad_output, Tensor self, Tensor buffer) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &, const at::Tensor &), &AtenXlaType::log_sigmoid_backward>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::rrelu_with_noise.out(Tensor self, Tensor noise, Scalar lower=0.125, Scalar upper=0.3333333333333333, bool training=False, Generator? generator=None, *, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, const at::Tensor &, at::Scalar, at::Scalar, bool, at::Generator *), &AtenIpexTypeDefault::rrelu_with_noise_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::rrelu_with_noise(Tensor self, Tensor noise, Scalar lower=0.125, Scalar upper=0.3333333333333333, bool training=False, Generator? generator=None) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &, at::Scalar, at::Scalar, bool, at::Generator *), &AtenXlaType::rrelu_with_noise>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::rrelu_with_noise_backward.grad_input(Tensor grad_output, Tensor self, Tensor noise, Scalar lower, Scalar upper, bool training, *, Tensor(a!) grad_input) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, const at::Tensor &, const at::Tensor &, at::Scalar, at::Scalar, bool), &AtenIpexTypeDefault::rrelu_with_noise_backward_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::rrelu_with_noise_backward(Tensor grad_output, Tensor self, Tensor noise, Scalar lower, Scalar upper, bool training) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &, const at::Tensor &, at::Scalar, at::Scalar, bool), &AtenXlaType::rrelu_with_noise_backward>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::rrelu_with_noise_(Tensor(a!) self, Tensor noise, Scalar lower=0.125, Scalar upper=0.3333333333333333, bool training=False, Generator? generator=None) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, at::Scalar, at::Scalar, bool, at::Generator *), &AtenIpexTypeDefault::rrelu_with_noise_>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::softplus.out(Tensor self, Scalar beta=1, Scalar threshold=20, *, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, at::Scalar, at::Scalar), &AtenIpexTypeDefault::softplus_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::softplus(Tensor self, Scalar beta=1, Scalar threshold=20) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, at::Scalar, at::Scalar), &AtenXlaType::softplus>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::softplus_backward.grad_input(Tensor grad_output, Tensor self, Scalar beta, Scalar threshold, Tensor output, *, Tensor(a!) grad_input) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, const at::Tensor &, at::Scalar, at::Scalar, const at::Tensor &), &AtenIpexTypeDefault::softplus_backward_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::softplus_backward(Tensor grad_output, Tensor self, Scalar beta, Scalar threshold, Tensor output) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &, at::Scalar, at::Scalar, const at::Tensor &), &AtenXlaType::softplus_backward>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::softshrink.out(Tensor self, Scalar lambd=0.5, *, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, at::Scalar), &AtenIpexTypeDefault::softshrink_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::softshrink(Tensor self, Scalar lambd=0.5) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, at::Scalar), &AtenXlaType::softshrink>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::softshrink_backward.grad_input(Tensor grad_output, Tensor self, Scalar lambd, *, Tensor(a!) grad_input) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, const at::Tensor &, at::Scalar), &AtenIpexTypeDefault::softshrink_backward_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::softshrink_backward(Tensor grad_output, Tensor self, Scalar lambd) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &, at::Scalar), &AtenXlaType::softshrink_backward>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::adaptive_avg_pool2d.out(Tensor self, int[2] output_size, *, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, at::IntArrayRef), &AtenIpexTypeDefault::adaptive_avg_pool2d_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::adaptive_avg_pool2d(Tensor self, int[2] output_size) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, at::IntArrayRef), &AtenIpexTypeDefault::adaptive_avg_pool2d>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::mkldnn_adaptive_avg_pool2d(Tensor self, int[2] output_size) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, at::IntArrayRef), &AtenIpexTypeDefault::mkldnn_adaptive_avg_pool2d>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::_adaptive_avg_pool2d(Tensor self, int[2] output_size) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, at::IntArrayRef), &AtenXlaType::_adaptive_avg_pool2d>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::_adaptive_avg_pool2d_backward(Tensor grad_output, Tensor self) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &), &AtenXlaType::_adaptive_avg_pool2d_backward>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::adaptive_avg_pool3d.out(Tensor self, int[3] output_size, *, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, at::IntArrayRef), &AtenIpexTypeDefault::adaptive_avg_pool3d_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::adaptive_avg_pool3d(Tensor self, int[3] output_size) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, at::IntArrayRef), &AtenIpexTypeDefault::adaptive_avg_pool3d>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::adaptive_avg_pool3d_backward.grad_input(Tensor grad_output, Tensor self, *, Tensor(a!) grad_input) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, const at::Tensor &), &AtenIpexTypeDefault::adaptive_avg_pool3d_backward_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::adaptive_avg_pool3d_backward(Tensor grad_output, Tensor self) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &), &AtenIpexTypeDefault::adaptive_avg_pool3d_backward>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::adaptive_max_pool2d.out(Tensor self, int[2] output_size, *, Tensor(a!) out, Tensor(b!) indices) -> (Tensor(a!), Tensor(b!))")
      .impl_unboxedOnlyKernel<std::tuple<at::Tensor &,at::Tensor &>(at::Tensor &, at::Tensor &, const at::Tensor &, at::IntArrayRef), &AtenIpexTypeDefault::adaptive_max_pool2d_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::adaptive_max_pool2d(Tensor self, int[2] output_size) -> (Tensor, Tensor)")
      .impl_unboxedOnlyKernel<std::tuple<at::Tensor,at::Tensor>(const at::Tensor &, at::IntArrayRef), &AtenIpexTypeDefault::adaptive_max_pool2d>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::adaptive_max_pool2d_backward.grad_input(Tensor grad_output, Tensor self, Tensor indices, *, Tensor(a!) grad_input) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, const at::Tensor &, const at::Tensor &), &AtenIpexTypeDefault::adaptive_max_pool2d_backward_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::adaptive_max_pool2d_backward(Tensor grad_output, Tensor self, Tensor indices) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &, const at::Tensor &), &AtenIpexTypeDefault::adaptive_max_pool2d_backward>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::adaptive_max_pool3d.out(Tensor self, int[3] output_size, *, Tensor(a!) out, Tensor(b!) indices) -> (Tensor(a!), Tensor(b!))")
      .impl_unboxedOnlyKernel<std::tuple<at::Tensor &,at::Tensor &>(at::Tensor &, at::Tensor &, const at::Tensor &, at::IntArrayRef), &AtenIpexTypeDefault::adaptive_max_pool3d_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::adaptive_max_pool3d(Tensor self, int[3] output_size) -> (Tensor, Tensor)")
      .impl_unboxedOnlyKernel<std::tuple<at::Tensor,at::Tensor>(const at::Tensor &, at::IntArrayRef), &AtenIpexTypeDefault::adaptive_max_pool3d>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::adaptive_max_pool3d_backward.grad_input(Tensor grad_output, Tensor self, Tensor indices, *, Tensor(a!) grad_input) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, const at::Tensor &, const at::Tensor &), &AtenIpexTypeDefault::adaptive_max_pool3d_backward_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::adaptive_max_pool3d_backward(Tensor grad_output, Tensor self, Tensor indices) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &, const at::Tensor &), &AtenIpexTypeDefault::adaptive_max_pool3d_backward>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::avg_pool2d.out(Tensor self, int[2] kernel_size, int[2] stride=[], int[2] padding=0, bool ceil_mode=False, bool count_include_pad=True, int? divisor_override=None, *, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, at::IntArrayRef, at::IntArrayRef, at::IntArrayRef, bool, bool, c10::optional<int64_t>), &AtenIpexTypeDefault::avg_pool2d_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::avg_pool2d(Tensor self, int[2] kernel_size, int[2] stride=[], int[2] padding=0, bool ceil_mode=False, bool count_include_pad=True, int? divisor_override=None) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, at::IntArrayRef, at::IntArrayRef, at::IntArrayRef, bool, bool, c10::optional<int64_t>), &AtenXlaType::avg_pool2d>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::avg_pool2d_backward.grad_input(Tensor grad_output, Tensor self, int[2] kernel_size, int[2] stride, int[2] padding, bool ceil_mode, bool count_include_pad, int? divisor_override, *, Tensor(a!) grad_input) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, const at::Tensor &, at::IntArrayRef, at::IntArrayRef, at::IntArrayRef, bool, bool, c10::optional<int64_t>), &AtenIpexTypeDefault::avg_pool2d_backward_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::avg_pool2d_backward(Tensor grad_output, Tensor self, int[2] kernel_size, int[2] stride, int[2] padding, bool ceil_mode, bool count_include_pad, int? divisor_override) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &, at::IntArrayRef, at::IntArrayRef, at::IntArrayRef, bool, bool, c10::optional<int64_t>), &AtenXlaType::avg_pool2d_backward>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::avg_pool3d.out(Tensor self, int[3] kernel_size, int[3] stride=[], int[3] padding=0, bool ceil_mode=False, bool count_include_pad=True, int? divisor_override=None, *, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, at::IntArrayRef, at::IntArrayRef, at::IntArrayRef, bool, bool, c10::optional<int64_t>), &AtenIpexTypeDefault::avg_pool3d_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::avg_pool3d(Tensor self, int[3] kernel_size, int[3] stride=[], int[3] padding=0, bool ceil_mode=False, bool count_include_pad=True, int? divisor_override=None) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, at::IntArrayRef, at::IntArrayRef, at::IntArrayRef, bool, bool, c10::optional<int64_t>), &AtenXlaType::avg_pool3d>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::avg_pool3d_backward.grad_input(Tensor grad_output, Tensor self, int[3] kernel_size, int[3] stride, int[3] padding, bool ceil_mode, bool count_include_pad, int? divisor_override, *, Tensor(a!) grad_input) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, const at::Tensor &, at::IntArrayRef, at::IntArrayRef, at::IntArrayRef, bool, bool, c10::optional<int64_t>), &AtenIpexTypeDefault::avg_pool3d_backward_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::avg_pool3d_backward(Tensor grad_output, Tensor self, int[3] kernel_size, int[3] stride, int[3] padding, bool ceil_mode, bool count_include_pad, int? divisor_override) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &, at::IntArrayRef, at::IntArrayRef, at::IntArrayRef, bool, bool, c10::optional<int64_t>), &AtenXlaType::avg_pool3d_backward>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::fractional_max_pool2d.output(Tensor self, int[2] kernel_size, int[2] output_size, Tensor random_samples, *, Tensor(a!) output, Tensor(b!) indices) -> (Tensor(a!), Tensor(b!))")
      .impl_unboxedOnlyKernel<std::tuple<at::Tensor &,at::Tensor &>(at::Tensor &, at::Tensor &, const at::Tensor &, at::IntArrayRef, at::IntArrayRef, const at::Tensor &), &AtenIpexTypeDefault::fractional_max_pool2d_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::fractional_max_pool2d(Tensor self, int[2] kernel_size, int[2] output_size, Tensor random_samples) -> (Tensor, Tensor)")
      .impl_unboxedOnlyKernel<std::tuple<at::Tensor,at::Tensor>(const at::Tensor &, at::IntArrayRef, at::IntArrayRef, const at::Tensor &), &AtenIpexTypeDefault::fractional_max_pool2d>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::fractional_max_pool2d_backward.grad_input(Tensor grad_output, Tensor self, int[2] kernel_size, int[2] output_size, Tensor indices, *, Tensor(a!) grad_input) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, const at::Tensor &, at::IntArrayRef, at::IntArrayRef, const at::Tensor &), &AtenIpexTypeDefault::fractional_max_pool2d_backward_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::fractional_max_pool2d_backward(Tensor grad_output, Tensor self, int[2] kernel_size, int[2] output_size, Tensor indices) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &, at::IntArrayRef, at::IntArrayRef, const at::Tensor &), &AtenIpexTypeDefault::fractional_max_pool2d_backward>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::fractional_max_pool3d.output(Tensor self, int[3] kernel_size, int[3] output_size, Tensor random_samples, *, Tensor(a!) output, Tensor(b!) indices) -> (Tensor(a!), Tensor(b!))")
      .impl_unboxedOnlyKernel<std::tuple<at::Tensor &,at::Tensor &>(at::Tensor &, at::Tensor &, const at::Tensor &, at::IntArrayRef, at::IntArrayRef, const at::Tensor &), &AtenIpexTypeDefault::fractional_max_pool3d_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::fractional_max_pool3d(Tensor self, int[3] kernel_size, int[3] output_size, Tensor random_samples) -> (Tensor, Tensor)")
      .impl_unboxedOnlyKernel<std::tuple<at::Tensor,at::Tensor>(const at::Tensor &, at::IntArrayRef, at::IntArrayRef, const at::Tensor &), &AtenIpexTypeDefault::fractional_max_pool3d>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::fractional_max_pool3d_backward.grad_input(Tensor grad_output, Tensor self, int[3] kernel_size, int[3] output_size, Tensor indices, *, Tensor(a!) grad_input) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, const at::Tensor &, at::IntArrayRef, at::IntArrayRef, const at::Tensor &), &AtenIpexTypeDefault::fractional_max_pool3d_backward_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::fractional_max_pool3d_backward(Tensor grad_output, Tensor self, int[3] kernel_size, int[3] output_size, Tensor indices) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &, at::IntArrayRef, at::IntArrayRef, const at::Tensor &), &AtenIpexTypeDefault::fractional_max_pool3d_backward>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::max_pool2d_with_indices.out(Tensor self, int[2] kernel_size, int[2] stride=[], int[2] padding=0, int[2] dilation=1, bool ceil_mode=False, *, Tensor(a!) out, Tensor(b!) indices) -> (Tensor(a!), Tensor(b!))")
      .impl_unboxedOnlyKernel<std::tuple<at::Tensor &,at::Tensor &>(at::Tensor &, at::Tensor &, const at::Tensor &, at::IntArrayRef, at::IntArrayRef, at::IntArrayRef, at::IntArrayRef, bool), &AtenIpexTypeDefault::max_pool2d_with_indices_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::max_pool2d_with_indices(Tensor self, int[2] kernel_size, int[2] stride=[], int[2] padding=0, int[2] dilation=1, bool ceil_mode=False) -> (Tensor, Tensor)")
      .impl_unboxedOnlyKernel<std::tuple<at::Tensor,at::Tensor>(const at::Tensor &, at::IntArrayRef, at::IntArrayRef, at::IntArrayRef, at::IntArrayRef, bool), &AtenXlaType::max_pool2d_with_indices>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::max_pool2d_with_indices_backward.grad_input(Tensor grad_output, Tensor self, int[2] kernel_size, int[2] stride, int[2] padding, int[2] dilation, bool ceil_mode, Tensor indices, *, Tensor(a!) grad_input) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, const at::Tensor &, at::IntArrayRef, at::IntArrayRef, at::IntArrayRef, at::IntArrayRef, bool, const at::Tensor &), &AtenIpexTypeDefault::max_pool2d_with_indices_backward_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::max_pool2d_with_indices_backward(Tensor grad_output, Tensor self, int[2] kernel_size, int[2] stride, int[2] padding, int[2] dilation, bool ceil_mode, Tensor indices) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &, at::IntArrayRef, at::IntArrayRef, at::IntArrayRef, at::IntArrayRef, bool, const at::Tensor &), &AtenXlaType::max_pool2d_with_indices_backward>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::max_pool3d_with_indices.out(Tensor self, int[3] kernel_size, int[3] stride=[], int[3] padding=0, int[3] dilation=1, bool ceil_mode=False, *, Tensor(a!) out, Tensor(b!) indices) -> (Tensor(a!), Tensor(b!))")
      .impl_unboxedOnlyKernel<std::tuple<at::Tensor &,at::Tensor &>(at::Tensor &, at::Tensor &, const at::Tensor &, at::IntArrayRef, at::IntArrayRef, at::IntArrayRef, at::IntArrayRef, bool), &AtenIpexTypeDefault::max_pool3d_with_indices_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::max_pool3d_with_indices(Tensor self, int[3] kernel_size, int[3] stride=[], int[3] padding=0, int[3] dilation=1, bool ceil_mode=False) -> (Tensor, Tensor)")
      .impl_unboxedOnlyKernel<std::tuple<at::Tensor,at::Tensor>(const at::Tensor &, at::IntArrayRef, at::IntArrayRef, at::IntArrayRef, at::IntArrayRef, bool), &AtenXlaType::max_pool3d_with_indices>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::max_pool3d_with_indices_backward.grad_input(Tensor grad_output, Tensor self, int[3] kernel_size, int[3] stride, int[3] padding, int[3] dilation, bool ceil_mode, Tensor indices, *, Tensor(a!) grad_input) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, const at::Tensor &, at::IntArrayRef, at::IntArrayRef, at::IntArrayRef, at::IntArrayRef, bool, const at::Tensor &), &AtenIpexTypeDefault::max_pool3d_with_indices_backward_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::max_pool3d_with_indices_backward(Tensor grad_output, Tensor self, int[3] kernel_size, int[3] stride, int[3] padding, int[3] dilation, bool ceil_mode, Tensor indices) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &, at::IntArrayRef, at::IntArrayRef, at::IntArrayRef, at::IntArrayRef, bool, const at::Tensor &), &AtenXlaType::max_pool3d_with_indices_backward>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::max_unpool2d.out(Tensor self, Tensor indices, int[2] output_size, *, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, const at::Tensor &, at::IntArrayRef), &AtenIpexTypeDefault::max_unpool2d_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::max_unpool2d(Tensor self, Tensor indices, int[2] output_size) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &, at::IntArrayRef), &AtenIpexTypeDefault::max_unpool2d>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::max_unpool2d_backward.grad_input(Tensor grad_output, Tensor self, Tensor indices, int[2] output_size, *, Tensor(a!) grad_input) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, const at::Tensor &, const at::Tensor &, at::IntArrayRef), &AtenIpexTypeDefault::max_unpool2d_backward_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::max_unpool2d_backward(Tensor grad_output, Tensor self, Tensor indices, int[2] output_size) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &, const at::Tensor &, at::IntArrayRef), &AtenIpexTypeDefault::max_unpool2d_backward>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::max_unpool3d.out(Tensor self, Tensor indices, int[3] output_size, int[3] stride, int[3] padding, *, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, const at::Tensor &, at::IntArrayRef, at::IntArrayRef, at::IntArrayRef), &AtenIpexTypeDefault::max_unpool3d_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::max_unpool3d(Tensor self, Tensor indices, int[3] output_size, int[3] stride, int[3] padding) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &, at::IntArrayRef, at::IntArrayRef, at::IntArrayRef), &AtenIpexTypeDefault::max_unpool3d>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::max_unpool3d_backward.grad_input(Tensor grad_output, Tensor self, Tensor indices, int[3] output_size, int[3] stride, int[3] padding, *, Tensor(a!) grad_input) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, const at::Tensor &, const at::Tensor &, at::IntArrayRef, at::IntArrayRef, at::IntArrayRef), &AtenIpexTypeDefault::max_unpool3d_backward_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::max_unpool3d_backward(Tensor grad_output, Tensor self, Tensor indices, int[3] output_size, int[3] stride, int[3] padding) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &, const at::Tensor &, at::IntArrayRef, at::IntArrayRef, at::IntArrayRef), &AtenIpexTypeDefault::max_unpool3d_backward>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::reflection_pad1d.out(Tensor self, int[2] padding, *, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, at::IntArrayRef), &AtenIpexTypeDefault::reflection_pad1d_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::reflection_pad1d(Tensor self, int[2] padding) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, at::IntArrayRef), &AtenIpexTypeDefault::reflection_pad1d>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::reflection_pad1d_backward.grad_input(Tensor grad_output, Tensor self, int[2] padding, *, Tensor(a!) grad_input) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, const at::Tensor &, at::IntArrayRef), &AtenIpexTypeDefault::reflection_pad1d_backward_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::reflection_pad1d_backward(Tensor grad_output, Tensor self, int[2] padding) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &, at::IntArrayRef), &AtenIpexTypeDefault::reflection_pad1d_backward>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::reflection_pad2d.out(Tensor self, int[4] padding, *, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, at::IntArrayRef), &AtenIpexTypeDefault::reflection_pad2d_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::reflection_pad2d(Tensor self, int[4] padding) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, at::IntArrayRef), &AtenIpexTypeDefault::reflection_pad2d>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::reflection_pad2d_backward.grad_input(Tensor grad_output, Tensor self, int[4] padding, *, Tensor(a!) grad_input) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, const at::Tensor &, at::IntArrayRef), &AtenIpexTypeDefault::reflection_pad2d_backward_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::reflection_pad2d_backward(Tensor grad_output, Tensor self, int[4] padding) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &, at::IntArrayRef), &AtenIpexTypeDefault::reflection_pad2d_backward>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::replication_pad1d.out(Tensor self, int[2] padding, *, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, at::IntArrayRef), &AtenIpexTypeDefault::replication_pad1d_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::replication_pad1d(Tensor self, int[2] padding) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, at::IntArrayRef), &AtenIpexTypeDefault::replication_pad1d>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::replication_pad1d_backward.grad_input(Tensor grad_output, Tensor self, int[2] padding, *, Tensor(a!) grad_input) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, const at::Tensor &, at::IntArrayRef), &AtenIpexTypeDefault::replication_pad1d_backward_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::replication_pad1d_backward(Tensor grad_output, Tensor self, int[2] padding) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &, at::IntArrayRef), &AtenIpexTypeDefault::replication_pad1d_backward>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::replication_pad2d.out(Tensor self, int[4] padding, *, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, at::IntArrayRef), &AtenIpexTypeDefault::replication_pad2d_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::replication_pad2d(Tensor self, int[4] padding) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, at::IntArrayRef), &AtenIpexTypeDefault::replication_pad2d>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::replication_pad2d_backward.grad_input(Tensor grad_output, Tensor self, int[4] padding, *, Tensor(a!) grad_input) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, const at::Tensor &, at::IntArrayRef), &AtenIpexTypeDefault::replication_pad2d_backward_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::replication_pad2d_backward(Tensor grad_output, Tensor self, int[4] padding) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &, at::IntArrayRef), &AtenIpexTypeDefault::replication_pad2d_backward>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::replication_pad3d.out(Tensor self, int[6] padding, *, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, at::IntArrayRef), &AtenIpexTypeDefault::replication_pad3d_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::replication_pad3d(Tensor self, int[6] padding) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, at::IntArrayRef), &AtenIpexTypeDefault::replication_pad3d>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::replication_pad3d_backward.grad_input(Tensor grad_output, Tensor self, int[6] padding, *, Tensor(a!) grad_input) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, const at::Tensor &, at::IntArrayRef), &AtenIpexTypeDefault::replication_pad3d_backward_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::replication_pad3d_backward(Tensor grad_output, Tensor self, int[6] padding) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &, at::IntArrayRef), &AtenIpexTypeDefault::replication_pad3d_backward>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::upsample_linear1d.out(Tensor self, int[1] output_size, bool align_corners, *, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, at::IntArrayRef, bool), &AtenIpexTypeDefault::upsample_linear1d_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::upsample_linear1d(Tensor self, int[1] output_size, bool align_corners) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, at::IntArrayRef, bool), &AtenIpexTypeDefault::upsample_linear1d>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::upsample_linear1d_backward.grad_input(Tensor grad_output, int[1] output_size, int[3] input_size, bool align_corners, *, Tensor(a!) grad_input) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, at::IntArrayRef, at::IntArrayRef, bool), &AtenIpexTypeDefault::upsample_linear1d_backward_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::upsample_linear1d_backward(Tensor grad_output, int[1] output_size, int[3] input_size, bool align_corners) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, at::IntArrayRef, at::IntArrayRef, bool), &AtenIpexTypeDefault::upsample_linear1d_backward>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::upsample_bilinear2d.out(Tensor self, int[2] output_size, bool align_corners, *, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, at::IntArrayRef, bool), &AtenIpexTypeDefault::upsample_bilinear2d_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::upsample_bilinear2d(Tensor self, int[2] output_size, bool align_corners) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, at::IntArrayRef, bool), &AtenIpexTypeDefault::upsample_bilinear2d>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::upsample_bilinear2d_backward.grad_input(Tensor grad_output, int[2] output_size, int[4] input_size, bool align_corners, *, Tensor(a!) grad_input) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, at::IntArrayRef, at::IntArrayRef, bool), &AtenIpexTypeDefault::upsample_bilinear2d_backward_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::upsample_bilinear2d_backward(Tensor grad_output, int[2] output_size, int[4] input_size, bool align_corners) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, at::IntArrayRef, at::IntArrayRef, bool), &AtenIpexTypeDefault::upsample_bilinear2d_backward>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::upsample_bicubic2d.out(Tensor self, int[2] output_size, bool align_corners, *, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, at::IntArrayRef, bool), &AtenIpexTypeDefault::upsample_bicubic2d_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::upsample_bicubic2d(Tensor self, int[2] output_size, bool align_corners) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, at::IntArrayRef, bool), &AtenIpexTypeDefault::upsample_bicubic2d>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::upsample_bicubic2d_backward.grad_input(Tensor grad_output, int[2] output_size, int[4] input_size, bool align_corners, *, Tensor(a!) grad_input) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, at::IntArrayRef, at::IntArrayRef, bool), &AtenIpexTypeDefault::upsample_bicubic2d_backward_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::upsample_bicubic2d_backward(Tensor grad_output, int[2] output_size, int[4] input_size, bool align_corners) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, at::IntArrayRef, at::IntArrayRef, bool), &AtenIpexTypeDefault::upsample_bicubic2d_backward>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::upsample_trilinear3d.out(Tensor self, int[3] output_size, bool align_corners, *, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, at::IntArrayRef, bool), &AtenIpexTypeDefault::upsample_trilinear3d_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::upsample_trilinear3d(Tensor self, int[3] output_size, bool align_corners) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, at::IntArrayRef, bool), &AtenIpexTypeDefault::upsample_trilinear3d>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::upsample_trilinear3d_backward.grad_input(Tensor grad_output, int[3] output_size, int[5] input_size, bool align_corners, *, Tensor(a!) grad_input) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, at::IntArrayRef, at::IntArrayRef, bool), &AtenIpexTypeDefault::upsample_trilinear3d_backward_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::upsample_trilinear3d_backward(Tensor grad_output, int[3] output_size, int[5] input_size, bool align_corners) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, at::IntArrayRef, at::IntArrayRef, bool), &AtenIpexTypeDefault::upsample_trilinear3d_backward>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::upsample_nearest1d.out(Tensor self, int[1] output_size, *, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, at::IntArrayRef), &AtenIpexTypeDefault::upsample_nearest1d_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::upsample_nearest1d(Tensor self, int[1] output_size) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, at::IntArrayRef), &AtenIpexTypeDefault::upsample_nearest1d>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::upsample_nearest1d_backward.grad_input(Tensor grad_output, int[1] output_size, int[3] input_size, *, Tensor(a!) grad_input) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, at::IntArrayRef, at::IntArrayRef), &AtenIpexTypeDefault::upsample_nearest1d_backward_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::upsample_nearest1d_backward(Tensor grad_output, int[1] output_size, int[3] input_size) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, at::IntArrayRef, at::IntArrayRef), &AtenIpexTypeDefault::upsample_nearest1d_backward>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::upsample_nearest2d.out(Tensor self, int[2] output_size, *, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, at::IntArrayRef), &AtenIpexTypeDefault::upsample_nearest2d_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::upsample_nearest2d(Tensor self, int[2] output_size) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, at::IntArrayRef), &AtenIpexTypeDefault::upsample_nearest2d>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::upsample_nearest2d_backward.grad_input(Tensor grad_output, int[2] output_size, int[4] input_size, *, Tensor(a!) grad_input) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, at::IntArrayRef, at::IntArrayRef), &AtenIpexTypeDefault::upsample_nearest2d_backward_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::upsample_nearest2d_backward(Tensor grad_output, int[2] output_size, int[4] input_size) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, at::IntArrayRef, at::IntArrayRef), &AtenIpexTypeDefault::upsample_nearest2d_backward>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::upsample_nearest3d.out(Tensor self, int[3] output_size, *, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, at::IntArrayRef), &AtenIpexTypeDefault::upsample_nearest3d_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::upsample_nearest3d(Tensor self, int[3] output_size) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, at::IntArrayRef), &AtenIpexTypeDefault::upsample_nearest3d>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::upsample_nearest3d_backward.grad_input(Tensor grad_output, int[3] output_size, int[5] input_size, *, Tensor(a!) grad_input) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, at::IntArrayRef, at::IntArrayRef), &AtenIpexTypeDefault::upsample_nearest3d_backward_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::upsample_nearest3d_backward(Tensor grad_output, int[3] output_size, int[5] input_size) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, at::IntArrayRef, at::IntArrayRef), &AtenIpexTypeDefault::upsample_nearest3d_backward>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::sigmoid_backward.grad_input(Tensor grad_output, Tensor output, *, Tensor(a!) grad_input) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, const at::Tensor &), &AtenIpexTypeDefault::sigmoid_backward_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::sigmoid_backward(Tensor grad_output, Tensor output) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &), &AtenXlaType::sigmoid_backward>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::tanh_backward.grad_input(Tensor grad_output, Tensor output, *, Tensor(a!) grad_input) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, const at::Tensor &), &AtenIpexTypeDefault::tanh_backward_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::tanh_backward(Tensor grad_output, Tensor output) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &), &AtenXlaType::tanh_backward>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::slow_conv_transpose2d.out(Tensor self, Tensor weight, int[2] kernel_size, Tensor? bias=None, int[2] stride=1, int[2] padding=0, int[2] output_padding=0, int[2] dilation=1, *, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, const at::Tensor &, at::IntArrayRef, const at::Tensor &, at::IntArrayRef, at::IntArrayRef, at::IntArrayRef, at::IntArrayRef), &AtenIpexTypeDefault::slow_conv_transpose2d_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::slow_conv_transpose2d(Tensor self, Tensor weight, int[2] kernel_size, Tensor? bias=None, int[2] stride=1, int[2] padding=0, int[2] output_padding=0, int[2] dilation=1) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &, at::IntArrayRef, const at::Tensor &, at::IntArrayRef, at::IntArrayRef, at::IntArrayRef, at::IntArrayRef), &AtenIpexTypeDefault::slow_conv_transpose2d>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::slow_conv_transpose2d_backward.grad_output(Tensor grad_output, Tensor self, Tensor weight, int[2] kernel_size, int[2] stride, int[2] padding, int[2] output_padding, int[2] dilation, Tensor columns, Tensor ones, *, Tensor?(a!) grad_input, Tensor?(b!) grad_weight, Tensor?(c!) grad_bias) -> (Tensor(a!), Tensor(b!), Tensor(c!))")
      .impl_unboxedOnlyKernel<std::tuple<at::Tensor &,at::Tensor &,at::Tensor &>(at::Tensor &, at::Tensor &, at::Tensor &, const at::Tensor &, const at::Tensor &, const at::Tensor &, at::IntArrayRef, at::IntArrayRef, at::IntArrayRef, at::IntArrayRef, at::IntArrayRef, const at::Tensor &, const at::Tensor &), &AtenIpexTypeDefault::slow_conv_transpose2d_backward_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::slow_conv_transpose2d_backward.output_mask(Tensor grad_output, Tensor self, Tensor weight, int[2] kernel_size, int[2] stride, int[2] padding, int[2] output_padding, int[2] dilation, Tensor columns, Tensor ones, bool[3] output_mask) -> (Tensor grad_input, Tensor grad_weight, Tensor grad_bias)")
      .impl_unboxedOnlyKernel<std::tuple<at::Tensor,at::Tensor,at::Tensor>(const at::Tensor &, const at::Tensor &, const at::Tensor &, at::IntArrayRef, at::IntArrayRef, at::IntArrayRef, at::IntArrayRef, at::IntArrayRef, const at::Tensor &, const at::Tensor &, std::array<bool,3>), &AtenIpexTypeDefault::slow_conv_transpose2d_backward>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::slow_conv_transpose3d.out(Tensor self, Tensor weight, int[3] kernel_size, Tensor? bias=None, int[3] stride=1, int[3] padding=0, int[3] output_padding=0, int[3] dilation=1, *, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, const at::Tensor &, at::IntArrayRef, const at::Tensor &, at::IntArrayRef, at::IntArrayRef, at::IntArrayRef, at::IntArrayRef), &AtenIpexTypeDefault::slow_conv_transpose3d_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::slow_conv_transpose3d(Tensor self, Tensor weight, int[3] kernel_size, Tensor? bias=None, int[3] stride=1, int[3] padding=0, int[3] output_padding=0, int[3] dilation=1) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &, at::IntArrayRef, const at::Tensor &, at::IntArrayRef, at::IntArrayRef, at::IntArrayRef, at::IntArrayRef), &AtenIpexTypeDefault::slow_conv_transpose3d>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::slow_conv_transpose3d_backward.grad_output(Tensor grad_output, Tensor self, Tensor weight, int[3] kernel_size, int[3] stride, int[3] padding, int[3] output_padding, int[3] dilation, Tensor finput, Tensor fgrad_input, *, Tensor?(a!) grad_input, Tensor?(b!) grad_weight, Tensor?(c!) grad_bias) -> (Tensor(a!), Tensor(b!), Tensor(c!))")
      .impl_unboxedOnlyKernel<std::tuple<at::Tensor &,at::Tensor &,at::Tensor &>(at::Tensor &, at::Tensor &, at::Tensor &, const at::Tensor &, const at::Tensor &, const at::Tensor &, at::IntArrayRef, at::IntArrayRef, at::IntArrayRef, at::IntArrayRef, at::IntArrayRef, const at::Tensor &, const at::Tensor &), &AtenIpexTypeDefault::slow_conv_transpose3d_backward_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::slow_conv_transpose3d_backward.output_mask(Tensor grad_output, Tensor self, Tensor weight, int[3] kernel_size, int[3] stride, int[3] padding, int[3] output_padding, int[3] dilation, Tensor finput, Tensor fgrad_input, bool[3] output_mask) -> (Tensor grad_input, Tensor grad_weight, Tensor grad_bias)")
      .impl_unboxedOnlyKernel<std::tuple<at::Tensor,at::Tensor,at::Tensor>(const at::Tensor &, const at::Tensor &, const at::Tensor &, at::IntArrayRef, at::IntArrayRef, at::IntArrayRef, at::IntArrayRef, at::IntArrayRef, const at::Tensor &, const at::Tensor &, std::array<bool,3>), &AtenIpexTypeDefault::slow_conv_transpose3d_backward>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::thnn_conv2d.out(Tensor self, Tensor weight, int[2] kernel_size, Tensor? bias=None, int[2] stride=1, int[2] padding=0, *, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, const at::Tensor &, at::IntArrayRef, const at::Tensor &, at::IntArrayRef, at::IntArrayRef), &AtenIpexTypeDefault::thnn_conv2d_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::thnn_conv2d(Tensor self, Tensor weight, int[2] kernel_size, Tensor? bias=None, int[2] stride=1, int[2] padding=0) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &, at::IntArrayRef, const at::Tensor &, at::IntArrayRef, at::IntArrayRef), &AtenIpexTypeDefault::thnn_conv2d>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::thnn_conv2d_forward.output(Tensor self, Tensor weight, int[2] kernel_size, Tensor? bias, int[2] stride, int[2] padding, *, Tensor(a!) output, Tensor(b!) finput, Tensor(c!) fgrad_input) -> (Tensor(a!), Tensor(b!), Tensor(c!))")
      .impl_unboxedOnlyKernel<std::tuple<at::Tensor &,at::Tensor &,at::Tensor &>(at::Tensor &, at::Tensor &, at::Tensor &, const at::Tensor &, const at::Tensor &, at::IntArrayRef, const at::Tensor &, at::IntArrayRef, at::IntArrayRef), &AtenIpexTypeDefault::thnn_conv2d_forward_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::thnn_conv2d_forward(Tensor self, Tensor weight, int[2] kernel_size, Tensor? bias, int[2] stride, int[2] padding) -> (Tensor output, Tensor finput, Tensor fgrad_input)")
      .impl_unboxedOnlyKernel<std::tuple<at::Tensor,at::Tensor,at::Tensor>(const at::Tensor &, const at::Tensor &, at::IntArrayRef, const at::Tensor &, at::IntArrayRef, at::IntArrayRef), &AtenIpexTypeDefault::thnn_conv2d_forward>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::thnn_conv2d_backward.grad_input(Tensor grad_output, Tensor self, Tensor weight, int[2] kernel_size, int[2] stride, int[2] padding, Tensor finput, Tensor fgrad_input, *, Tensor?(a!) grad_input, Tensor?(b!) grad_weight, Tensor?(c!) grad_bias) -> (Tensor(a!), Tensor(b!), Tensor(c!))")
      .impl_unboxedOnlyKernel<std::tuple<at::Tensor &,at::Tensor &,at::Tensor &>(at::Tensor &, at::Tensor &, at::Tensor &, const at::Tensor &, const at::Tensor &, const at::Tensor &, at::IntArrayRef, at::IntArrayRef, at::IntArrayRef, const at::Tensor &, const at::Tensor &), &AtenIpexTypeDefault::thnn_conv2d_backward_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::thnn_conv2d_backward.output_mask(Tensor grad_output, Tensor self, Tensor weight, int[2] kernel_size, int[2] stride, int[2] padding, Tensor finput, Tensor fgrad_input, bool[3] output_mask) -> (Tensor grad_input, Tensor grad_weight, Tensor grad_bias)")
      .impl_unboxedOnlyKernel<std::tuple<at::Tensor,at::Tensor,at::Tensor>(const at::Tensor &, const at::Tensor &, const at::Tensor &, at::IntArrayRef, at::IntArrayRef, at::IntArrayRef, const at::Tensor &, const at::Tensor &, std::array<bool,3>), &AtenIpexTypeDefault::thnn_conv2d_backward>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::thnn_conv_depthwise2d.out(Tensor self, Tensor weight, int[2] kernel_size, Tensor? bias=None, int[2] stride=1, int[2] padding=0, int[2] dilation=1, *, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, const at::Tensor &, at::IntArrayRef, const at::Tensor &, at::IntArrayRef, at::IntArrayRef, at::IntArrayRef), &AtenIpexTypeDefault::thnn_conv_depthwise2d_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::thnn_conv_depthwise2d(Tensor self, Tensor weight, int[2] kernel_size, Tensor? bias=None, int[2] stride=1, int[2] padding=0, int[2] dilation=1) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &, at::IntArrayRef, const at::Tensor &, at::IntArrayRef, at::IntArrayRef, at::IntArrayRef), &AtenIpexTypeDefault::thnn_conv_depthwise2d>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::thnn_conv_depthwise2d_forward.out(Tensor self, Tensor weight, int[2] kernel_size, Tensor? bias, int[2] stride, int[2] padding, int[2] dilation, *, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, const at::Tensor &, at::IntArrayRef, const at::Tensor &, at::IntArrayRef, at::IntArrayRef, at::IntArrayRef), &AtenIpexTypeDefault::thnn_conv_depthwise2d_forward_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::thnn_conv_depthwise2d_forward(Tensor self, Tensor weight, int[2] kernel_size, Tensor? bias, int[2] stride, int[2] padding, int[2] dilation) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &, at::IntArrayRef, const at::Tensor &, at::IntArrayRef, at::IntArrayRef, at::IntArrayRef), &AtenIpexTypeDefault::thnn_conv_depthwise2d_forward>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::thnn_conv_depthwise2d_backward.grad_input(Tensor grad_output, Tensor self, Tensor weight, int[2] kernel_size, int[2] stride, int[2] padding, int[2] dilation, *, Tensor?(a!) grad_input, Tensor?(b!) grad_weight) -> (Tensor(a!), Tensor(b!))")
      .impl_unboxedOnlyKernel<std::tuple<at::Tensor &,at::Tensor &>(at::Tensor &, at::Tensor &, const at::Tensor &, const at::Tensor &, const at::Tensor &, at::IntArrayRef, at::IntArrayRef, at::IntArrayRef, at::IntArrayRef), &AtenIpexTypeDefault::thnn_conv_depthwise2d_backward_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::thnn_conv_depthwise2d_backward.output_mask(Tensor grad_output, Tensor self, Tensor weight, int[2] kernel_size, int[2] stride, int[2] padding, int[2] dilation, bool[2] output_mask) -> (Tensor grad_input, Tensor grad_weight)")
      .impl_unboxedOnlyKernel<std::tuple<at::Tensor,at::Tensor>(const at::Tensor &, const at::Tensor &, const at::Tensor &, at::IntArrayRef, at::IntArrayRef, at::IntArrayRef, at::IntArrayRef, std::array<bool,2>), &AtenIpexTypeDefault::thnn_conv_depthwise2d_backward>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::thnn_conv3d.out(Tensor self, Tensor weight, int[3] kernel_size, Tensor? bias=None, int[3] stride=1, int[3] padding=0, *, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, const at::Tensor &, at::IntArrayRef, const at::Tensor &, at::IntArrayRef, at::IntArrayRef), &AtenIpexTypeDefault::thnn_conv3d_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::thnn_conv3d(Tensor self, Tensor weight, int[3] kernel_size, Tensor? bias=None, int[3] stride=1, int[3] padding=0) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &, at::IntArrayRef, const at::Tensor &, at::IntArrayRef, at::IntArrayRef), &AtenIpexTypeDefault::thnn_conv3d>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::thnn_conv3d_forward.output(Tensor self, Tensor weight, int[3] kernel_size, Tensor? bias, int[3] stride, int[3] padding, *, Tensor(a!) output, Tensor(b!) finput, Tensor(c!) fgrad_input) -> (Tensor(a!), Tensor(b!), Tensor(c!))")
      .impl_unboxedOnlyKernel<std::tuple<at::Tensor &,at::Tensor &,at::Tensor &>(at::Tensor &, at::Tensor &, at::Tensor &, const at::Tensor &, const at::Tensor &, at::IntArrayRef, const at::Tensor &, at::IntArrayRef, at::IntArrayRef), &AtenIpexTypeDefault::thnn_conv3d_forward_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::thnn_conv3d_forward(Tensor self, Tensor weight, int[3] kernel_size, Tensor? bias, int[3] stride, int[3] padding) -> (Tensor output, Tensor finput, Tensor fgrad_input)")
      .impl_unboxedOnlyKernel<std::tuple<at::Tensor,at::Tensor,at::Tensor>(const at::Tensor &, const at::Tensor &, at::IntArrayRef, const at::Tensor &, at::IntArrayRef, at::IntArrayRef), &AtenIpexTypeDefault::thnn_conv3d_forward>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::thnn_conv3d_backward.grad_input(Tensor grad_output, Tensor self, Tensor weight, int[3] kernel_size, int[3] stride, int[3] padding, Tensor finput, Tensor fgrad_input, *, Tensor?(a!) grad_input, Tensor?(b!) grad_weight, Tensor?(c!) grad_bias) -> (Tensor(a!), Tensor(b!), Tensor(c!))")
      .impl_unboxedOnlyKernel<std::tuple<at::Tensor &,at::Tensor &,at::Tensor &>(at::Tensor &, at::Tensor &, at::Tensor &, const at::Tensor &, const at::Tensor &, const at::Tensor &, at::IntArrayRef, at::IntArrayRef, at::IntArrayRef, const at::Tensor &, const at::Tensor &), &AtenIpexTypeDefault::thnn_conv3d_backward_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::thnn_conv3d_backward.output_mask(Tensor grad_output, Tensor self, Tensor weight, int[3] kernel_size, int[3] stride, int[3] padding, Tensor finput, Tensor fgrad_input, bool[3] output_mask) -> (Tensor grad_input, Tensor grad_weight, Tensor grad_bias)")
      .impl_unboxedOnlyKernel<std::tuple<at::Tensor,at::Tensor,at::Tensor>(const at::Tensor &, const at::Tensor &, const at::Tensor &, at::IntArrayRef, at::IntArrayRef, at::IntArrayRef, const at::Tensor &, const at::Tensor &, std::array<bool,3>), &AtenIpexTypeDefault::thnn_conv3d_backward>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::slow_conv_dilated2d(Tensor self, Tensor weight, int[2] kernel_size, Tensor? bias=None, int[2] stride=1, int[2] padding=0, int[2] dilation=1) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &, at::IntArrayRef, const at::Tensor &, at::IntArrayRef, at::IntArrayRef, at::IntArrayRef), &AtenIpexTypeDefault::slow_conv_dilated2d>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::slow_conv_dilated2d_backward(Tensor grad_output, Tensor self, Tensor weight, int[2] kernel_size, int[2] stride, int[2] padding, int[2] dilation, bool[3] output_mask) -> (Tensor grad_input, Tensor grad_weight, Tensor grad_bias)")
      .impl_unboxedOnlyKernel<std::tuple<at::Tensor,at::Tensor,at::Tensor>(const at::Tensor &, const at::Tensor &, const at::Tensor &, at::IntArrayRef, at::IntArrayRef, at::IntArrayRef, at::IntArrayRef, std::array<bool,3>), &AtenIpexTypeDefault::slow_conv_dilated2d_backward>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::slow_conv_dilated3d(Tensor self, Tensor weight, int[3] kernel_size, Tensor? bias=None, int[3] stride=1, int[3] padding=0, int[3] dilation=1) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, const at::Tensor &, at::IntArrayRef, const at::Tensor &, at::IntArrayRef, at::IntArrayRef, at::IntArrayRef), &AtenIpexTypeDefault::slow_conv_dilated3d>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::slow_conv_dilated3d_backward(Tensor grad_output, Tensor self, Tensor weight, int[3] kernel_size, int[3] stride, int[3] padding, int[3] dilation, bool[3] output_mask) -> (Tensor grad_input, Tensor grad_weight, Tensor grad_bias)")
      .impl_unboxedOnlyKernel<std::tuple<at::Tensor,at::Tensor,at::Tensor>(const at::Tensor &, const at::Tensor &, const at::Tensor &, at::IntArrayRef, at::IntArrayRef, at::IntArrayRef, at::IntArrayRef, std::array<bool,3>), &AtenIpexTypeDefault::slow_conv_dilated3d_backward>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::col2im.out(Tensor self, int[2] output_size, int[2] kernel_size, int[2] dilation, int[2] padding, int[2] stride, *, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, at::IntArrayRef, at::IntArrayRef, at::IntArrayRef, at::IntArrayRef, at::IntArrayRef), &AtenIpexTypeDefault::col2im_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::col2im(Tensor self, int[2] output_size, int[2] kernel_size, int[2] dilation, int[2] padding, int[2] stride) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, at::IntArrayRef, at::IntArrayRef, at::IntArrayRef, at::IntArrayRef, at::IntArrayRef), &AtenIpexTypeDefault::col2im>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::col2im_backward.grad_input(Tensor grad_output, int[2] kernel_size, int[2] dilation, int[2] padding, int[2] stride, *, Tensor(a!) grad_input) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, at::IntArrayRef, at::IntArrayRef, at::IntArrayRef, at::IntArrayRef), &AtenIpexTypeDefault::col2im_backward_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::col2im_backward(Tensor grad_output, int[2] kernel_size, int[2] dilation, int[2] padding, int[2] stride) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, at::IntArrayRef, at::IntArrayRef, at::IntArrayRef, at::IntArrayRef), &AtenIpexTypeDefault::col2im_backward>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::im2col.out(Tensor self, int[2] kernel_size, int[2] dilation, int[2] padding, int[2] stride, *, Tensor(a!) out) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, at::IntArrayRef, at::IntArrayRef, at::IntArrayRef, at::IntArrayRef), &AtenIpexTypeDefault::im2col_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::im2col(Tensor self, int[2] kernel_size, int[2] dilation, int[2] padding, int[2] stride) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, at::IntArrayRef, at::IntArrayRef, at::IntArrayRef, at::IntArrayRef), &AtenIpexTypeDefault::im2col>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::im2col_backward.grad_input(Tensor grad_output, int[2] input_size, int[2] kernel_size, int[2] dilation, int[2] padding, int[2] stride, *, Tensor(a!) grad_input) -> Tensor(a!)")
      .impl_unboxedOnlyKernel<at::Tensor &(at::Tensor &, const at::Tensor &, at::IntArrayRef, at::IntArrayRef, at::IntArrayRef, at::IntArrayRef, at::IntArrayRef), &AtenIpexTypeDefault::im2col_backward_out>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options().schema("aten::im2col_backward(Tensor grad_output, int[2] input_size, int[2] kernel_size, int[2] dilation, int[2] padding, int[2] stride) -> Tensor")
      .impl_unboxedOnlyKernel<at::Tensor(const at::Tensor &, at::IntArrayRef, at::IntArrayRef, at::IntArrayRef, at::IntArrayRef, at::IntArrayRef), &AtenIpexTypeDefault::im2col_backward>(at::TensorTypeId::DPCPPTensorId)
      .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
;
}

}  // namespace at

