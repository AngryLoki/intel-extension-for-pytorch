// required for old g++ to compile PRId64 macros, see
// https://github.com/pytorch/pytorch/issues/3571
// for context
#define __STDC_FORMAT_MACROS

#include <ATen/SYCLType.h>

// @generated by aten/src/ATen/gen.py

#include <c10/core/TensorImpl.h>
#include <ATen/SYCLGenerator.h>
#include <c10/core/Allocator.h>
#include <ATen/DeviceGuard.h>
#include <ATen/NativeFunctions.h>
#ifdef BUILD_NAMEDTENSOR
#include <ATen/NamedTensorUtils.h>
#endif
#include <ATen/Utils.h>
#include <ATen/WrapDimUtils.h>
#include <ATen/Dispatch.h>
#include <c10/util/Half.h>
#include <c10/core/TensorImpl.h>
#include <c10/core/UndefinedTensorImpl.h>
#include <c10/util/Optional.h>
#include <ATen/core/ATenDispatch.h>

#include <cstddef>
#include <functional>
#include <memory>
#include <utility>

#include <ATen/Config.h>

#include <ATen/LegacyTHFunctionsSYCL.h>

#include <core/SYCLDevice.h>
#include <core/SYCLContext.h>


namespace at {

/* example
Tensor * SYCLType::add(Tensor & a, Tensor & b) {
  std::cout << "add Tensor with backend SYCL\n";
  return &a;
}
*/

Tensor & SYCLType::abs_(Tensor & self) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_abs__sycl(self);
}
Tensor & SYCLType::abs_out(Tensor & out, const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_abs_out_sycl(out, self);
}
Tensor & SYCLType::acos_(Tensor & self) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_acos__sycl(self);
}
Tensor & SYCLType::acos_out(Tensor & out, const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_acos_out_sycl(out, self);
}
Tensor SYCLType::add(const Tensor & self, const Tensor & other, Scalar alpha) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::add(self, other, alpha);
}
Tensor & SYCLType::add_(Tensor & self, const Tensor & other, Scalar alpha) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::add_(self, other, alpha);
}
Tensor & SYCLType::add_out(Tensor & out, const Tensor & self, const Tensor & other, Scalar alpha) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::add_out(out, self, other, alpha);
}
Tensor SYCLType::addmv(const Tensor & self, const Tensor & mat, const Tensor & vec, Scalar beta, Scalar alpha) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || mat.has_names() || vec.has_names()) {
        AT_ERROR("addmv: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::sycl::_th_addmv(self, mat, vec, beta, alpha);
}
Tensor & SYCLType::addmv_(Tensor & self, const Tensor & mat, const Tensor & vec, Scalar beta, Scalar alpha) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || mat.has_names() || vec.has_names()) {
        AT_ERROR("addmv_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::sycl::_th_addmv_(self, mat, vec, beta, alpha);
}
Tensor & SYCLType::addmv_out(Tensor & out, const Tensor & self, const Tensor & mat, const Tensor & vec, Scalar beta, Scalar alpha) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || self.has_names() || mat.has_names() || vec.has_names()) {
        AT_ERROR("addmv_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::sycl::_th_addmv_out(out, self, mat, vec, beta, alpha);
}
Tensor & SYCLType::arange_out(Tensor & out, Scalar start, Scalar end, Scalar step) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names()) {
        AT_ERROR("arange_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(out));
    return at::native::arange_sycl_out(out, start, end, step);
}
Tensor SYCLType::as_strided(const Tensor & self, IntArrayRef size, IntArrayRef stride, c10::optional<int64_t> storage_offset) {
#ifdef BUILD_NAMEDTENSOR

#endif
    // DeviceGuard omitted
    return at::native::as_strided_tensorimpl(self, size, stride, storage_offset);
}
Tensor & SYCLType::asin_(Tensor & self) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_asin__sycl(self);
}
Tensor & SYCLType::asin_out(Tensor & out, const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_asin_out_sycl(out, self);
}
Tensor & SYCLType::atan_(Tensor & self) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_atan__sycl(self);
}
Tensor & SYCLType::atan_out(Tensor & out, const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_atan_out_sycl(out, self);
}
Tensor SYCLType::baddbmm(const Tensor & self, const Tensor & batch1, const Tensor & batch2, Scalar beta, Scalar alpha) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || batch1.has_names() || batch2.has_names()) {
        AT_ERROR("baddbmm: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::baddbmm_dpcpp(self, batch1, batch2, beta, alpha);
}
Tensor & SYCLType::baddbmm_(Tensor & self, const Tensor & batch1, const Tensor & batch2, Scalar beta, Scalar alpha) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || batch1.has_names() || batch2.has_names()) {
        AT_ERROR("baddbmm_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::baddbmm__dpcpp(self, batch1, batch2, beta, alpha);
}
Tensor & SYCLType::baddbmm_out(Tensor & out, const Tensor & self, const Tensor & batch1, const Tensor & batch2, Scalar beta, Scalar alpha) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || self.has_names() || batch1.has_names() || batch2.has_names()) {
        AT_ERROR("baddbmm_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::baddbmm_out_dpcpp(out, self, batch1, batch2, beta, alpha);
}
Tensor & SYCLType::bernoulli_(Tensor & self, const Tensor & p, Generator * generator) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::bernoulli_tensor_sycl_(self, p, generator);
}
Tensor & SYCLType::bernoulli_(Tensor & self, double p, Generator * generator) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::bernoulli_scalar_sycl_(self, p, generator);
}
Tensor & SYCLType::bitwise_not_out(Tensor & out, const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || self.has_names()) {
        AT_ERROR("bitwise_not_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::bitwise_not_out(out, self);
}
Tensor & SYCLType::logical_not_out(Tensor & out, const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || self.has_names()) {
        AT_ERROR("logical_not_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::logical_not_out(out, self);
}
Tensor SYCLType::bmm(const Tensor & self, const Tensor & mat2) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || mat2.has_names()) {
        AT_ERROR("bmm: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::bmm_dpcpp(self, mat2);
}
Tensor & SYCLType::bmm_out(Tensor & out, const Tensor & self, const Tensor & mat2) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || self.has_names() || mat2.has_names()) {
        AT_ERROR("bmm_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::bmm_out_dpcpp(out, self, mat2);
}
Tensor & SYCLType::ceil_(Tensor & self) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_ceil__sycl(self);
}
Tensor & SYCLType::ceil_out(Tensor & out, const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_ceil_out_sycl(out, self);
}
Tensor & SYCLType::clamp_(Tensor & self, c10::optional<Scalar> min, c10::optional<Scalar> max) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_clamp__sycl(self, min, max);
}
Tensor & SYCLType::clamp_out(Tensor & out, const Tensor & self, c10::optional<Scalar> min, c10::optional<Scalar> max) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_clamp_out_sycl(out, self, min, max);
}
Tensor & SYCLType::clamp_max_(Tensor & self, Scalar max) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_clamp_max__sycl(self, max);
}
Tensor & SYCLType::clamp_max_out(Tensor & out, const Tensor & self, Scalar max) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_clamp_max_out_sycl(out, self, max);
}
Tensor & SYCLType::clamp_min_(Tensor & self, Scalar min) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_clamp_min__sycl(self, min);
}
Tensor & SYCLType::clamp_min_out(Tensor & out, const Tensor & self, Scalar min) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_clamp_min_out_sycl(out, self, min);
}
Tensor & SYCLType::cos_(Tensor & self) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_cos__sycl(self);
}
Tensor & SYCLType::cos_out(Tensor & out, const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_cos_out_sycl(out, self);
}
Tensor & SYCLType::cosh_(Tensor & self) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_cosh__sycl(self);
}
Tensor & SYCLType::cosh_out(Tensor & out, const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_cosh_out_sycl(out, self);
}
Tensor SYCLType::embedding_dense_backward(const Tensor & grad_output, const Tensor & indices, int64_t num_weights, int64_t padding_idx, bool scale_grad_by_freq) {
#ifdef BUILD_NAMEDTENSOR
    if (grad_output.has_names() || indices.has_names()) {
        AT_ERROR("embedding_dense_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(grad_output));
    return at::native::embedding_dense_backward_sycl(grad_output, indices, num_weights, padding_idx, scale_grad_by_freq);
}
std::tuple<Tensor,Tensor,Tensor,Tensor> SYCLType::_embedding_bag(const Tensor & weight, const Tensor & indices, const Tensor & offsets, bool scale_grad_by_freq, int64_t mode, bool sparse, const Tensor & per_sample_weights) {
#ifdef BUILD_NAMEDTENSOR
    if (weight.has_names() || indices.has_names() || offsets.has_names() || per_sample_weights.has_names()) {
        AT_ERROR("_embedding_bag: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(weight));
    return at::native::_embedding_bag_sycl(weight, indices, offsets, scale_grad_by_freq, mode, sparse, per_sample_weights);
}
Tensor SYCLType::empty(IntArrayRef size, const TensorOptions & options, c10::optional<MemoryFormat> memory_format) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const DeviceGuard device_guard(options.device());
    return at::native::empty_sycl(size, options, memory_format);
}
Tensor & SYCLType::resize_(Tensor & self, IntArrayRef size) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("resize_: no named inference rule implemented.");
    }
#endif
    // DeviceGuard omitted
    return at::native::resize_sycl_(self, size);
}
Tensor SYCLType::empty_strided(IntArrayRef size, IntArrayRef stride, const TensorOptions & options) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const DeviceGuard device_guard(options.device());
    return at::native::empty_strided_sycl(size, stride, options);
}
Tensor & SYCLType::erf_(Tensor & self) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_erf__sycl(self);
}
Tensor & SYCLType::erf_out(Tensor & out, const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_erf_out_sycl(out, self);
}
Tensor & SYCLType::erfc_(Tensor & self) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_erfc__sycl(self);
}
Tensor & SYCLType::erfc_out(Tensor & out, const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_erfc_out_sycl(out, self);
}
Tensor & SYCLType::exp_(Tensor & self) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_exp__sycl(self);
}
Tensor & SYCLType::exp_out(Tensor & out, const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_exp_out_sycl(out, self);
}
Tensor & SYCLType::expm1_(Tensor & self) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_expm1__sycl(self);
}
Tensor & SYCLType::expm1_out(Tensor & out, const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_expm1_out_sycl(out, self);
}
Tensor & SYCLType::eye_out(Tensor & out, int64_t n) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names()) {
        AT_ERROR("eye_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(out));
    return at::native::eye_out_sycl(out, n);
}
Tensor & SYCLType::eye_out(Tensor & out, int64_t n, int64_t m) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names()) {
        AT_ERROR("eye_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(out));
    return at::native::eye_out_sycl(out, n, m);
}
Tensor & SYCLType::floor_(Tensor & self) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_floor__sycl(self);
}
Tensor & SYCLType::floor_out(Tensor & out, const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_floor_out_sycl(out, self);
}
Tensor SYCLType::ger(const Tensor & self, const Tensor & vec2) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || vec2.has_names()) {
        AT_ERROR("ger: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::sycl::_th_ger(self, vec2);
}
Tensor & SYCLType::ger_out(Tensor & out, const Tensor & self, const Tensor & vec2) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || self.has_names() || vec2.has_names()) {
        AT_ERROR("ger_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::sycl::_th_ger_out(out, self, vec2);
}
Tensor & SYCLType::linspace_out(Tensor & out, Scalar start, Scalar end, int64_t steps) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names()) {
        AT_ERROR("linspace_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(out));
    return at::native::linspace_sycl_out(out, start, end, steps);
}
Tensor & SYCLType::log_(Tensor & self) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_log__sycl(self);
}
Tensor & SYCLType::log_out(Tensor & out, const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_log_out_sycl(out, self);
}
Tensor & SYCLType::log10_(Tensor & self) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_log10__sycl(self);
}
Tensor & SYCLType::log10_out(Tensor & out, const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_log10_out_sycl(out, self);
}
Tensor & SYCLType::log1p_(Tensor & self) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_log1p__sycl(self);
}
Tensor & SYCLType::log1p_out(Tensor & out, const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_log1p_out_sycl(out, self);
}
Tensor & SYCLType::log2_(Tensor & self) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_log2__sycl(self);
}
Tensor & SYCLType::log2_out(Tensor & out, const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_log2_out_sycl(out, self);
}
Tensor & SYCLType::logspace_out(Tensor & out, Scalar start, Scalar end, int64_t steps, double base) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names()) {
        AT_ERROR("logspace_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(out));
    return at::native::logspace_sycl_out(out, start, end, steps, base);
}
Tensor SYCLType::_log_softmax(const Tensor & self, int64_t dim, bool half_to_float) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::log_softmax_sycl(self, dim, half_to_float);
}
Tensor SYCLType::_log_softmax_backward_data(const Tensor & grad_output, const Tensor & output, int64_t dim, const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR
    if (grad_output.has_names() || output.has_names() || self.has_names()) {
        AT_ERROR("_log_softmax_backward_data: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::log_softmax_backward_sycl(grad_output, output, dim, self);
}
Tensor SYCLType::mm(const Tensor & self, const Tensor & mat2) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || mat2.has_names()) {
        AT_ERROR("mm: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::sycl::_th_mm(self, mat2);
}
Tensor & SYCLType::mm_out(Tensor & out, const Tensor & self, const Tensor & mat2) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || self.has_names() || mat2.has_names()) {
        AT_ERROR("mm_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::sycl::_th_mm_out(out, self, mat2);
}
Tensor SYCLType::mul(const Tensor & self, const Tensor & other) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::mul(self, other);
}
Tensor & SYCLType::mul_(Tensor & self, const Tensor & other) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::mul_(self, other);
}
Tensor & SYCLType::mul_out(Tensor & out, const Tensor & self, const Tensor & other) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::mul_out(out, self, other);
}
Tensor SYCLType::mv(const Tensor & self, const Tensor & vec) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || vec.has_names()) {
        AT_ERROR("mv: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::sycl::_th_mv(self, vec);
}
Tensor & SYCLType::mv_out(Tensor & out, const Tensor & self, const Tensor & vec) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || self.has_names() || vec.has_names()) {
        AT_ERROR("mv_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::sycl::_th_mv_out(out, self, vec);
}
Tensor SYCLType::narrow_copy(const Tensor & self, int64_t dim, int64_t start, int64_t length) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("narrow_copy: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::narrow_copy_dense(self, dim, start, length);
}
std::tuple<Tensor,Tensor,Tensor> SYCLType::native_batch_norm(const Tensor & input, const Tensor & weight, const Tensor & bias, const Tensor & running_mean, const Tensor & running_var, bool training, double momentum, double eps) {
#ifdef BUILD_NAMEDTENSOR
    if (input.has_names() || weight.has_names() || bias.has_names() || running_mean.has_names() || running_var.has_names()) {
        AT_ERROR("native_batch_norm: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::sycl_batch_norm(input, weight, bias, running_mean, running_var, training, momentum, eps);
}
std::tuple<Tensor,Tensor,Tensor> SYCLType::native_batch_norm_backward(const Tensor & grad_out, const Tensor & input, const Tensor & weight, const Tensor & running_mean, const Tensor & running_var, const Tensor & save_mean, const Tensor & save_invstd, bool train, double eps, std::array<bool,3> output_mask) {
#ifdef BUILD_NAMEDTENSOR
    if (grad_out.has_names() || input.has_names() || weight.has_names() || running_mean.has_names() || running_var.has_names() || save_mean.has_names() || save_invstd.has_names()) {
        AT_ERROR("native_batch_norm_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(grad_out));
    return at::native::sycl_batch_norm_backward(grad_out, input, weight, running_mean, running_var, save_mean, save_invstd, train, eps, output_mask);
}
Tensor & SYCLType::range_out(Tensor & out, Scalar start, Scalar end, Scalar step) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names()) {
        AT_ERROR("range_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(out));
    return at::native::range_sycl_out(out, start, end, step);
}
Tensor & SYCLType::neg_out(Tensor & out, const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::neg_out(out, self);
}
Tensor SYCLType::repeat_interleave(const Tensor & repeats) {
#ifdef BUILD_NAMEDTENSOR
    if (repeats.has_names()) {
        AT_ERROR("repeat_interleave: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(repeats));
    return at::native::repeat_interleave_dpcpp(repeats);
}
Tensor & SYCLType::round_(Tensor & self) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_round__sycl(self);
}
Tensor & SYCLType::round_out(Tensor & out, const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_round_out_sycl(out, self);
}
Tensor SYCLType::relu(const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("relu: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::relu(self);
}
Tensor & SYCLType::relu_(Tensor & self) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::relu_(self);
}
Tensor & SYCLType::rsqrt_(Tensor & self) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_rsqrt__sycl(self);
}
Tensor & SYCLType::rsqrt_out(Tensor & out, const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_rsqrt_out_sycl(out, self);
}
Tensor SYCLType::sigmoid(const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::sigmoid(self);
}
Tensor & SYCLType::sigmoid_out(Tensor & out, const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_sigmoid_out_sycl(out, self);
}
Tensor & SYCLType::sin_(Tensor & self) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_sin__sycl(self);
}
Tensor & SYCLType::sin_out(Tensor & out, const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_sin_out_sycl(out, self);
}
Tensor & SYCLType::sinh_(Tensor & self) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_sinh__sycl(self);
}
Tensor & SYCLType::sinh_out(Tensor & out, const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_sinh_out_sycl(out, self);
}
Tensor SYCLType::_softmax(const Tensor & self, int64_t dim, bool half_to_float) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::softmax_sycl(self, dim, half_to_float);
}
Tensor SYCLType::_softmax_backward_data(const Tensor & grad_output, const Tensor & output, int64_t dim, const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR
    if (grad_output.has_names() || output.has_names() || self.has_names()) {
        AT_ERROR("_softmax_backward_data: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::softmax_backward_sycl(grad_output, output, dim, self);
}
Tensor & SYCLType::sqrt_(Tensor & self) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_sqrt__sycl(self);
}
Tensor & SYCLType::sqrt_out(Tensor & out, const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_sqrt_out_sycl(out, self);
}
Tensor & SYCLType::tan_(Tensor & self) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_tan__sycl(self);
}
Tensor & SYCLType::tan_out(Tensor & out, const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_tan_out_sycl(out, self);
}
Tensor & SYCLType::tanh_(Tensor & self) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_tanh__sycl(self);
}
Tensor & SYCLType::tanh_out(Tensor & out, const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_tanh_out_sycl(out, self);
}
Tensor SYCLType::roll(const Tensor & self, IntArrayRef shifts, IntArrayRef dims) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("roll: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::roll_sycl(self, shifts, dims);
}
Tensor & SYCLType::trunc_(Tensor & self) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_trunc__sycl(self);
}
Tensor & SYCLType::trunc_out(Tensor & out, const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_trunc_out_sycl(out, self);
}
Tensor SYCLType::_s_where(const Tensor & condition, const Tensor & self, const Tensor & other) {
#ifdef BUILD_NAMEDTENSOR
    if (condition.has_names() || self.has_names() || other.has_names()) {
        AT_ERROR("_s_where: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_s_where_sycl(condition, self, other);
}
Tensor SYCLType::clone(const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::clone(self);
}
Tensor & SYCLType::resize_as_(Tensor & self, const Tensor & the_template) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || the_template.has_names()) {
        AT_ERROR("resize_as_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::resize_as_sycl_(self, the_template);
}
Tensor & SYCLType::pow_out(Tensor & out, const Tensor & self, Scalar exponent) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || self.has_names()) {
        AT_ERROR("pow_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::sycl::_th_pow_out(out, self, exponent);
}
Tensor SYCLType::pow(const Tensor & self, Scalar exponent) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("pow: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::sycl::_th_pow(self, exponent);
}
Tensor & SYCLType::zero_(Tensor & self) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::sycl::_th_zero_(self);
}
Scalar SYCLType::_local_scalar_dense(const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_local_scalar_dense_sycl(self);
}
Tensor & SYCLType::set_(Tensor & self, Storage source) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("set_: no named inference rule implemented.");
    }
#endif
    // DeviceGuard omitted
    return at::native::legacy::sycl::_th_set_(self, source);
}
Tensor & SYCLType::set_(Tensor & self, Storage source, int64_t storage_offset, IntArrayRef size, IntArrayRef stride) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("set_: no named inference rule implemented.");
    }
#endif
    // DeviceGuard omitted
    return at::native::legacy::sycl::_th_set_(self, source, storage_offset, size, stride);
}
Tensor & SYCLType::set_(Tensor & self, const Tensor & source) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || source.has_names()) {
        AT_ERROR("set_: no named inference rule implemented.");
    }
#endif
    // DeviceGuard omitted
    return at::native::legacy::sycl::_th_set_(self, source);
}
Tensor & SYCLType::set_(Tensor & self) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("set_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::sycl::_th_set_(self);
}
bool SYCLType::is_set_to(const Tensor & self, const Tensor & tensor) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || tensor.has_names()) {
        AT_ERROR("is_set_to: no named inference rule implemented.");
    }
#endif
    // DeviceGuard omitted
    return at::native::legacy::sycl::_th_is_set_to(self, tensor);
}
Tensor & SYCLType::masked_fill_(Tensor & self, const Tensor & mask, Scalar value) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || mask.has_names()) {
        AT_ERROR("masked_fill_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::masked_fill__sycl(self, mask, value);
}
Tensor & SYCLType::masked_fill_(Tensor & self, const Tensor & mask, const Tensor & value) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || mask.has_names() || value.has_names()) {
        AT_ERROR("masked_fill_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::masked_fill__sycl(self, mask, value);
}
Tensor & SYCLType::masked_scatter_(Tensor & self, const Tensor & mask, const Tensor & source) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || mask.has_names() || source.has_names()) {
        AT_ERROR("masked_scatter_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::masked_scatter__sycl(self, mask, source);
}
Tensor SYCLType::view(const Tensor & self, IntArrayRef size) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("view: no named inference rule implemented.");
    }
#endif
    // DeviceGuard omitted
    return at::native::view(self, size);
}
Tensor & SYCLType::index_add_(Tensor & self, int64_t dim, const Tensor & index, const Tensor & source) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || index.has_names() || source.has_names()) {
        AT_ERROR("index_add_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::sycl::_th_index_add_(self, dim, index, source);
}
Tensor & SYCLType::index_fill_(Tensor & self, int64_t dim, const Tensor & index, Scalar value) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || index.has_names()) {
        AT_ERROR("index_fill_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::sycl::_th_index_fill_(self, dim, index, value);
}
Tensor & SYCLType::index_fill_(Tensor & self, int64_t dim, const Tensor & index, const Tensor & value) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || index.has_names() || value.has_names()) {
        AT_ERROR("index_fill_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::sycl::_th_index_fill_(self, dim, index, value);
}
Tensor & SYCLType::scatter_(Tensor & self, int64_t dim, const Tensor & index, const Tensor & src) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || index.has_names() || src.has_names()) {
        AT_ERROR("scatter_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::sycl::_th_scatter_(self, dim, index, src);
}
Tensor & SYCLType::scatter_(Tensor & self, int64_t dim, const Tensor & index, Scalar value) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || index.has_names()) {
        AT_ERROR("scatter_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::sycl::_th_scatter_(self, dim, index, value);
}
Tensor & SYCLType::scatter_add_(Tensor & self, int64_t dim, const Tensor & index, const Tensor & src) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || index.has_names() || src.has_names()) {
        AT_ERROR("scatter_add_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::sycl::_th_scatter_add_(self, dim, index, src);
}
Tensor & SYCLType::lt_(Tensor & self, Scalar other) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("lt_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::sycl::_th_lt_(self, other);
}
Tensor & SYCLType::lt_(Tensor & self, const Tensor & other) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || other.has_names()) {
        AT_ERROR("lt_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::sycl::_th_lt_(self, other);
}
Tensor & SYCLType::gt_(Tensor & self, Scalar other) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("gt_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::sycl::_th_gt_(self, other);
}
Tensor & SYCLType::gt_(Tensor & self, const Tensor & other) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || other.has_names()) {
        AT_ERROR("gt_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::sycl::_th_gt_(self, other);
}
Tensor & SYCLType::le_(Tensor & self, Scalar other) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("le_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::sycl::_th_le_(self, other);
}
Tensor & SYCLType::le_(Tensor & self, const Tensor & other) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || other.has_names()) {
        AT_ERROR("le_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::sycl::_th_le_(self, other);
}
Tensor & SYCLType::ge_(Tensor & self, Scalar other) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("ge_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::sycl::_th_ge_(self, other);
}
Tensor & SYCLType::ge_(Tensor & self, const Tensor & other) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || other.has_names()) {
        AT_ERROR("ge_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::sycl::_th_ge_(self, other);
}
Tensor & SYCLType::eq_(Tensor & self, Scalar other) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("eq_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::sycl::_th_eq_(self, other);
}
Tensor & SYCLType::eq_(Tensor & self, const Tensor & other) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || other.has_names()) {
        AT_ERROR("eq_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::sycl::_th_eq_(self, other);
}
Tensor & SYCLType::ne_(Tensor & self, Scalar other) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("ne_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::sycl::_th_ne_(self, other);
}
Tensor & SYCLType::ne_(Tensor & self, const Tensor & other) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || other.has_names()) {
        AT_ERROR("ne_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::sycl::_th_ne_(self, other);
}
Tensor SYCLType::__and__(const Tensor & self, Scalar other) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("__and__: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::sycl::_th_and(self, other);
}
Tensor SYCLType::__and__(const Tensor & self, const Tensor & other) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || other.has_names()) {
        AT_ERROR("__and__: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::sycl::_th_and(self, other);
}
Tensor & SYCLType::__iand__(Tensor & self, Scalar other) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("__iand__: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::sycl::_th_iand_(self, other);
}
Tensor & SYCLType::__iand__(Tensor & self, const Tensor & other) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || other.has_names()) {
        AT_ERROR("__iand__: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::sycl::_th_iand_(self, other);
}
Tensor SYCLType::__or__(const Tensor & self, Scalar other) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("__or__: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::sycl::_th_or(self, other);
}
Tensor SYCLType::__or__(const Tensor & self, const Tensor & other) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || other.has_names()) {
        AT_ERROR("__or__: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::sycl::_th_or(self, other);
}
Tensor & SYCLType::__ior__(Tensor & self, Scalar other) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("__ior__: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::sycl::_th_ior_(self, other);
}
Tensor & SYCLType::__ior__(Tensor & self, const Tensor & other) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || other.has_names()) {
        AT_ERROR("__ior__: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::sycl::_th_ior_(self, other);
}
Tensor SYCLType::__xor__(const Tensor & self, Scalar other) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("__xor__: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::sycl::_th_xor(self, other);
}
Tensor SYCLType::__xor__(const Tensor & self, const Tensor & other) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || other.has_names()) {
        AT_ERROR("__xor__: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::sycl::_th_xor(self, other);
}
Tensor & SYCLType::__ixor__(Tensor & self, Scalar other) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("__ixor__: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::sycl::_th_ixor_(self, other);
}
Tensor & SYCLType::__ixor__(Tensor & self, const Tensor & other) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || other.has_names()) {
        AT_ERROR("__ixor__: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::sycl::_th_ixor_(self, other);
}
Tensor SYCLType::__lshift__(const Tensor & self, Scalar other) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("__lshift__: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::sycl::_th_lshift(self, other);
}
Tensor SYCLType::__lshift__(const Tensor & self, const Tensor & other) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || other.has_names()) {
        AT_ERROR("__lshift__: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::sycl::_th_lshift(self, other);
}
Tensor & SYCLType::__ilshift__(Tensor & self, Scalar other) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("__ilshift__: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::sycl::_th_ilshift_(self, other);
}
Tensor & SYCLType::__ilshift__(Tensor & self, const Tensor & other) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || other.has_names()) {
        AT_ERROR("__ilshift__: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::sycl::_th_ilshift_(self, other);
}
Tensor SYCLType::__rshift__(const Tensor & self, Scalar other) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("__rshift__: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::sycl::_th_rshift(self, other);
}
Tensor SYCLType::__rshift__(const Tensor & self, const Tensor & other) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || other.has_names()) {
        AT_ERROR("__rshift__: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::sycl::_th_rshift(self, other);
}
Tensor & SYCLType::__irshift__(Tensor & self, Scalar other) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("__irshift__: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::sycl::_th_irshift_(self, other);
}
Tensor & SYCLType::__irshift__(Tensor & self, const Tensor & other) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || other.has_names()) {
        AT_ERROR("__irshift__: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::sycl::_th_irshift_(self, other);
}
Tensor & SYCLType::tril_(Tensor & self, int64_t diagonal) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("tril_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::tril_sycl_(self, diagonal);
}
Tensor & SYCLType::triu_(Tensor & self, int64_t diagonal) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("triu_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::triu_sycl_(self, diagonal);
}
Tensor & SYCLType::digamma_(Tensor & self) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::sycl::_th_digamma_(self);
}
Tensor & SYCLType::erfinv_(Tensor & self) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::sycl::_th_erfinv_(self);
}
Tensor & SYCLType::pow_(Tensor & self, Scalar exponent) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("pow_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::sycl::_th_pow_(self, exponent);
}
Tensor & SYCLType::pow_(Tensor & self, const Tensor & exponent) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || exponent.has_names()) {
        AT_ERROR("pow_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::sycl::_th_pow_(self, exponent);
}
Tensor & SYCLType::sign_(Tensor & self) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::sycl::_th_sign_(self);
}
Tensor & SYCLType::fmod_(Tensor & self, Scalar other) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("fmod_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::sycl::_th_fmod_(self, other);
}
Tensor & SYCLType::fmod_(Tensor & self, const Tensor & other) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || other.has_names()) {
        AT_ERROR("fmod_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::sycl::_th_fmod_(self, other);
}
Tensor & SYCLType::remainder_(Tensor & self, Scalar other) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("remainder_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::sycl::_th_remainder_(self, other);
}
Tensor & SYCLType::remainder_(Tensor & self, const Tensor & other) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || other.has_names()) {
        AT_ERROR("remainder_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::sycl::_th_remainder_(self, other);
}
Tensor & SYCLType::addbmm_(Tensor & self, const Tensor & batch1, const Tensor & batch2, Scalar beta, Scalar alpha) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || batch1.has_names() || batch2.has_names()) {
        AT_ERROR("addbmm_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::sycl::_th_addbmm_(self, batch1, batch2, beta, alpha);
}
Tensor & SYCLType::addbmm_out(Tensor & out, const Tensor & self, const Tensor & batch1, const Tensor & batch2, Scalar beta, Scalar alpha) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || self.has_names() || batch1.has_names() || batch2.has_names()) {
        AT_ERROR("addbmm_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::sycl::_th_addbmm_out(out, self, batch1, batch2, beta, alpha);
}
Tensor SYCLType::addbmm(const Tensor & self, const Tensor & batch1, const Tensor & batch2, Scalar beta, Scalar alpha) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || batch1.has_names() || batch2.has_names()) {
        AT_ERROR("addbmm: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::sycl::_th_addbmm(self, batch1, batch2, beta, alpha);
}
Tensor & SYCLType::normal_(Tensor & self, double mean, double std, Generator * generator) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::sycl::_th_normal_(self, mean, std, generator);
}
Tensor & SYCLType::diag_out(Tensor & out, const Tensor & self, int64_t diagonal) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || self.has_names()) {
        AT_ERROR("diag_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::sycl::_th_diag_out(out, self, diagonal);
}
Tensor SYCLType::diag(const Tensor & self, int64_t diagonal) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("diag: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::sycl::_th_diag(self, diagonal);
}
Tensor & SYCLType::triu_out(Tensor & out, const Tensor & self, int64_t diagonal) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || self.has_names()) {
        AT_ERROR("triu_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::triu_sycl_out(out, self, diagonal);
}
Tensor & SYCLType::tril_out(Tensor & out, const Tensor & self, int64_t diagonal) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || self.has_names()) {
        AT_ERROR("tril_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::tril_sycl_out(out, self, diagonal);
}
Tensor SYCLType::tril_indices(int64_t row, int64_t col, int64_t offset, const TensorOptions & options) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const DeviceGuard device_guard(options.device());
    return at::native::tril_indices_sycl(row, col, offset, options);
}
Tensor SYCLType::triu_indices(int64_t row, int64_t col, int64_t offset, const TensorOptions & options) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const DeviceGuard device_guard(options.device());
    return at::native::triu_indices_sycl(row, col, offset, options);
}
Tensor SYCLType::trace(const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("trace: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::sycl::_th_trace(self);
}
Tensor & SYCLType::ne_out(Tensor & out, const Tensor & self, Scalar other) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || self.has_names()) {
        AT_ERROR("ne_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::ne_scalar_out_sycl(out, self, other);
}
Tensor SYCLType::ne(const Tensor & self, Scalar other) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("ne: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::sycl::_th_ne(self, other);
}
Tensor & SYCLType::ne_out(Tensor & out, const Tensor & self, const Tensor & other) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || self.has_names() || other.has_names()) {
        AT_ERROR("ne_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::ne_out_sycl(out, self, other);
}
Tensor SYCLType::ne(const Tensor & self, const Tensor & other) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || other.has_names()) {
        AT_ERROR("ne: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::sycl::_th_ne(self, other);
}
Tensor & SYCLType::eq_out(Tensor & out, const Tensor & self, Scalar other) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || self.has_names()) {
        AT_ERROR("eq_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::eq_scalar_out_sycl(out, self, other);
}
Tensor SYCLType::eq(const Tensor & self, Scalar other) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("eq: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::sycl::_th_eq(self, other);
}
Tensor & SYCLType::eq_out(Tensor & out, const Tensor & self, const Tensor & other) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || self.has_names() || other.has_names()) {
        AT_ERROR("eq_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::eq_out_sycl(out, self, other);
}
Tensor SYCLType::eq(const Tensor & self, const Tensor & other) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || other.has_names()) {
        AT_ERROR("eq: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::sycl::_th_eq(self, other);
}
Tensor & SYCLType::ge_out(Tensor & out, const Tensor & self, Scalar other) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || self.has_names()) {
        AT_ERROR("ge_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::ge_scalar_out_sycl(out, self, other);
}
Tensor SYCLType::ge(const Tensor & self, Scalar other) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("ge: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::sycl::_th_ge(self, other);
}
Tensor & SYCLType::ge_out(Tensor & out, const Tensor & self, const Tensor & other) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || self.has_names() || other.has_names()) {
        AT_ERROR("ge_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::ge_out_sycl(out, self, other);
}
Tensor SYCLType::ge(const Tensor & self, const Tensor & other) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || other.has_names()) {
        AT_ERROR("ge: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::sycl::_th_ge(self, other);
}
Tensor & SYCLType::le_out(Tensor & out, const Tensor & self, Scalar other) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || self.has_names()) {
        AT_ERROR("le_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::le_scalar_out_sycl(out, self, other);
}
Tensor SYCLType::le(const Tensor & self, Scalar other) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("le: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::sycl::_th_le(self, other);
}
Tensor & SYCLType::le_out(Tensor & out, const Tensor & self, const Tensor & other) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || self.has_names() || other.has_names()) {
        AT_ERROR("le_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::le_out_sycl(out, self, other);
}
Tensor SYCLType::le(const Tensor & self, const Tensor & other) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || other.has_names()) {
        AT_ERROR("le: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::sycl::_th_le(self, other);
}
Tensor & SYCLType::gt_out(Tensor & out, const Tensor & self, Scalar other) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || self.has_names()) {
        AT_ERROR("gt_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::gt_scalar_out_sycl(out, self, other);
}
Tensor SYCLType::gt(const Tensor & self, Scalar other) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("gt: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::sycl::_th_gt(self, other);
}
Tensor & SYCLType::gt_out(Tensor & out, const Tensor & self, const Tensor & other) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || self.has_names() || other.has_names()) {
        AT_ERROR("gt_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::gt_out_sycl(out, self, other);
}
Tensor SYCLType::gt(const Tensor & self, const Tensor & other) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || other.has_names()) {
        AT_ERROR("gt: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::sycl::_th_gt(self, other);
}
Tensor & SYCLType::lt_out(Tensor & out, const Tensor & self, Scalar other) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || self.has_names()) {
        AT_ERROR("lt_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::lt_scalar_out_sycl(out, self, other);
}
Tensor SYCLType::lt(const Tensor & self, Scalar other) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("lt: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::sycl::_th_lt(self, other);
}
Tensor & SYCLType::lt_out(Tensor & out, const Tensor & self, const Tensor & other) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || self.has_names() || other.has_names()) {
        AT_ERROR("lt_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::lt_out_sycl(out, self, other);
}
Tensor SYCLType::lt(const Tensor & self, const Tensor & other) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || other.has_names()) {
        AT_ERROR("lt: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::sycl::_th_lt(self, other);
}
Tensor & SYCLType::take_out(Tensor & out, const Tensor & self, const Tensor & index) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || self.has_names() || index.has_names()) {
        AT_ERROR("take_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::sycl::_th_take_out(out, self, index);
}
Tensor SYCLType::take(const Tensor & self, const Tensor & index) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || index.has_names()) {
        AT_ERROR("take: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::sycl::_th_take(self, index);
}
Tensor & SYCLType::index_select_out(Tensor & out, const Tensor & self, int64_t dim, const Tensor & index) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || self.has_names() || index.has_names()) {
        AT_ERROR("index_select_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::sycl::_th_index_select_out(out, self, dim, index);
}
Tensor SYCLType::index_select(const Tensor & self, int64_t dim, const Tensor & index) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || index.has_names()) {
        AT_ERROR("index_select: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::sycl::_th_index_select(self, dim, index);
}
Tensor & SYCLType::masked_select_out(Tensor & out, const Tensor & self, const Tensor & mask) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || self.has_names() || mask.has_names()) {
        AT_ERROR("masked_select_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::masked_select_out_sycl(out, self, mask);
}
Tensor SYCLType::masked_select(const Tensor & self, const Tensor & mask) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || mask.has_names()) {
        AT_ERROR("masked_select: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::masked_select_sycl(self, mask);
}
Tensor & SYCLType::nonzero_out(Tensor & out, const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || self.has_names()) {
        AT_ERROR("nonzero_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::sycl::_th_nonzero_out(out, self);
}
Tensor SYCLType::nonzero(const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("nonzero: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::sycl::_th_nonzero(self);
}
Tensor & SYCLType::gather_out(Tensor & out, const Tensor & self, int64_t dim, const Tensor & index, bool sparse_grad) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || self.has_names() || index.has_names()) {
        AT_ERROR("gather_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::gather_out_sycl(out, self, dim, index, sparse_grad);
}
Tensor SYCLType::gather(const Tensor & self, int64_t dim, const Tensor & index, bool sparse_grad) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || index.has_names()) {
        AT_ERROR("gather: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::gather_sycl(self, dim, index, sparse_grad);
}
Tensor SYCLType::digamma(const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::sycl::_th_digamma(self);
}
Tensor & SYCLType::erfinv_out(Tensor & out, const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::sycl::_th_erfinv_out(out, self);
}
Tensor SYCLType::erfinv(const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::sycl::_th_erfinv(self);
}
Tensor & SYCLType::sign_out(Tensor & out, const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::sycl::_th_sign_out(out, self);
}
Tensor SYCLType::sign(const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR

#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::sycl::_th_sign(self);
}
Tensor & SYCLType::fmod_out(Tensor & out, const Tensor & self, Scalar other) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || self.has_names()) {
        AT_ERROR("fmod_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::sycl::_th_fmod_out(out, self, other);
}
Tensor SYCLType::fmod(const Tensor & self, Scalar other) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("fmod: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::sycl::_th_fmod(self, other);
}
Tensor & SYCLType::fmod_out(Tensor & out, const Tensor & self, const Tensor & other) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || self.has_names() || other.has_names()) {
        AT_ERROR("fmod_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::sycl::_th_fmod_out(out, self, other);
}
Tensor SYCLType::fmod(const Tensor & self, const Tensor & other) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || other.has_names()) {
        AT_ERROR("fmod: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::sycl::_th_fmod(self, other);
}
Tensor & SYCLType::remainder_out(Tensor & out, const Tensor & self, Scalar other) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || self.has_names()) {
        AT_ERROR("remainder_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::sycl::_th_remainder_out(out, self, other);
}
Tensor SYCLType::remainder(const Tensor & self, Scalar other) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("remainder: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::sycl::_th_remainder(self, other);
}
Tensor & SYCLType::remainder_out(Tensor & out, const Tensor & self, const Tensor & other) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || self.has_names() || other.has_names()) {
        AT_ERROR("remainder_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::sycl::_th_remainder_out(out, self, other);
}
Tensor SYCLType::remainder(const Tensor & self, const Tensor & other) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || other.has_names()) {
        AT_ERROR("remainder: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::sycl::_th_remainder(self, other);
}
Tensor & SYCLType::min_out(Tensor & out, const Tensor & self, const Tensor & other) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || self.has_names() || other.has_names()) {
        AT_ERROR("min_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::sycl::_th_min_out(out, self, other);
}
Tensor SYCLType::min(const Tensor & self, const Tensor & other) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || other.has_names()) {
        AT_ERROR("min: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::sycl::_th_min(self, other);
}
Tensor SYCLType::min(const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("min: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::sycl::_th_min(self);
}
Tensor & SYCLType::max_out(Tensor & out, const Tensor & self, const Tensor & other) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || self.has_names() || other.has_names()) {
        AT_ERROR("max_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::sycl::_th_max_out(out, self, other);
}
Tensor SYCLType::max(const Tensor & self, const Tensor & other) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || other.has_names()) {
        AT_ERROR("max: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::sycl::_th_max(self, other);
}
Tensor SYCLType::max(const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("max: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::sycl::_th_max(self);
}
Tensor SYCLType::median(const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("median: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::median_sycl(self);
}
std::tuple<Tensor &,Tensor &> SYCLType::sort_out(Tensor & values, Tensor & indices, const Tensor & self, int64_t dim, bool descending) {
#ifdef BUILD_NAMEDTENSOR
    if (values.has_names() || indices.has_names() || self.has_names()) {
        AT_ERROR("sort_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::sycl::_th_sort_out(values, indices, self, dim, descending);
}
std::tuple<Tensor,Tensor> SYCLType::sort(const Tensor & self, int64_t dim, bool descending) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("sort: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::sycl::_th_sort(self, dim, descending);
}
std::tuple<Tensor &,Tensor &> SYCLType::topk_out(Tensor & values, Tensor & indices, const Tensor & self, int64_t k, int64_t dim, bool largest, bool sorted) {
#ifdef BUILD_NAMEDTENSOR
    if (values.has_names() || indices.has_names() || self.has_names()) {
        AT_ERROR("topk_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::sycl::_th_topk_out(values, indices, self, k, dim, largest, sorted);
}
Tensor SYCLType::unfold(const Tensor & self, int64_t dimension, int64_t size, int64_t step) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("unfold: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::sycl::_th_unfold(self, dimension, size, step);
}
bool SYCLType::equal(const Tensor & self, const Tensor & other) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || other.has_names()) {
        AT_ERROR("equal: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::sycl::_th_equal(self, other);
}
Tensor & SYCLType::pow_out(Tensor & out, const Tensor & self, const Tensor & exponent) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || self.has_names() || exponent.has_names()) {
        AT_ERROR("pow_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::sycl::_th_pow_out(out, self, exponent);
}
Tensor SYCLType::pow(const Tensor & self, const Tensor & exponent) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || exponent.has_names()) {
        AT_ERROR("pow: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::sycl::_th_pow(self, exponent);
}
Tensor & SYCLType::pow_out(Tensor & out, Scalar self, const Tensor & exponent) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || exponent.has_names()) {
        AT_ERROR("pow_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(out));
    return at::native::legacy::sycl::_th_pow_out(out, self, exponent);
}
Tensor SYCLType::pow(Scalar self, const Tensor & exponent) {
#ifdef BUILD_NAMEDTENSOR
    if (exponent.has_names()) {
        AT_ERROR("pow: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(exponent));
    return at::native::legacy::sycl::_th_pow(self, exponent);
}
Tensor SYCLType::_addr(const Tensor & self, const Tensor & vec1, const Tensor & vec2, Scalar beta, Scalar alpha) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || vec1.has_names() || vec2.has_names()) {
        AT_ERROR("_addr: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::sycl::_th_addr(self, vec1, vec2, beta, alpha);
}
Tensor & SYCLType::_addr_(Tensor & self, const Tensor & vec1, const Tensor & vec2, Scalar beta, Scalar alpha) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || vec1.has_names() || vec2.has_names()) {
        AT_ERROR("_addr_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::sycl::_th_addr_(self, vec1, vec2, beta, alpha);
}
Tensor & SYCLType::_addr_out(Tensor & out, const Tensor & self, const Tensor & vec1, const Tensor & vec2, Scalar beta, Scalar alpha) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || self.has_names() || vec1.has_names() || vec2.has_names()) {
        AT_ERROR("_addr_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::sycl::_th_addr_out(out, self, vec1, vec2, beta, alpha);
}
Tensor & SYCLType::_index_copy_(Tensor & self, int64_t dim, const Tensor & index, const Tensor & source) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || index.has_names() || source.has_names()) {
        AT_ERROR("_index_copy_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::sycl::_th_index_copy_(self, dim, index, source);
}
Tensor SYCLType::_cumsum(const Tensor & self, int64_t dim) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("_cumsum: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::sycl::_th_cumsum(self, dim);
}
Tensor & SYCLType::_cumsum_out(Tensor & out, const Tensor & self, int64_t dim) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || self.has_names()) {
        AT_ERROR("_cumsum_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::sycl::_th_cumsum_out(out, self, dim);
}
Tensor SYCLType::_cumprod(const Tensor & self, int64_t dim) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("_cumprod: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::sycl::_th_cumprod(self, dim);
}
Tensor & SYCLType::_cumprod_out(Tensor & out, const Tensor & self, int64_t dim) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || self.has_names()) {
        AT_ERROR("_cumprod_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::sycl::_th_cumprod_out(out, self, dim);
}
Tensor & SYCLType::_addmm_out(Tensor & out, const Tensor & self, const Tensor & mat1, const Tensor & mat2, Scalar beta, Scalar alpha) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || self.has_names() || mat1.has_names() || mat2.has_names()) {
        AT_ERROR("_addmm_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::sycl::_th_addmm_out(out, self, mat1, mat2, beta, alpha);
}
Tensor SYCLType::_addmm(const Tensor & self, const Tensor & mat1, const Tensor & mat2, Scalar beta, Scalar alpha) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || mat1.has_names() || mat2.has_names()) {
        AT_ERROR("_addmm: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::sycl::_th_addmm(self, mat1, mat2, beta, alpha);
}
Tensor & SYCLType::_addmm_(Tensor & self, const Tensor & mat1, const Tensor & mat2, Scalar beta, Scalar alpha) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || mat1.has_names() || mat2.has_names()) {
        AT_ERROR("_addmm_: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::sycl::_th_addmm_(self, mat1, mat2, beta, alpha);
}
Tensor SYCLType::_cat(TensorList tensors, int64_t dim) {
#ifdef BUILD_NAMEDTENSOR
    if (at::has_names(tensors)) {
        AT_ERROR("_cat: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(tensors));
    return at::native::legacy::sycl::_th_cat(tensors, dim);
}
Tensor & SYCLType::_cat_out(Tensor & out, TensorList tensors, int64_t dim) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || at::has_names(tensors)) {
        AT_ERROR("_cat_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(out));
    return at::native::legacy::sycl::_th_cat_out(out, tensors, dim);
}
std::tuple<Tensor,Tensor> SYCLType::_mode(const Tensor & self, int64_t dim, bool keepdim) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("_mode: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::sycl::_th_mode(self, dim, keepdim);
}
std::tuple<Tensor &,Tensor &> SYCLType::_mode_out(Tensor & values, Tensor & indices, const Tensor & self, int64_t dim, bool keepdim) {
#ifdef BUILD_NAMEDTENSOR
    if (values.has_names() || indices.has_names() || self.has_names()) {
        AT_ERROR("_mode_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::sycl::_th_mode_out(values, indices, self, dim, keepdim);
}
std::tuple<Tensor,Tensor> SYCLType::_max(const Tensor & self, int64_t dim, bool keepdim) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("_max: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::sycl::_th_max(self, dim, keepdim);
}
std::tuple<Tensor &,Tensor &> SYCLType::_max_out(Tensor & max, Tensor & max_indices, const Tensor & self, int64_t dim, bool keepdim) {
#ifdef BUILD_NAMEDTENSOR
    if (max.has_names() || max_indices.has_names() || self.has_names()) {
        AT_ERROR("_max_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::sycl::_th_max_out(max, max_indices, self, dim, keepdim);
}
std::tuple<Tensor,Tensor> SYCLType::_min(const Tensor & self, int64_t dim, bool keepdim) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("_min: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::sycl::_th_min(self, dim, keepdim);
}
std::tuple<Tensor &,Tensor &> SYCLType::_min_out(Tensor & min, Tensor & min_indices, const Tensor & self, int64_t dim, bool keepdim) {
#ifdef BUILD_NAMEDTENSOR
    if (min.has_names() || min_indices.has_names() || self.has_names()) {
        AT_ERROR("_min_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::sycl::_th_min_out(min, min_indices, self, dim, keepdim);
}
Tensor & SYCLType::binary_cross_entropy_out(Tensor & out, const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || self.has_names() || target.has_names() || weight.has_names()) {
        AT_ERROR("binary_cross_entropy_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::sycl::_thnn_binary_cross_entropy_forward_out(out, self, target, weight, reduction);
}
Tensor SYCLType::binary_cross_entropy(const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || target.has_names() || weight.has_names()) {
        AT_ERROR("binary_cross_entropy: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::sycl::_thnn_binary_cross_entropy_forward(self, target, weight, reduction);
}
Tensor & SYCLType::mse_loss_out(Tensor & out, const Tensor & self, const Tensor & target, int64_t reduction) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || self.has_names() || target.has_names()) {
        AT_ERROR("mse_loss_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::sycl::_thnn_mse_loss_forward_out(out, self, target, reduction);
}
Tensor SYCLType::mse_loss(const Tensor & self, const Tensor & target, int64_t reduction) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || target.has_names()) {
        AT_ERROR("mse_loss: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::sycl::_thnn_mse_loss_forward(self, target, reduction);
}
std::tuple<Tensor &,Tensor &> SYCLType::nll_loss_forward_out(Tensor & output, Tensor & total_weight, const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction, int64_t ignore_index) {
#ifdef BUILD_NAMEDTENSOR
    if (output.has_names() || total_weight.has_names() || self.has_names() || target.has_names() || weight.has_names()) {
        AT_ERROR("nll_loss_forward_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::sycl::_thnn_nll_loss_forward_out(output, total_weight, self, target, weight, reduction, ignore_index);
}
std::tuple<Tensor,Tensor> SYCLType::nll_loss_forward(const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction, int64_t ignore_index) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names() || target.has_names() || weight.has_names()) {
        AT_ERROR("nll_loss_forward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::sycl::_thnn_nll_loss_forward(self, target, weight, reduction, ignore_index);
}
Tensor & SYCLType::nll_loss_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction, int64_t ignore_index, const Tensor & total_weight) {
#ifdef BUILD_NAMEDTENSOR
    if (grad_input.has_names() || grad_output.has_names() || self.has_names() || target.has_names() || weight.has_names() || total_weight.has_names()) {
        AT_ERROR("nll_loss_backward_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::sycl::_thnn_nll_loss_backward_out(grad_input, grad_output, self, target, weight, reduction, ignore_index, total_weight);
}
Tensor SYCLType::nll_loss_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction, int64_t ignore_index, const Tensor & total_weight) {
#ifdef BUILD_NAMEDTENSOR
    if (grad_output.has_names() || self.has_names() || target.has_names() || weight.has_names() || total_weight.has_names()) {
        AT_ERROR("nll_loss_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::sycl::_thnn_nll_loss_backward(grad_output, self, target, weight, reduction, ignore_index, total_weight);
}
Tensor & SYCLType::adaptive_avg_pool2d_out(Tensor & out, const Tensor & self, IntArrayRef output_size) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || self.has_names()) {
        AT_ERROR("adaptive_avg_pool2d_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::adaptive_avg_pool2d_out_sycl(out, self, output_size);
}
Tensor SYCLType::_adaptive_avg_pool2d(const Tensor & self, IntArrayRef output_size) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("_adaptive_avg_pool2d: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::adaptive_avg_pool2d_sycl(self, output_size);
}
Tensor SYCLType::_adaptive_avg_pool2d_backward(const Tensor & grad_output, const Tensor & self) {
#ifdef BUILD_NAMEDTENSOR
    if (grad_output.has_names() || self.has_names()) {
        AT_ERROR("_adaptive_avg_pool2d_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::adaptive_avg_pool2d_backward_sycl(grad_output, self);
}
Tensor & SYCLType::avg_pool2d_out(Tensor & out, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || self.has_names()) {
        AT_ERROR("avg_pool2d_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::avg_pool2d_out_sycl(out, self, kernel_size, stride, padding, ceil_mode, count_include_pad, divisor_override);
}
Tensor SYCLType::avg_pool2d(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("avg_pool2d: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::avg_pool2d_sycl(self, kernel_size, stride, padding, ceil_mode, count_include_pad, divisor_override);
}
Tensor & SYCLType::avg_pool2d_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override) {
#ifdef BUILD_NAMEDTENSOR
    if (grad_input.has_names() || grad_output.has_names() || self.has_names()) {
        AT_ERROR("avg_pool2d_backward_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::avg_pool2d_backward_out_sycl(grad_input, grad_output, self, kernel_size, stride, padding, ceil_mode, count_include_pad, divisor_override);
}
Tensor SYCLType::avg_pool2d_backward(const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override) {
#ifdef BUILD_NAMEDTENSOR
    if (grad_output.has_names() || self.has_names()) {
        AT_ERROR("avg_pool2d_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::avg_pool2d_backward_sycl(grad_output, self, kernel_size, stride, padding, ceil_mode, count_include_pad, divisor_override);
}
std::tuple<Tensor &,Tensor &> SYCLType::max_pool2d_with_indices_out(Tensor & out, Tensor & indices, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || indices.has_names() || self.has_names()) {
        AT_ERROR("max_pool2d_with_indices_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::max_pool2d_with_indices_out_sycl(out, indices, self, kernel_size, stride, padding, dilation, ceil_mode);
}
std::tuple<Tensor,Tensor> SYCLType::max_pool2d_with_indices(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("max_pool2d_with_indices: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::max_pool2d_with_indices_sycl(self, kernel_size, stride, padding, dilation, ceil_mode);
}
Tensor & SYCLType::max_pool2d_with_indices_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode, const Tensor & indices) {
#ifdef BUILD_NAMEDTENSOR
    if (grad_input.has_names() || grad_output.has_names() || self.has_names() || indices.has_names()) {
        AT_ERROR("max_pool2d_with_indices_backward_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::max_pool2d_with_indices_backward_out_sycl(grad_input, grad_output, self, kernel_size, stride, padding, dilation, ceil_mode, indices);
}
Tensor SYCLType::max_pool2d_with_indices_backward(const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode, const Tensor & indices) {
#ifdef BUILD_NAMEDTENSOR
    if (grad_output.has_names() || self.has_names() || indices.has_names()) {
        AT_ERROR("max_pool2d_with_indices_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::max_pool2d_with_indices_backward_sycl(grad_output, self, kernel_size, stride, padding, dilation, ceil_mode, indices);
}
Tensor & SYCLType::upsample_nearest2d_out(Tensor & out, const Tensor & self, IntArrayRef output_size) {
#ifdef BUILD_NAMEDTENSOR
    if (out.has_names() || self.has_names()) {
        AT_ERROR("upsample_nearest2d_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::upsample_nearest2d_out_sycl(out, self, output_size);
}
Tensor SYCLType::upsample_nearest2d(const Tensor & self, IntArrayRef output_size) {
#ifdef BUILD_NAMEDTENSOR
    if (self.has_names()) {
        AT_ERROR("upsample_nearest2d: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::upsample_nearest2d_sycl(self, output_size);
}
Tensor & SYCLType::upsample_nearest2d_backward_out(Tensor & grad_input, const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size) {
#ifdef BUILD_NAMEDTENSOR
    if (grad_input.has_names() || grad_output.has_names()) {
        AT_ERROR("upsample_nearest2d_backward_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(grad_input));
    return at::native::upsample_nearest2d_backward_out_sycl(grad_input, grad_output, output_size, input_size);
}
Tensor SYCLType::upsample_nearest2d_backward(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size) {
#ifdef BUILD_NAMEDTENSOR
    if (grad_output.has_names()) {
        AT_ERROR("upsample_nearest2d_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(grad_output));
    return at::native::upsample_nearest2d_backward_sycl(grad_output, output_size, input_size);
}
Tensor & SYCLType::tanh_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & output) {
#ifdef BUILD_NAMEDTENSOR
    if (grad_input.has_names() || grad_output.has_names() || output.has_names()) {
        AT_ERROR("tanh_backward_out: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(grad_input));
    return at::native::tanh_backward_out(grad_input, grad_output, output);
}
Tensor SYCLType::tanh_backward(const Tensor & grad_output, const Tensor & output) {
#ifdef BUILD_NAMEDTENSOR
    if (grad_output.has_names() || output.has_names()) {
        AT_ERROR("tanh_backward: no named inference rule implemented.");
    }
#endif
    const OptionalDeviceGuard device_guard(device_of(grad_output));
    return at::native::tanh_backward(grad_output, output);
}

static auto& registerer = globalATenDispatch()
  .registerOp<Tensor & (Tensor &)>(Backend::DPCPP, "aten::abs_(Tensor(a!) self) -> Tensor(a!)", &SYCLType::abs_)
  .registerOp<Tensor & (Tensor &, const Tensor &)>(Backend::DPCPP, "aten::abs.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)", &SYCLType::abs_out)
  .registerOp<Tensor & (Tensor &)>(Backend::DPCPP, "aten::acos_(Tensor(a!) self) -> Tensor(a!)", &SYCLType::acos_)
  .registerOp<Tensor & (Tensor &, const Tensor &)>(Backend::DPCPP, "aten::acos.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)", &SYCLType::acos_out)
  .registerOp<Tensor (const Tensor &, const Tensor &, Scalar)>(Backend::DPCPP, "aten::add.Tensor(Tensor self, Tensor other, *, Scalar alpha=1) -> Tensor", &SYCLType::add)
  .registerOp<Tensor & (Tensor &, const Tensor &, Scalar)>(Backend::DPCPP, "aten::add_.Tensor(Tensor(a!) self, Tensor other, *, Scalar alpha=1) -> Tensor(a!)", &SYCLType::add_)
  .registerOp<Tensor & (Tensor &, const Tensor &, const Tensor &, Scalar)>(Backend::DPCPP, "aten::add.out(Tensor self, Tensor other, *, Scalar alpha=1, Tensor(a!) out) -> Tensor(a!)", &SYCLType::add_out)
  .registerOp<Tensor (const Tensor &, const Tensor &, const Tensor &, Scalar, Scalar)>(Backend::DPCPP, "aten::addmv(Tensor self, Tensor mat, Tensor vec, *, Scalar beta=1, Scalar alpha=1) -> Tensor", &SYCLType::addmv)
  .registerOp<Tensor & (Tensor &, const Tensor &, const Tensor &, Scalar, Scalar)>(Backend::DPCPP, "aten::addmv_(Tensor(a!) self, Tensor mat, Tensor vec, *, Scalar beta=1, Scalar alpha=1) -> Tensor(a!)", &SYCLType::addmv_)
  .registerOp<Tensor & (Tensor &, const Tensor &, const Tensor &, const Tensor &, Scalar, Scalar)>(Backend::DPCPP, "aten::addmv.out(Tensor self, Tensor mat, Tensor vec, *, Scalar beta=1, Scalar alpha=1, Tensor(a!) out) -> Tensor(a!)", &SYCLType::addmv_out)
  .registerOp<Tensor & (Tensor &, Scalar, Scalar, Scalar)>(Backend::DPCPP, "aten::arange.start_out(Scalar start, Scalar end, Scalar step=1, *, Tensor(a!) out) -> Tensor(a!)", &SYCLType::arange_out)
  .registerOp<Tensor (const Tensor &, IntArrayRef, IntArrayRef, c10::optional<int64_t>)>(Backend::DPCPP, "aten::as_strided(Tensor(a) self, int[] size, int[] stride, int? storage_offset=None) -> Tensor(a)", &SYCLType::as_strided)
  .registerOp<Tensor & (Tensor &)>(Backend::DPCPP, "aten::asin_(Tensor(a!) self) -> Tensor(a!)", &SYCLType::asin_)
  .registerOp<Tensor & (Tensor &, const Tensor &)>(Backend::DPCPP, "aten::asin.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)", &SYCLType::asin_out)
  .registerOp<Tensor & (Tensor &)>(Backend::DPCPP, "aten::atan_(Tensor(a!) self) -> Tensor(a!)", &SYCLType::atan_)
  .registerOp<Tensor & (Tensor &, const Tensor &)>(Backend::DPCPP, "aten::atan.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)", &SYCLType::atan_out)
  .registerOp<Tensor (const Tensor &, const Tensor &, const Tensor &, Scalar, Scalar)>(Backend::DPCPP, "aten::baddbmm(Tensor self, Tensor batch1, Tensor batch2, *, Scalar beta=1, Scalar alpha=1) -> Tensor", &SYCLType::baddbmm)
  .registerOp<Tensor & (Tensor &, const Tensor &, const Tensor &, Scalar, Scalar)>(Backend::DPCPP, "aten::baddbmm_(Tensor(a!) self, Tensor batch1, Tensor batch2, *, Scalar beta=1, Scalar alpha=1) -> Tensor(a!)", &SYCLType::baddbmm_)
  .registerOp<Tensor & (Tensor &, const Tensor &, const Tensor &, const Tensor &, Scalar, Scalar)>(Backend::DPCPP, "aten::baddbmm.out(Tensor self, Tensor batch1, Tensor batch2, *, Scalar beta=1, Scalar alpha=1, Tensor(a!) out) -> Tensor(a!)", &SYCLType::baddbmm_out)
  .registerOp<Tensor & (Tensor &, const Tensor &, Generator *)>(Backend::DPCPP, "aten::bernoulli_.Tensor(Tensor(a!) self, Tensor p, *, Generator? generator=None) -> Tensor(a!)", &SYCLType::bernoulli_)
  .registerOp<Tensor & (Tensor &, double, Generator *)>(Backend::DPCPP, "aten::bernoulli_.float(Tensor(a!) self, float p=0.5, *, Generator? generator=None) -> Tensor(a!)", &SYCLType::bernoulli_)
  .registerOp<Tensor & (Tensor &, const Tensor &)>(Backend::DPCPP, "aten::bitwise_not.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)", &SYCLType::bitwise_not_out)
  .registerOp<Tensor & (Tensor &, const Tensor &)>(Backend::DPCPP, "aten::logical_not.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)", &SYCLType::logical_not_out)
  .registerOp<Tensor (const Tensor &, const Tensor &)>(Backend::DPCPP, "aten::bmm(Tensor self, Tensor mat2) -> Tensor", &SYCLType::bmm)
  .registerOp<Tensor & (Tensor &, const Tensor &, const Tensor &)>(Backend::DPCPP, "aten::bmm.out(Tensor self, Tensor mat2, *, Tensor(a!) out) -> Tensor(a!)", &SYCLType::bmm_out)
  .registerOp<Tensor & (Tensor &)>(Backend::DPCPP, "aten::ceil_(Tensor(a!) self) -> Tensor(a!)", &SYCLType::ceil_)
  .registerOp<Tensor & (Tensor &, const Tensor &)>(Backend::DPCPP, "aten::ceil.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)", &SYCLType::ceil_out)
  .registerOp<Tensor & (Tensor &, c10::optional<Scalar>, c10::optional<Scalar>)>(Backend::DPCPP, "aten::clamp_(Tensor(a!) self, Scalar? min=None, Scalar? max=None) -> Tensor(a!)", &SYCLType::clamp_)
  .registerOp<Tensor & (Tensor &, const Tensor &, c10::optional<Scalar>, c10::optional<Scalar>)>(Backend::DPCPP, "aten::clamp.out(Tensor self, Scalar? min=None, Scalar? max=None, *, Tensor(a!) out) -> Tensor(a!)", &SYCLType::clamp_out)
  .registerOp<Tensor & (Tensor &, Scalar)>(Backend::DPCPP, "aten::clamp_max_(Tensor(a!) self, Scalar max) -> Tensor(a!)", &SYCLType::clamp_max_)
  .registerOp<Tensor & (Tensor &, const Tensor &, Scalar)>(Backend::DPCPP, "aten::clamp_max.out(Tensor self, Scalar max, *, Tensor(a!) out) -> Tensor(a!)", &SYCLType::clamp_max_out)
  .registerOp<Tensor & (Tensor &, Scalar)>(Backend::DPCPP, "aten::clamp_min_(Tensor(a!) self, Scalar min) -> Tensor(a!)", &SYCLType::clamp_min_)
  .registerOp<Tensor & (Tensor &, const Tensor &, Scalar)>(Backend::DPCPP, "aten::clamp_min.out(Tensor self, Scalar min, *, Tensor(a!) out) -> Tensor(a!)", &SYCLType::clamp_min_out)
  .registerOp<Tensor & (Tensor &)>(Backend::DPCPP, "aten::cos_(Tensor(a!) self) -> Tensor(a!)", &SYCLType::cos_)
  .registerOp<Tensor & (Tensor &, const Tensor &)>(Backend::DPCPP, "aten::cos.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)", &SYCLType::cos_out)
  .registerOp<Tensor & (Tensor &)>(Backend::DPCPP, "aten::cosh_(Tensor(a!) self) -> Tensor(a!)", &SYCLType::cosh_)
  .registerOp<Tensor & (Tensor &, const Tensor &)>(Backend::DPCPP, "aten::cosh.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)", &SYCLType::cosh_out)
  .registerOp<Tensor (const Tensor &, const Tensor &, int64_t, int64_t, bool)>(Backend::DPCPP, "aten::embedding_dense_backward(Tensor grad_output, Tensor indices, int num_weights, int padding_idx, bool scale_grad_by_freq) -> Tensor", &SYCLType::embedding_dense_backward)
  .registerOp<std::tuple<Tensor,Tensor,Tensor,Tensor> (const Tensor &, const Tensor &, const Tensor &, bool, int64_t, bool, const Tensor &)>(Backend::DPCPP, "aten::_embedding_bag(Tensor weight, Tensor indices, Tensor offsets, bool scale_grad_by_freq=False, int mode=0, bool sparse=False, Tensor? per_sample_weights=None) -> (Tensor, Tensor, Tensor, Tensor)", &SYCLType::_embedding_bag)
  .registerOp<Tensor (IntArrayRef, const TensorOptions &, c10::optional<MemoryFormat>)>(Backend::DPCPP, "aten::empty.memory_format(int[] size, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None, MemoryFormat? memory_format=None) -> Tensor", &SYCLType::empty)
  .registerOp<Tensor & (Tensor &, IntArrayRef)>(Backend::DPCPP, "aten::resize_(Tensor(a!) self, int[] size) -> Tensor(a!)", &SYCLType::resize_)
  .registerOp<Tensor (IntArrayRef, IntArrayRef, const TensorOptions &)>(Backend::DPCPP, "aten::empty_strided(int[] size, int[] stride, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor", &SYCLType::empty_strided)
  .registerOp<Tensor & (Tensor &)>(Backend::DPCPP, "aten::erf_(Tensor(a!) self) -> Tensor(a!)", &SYCLType::erf_)
  .registerOp<Tensor & (Tensor &, const Tensor &)>(Backend::DPCPP, "aten::erf.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)", &SYCLType::erf_out)
  .registerOp<Tensor & (Tensor &)>(Backend::DPCPP, "aten::erfc_(Tensor(a!) self) -> Tensor(a!)", &SYCLType::erfc_)
  .registerOp<Tensor & (Tensor &, const Tensor &)>(Backend::DPCPP, "aten::erfc.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)", &SYCLType::erfc_out)
  .registerOp<Tensor & (Tensor &)>(Backend::DPCPP, "aten::exp_(Tensor(a!) self) -> Tensor(a!)", &SYCLType::exp_)
  .registerOp<Tensor & (Tensor &, const Tensor &)>(Backend::DPCPP, "aten::exp.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)", &SYCLType::exp_out)
  .registerOp<Tensor & (Tensor &)>(Backend::DPCPP, "aten::expm1_(Tensor(a!) self) -> Tensor(a!)", &SYCLType::expm1_)
  .registerOp<Tensor & (Tensor &, const Tensor &)>(Backend::DPCPP, "aten::expm1.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)", &SYCLType::expm1_out)
  .registerOp<Tensor & (Tensor &, int64_t)>(Backend::DPCPP, "aten::eye.out(int n, *, Tensor(a!) out) -> Tensor(a!)", &SYCLType::eye_out)
  .registerOp<Tensor & (Tensor &, int64_t, int64_t)>(Backend::DPCPP, "aten::eye.m_out(int n, int m, *, Tensor(a!) out) -> Tensor(a!)", &SYCLType::eye_out)
  .registerOp<Tensor & (Tensor &)>(Backend::DPCPP, "aten::floor_(Tensor(a!) self) -> Tensor(a!)", &SYCLType::floor_)
  .registerOp<Tensor & (Tensor &, const Tensor &)>(Backend::DPCPP, "aten::floor.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)", &SYCLType::floor_out)
  .registerOp<Tensor (const Tensor &, const Tensor &)>(Backend::DPCPP, "aten::ger(Tensor self, Tensor vec2) -> Tensor", &SYCLType::ger)
  .registerOp<Tensor & (Tensor &, const Tensor &, const Tensor &)>(Backend::DPCPP, "aten::ger.out(Tensor self, Tensor vec2, *, Tensor(a!) out) -> Tensor(a!)", &SYCLType::ger_out)
  .registerOp<Tensor & (Tensor &, Scalar, Scalar, int64_t)>(Backend::DPCPP, "aten::linspace.out(Scalar start, Scalar end, int steps=100, *, Tensor(a!) out) -> Tensor(a!)", &SYCLType::linspace_out)
  .registerOp<Tensor & (Tensor &)>(Backend::DPCPP, "aten::log_(Tensor(a!) self) -> Tensor(a!)", &SYCLType::log_)
  .registerOp<Tensor & (Tensor &, const Tensor &)>(Backend::DPCPP, "aten::log.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)", &SYCLType::log_out)
  .registerOp<Tensor & (Tensor &)>(Backend::DPCPP, "aten::log10_(Tensor(a!) self) -> Tensor(a!)", &SYCLType::log10_)
  .registerOp<Tensor & (Tensor &, const Tensor &)>(Backend::DPCPP, "aten::log10.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)", &SYCLType::log10_out)
  .registerOp<Tensor & (Tensor &)>(Backend::DPCPP, "aten::log1p_(Tensor(a!) self) -> Tensor(a!)", &SYCLType::log1p_)
  .registerOp<Tensor & (Tensor &, const Tensor &)>(Backend::DPCPP, "aten::log1p.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)", &SYCLType::log1p_out)
  .registerOp<Tensor & (Tensor &)>(Backend::DPCPP, "aten::log2_(Tensor(a!) self) -> Tensor(a!)", &SYCLType::log2_)
  .registerOp<Tensor & (Tensor &, const Tensor &)>(Backend::DPCPP, "aten::log2.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)", &SYCLType::log2_out)
  .registerOp<Tensor & (Tensor &, Scalar, Scalar, int64_t, double)>(Backend::DPCPP, "aten::logspace.out(Scalar start, Scalar end, int steps=100, float base=10.0, *, Tensor(a!) out) -> Tensor(a!)", &SYCLType::logspace_out)
  .registerOp<Tensor (const Tensor &, int64_t, bool)>(Backend::DPCPP, "aten::_log_softmax(Tensor self, int dim, bool half_to_float) -> Tensor", &SYCLType::_log_softmax)
  .registerOp<Tensor (const Tensor &, const Tensor &, int64_t, const Tensor &)>(Backend::DPCPP, "aten::_log_softmax_backward_data(Tensor grad_output, Tensor output, int dim, Tensor self) -> Tensor", &SYCLType::_log_softmax_backward_data)
  .registerOp<Tensor (const Tensor &, const Tensor &)>(Backend::DPCPP, "aten::mm(Tensor self, Tensor mat2) -> Tensor", &SYCLType::mm)
  .registerOp<Tensor & (Tensor &, const Tensor &, const Tensor &)>(Backend::DPCPP, "aten::mm.out(Tensor self, Tensor mat2, *, Tensor(a!) out) -> Tensor(a!)", &SYCLType::mm_out)
  .registerOp<Tensor (const Tensor &, const Tensor &)>(Backend::DPCPP, "aten::mul.Tensor(Tensor self, Tensor other) -> Tensor", &SYCLType::mul)
  .registerOp<Tensor & (Tensor &, const Tensor &)>(Backend::DPCPP, "aten::mul_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)", &SYCLType::mul_)
  .registerOp<Tensor & (Tensor &, const Tensor &, const Tensor &)>(Backend::DPCPP, "aten::mul.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)", &SYCLType::mul_out)
  .registerOp<Tensor (const Tensor &, const Tensor &)>(Backend::DPCPP, "aten::mv(Tensor self, Tensor vec) -> Tensor", &SYCLType::mv)
  .registerOp<Tensor & (Tensor &, const Tensor &, const Tensor &)>(Backend::DPCPP, "aten::mv.out(Tensor self, Tensor vec, *, Tensor(a!) out) -> Tensor(a!)", &SYCLType::mv_out)
  .registerOp<Tensor (const Tensor &, int64_t, int64_t, int64_t)>(Backend::DPCPP, "aten::narrow_copy(Tensor self, int dim, int start, int length) -> Tensor", &SYCLType::narrow_copy)
  .registerOp<std::tuple<Tensor,Tensor,Tensor> (const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, bool, double, double)>(Backend::DPCPP, "aten::native_batch_norm(Tensor input, Tensor? weight, Tensor? bias, Tensor? running_mean, Tensor? running_var, bool training, float momentum, float eps) -> (Tensor, Tensor, Tensor)", &SYCLType::native_batch_norm)
  .registerOp<std::tuple<Tensor,Tensor,Tensor> (const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, bool, double, std::array<bool,3>)>(Backend::DPCPP, "aten::native_batch_norm_backward(Tensor grad_out, Tensor input, Tensor? weight, Tensor? running_mean, Tensor? running_var, Tensor? save_mean, Tensor? save_invstd, bool train, float eps, bool[3] output_mask) -> (Tensor, Tensor, Tensor)", &SYCLType::native_batch_norm_backward)
  .registerOp<Tensor & (Tensor &, Scalar, Scalar, Scalar)>(Backend::DPCPP, "aten::range.out(Scalar start, Scalar end, Scalar step=1, *, Tensor(a!) out) -> Tensor(a!)", &SYCLType::range_out)
  .registerOp<Tensor & (Tensor &, const Tensor &)>(Backend::DPCPP, "aten::neg.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)", &SYCLType::neg_out)
  .registerOp<Tensor (const Tensor &)>(Backend::DPCPP, "aten::repeat_interleave.Tensor(Tensor repeats) -> Tensor", &SYCLType::repeat_interleave)
  .registerOp<Tensor & (Tensor &)>(Backend::DPCPP, "aten::round_(Tensor(a!) self) -> Tensor(a!)", &SYCLType::round_)
  .registerOp<Tensor & (Tensor &, const Tensor &)>(Backend::DPCPP, "aten::round.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)", &SYCLType::round_out)
  .registerOp<Tensor (const Tensor &)>(Backend::DPCPP, "aten::relu(Tensor self) -> Tensor", &SYCLType::relu)
  .registerOp<Tensor & (Tensor &)>(Backend::DPCPP, "aten::relu_(Tensor(a!) self) -> Tensor(a!)", &SYCLType::relu_)
  .registerOp<Tensor & (Tensor &)>(Backend::DPCPP, "aten::rsqrt_(Tensor(a!) self) -> Tensor(a!)", &SYCLType::rsqrt_)
  .registerOp<Tensor & (Tensor &, const Tensor &)>(Backend::DPCPP, "aten::rsqrt.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)", &SYCLType::rsqrt_out)
  .registerOp<Tensor (const Tensor &)>(Backend::DPCPP, "aten::sigmoid(Tensor self) -> Tensor", &SYCLType::sigmoid)
  .registerOp<Tensor & (Tensor &, const Tensor &)>(Backend::DPCPP, "aten::sigmoid.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)", &SYCLType::sigmoid_out)
  .registerOp<Tensor & (Tensor &)>(Backend::DPCPP, "aten::sin_(Tensor(a!) self) -> Tensor(a!)", &SYCLType::sin_)
  .registerOp<Tensor & (Tensor &, const Tensor &)>(Backend::DPCPP, "aten::sin.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)", &SYCLType::sin_out)
  .registerOp<Tensor & (Tensor &)>(Backend::DPCPP, "aten::sinh_(Tensor(a!) self) -> Tensor(a!)", &SYCLType::sinh_)
  .registerOp<Tensor & (Tensor &, const Tensor &)>(Backend::DPCPP, "aten::sinh.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)", &SYCLType::sinh_out)
  .registerOp<Tensor (const Tensor &, int64_t, bool)>(Backend::DPCPP, "aten::_softmax(Tensor self, int dim, bool half_to_float) -> Tensor", &SYCLType::_softmax)
  .registerOp<Tensor (const Tensor &, const Tensor &, int64_t, const Tensor &)>(Backend::DPCPP, "aten::_softmax_backward_data(Tensor grad_output, Tensor output, int dim, Tensor self) -> Tensor", &SYCLType::_softmax_backward_data)
  .registerOp<Tensor & (Tensor &)>(Backend::DPCPP, "aten::sqrt_(Tensor(a!) self) -> Tensor(a!)", &SYCLType::sqrt_)
  .registerOp<Tensor & (Tensor &, const Tensor &)>(Backend::DPCPP, "aten::sqrt.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)", &SYCLType::sqrt_out)
  .registerOp<Tensor & (Tensor &)>(Backend::DPCPP, "aten::tan_(Tensor(a!) self) -> Tensor(a!)", &SYCLType::tan_)
  .registerOp<Tensor & (Tensor &, const Tensor &)>(Backend::DPCPP, "aten::tan.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)", &SYCLType::tan_out)
  .registerOp<Tensor & (Tensor &)>(Backend::DPCPP, "aten::tanh_(Tensor(a!) self) -> Tensor(a!)", &SYCLType::tanh_)
  .registerOp<Tensor & (Tensor &, const Tensor &)>(Backend::DPCPP, "aten::tanh.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)", &SYCLType::tanh_out)
  .registerOp<Tensor (const Tensor &, IntArrayRef, IntArrayRef)>(Backend::DPCPP, "aten::roll(Tensor self, int[1] shifts, int[1] dims=[]) -> Tensor", &SYCLType::roll)
  .registerOp<Tensor & (Tensor &)>(Backend::DPCPP, "aten::trunc_(Tensor(a!) self) -> Tensor(a!)", &SYCLType::trunc_)
  .registerOp<Tensor & (Tensor &, const Tensor &)>(Backend::DPCPP, "aten::trunc.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)", &SYCLType::trunc_out)
  .registerOp<Tensor (const Tensor &, const Tensor &, const Tensor &)>(Backend::DPCPP, "aten::_s_where(Tensor condition, Tensor self, Tensor other) -> Tensor", &SYCLType::_s_where)
  .registerOp<Tensor (const Tensor &)>(Backend::DPCPP, "aten::clone(Tensor self) -> Tensor", &SYCLType::clone)
  .registerOp<Tensor & (Tensor &, const Tensor &)>(Backend::DPCPP, "aten::resize_as_(Tensor(a!) self, Tensor the_template) -> Tensor(a!)", &SYCLType::resize_as_)
  .registerOp<Tensor & (Tensor &, const Tensor &, Scalar)>(Backend::DPCPP, "aten::pow.Tensor_Scalar_out(Tensor self, Scalar exponent, *, Tensor(a!) out) -> Tensor(a!)", &SYCLType::pow_out)
  .registerOp<Tensor (const Tensor &, Scalar)>(Backend::DPCPP, "aten::pow.Tensor_Scalar(Tensor self, Scalar exponent) -> Tensor", &SYCLType::pow)
  .registerOp<Tensor & (Tensor &)>(Backend::DPCPP, "aten::zero_(Tensor(a!) self) -> Tensor(a!)", &SYCLType::zero_)
  .registerOp<Scalar (const Tensor &)>(Backend::DPCPP, "aten::_local_scalar_dense(Tensor self) -> Scalar", &SYCLType::_local_scalar_dense)
  .registerOp<Tensor & (Tensor &, Storage)>(Backend::DPCPP, "aten::set_.source_Storage(Tensor(a!) self, Storage source) -> Tensor(a!)", &SYCLType::set_)
  .registerOp<Tensor & (Tensor &, Storage, int64_t, IntArrayRef, IntArrayRef)>(Backend::DPCPP, "aten::set_.source_Storage_storage_offset(Tensor(a!) self, Storage source, int storage_offset, int[] size, int[] stride=[]) -> Tensor(a!)", &SYCLType::set_)
  .registerOp<Tensor & (Tensor &, const Tensor &)>(Backend::DPCPP, "aten::set_.source_Tensor(Tensor(a!) self, Tensor source) -> Tensor(a!)", &SYCLType::set_)
  .registerOp<Tensor & (Tensor &)>(Backend::DPCPP, "aten::set_(Tensor(a!) self) -> Tensor(a!)", &SYCLType::set_)
  .registerOp<bool (const Tensor &, const Tensor &)>(Backend::DPCPP, "aten::is_set_to(Tensor self, Tensor tensor) -> bool", &SYCLType::is_set_to)
  .registerOp<Tensor & (Tensor &, const Tensor &, Scalar)>(Backend::DPCPP, "aten::masked_fill_.Scalar(Tensor(a!) self, Tensor mask, Scalar value) -> Tensor(a!)", &SYCLType::masked_fill_)
  .registerOp<Tensor & (Tensor &, const Tensor &, const Tensor &)>(Backend::DPCPP, "aten::masked_fill_.Tensor(Tensor(a!) self, Tensor mask, Tensor value) -> Tensor(a!)", &SYCLType::masked_fill_)
  .registerOp<Tensor & (Tensor &, const Tensor &, const Tensor &)>(Backend::DPCPP, "aten::masked_scatter_(Tensor(a!) self, Tensor mask, Tensor source) -> Tensor(a!)", &SYCLType::masked_scatter_)
  .registerOp<Tensor (const Tensor &, IntArrayRef)>(Backend::DPCPP, "aten::view(Tensor(a) self, int[] size) -> Tensor(a)", &SYCLType::view)
  .registerOp<Tensor & (Tensor &, int64_t, const Tensor &, const Tensor &)>(Backend::DPCPP, "aten::index_add_(Tensor(a!) self, int dim, Tensor index, Tensor source) -> Tensor(a!)", &SYCLType::index_add_)
  .registerOp<Tensor & (Tensor &, int64_t, const Tensor &, Scalar)>(Backend::DPCPP, "aten::index_fill_.Scalar(Tensor(a!) self, int dim, Tensor index, Scalar value) -> Tensor(a!)", &SYCLType::index_fill_)
  .registerOp<Tensor & (Tensor &, int64_t, const Tensor &, const Tensor &)>(Backend::DPCPP, "aten::index_fill_.Tensor(Tensor(a!) self, int dim, Tensor index, Tensor value) -> Tensor(a!)", &SYCLType::index_fill_)
  .registerOp<Tensor & (Tensor &, int64_t, const Tensor &, const Tensor &)>(Backend::DPCPP, "aten::scatter_.src(Tensor(a!) self, int dim, Tensor index, Tensor src) -> Tensor(a!)", &SYCLType::scatter_)
  .registerOp<Tensor & (Tensor &, int64_t, const Tensor &, Scalar)>(Backend::DPCPP, "aten::scatter_.value(Tensor(a!) self, int dim, Tensor index, Scalar value) -> Tensor(a!)", &SYCLType::scatter_)
  .registerOp<Tensor & (Tensor &, int64_t, const Tensor &, const Tensor &)>(Backend::DPCPP, "aten::scatter_add_(Tensor(a!) self, int dim, Tensor index, Tensor src) -> Tensor(a!)", &SYCLType::scatter_add_)
  .registerOp<Tensor & (Tensor &, Scalar)>(Backend::DPCPP, "aten::lt_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)", &SYCLType::lt_)
  .registerOp<Tensor & (Tensor &, const Tensor &)>(Backend::DPCPP, "aten::lt_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)", &SYCLType::lt_)
  .registerOp<Tensor & (Tensor &, Scalar)>(Backend::DPCPP, "aten::gt_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)", &SYCLType::gt_)
  .registerOp<Tensor & (Tensor &, const Tensor &)>(Backend::DPCPP, "aten::gt_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)", &SYCLType::gt_)
  .registerOp<Tensor & (Tensor &, Scalar)>(Backend::DPCPP, "aten::le_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)", &SYCLType::le_)
  .registerOp<Tensor & (Tensor &, const Tensor &)>(Backend::DPCPP, "aten::le_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)", &SYCLType::le_)
  .registerOp<Tensor & (Tensor &, Scalar)>(Backend::DPCPP, "aten::ge_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)", &SYCLType::ge_)
  .registerOp<Tensor & (Tensor &, const Tensor &)>(Backend::DPCPP, "aten::ge_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)", &SYCLType::ge_)
  .registerOp<Tensor & (Tensor &, Scalar)>(Backend::DPCPP, "aten::eq_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)", &SYCLType::eq_)
  .registerOp<Tensor & (Tensor &, const Tensor &)>(Backend::DPCPP, "aten::eq_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)", &SYCLType::eq_)
  .registerOp<Tensor & (Tensor &, Scalar)>(Backend::DPCPP, "aten::ne_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)", &SYCLType::ne_)
  .registerOp<Tensor & (Tensor &, const Tensor &)>(Backend::DPCPP, "aten::ne_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)", &SYCLType::ne_)
  .registerOp<Tensor (const Tensor &, Scalar)>(Backend::DPCPP, "aten::__and__.Scalar(Tensor self, Scalar other) -> Tensor", &SYCLType::__and__)
  .registerOp<Tensor (const Tensor &, const Tensor &)>(Backend::DPCPP, "aten::__and__.Tensor(Tensor self, Tensor other) -> Tensor", &SYCLType::__and__)
  .registerOp<Tensor & (Tensor &, Scalar)>(Backend::DPCPP, "aten::__iand__.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)", &SYCLType::__iand__)
  .registerOp<Tensor & (Tensor &, const Tensor &)>(Backend::DPCPP, "aten::__iand__.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)", &SYCLType::__iand__)
  .registerOp<Tensor (const Tensor &, Scalar)>(Backend::DPCPP, "aten::__or__.Scalar(Tensor self, Scalar other) -> Tensor", &SYCLType::__or__)
  .registerOp<Tensor (const Tensor &, const Tensor &)>(Backend::DPCPP, "aten::__or__.Tensor(Tensor self, Tensor other) -> Tensor", &SYCLType::__or__)
  .registerOp<Tensor & (Tensor &, Scalar)>(Backend::DPCPP, "aten::__ior__.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)", &SYCLType::__ior__)
  .registerOp<Tensor & (Tensor &, const Tensor &)>(Backend::DPCPP, "aten::__ior__.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)", &SYCLType::__ior__)
  .registerOp<Tensor (const Tensor &, Scalar)>(Backend::DPCPP, "aten::__xor__.Scalar(Tensor self, Scalar other) -> Tensor", &SYCLType::__xor__)
  .registerOp<Tensor (const Tensor &, const Tensor &)>(Backend::DPCPP, "aten::__xor__.Tensor(Tensor self, Tensor other) -> Tensor", &SYCLType::__xor__)
  .registerOp<Tensor & (Tensor &, Scalar)>(Backend::DPCPP, "aten::__ixor__.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)", &SYCLType::__ixor__)
  .registerOp<Tensor & (Tensor &, const Tensor &)>(Backend::DPCPP, "aten::__ixor__.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)", &SYCLType::__ixor__)
  .registerOp<Tensor (const Tensor &, Scalar)>(Backend::DPCPP, "aten::__lshift__.Scalar(Tensor self, Scalar other) -> Tensor", &SYCLType::__lshift__)
  .registerOp<Tensor (const Tensor &, const Tensor &)>(Backend::DPCPP, "aten::__lshift__.Tensor(Tensor self, Tensor other) -> Tensor", &SYCLType::__lshift__)
  .registerOp<Tensor & (Tensor &, Scalar)>(Backend::DPCPP, "aten::__ilshift__.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)", &SYCLType::__ilshift__)
  .registerOp<Tensor & (Tensor &, const Tensor &)>(Backend::DPCPP, "aten::__ilshift__.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)", &SYCLType::__ilshift__)
  .registerOp<Tensor (const Tensor &, Scalar)>(Backend::DPCPP, "aten::__rshift__.Scalar(Tensor self, Scalar other) -> Tensor", &SYCLType::__rshift__)
  .registerOp<Tensor (const Tensor &, const Tensor &)>(Backend::DPCPP, "aten::__rshift__.Tensor(Tensor self, Tensor other) -> Tensor", &SYCLType::__rshift__)
  .registerOp<Tensor & (Tensor &, Scalar)>(Backend::DPCPP, "aten::__irshift__.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)", &SYCLType::__irshift__)
  .registerOp<Tensor & (Tensor &, const Tensor &)>(Backend::DPCPP, "aten::__irshift__.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)", &SYCLType::__irshift__)
  .registerOp<Tensor & (Tensor &, int64_t)>(Backend::DPCPP, "aten::tril_(Tensor(a!) self, int diagonal=0) -> Tensor(a!)", &SYCLType::tril_)
  .registerOp<Tensor & (Tensor &, int64_t)>(Backend::DPCPP, "aten::triu_(Tensor(a!) self, int diagonal=0) -> Tensor(a!)", &SYCLType::triu_)
  .registerOp<Tensor & (Tensor &)>(Backend::DPCPP, "aten::digamma_(Tensor(a!) self) -> Tensor(a!)", &SYCLType::digamma_)
  .registerOp<Tensor & (Tensor &)>(Backend::DPCPP, "aten::erfinv_(Tensor(a!) self) -> Tensor(a!)", &SYCLType::erfinv_)
  .registerOp<Tensor & (Tensor &, Scalar)>(Backend::DPCPP, "aten::pow_.Scalar(Tensor(a!) self, Scalar exponent) -> Tensor(a!)", &SYCLType::pow_)
  .registerOp<Tensor & (Tensor &, const Tensor &)>(Backend::DPCPP, "aten::pow_.Tensor(Tensor(a!) self, Tensor exponent) -> Tensor(a!)", &SYCLType::pow_)
  .registerOp<Tensor & (Tensor &)>(Backend::DPCPP, "aten::sign_(Tensor(a!) self) -> Tensor(a!)", &SYCLType::sign_)
  .registerOp<Tensor & (Tensor &, Scalar)>(Backend::DPCPP, "aten::fmod_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)", &SYCLType::fmod_)
  .registerOp<Tensor & (Tensor &, const Tensor &)>(Backend::DPCPP, "aten::fmod_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)", &SYCLType::fmod_)
  .registerOp<Tensor & (Tensor &, Scalar)>(Backend::DPCPP, "aten::remainder_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)", &SYCLType::remainder_)
  .registerOp<Tensor & (Tensor &, const Tensor &)>(Backend::DPCPP, "aten::remainder_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)", &SYCLType::remainder_)
  .registerOp<Tensor & (Tensor &, const Tensor &, const Tensor &, Scalar, Scalar)>(Backend::DPCPP, "aten::addbmm_(Tensor(a!) self, Tensor batch1, Tensor batch2, *, Scalar beta=1, Scalar alpha=1) -> Tensor(a!)", &SYCLType::addbmm_)
  .registerOp<Tensor & (Tensor &, const Tensor &, const Tensor &, const Tensor &, Scalar, Scalar)>(Backend::DPCPP, "aten::addbmm.out(Tensor self, Tensor batch1, Tensor batch2, *, Scalar beta=1, Scalar alpha=1, Tensor(a!) out) -> Tensor(a!)", &SYCLType::addbmm_out)
  .registerOp<Tensor (const Tensor &, const Tensor &, const Tensor &, Scalar, Scalar)>(Backend::DPCPP, "aten::addbmm(Tensor self, Tensor batch1, Tensor batch2, *, Scalar beta=1, Scalar alpha=1) -> Tensor", &SYCLType::addbmm)
  .registerOp<Tensor & (Tensor &, double, double, Generator *)>(Backend::DPCPP, "aten::normal_(Tensor(a!) self, float mean=0, float std=1, *, Generator? generator=None) -> Tensor(a!)", &SYCLType::normal_)
  .registerOp<Tensor & (Tensor &, const Tensor &, int64_t)>(Backend::DPCPP, "aten::diag.out(Tensor self, int diagonal=0, *, Tensor(a!) out) -> Tensor(a!)", &SYCLType::diag_out)
  .registerOp<Tensor (const Tensor &, int64_t)>(Backend::DPCPP, "aten::diag(Tensor self, int diagonal=0) -> Tensor", &SYCLType::diag)
  .registerOp<Tensor & (Tensor &, const Tensor &, int64_t)>(Backend::DPCPP, "aten::triu.out(Tensor self, int diagonal=0, *, Tensor(a!) out) -> Tensor(a!)", &SYCLType::triu_out)
  .registerOp<Tensor & (Tensor &, const Tensor &, int64_t)>(Backend::DPCPP, "aten::tril.out(Tensor self, int diagonal=0, *, Tensor(a!) out) -> Tensor(a!)", &SYCLType::tril_out)
  .registerOp<Tensor (int64_t, int64_t, int64_t, const TensorOptions &)>(Backend::DPCPP, "aten::tril_indices(int row, int col, int offset=0, *, ScalarType? dtype=long, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor", &SYCLType::tril_indices)
  .registerOp<Tensor (int64_t, int64_t, int64_t, const TensorOptions &)>(Backend::DPCPP, "aten::triu_indices(int row, int col, int offset=0, *, ScalarType? dtype=long, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor", &SYCLType::triu_indices)
  .registerOp<Tensor (const Tensor &)>(Backend::DPCPP, "aten::trace(Tensor self) -> Tensor", &SYCLType::trace)
  .registerOp<Tensor & (Tensor &, const Tensor &, Scalar)>(Backend::DPCPP, "aten::ne.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> Tensor(a!)", &SYCLType::ne_out)
  .registerOp<Tensor (const Tensor &, Scalar)>(Backend::DPCPP, "aten::ne.Scalar(Tensor self, Scalar other) -> Tensor", &SYCLType::ne)
  .registerOp<Tensor & (Tensor &, const Tensor &, const Tensor &)>(Backend::DPCPP, "aten::ne.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)", &SYCLType::ne_out)
  .registerOp<Tensor (const Tensor &, const Tensor &)>(Backend::DPCPP, "aten::ne.Tensor(Tensor self, Tensor other) -> Tensor", &SYCLType::ne)
  .registerOp<Tensor & (Tensor &, const Tensor &, Scalar)>(Backend::DPCPP, "aten::eq.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> Tensor(a!)", &SYCLType::eq_out)
  .registerOp<Tensor (const Tensor &, Scalar)>(Backend::DPCPP, "aten::eq.Scalar(Tensor self, Scalar other) -> Tensor", &SYCLType::eq)
  .registerOp<Tensor & (Tensor &, const Tensor &, const Tensor &)>(Backend::DPCPP, "aten::eq.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)", &SYCLType::eq_out)
  .registerOp<Tensor (const Tensor &, const Tensor &)>(Backend::DPCPP, "aten::eq.Tensor(Tensor self, Tensor other) -> Tensor", &SYCLType::eq)
  .registerOp<Tensor & (Tensor &, const Tensor &, Scalar)>(Backend::DPCPP, "aten::ge.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> Tensor(a!)", &SYCLType::ge_out)
  .registerOp<Tensor (const Tensor &, Scalar)>(Backend::DPCPP, "aten::ge.Scalar(Tensor self, Scalar other) -> Tensor", &SYCLType::ge)
  .registerOp<Tensor & (Tensor &, const Tensor &, const Tensor &)>(Backend::DPCPP, "aten::ge.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)", &SYCLType::ge_out)
  .registerOp<Tensor (const Tensor &, const Tensor &)>(Backend::DPCPP, "aten::ge.Tensor(Tensor self, Tensor other) -> Tensor", &SYCLType::ge)
  .registerOp<Tensor & (Tensor &, const Tensor &, Scalar)>(Backend::DPCPP, "aten::le.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> Tensor(a!)", &SYCLType::le_out)
  .registerOp<Tensor (const Tensor &, Scalar)>(Backend::DPCPP, "aten::le.Scalar(Tensor self, Scalar other) -> Tensor", &SYCLType::le)
  .registerOp<Tensor & (Tensor &, const Tensor &, const Tensor &)>(Backend::DPCPP, "aten::le.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)", &SYCLType::le_out)
  .registerOp<Tensor (const Tensor &, const Tensor &)>(Backend::DPCPP, "aten::le.Tensor(Tensor self, Tensor other) -> Tensor", &SYCLType::le)
  .registerOp<Tensor & (Tensor &, const Tensor &, Scalar)>(Backend::DPCPP, "aten::gt.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> Tensor(a!)", &SYCLType::gt_out)
  .registerOp<Tensor (const Tensor &, Scalar)>(Backend::DPCPP, "aten::gt.Scalar(Tensor self, Scalar other) -> Tensor", &SYCLType::gt)
  .registerOp<Tensor & (Tensor &, const Tensor &, const Tensor &)>(Backend::DPCPP, "aten::gt.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)", &SYCLType::gt_out)
  .registerOp<Tensor (const Tensor &, const Tensor &)>(Backend::DPCPP, "aten::gt.Tensor(Tensor self, Tensor other) -> Tensor", &SYCLType::gt)
  .registerOp<Tensor & (Tensor &, const Tensor &, Scalar)>(Backend::DPCPP, "aten::lt.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> Tensor(a!)", &SYCLType::lt_out)
  .registerOp<Tensor (const Tensor &, Scalar)>(Backend::DPCPP, "aten::lt.Scalar(Tensor self, Scalar other) -> Tensor", &SYCLType::lt)
  .registerOp<Tensor & (Tensor &, const Tensor &, const Tensor &)>(Backend::DPCPP, "aten::lt.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)", &SYCLType::lt_out)
  .registerOp<Tensor (const Tensor &, const Tensor &)>(Backend::DPCPP, "aten::lt.Tensor(Tensor self, Tensor other) -> Tensor", &SYCLType::lt)
  .registerOp<Tensor & (Tensor &, const Tensor &, const Tensor &)>(Backend::DPCPP, "aten::take.out(Tensor self, Tensor index, *, Tensor(a!) out) -> Tensor(a!)", &SYCLType::take_out)
  .registerOp<Tensor (const Tensor &, const Tensor &)>(Backend::DPCPP, "aten::take(Tensor self, Tensor index) -> Tensor", &SYCLType::take)
  .registerOp<Tensor & (Tensor &, const Tensor &, int64_t, const Tensor &)>(Backend::DPCPP, "aten::index_select.out(Tensor self, int dim, Tensor index, *, Tensor(a!) out) -> Tensor(a!)", &SYCLType::index_select_out)
  .registerOp<Tensor (const Tensor &, int64_t, const Tensor &)>(Backend::DPCPP, "aten::index_select(Tensor self, int dim, Tensor index) -> Tensor", &SYCLType::index_select)
  .registerOp<Tensor & (Tensor &, const Tensor &, const Tensor &)>(Backend::DPCPP, "aten::masked_select.out(Tensor self, Tensor mask, *, Tensor(a!) out) -> Tensor(a!)", &SYCLType::masked_select_out)
  .registerOp<Tensor (const Tensor &, const Tensor &)>(Backend::DPCPP, "aten::masked_select(Tensor self, Tensor mask) -> Tensor", &SYCLType::masked_select)
  .registerOp<Tensor & (Tensor &, const Tensor &)>(Backend::DPCPP, "aten::nonzero.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)", &SYCLType::nonzero_out)
  .registerOp<Tensor (const Tensor &)>(Backend::DPCPP, "aten::nonzero(Tensor self) -> Tensor", &SYCLType::nonzero)
  .registerOp<Tensor & (Tensor &, const Tensor &, int64_t, const Tensor &, bool)>(Backend::DPCPP, "aten::gather.out(Tensor self, int dim, Tensor index, *, bool sparse_grad=False, Tensor(a!) out) -> Tensor(a!)", &SYCLType::gather_out)
  .registerOp<Tensor (const Tensor &, int64_t, const Tensor &, bool)>(Backend::DPCPP, "aten::gather(Tensor self, int dim, Tensor index, *, bool sparse_grad=False) -> Tensor", &SYCLType::gather)
  .registerOp<Tensor (const Tensor &)>(Backend::DPCPP, "aten::digamma(Tensor self) -> Tensor", &SYCLType::digamma)
  .registerOp<Tensor & (Tensor &, const Tensor &)>(Backend::DPCPP, "aten::erfinv.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)", &SYCLType::erfinv_out)
  .registerOp<Tensor (const Tensor &)>(Backend::DPCPP, "aten::erfinv(Tensor self) -> Tensor", &SYCLType::erfinv)
  .registerOp<Tensor & (Tensor &, const Tensor &)>(Backend::DPCPP, "aten::sign.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)", &SYCLType::sign_out)
  .registerOp<Tensor (const Tensor &)>(Backend::DPCPP, "aten::sign(Tensor self) -> Tensor", &SYCLType::sign)
  .registerOp<Tensor & (Tensor &, const Tensor &, Scalar)>(Backend::DPCPP, "aten::fmod.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> Tensor(a!)", &SYCLType::fmod_out)
  .registerOp<Tensor (const Tensor &, Scalar)>(Backend::DPCPP, "aten::fmod.Scalar(Tensor self, Scalar other) -> Tensor", &SYCLType::fmod)
  .registerOp<Tensor & (Tensor &, const Tensor &, const Tensor &)>(Backend::DPCPP, "aten::fmod.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)", &SYCLType::fmod_out)
  .registerOp<Tensor (const Tensor &, const Tensor &)>(Backend::DPCPP, "aten::fmod.Tensor(Tensor self, Tensor other) -> Tensor", &SYCLType::fmod)
  .registerOp<Tensor & (Tensor &, const Tensor &, Scalar)>(Backend::DPCPP, "aten::remainder.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> Tensor(a!)", &SYCLType::remainder_out)
  .registerOp<Tensor (const Tensor &, Scalar)>(Backend::DPCPP, "aten::remainder.Scalar(Tensor self, Scalar other) -> Tensor", &SYCLType::remainder)
  .registerOp<Tensor & (Tensor &, const Tensor &, const Tensor &)>(Backend::DPCPP, "aten::remainder.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)", &SYCLType::remainder_out)
  .registerOp<Tensor (const Tensor &, const Tensor &)>(Backend::DPCPP, "aten::remainder.Tensor(Tensor self, Tensor other) -> Tensor", &SYCLType::remainder)
  .registerOp<Tensor & (Tensor &, const Tensor &, const Tensor &)>(Backend::DPCPP, "aten::min.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)", &SYCLType::min_out)
  .registerOp<Tensor (const Tensor &, const Tensor &)>(Backend::DPCPP, "aten::min.other(Tensor self, Tensor other) -> Tensor", &SYCLType::min)
  .registerOp<Tensor (const Tensor &)>(Backend::DPCPP, "aten::min(Tensor self) -> Tensor", &SYCLType::min)
  .registerOp<Tensor & (Tensor &, const Tensor &, const Tensor &)>(Backend::DPCPP, "aten::max.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)", &SYCLType::max_out)
  .registerOp<Tensor (const Tensor &, const Tensor &)>(Backend::DPCPP, "aten::max.other(Tensor self, Tensor other) -> Tensor", &SYCLType::max)
  .registerOp<Tensor (const Tensor &)>(Backend::DPCPP, "aten::max(Tensor self) -> Tensor", &SYCLType::max)
  .registerOp<Tensor (const Tensor &)>(Backend::DPCPP, "aten::median(Tensor self) -> Tensor", &SYCLType::median)
  .registerOp<std::tuple<Tensor &,Tensor &> (Tensor &, Tensor &, const Tensor &, int64_t, bool)>(Backend::DPCPP, "aten::sort.values(Tensor self, int dim=-1, bool descending=False, *, Tensor(a!) values, Tensor(b!) indices) -> (Tensor(a!) values, Tensor(b!) indices)", &SYCLType::sort_out)
  .registerOp<std::tuple<Tensor,Tensor> (const Tensor &, int64_t, bool)>(Backend::DPCPP, "aten::sort(Tensor self, int dim=-1, bool descending=False) -> (Tensor values, Tensor indices)", &SYCLType::sort)
  .registerOp<std::tuple<Tensor &,Tensor &> (Tensor &, Tensor &, const Tensor &, int64_t, int64_t, bool, bool)>(Backend::DPCPP, "aten::topk.values(Tensor self, int k, int dim=-1, bool largest=True, bool sorted=True, *, Tensor(a!) values, Tensor(b!) indices) ->(Tensor(a!) values, Tensor(b!) indices)", &SYCLType::topk_out)
  .registerOp<Tensor (const Tensor &, int64_t, int64_t, int64_t)>(Backend::DPCPP, "aten::unfold(Tensor(a) self, int dimension, int size, int step) -> Tensor(a)", &SYCLType::unfold)
  .registerOp<bool (const Tensor &, const Tensor &)>(Backend::DPCPP, "aten::equal(Tensor self, Tensor other) -> bool", &SYCLType::equal)
  .registerOp<Tensor & (Tensor &, const Tensor &, const Tensor &)>(Backend::DPCPP, "aten::pow.Tensor_Tensor_out(Tensor self, Tensor exponent, *, Tensor(a!) out) -> Tensor(a!)", &SYCLType::pow_out)
  .registerOp<Tensor (const Tensor &, const Tensor &)>(Backend::DPCPP, "aten::pow.Tensor_Tensor(Tensor self, Tensor exponent) -> Tensor", &SYCLType::pow)
  .registerOp<Tensor & (Tensor &, Scalar, const Tensor &)>(Backend::DPCPP, "aten::pow.Scalar_out(Scalar self, Tensor exponent, *, Tensor(a!) out) -> Tensor(a!)", &SYCLType::pow_out)
  .registerOp<Tensor (Scalar, const Tensor &)>(Backend::DPCPP, "aten::pow.Scalar(Scalar self, Tensor exponent) -> Tensor", &SYCLType::pow)
  .registerOp<Tensor (const Tensor &, const Tensor &, const Tensor &, Scalar, Scalar)>(Backend::DPCPP, "aten::_addr(Tensor self, Tensor vec1, Tensor vec2, *, Scalar beta=1, Scalar alpha=1) -> Tensor", &SYCLType::_addr)
  .registerOp<Tensor & (Tensor &, const Tensor &, const Tensor &, Scalar, Scalar)>(Backend::DPCPP, "aten::_addr_(Tensor(a!) self, Tensor vec1, Tensor vec2, *, Scalar beta=1, Scalar alpha=1) -> Tensor(a!)", &SYCLType::_addr_)
  .registerOp<Tensor & (Tensor &, const Tensor &, const Tensor &, const Tensor &, Scalar, Scalar)>(Backend::DPCPP, "aten::_addr.out(Tensor self, Tensor vec1, Tensor vec2, *, Scalar beta=1, Scalar alpha=1, Tensor(a!) out) -> Tensor(a!)", &SYCLType::_addr_out)
  .registerOp<Tensor & (Tensor &, int64_t, const Tensor &, const Tensor &)>(Backend::DPCPP, "aten::_index_copy_(Tensor(a!) self, int dim, Tensor index, Tensor source) -> Tensor(a!)", &SYCLType::_index_copy_)
  .registerOp<Tensor (const Tensor &, int64_t)>(Backend::DPCPP, "aten::_cumsum(Tensor self, int dim) -> Tensor", &SYCLType::_cumsum)
  .registerOp<Tensor & (Tensor &, const Tensor &, int64_t)>(Backend::DPCPP, "aten::_cumsum.out(Tensor self, int dim, *, Tensor(a!) out) -> Tensor(a!)", &SYCLType::_cumsum_out)
  .registerOp<Tensor (const Tensor &, int64_t)>(Backend::DPCPP, "aten::_cumprod(Tensor self, int dim) -> Tensor", &SYCLType::_cumprod)
  .registerOp<Tensor & (Tensor &, const Tensor &, int64_t)>(Backend::DPCPP, "aten::_cumprod.out(Tensor self, int dim, *, Tensor(a!) out) -> Tensor(a!)", &SYCLType::_cumprod_out)
  .registerOp<Tensor & (Tensor &, const Tensor &, const Tensor &, const Tensor &, Scalar, Scalar)>(Backend::DPCPP, "aten::_addmm.out(Tensor self, Tensor mat1, Tensor mat2, *, Scalar beta=1, Scalar alpha=1, Tensor(a!) out) -> Tensor(a!)", &SYCLType::_addmm_out)
  .registerOp<Tensor (const Tensor &, const Tensor &, const Tensor &, Scalar, Scalar)>(Backend::DPCPP, "aten::_addmm(Tensor self, Tensor mat1, Tensor mat2, *, Scalar beta=1, Scalar alpha=1) -> Tensor", &SYCLType::_addmm)
  .registerOp<Tensor & (Tensor &, const Tensor &, const Tensor &, Scalar, Scalar)>(Backend::DPCPP, "aten::_addmm_(Tensor(a!) self, Tensor mat1, Tensor mat2, *, Scalar beta=1, Scalar alpha=1) -> Tensor(a!)", &SYCLType::_addmm_)
  .registerOp<Tensor (TensorList, int64_t)>(Backend::DPCPP, "aten::_cat(Tensor[] tensors, int dim=0) -> Tensor", &SYCLType::_cat)
  .registerOp<Tensor & (Tensor &, TensorList, int64_t)>(Backend::DPCPP, "aten::_cat.out(Tensor[] tensors, int dim=0, *, Tensor(a!) out) -> Tensor(a!)", &SYCLType::_cat_out)
  .registerOp<std::tuple<Tensor,Tensor> (const Tensor &, int64_t, bool)>(Backend::DPCPP, "aten::_mode(Tensor self, int dim=-1, bool keepdim=False) -> (Tensor, Tensor)", &SYCLType::_mode)
  .registerOp<std::tuple<Tensor &,Tensor &> (Tensor &, Tensor &, const Tensor &, int64_t, bool)>(Backend::DPCPP, "aten::_mode.values(Tensor self, int dim=-1, bool keepdim=False, *, Tensor(a!) values, Tensor(b!) indices) -> (Tensor(a!), Tensor(b!))", &SYCLType::_mode_out)
  .registerOp<std::tuple<Tensor,Tensor> (const Tensor &, int64_t, bool)>(Backend::DPCPP, "aten::_max(Tensor self, int dim, bool keepdim=False) -> (Tensor, Tensor)", &SYCLType::_max)
  .registerOp<std::tuple<Tensor &,Tensor &> (Tensor &, Tensor &, const Tensor &, int64_t, bool)>(Backend::DPCPP, "aten::_max.max(Tensor self, int dim, bool keepdim=False, *, Tensor(a!) max, Tensor(b!) max_indices) -> (Tensor(a!), Tensor(b!))", &SYCLType::_max_out)
  .registerOp<std::tuple<Tensor,Tensor> (const Tensor &, int64_t, bool)>(Backend::DPCPP, "aten::_min(Tensor self, int dim, bool keepdim=False) -> (Tensor, Tensor)", &SYCLType::_min)
  .registerOp<std::tuple<Tensor &,Tensor &> (Tensor &, Tensor &, const Tensor &, int64_t, bool)>(Backend::DPCPP, "aten::_min.min(Tensor self, int dim, bool keepdim=False, *, Tensor(a!) min, Tensor(b!) min_indices) -> (Tensor(a!), Tensor(b!))", &SYCLType::_min_out)
  .registerOp<Tensor & (Tensor &, const Tensor &, const Tensor &, const Tensor &, int64_t)>(Backend::DPCPP, "aten::binary_cross_entropy.out(Tensor self, Tensor target, Tensor? weight=None, int reduction=Mean, *, Tensor(a!) out) -> Tensor(a!)", &SYCLType::binary_cross_entropy_out)
  .registerOp<Tensor (const Tensor &, const Tensor &, const Tensor &, int64_t)>(Backend::DPCPP, "aten::binary_cross_entropy(Tensor self, Tensor target, Tensor? weight=None, int reduction=Mean) -> Tensor", &SYCLType::binary_cross_entropy)
  .registerOp<Tensor & (Tensor &, const Tensor &, const Tensor &, int64_t)>(Backend::DPCPP, "aten::mse_loss.out(Tensor self, Tensor target, int reduction=Mean, *, Tensor(a!) out) -> Tensor(a!)", &SYCLType::mse_loss_out)
  .registerOp<Tensor (const Tensor &, const Tensor &, int64_t)>(Backend::DPCPP, "aten::mse_loss(Tensor self, Tensor target, int reduction=Mean) -> Tensor", &SYCLType::mse_loss)
  .registerOp<std::tuple<Tensor &,Tensor &> (Tensor &, Tensor &, const Tensor &, const Tensor &, const Tensor &, int64_t, int64_t)>(Backend::DPCPP, "aten::nll_loss_forward.output(Tensor self, Tensor target, Tensor? weight, int reduction, int ignore_index, *, Tensor(a!) output, Tensor(b!) total_weight) -> (Tensor(a!), Tensor(b!))", &SYCLType::nll_loss_forward_out)
  .registerOp<std::tuple<Tensor,Tensor> (const Tensor &, const Tensor &, const Tensor &, int64_t, int64_t)>(Backend::DPCPP, "aten::nll_loss_forward(Tensor self, Tensor target, Tensor? weight, int reduction, int ignore_index) -> (Tensor output, Tensor total_weight)", &SYCLType::nll_loss_forward)
  .registerOp<Tensor & (Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, int64_t, int64_t, const Tensor &)>(Backend::DPCPP, "aten::nll_loss_backward.grad_input(Tensor grad_output, Tensor self, Tensor target, Tensor? weight, int reduction, int ignore_index, Tensor total_weight, *, Tensor(a!) grad_input) -> Tensor(a!)", &SYCLType::nll_loss_backward_out)
  .registerOp<Tensor (const Tensor &, const Tensor &, const Tensor &, const Tensor &, int64_t, int64_t, const Tensor &)>(Backend::DPCPP, "aten::nll_loss_backward(Tensor grad_output, Tensor self, Tensor target, Tensor? weight, int reduction, int ignore_index, Tensor total_weight) -> Tensor", &SYCLType::nll_loss_backward)
  .registerOp<Tensor & (Tensor &, const Tensor &, IntArrayRef)>(Backend::DPCPP, "aten::adaptive_avg_pool2d.out(Tensor self, int[2] output_size, *, Tensor(a!) out) -> Tensor(a!)", &SYCLType::adaptive_avg_pool2d_out)
  .registerOp<Tensor (const Tensor &, IntArrayRef)>(Backend::DPCPP, "aten::_adaptive_avg_pool2d(Tensor self, int[2] output_size) -> Tensor", &SYCLType::_adaptive_avg_pool2d)
  .registerOp<Tensor (const Tensor &, const Tensor &)>(Backend::DPCPP, "aten::_adaptive_avg_pool2d_backward(Tensor grad_output, Tensor self) -> Tensor", &SYCLType::_adaptive_avg_pool2d_backward)
  .registerOp<Tensor & (Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, bool, bool, c10::optional<int64_t>)>(Backend::DPCPP, "aten::avg_pool2d.out(Tensor self, int[2] kernel_size, int[2] stride=[], int[2] padding=0, bool ceil_mode=False, bool count_include_pad=True, int? divisor_override=None, *, Tensor(a!) out) -> Tensor(a!)", &SYCLType::avg_pool2d_out)
  .registerOp<Tensor (const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, bool, bool, c10::optional<int64_t>)>(Backend::DPCPP, "aten::avg_pool2d(Tensor self, int[2] kernel_size, int[2] stride=[], int[2] padding=0, bool ceil_mode=False, bool count_include_pad=True, int? divisor_override=None) -> Tensor", &SYCLType::avg_pool2d)
  .registerOp<Tensor & (Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, bool, bool, c10::optional<int64_t>)>(Backend::DPCPP, "aten::avg_pool2d_backward.grad_input(Tensor grad_output, Tensor self, int[2] kernel_size, int[2] stride, int[2] padding, bool ceil_mode, bool count_include_pad, int? divisor_override, *, Tensor(a!) grad_input) -> Tensor(a!)", &SYCLType::avg_pool2d_backward_out)
  .registerOp<Tensor (const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, bool, bool, c10::optional<int64_t>)>(Backend::DPCPP, "aten::avg_pool2d_backward(Tensor grad_output, Tensor self, int[2] kernel_size, int[2] stride, int[2] padding, bool ceil_mode, bool count_include_pad, int? divisor_override) -> Tensor", &SYCLType::avg_pool2d_backward)
  .registerOp<std::tuple<Tensor &,Tensor &> (Tensor &, Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, bool)>(Backend::DPCPP, "aten::max_pool2d_with_indices.out(Tensor self, int[2] kernel_size, int[2] stride=[], int[2] padding=0, int[2] dilation=1, bool ceil_mode=False, *, Tensor(a!) out, Tensor(b!) indices) -> (Tensor(a!), Tensor(b!))", &SYCLType::max_pool2d_with_indices_out)
  .registerOp<std::tuple<Tensor,Tensor> (const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, bool)>(Backend::DPCPP, "aten::max_pool2d_with_indices(Tensor self, int[2] kernel_size, int[2] stride=[], int[2] padding=0, int[2] dilation=1, bool ceil_mode=False) -> (Tensor, Tensor)", &SYCLType::max_pool2d_with_indices)
  .registerOp<Tensor & (Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, bool, const Tensor &)>(Backend::DPCPP, "aten::max_pool2d_with_indices_backward.grad_input(Tensor grad_output, Tensor self, int[2] kernel_size, int[2] stride, int[2] padding, int[2] dilation, bool ceil_mode, Tensor indices, *, Tensor(a!) grad_input) -> Tensor(a!)", &SYCLType::max_pool2d_with_indices_backward_out)
  .registerOp<Tensor (const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, bool, const Tensor &)>(Backend::DPCPP, "aten::max_pool2d_with_indices_backward(Tensor grad_output, Tensor self, int[2] kernel_size, int[2] stride, int[2] padding, int[2] dilation, bool ceil_mode, Tensor indices) -> Tensor", &SYCLType::max_pool2d_with_indices_backward)
  .registerOp<Tensor & (Tensor &, const Tensor &, IntArrayRef)>(Backend::DPCPP, "aten::upsample_nearest2d.out(Tensor self, int[2] output_size, *, Tensor(a!) out) -> Tensor(a!)", &SYCLType::upsample_nearest2d_out)
  .registerOp<Tensor (const Tensor &, IntArrayRef)>(Backend::DPCPP, "aten::upsample_nearest2d(Tensor self, int[2] output_size) -> Tensor", &SYCLType::upsample_nearest2d)
  .registerOp<Tensor & (Tensor &, const Tensor &, IntArrayRef, IntArrayRef)>(Backend::DPCPP, "aten::upsample_nearest2d_backward.grad_input(Tensor grad_output, int[2] output_size, int[4] input_size, *, Tensor(a!) grad_input) -> Tensor(a!)", &SYCLType::upsample_nearest2d_backward_out)
  .registerOp<Tensor (const Tensor &, IntArrayRef, IntArrayRef)>(Backend::DPCPP, "aten::upsample_nearest2d_backward(Tensor grad_output, int[2] output_size, int[4] input_size) -> Tensor", &SYCLType::upsample_nearest2d_backward)
  .registerOp<Tensor & (Tensor &, const Tensor &, const Tensor &)>(Backend::DPCPP, "aten::tanh_backward.grad_input(Tensor grad_output, Tensor output, *, Tensor(a!) grad_input) -> Tensor(a!)", &SYCLType::tanh_backward_out)
  .registerOp<Tensor (const Tensor &, const Tensor &)>(Backend::DPCPP, "aten::tanh_backward(Tensor grad_output, Tensor output) -> Tensor", &SYCLType::tanh_backward);
}
