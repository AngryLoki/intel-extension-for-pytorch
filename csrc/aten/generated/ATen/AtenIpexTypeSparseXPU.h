// Autogenerated file by gen_code.py
// /home/gta/work/rebase_pt110/frameworks.ai.pytorch.ipex-gpu/scripts/gpu/gen_code.py
// --declarations-path
// /home/gta/work/rebase_pt110/frameworks.ai.pytorch.ipex-gpu/scripts/declarations/Declarations.yaml
// --out
// /home/gta/work/rebase_pt110/frameworks.ai.pytorch.ipex-gpu/csrc/aten/generated/ATen/
// --source-path /home/gta/work/rebase_pt110/frameworks.ai.pytorch.ipex-gpu. Do
// not edit directly!
#pragma once

#include <ATen/Tensor.h>
#include <intrinsic/ipex_intrinsic.h>

namespace at {

namespace AtenIpexTypeSparseXPU {

void RegisterAtenTypeFunctions();

Tensor empty(
    IntArrayRef size,
    const TensorOptions& options,
    c10::optional<MemoryFormat> memory_format);
Tensor _sparse_coo_tensor_with_dims_and_tensors(
    int64_t sparse_dim,
    int64_t dense_dim,
    IntArrayRef size,
    const Tensor& indices,
    const Tensor& values,
    const TensorOptions& options);
Tensor sparse_mask(const Tensor& self, const Tensor& mask);
int64_t sparse_dim(const Tensor& self);
int64_t dense_dim(const Tensor& self);
int64_t _nnz(const Tensor& self);
Tensor coalesce(const Tensor& self);
bool is_coalesced(const Tensor& self);
Tensor _indices(const Tensor& self);
Tensor _values(const Tensor& self);
Tensor& _coalesced_(Tensor& self, bool coalesced);
Tensor& copy_sparse_to_sparse_(
    Tensor& self,
    const Tensor& src,
    bool non_blocking);
} // namespace AtenIpexTypeSparseXPU

} // namespace at
