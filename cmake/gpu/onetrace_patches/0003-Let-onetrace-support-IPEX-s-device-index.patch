From 43f357d76678d5f6ce23c2d4037338278f5668d9 Mon Sep 17 00:00:00 2001
From: "Xunsong, Huang" <xunsong.huang@intel.com>
Date: Tue, 5 Sep 2023 19:46:45 +0000
Subject: [PATCH 3/3] Let onetrace support IPEX's device index

Signed-off-by: Xunsong, Huang <xunsong.huang@intel.com>
---
 tools/onetrace/unified_tracer.h       | 35 ++++++++++++++++++++++++---
 tools/ze_tracer/ze_kernel_collector.h |  1 +
 2 files changed, 33 insertions(+), 3 deletions(-)

diff --git a/tools/onetrace/unified_tracer.h b/tools/onetrace/unified_tracer.h
index c7f749b..21298f0 100644
--- a/tools/onetrace/unified_tracer.h
+++ b/tools/onetrace/unified_tracer.h
@@ -234,6 +234,8 @@ class UnifiedTracer {
     while (!tracer->external_type_stack.empty())
       tracer->external_type_stack.pop();
     tracer->ipex_buf_.clear();
+    tracer->ipex_devices_.clear();
+    tracer->ipex_fake_queues_.clear();
 
     return tracer;
   }
@@ -357,6 +359,10 @@ class UnifiedTracer {
     return &ipex_buf_;
   }
 
+  void set_device_id_map(const std::vector<std::string>& devices) {
+    ipex_devices_ = devices;
+  }
+
  private:
   UnifiedTracer(const TraceOptions& options)
       : options_(options),
@@ -477,6 +483,28 @@ class UnifiedTracer {
     return total_time;
   }
 
+  inline void getDeviceQueueId(const std::string& full_str, uint64_t* deviceId, uint64_t* queueId) {
+    size_t dot_pos;
+    std::string device_str, next_str, queue_str;
+    ze_device_handle_t cur_device;
+    dot_pos = full_str.find('.');
+    device_str = full_str.substr(0, dot_pos);
+    next_str = full_str.substr(dot_pos + 1);
+    dot_pos = next_str.find('.');
+    queue_str = next_str.substr(0, dot_pos);
+
+    auto it = std::find(ipex_devices_.begin(), ipex_devices_.end(), device_str);
+    if(it != ipex_devices_.end())
+      *deviceId = std::distance(ipex_devices_.begin(), it);
+    else
+      *deviceId = -1;
+
+    auto it2 = std::find(ipex_fake_queues_.begin(), ipex_fake_queues_.end(), queue_str);
+    *queueId = std::distance(ipex_fake_queues_.begin(), it2);
+    if (it2 == ipex_fake_queues_.end())
+      ipex_fake_queues_.push_back(queue_str);
+  }
+
   void PrintBackendTable(
       const ZeApiCollector* collector, const char* device_type) {
     PTI_ASSERT(collector != nullptr);
@@ -1026,8 +1054,7 @@ class UnifiedTracer {
     act.kind = ONEPTI_ACTIVITY_KIND_CONCURRENT_KERNEL;
     act.start = started + tracer->start_point_;
     act.end = ended + tracer->start_point_;
-    act.deviceId = 0;
-    act.queueId = strtol(queue.c_str(), 0, 16);
+    tracer->getDeviceQueueId(queue, &act.deviceId, &act.queueId);
     act.appended = appended + tracer->start_point_;
     act.submitted = submitted + tracer->start_point_;
     tracer->lock_.lock();
@@ -1066,7 +1093,7 @@ class UnifiedTracer {
     act.kind = ONEPTI_ACTIVITY_KIND_CONCURRENT_KERNEL;
     act.start = started + tracer->start_point_;
     act.end = ended + tracer->start_point_;
-    act.deviceId = 0;
+    act.deviceId = -1;
     act.queueId = strtol(queue.c_str(), 0, 16);
     act.appended = queued + tracer->start_point_;
     act.submitted = submitted + tracer->start_point_;
@@ -1461,6 +1488,8 @@ class UnifiedTracer {
   std::stack<int> user_external_id_stack;
   std::stack<Onepti_ExternalActivityType> external_type_stack;
   std::vector<uint8_t> ipex_buf_;
+  std::vector<std::string> ipex_devices_;
+  std::vector<std::string> ipex_fake_queues_;
 };
 
 #endif // PTI_TOOLS_ONETRACE_UNIFIED_TRACER_H_
diff --git a/tools/ze_tracer/ze_kernel_collector.h b/tools/ze_tracer/ze_kernel_collector.h
index ed83c35..d2f8853 100644
--- a/tools/ze_tracer/ze_kernel_collector.h
+++ b/tools/ze_tracer/ze_kernel_collector.h
@@ -811,6 +811,7 @@ class ZeKernelCollector {
         std::to_string(call->call_id);
 
       std::stringstream stream;
+      stream << std::hex << call->command->device << ".";
       stream << std::hex << call->queue;
       if (tile >= 0) {
         stream << "." << std::dec << tile;
-- 
2.34.1

