From 10e22a4e4deca7e5b3ee12bb6bf4e53d9c20d553 Mon Sep 17 00:00:00 2001
From: "Xunsong, Huang" <xunsong.huang@intel.com>
Date: Sat, 2 Sep 2023 05:58:58 +0000
Subject: [PATCH 2/3] Fix Kernel Missing Bug On ZeTracer

Signed-off-by: Xunsong, Huang <xunsong.huang@intel.com>
---
 tools/utils/correlator.h              |   8 +-
 tools/ze_tracer/ze_event_cache.h      |   5 +-
 tools/ze_tracer/ze_kernel_collector.h | 208 ++++++++++++++++----------
 3 files changed, 143 insertions(+), 78 deletions(-)

diff --git a/tools/utils/correlator.h b/tools/utils/correlator.h
index 850debc..7965c7b 100644
--- a/tools/utils/correlator.h
+++ b/tools/utils/correlator.h
@@ -85,6 +85,9 @@ class Correlator {
   }
 
   void CreateKernelIdList(ze_command_list_handle_t command_list) {
+    if (kernel_id_map_.count(command_list)) {
+        kernel_id_map_.erase(command_list);
+    }
     PTI_ASSERT(kernel_id_map_.count(command_list) == 0);
     kernel_id_map_[command_list] = std::vector<uint64_t>();
   }
@@ -115,6 +118,9 @@ class Correlator {
   }
 
   void CreateCallIdList(ze_command_list_handle_t command_list) {
+    if (call_id_map_.count(command_list)) {
+        call_id_map_.erase(command_list);
+    }
     PTI_ASSERT(call_id_map_.count(command_list) == 0);
     call_id_map_[command_list] = std::vector<uint64_t>();
   }
@@ -147,4 +153,4 @@ class Correlator {
 #endif // PTI_LEVEL_ZERO
 };
 
-#endif // PTI_TOOLS_UTILS_CORRELATOR_H_
\ No newline at end of file
+#endif // PTI_TOOLS_UTILS_CORRELATOR_H_
diff --git a/tools/ze_tracer/ze_event_cache.h b/tools/ze_tracer/ze_event_cache.h
index 6a94433..8bcaa3a 100644
--- a/tools/ze_tracer/ze_event_cache.h
+++ b/tools/ze_tracer/ze_event_cache.h
@@ -119,7 +119,10 @@ class ZeEventCache {
   }
 
   void ReleaseEvent(ze_event_handle_t event) {
-    PTI_ASSERT(event != nullptr);
+    if (event == nullptr) {
+      return;
+    }
+
     const std::lock_guard<std::mutex> lock(lock_);
 
     auto info = event_info_map_.find(event);
diff --git a/tools/ze_tracer/ze_kernel_collector.h b/tools/ze_tracer/ze_kernel_collector.h
index ceeba68..ed83c35 100644
--- a/tools/ze_tracer/ze_kernel_collector.h
+++ b/tools/ze_tracer/ze_kernel_collector.h
@@ -415,6 +415,8 @@ class ZeKernelCollector {
 
     prologue_callbacks.Event.pfnHostResetCb = OnEnterEventHostReset;
 
+    epilogue_callbacks.Event.pfnQueryStatusCb = OnExitEventQueryStatus;
+
     prologue_callbacks.EventPool.pfnCreateCb = OnEnterEventPoolCreate;
     epilogue_callbacks.EventPool.pfnCreateCb = OnExitEventPoolCreate;
 
@@ -566,9 +568,18 @@ class ZeKernelCollector {
     correlator_->AddCallId(command_list, call->call_id);
   }
 
+  bool NoMoreUsedCommand(const ZeKernelCommand* command) {
+    for (auto it = kernel_call_list_.begin(); it != kernel_call_list_.end(); it++) {
+      ZeKernelCall* call = *it;
+      if (call->command == command) {
+        return false;
+      }
+    }
+    return true;
+  }
+
   void ProcessCall(std::string callname, ze_event_handle_t event) {
     PTI_ASSERT(event != nullptr);
-    const std::lock_guard<std::mutex> lock(lock_);
 
     ze_result_t status = ZE_RESULT_SUCCESS;
     status = zeEventQueryStatus(event);
@@ -576,16 +587,31 @@ class ZeKernelCollector {
       return;
     }
 
-    for (auto it = kernel_call_list_.begin();
-         it != kernel_call_list_.end(); ++it) {
+    bool done = false;
+    for (auto it = kernel_call_list_.begin(); it != kernel_call_list_.end();) {
       ZeKernelCall* call = *it;
       PTI_ASSERT(call != nullptr);
       ZeKernelCommand* command = call->command;
-      PTI_ASSERT(command != nullptr);
 
-      if (command->event == event) {
-        ProcessCall(callname, call);
-        kernel_call_list_.erase(it);
+      if (command->event != nullptr) {
+        if (zeEventQueryStatus(command->event) == ZE_RESULT_SUCCESS) {
+          if (command->event == event) {
+            ProcessCall(callname, call);
+            done = true;
+          }
+          else {
+            ProcessCall(callname, call);
+          }
+        }
+      }
+      if (command->event == nullptr) {
+        delete call;
+        it = kernel_call_list_.erase(it);
+      }
+      else {
+        it++;
+      }
+      if (done) {
         break;
       }
     }
@@ -593,7 +619,6 @@ class ZeKernelCollector {
 
   void ProcessCall(std::string callname, ze_fence_handle_t fence) {
     PTI_ASSERT(fence != nullptr);
-    const std::lock_guard<std::mutex> lock(lock_);
 
     ze_result_t status = ZE_RESULT_SUCCESS;
     status = zeFenceQueryStatus(fence);
@@ -601,28 +626,30 @@ class ZeKernelCollector {
       return;
     }
 
+    bool done = false;
     for (auto it = kernel_call_list_.begin(); it != kernel_call_list_.end();) {
       ZeKernelCall* call = *it;
       PTI_ASSERT(call != nullptr);
+      ZeKernelCommand* command = call->command;
       if ((call->fence != nullptr) && (call->fence == fence)) {
-        ZeKernelCommand* command = call->command;
-        PTI_ASSERT(command != nullptr);
-
-	if (event_cache_.QueryEvent(command->event)) {
-	  PTI_ASSERT(zeEventQueryStatus(command->event) == ZE_RESULT_SUCCESS);
-#if 0
-          if (zeEventQueryStatus(command->event) != ZE_RESULT_SUCCESS) {
-	    // this should not happen
-            zeEventHostSignal(command->event);
-	  }
-#endif /* 0 */
-        }
         ProcessCall(callname, call);
+        done = true;
+      }
+      else {
+        if ((command->event != nullptr) && (zeEventQueryStatus(command->event) == ZE_RESULT_SUCCESS)) {
+          ProcessCall(callname, call);
+        }
+      }
+      if (command->event == nullptr) {
+        delete call;
         it = kernel_call_list_.erase(it);
       }
       else {
         it++;
       }
+      if (done) {
+        break;
+      }
     }
   }
 
@@ -749,12 +776,15 @@ class ZeKernelCollector {
     GetHostTime(call, timestamp, host_start, host_end);
     PTI_ASSERT(host_start <= host_end);
 
-    std::string name = command->props.name;
-    PTI_ASSERT(!name.empty());
+    std::string name;
 
     if (options_.verbose) {
       name = GetVerboseName(&command->props);
     }
+    else {
+      name = command->props.name;
+    }
+    PTI_ASSERT(!name.empty());
 
     if (tile >= 0) {
       name += "(" + std::to_string(tile) + "T)";
@@ -799,63 +829,52 @@ class ZeKernelCollector {
     ZeKernelCommand* command = call->command;
     PTI_ASSERT(command != nullptr);
 
-    if (call->need_to_process) {
-#ifdef PTI_KERNEL_INTERVALS
-      AddKernelInterval(call);
-#else // PTI_KERNEL_INTERVALS
-      ze_result_t status = ZE_RESULT_SUCCESS;
-      status = zeEventQueryStatus(command->event);
-      PTI_ASSERT(status == ZE_RESULT_SUCCESS);
-
-      ze_kernel_timestamp_result_t timestamp{};
-      status = zeEventQueryKernelTimestamp(command->event, &timestamp);
-      PTI_ASSERT(status == ZE_RESULT_SUCCESS);
+    ze_kernel_timestamp_result_t timestamp{};
+    ze_result_t status = zeEventQueryKernelTimestamp(command->event, &timestamp);
+    PTI_ASSERT(status == ZE_RESULT_SUCCESS);
 
-      if (options_.kernels_per_tile && command->props.simd_width > 0) {
-        if (device_map_.count(command->device) == 1 &&
-            !device_map_[command->device].empty()) { // Implicit Scaling
-          uint32_t count = 0;
-          status = zeEventQueryTimestampsExp(
-              command->event, command->device, &count, nullptr);
-          PTI_ASSERT(status == ZE_RESULT_SUCCESS);
-          PTI_ASSERT(count > 0);
-
-          std::vector<ze_kernel_timestamp_result_t> timestamps(count);
-          status = zeEventQueryTimestampsExp(
-              command->event, command->device, &count, timestamps.data());
-          PTI_ASSERT(status == ZE_RESULT_SUCCESS);
-
-          if (count == 1) { // First tile is used only
-            ProcessCall(call, timestamp, 0, true);
-          } else {
-            ProcessCall(call, timestamp, -1, false);
-            for (uint32_t i = 0; i < count; ++i) {
-              ProcessCall(call, timestamps[i], static_cast<int>(i), true);
-            }
-          }
-        } else { // Explicit Scaling
-          if (device_map_.count(command->device) == 0) { // Subdevice
-            int sub_device_id = GetSubDeviceId(command->device);
-            PTI_ASSERT(sub_device_id >= 0);
-            ProcessCall(call, timestamp, sub_device_id, true);
-          } else { // Device with no subdevices
-            ProcessCall(call, timestamp, 0, true);
+    if (options_.kernels_per_tile && command->props.simd_width > 0) {
+      if (device_map_.count(command->device) == 1 &&
+          !device_map_[command->device].empty()) { // Implicit Scaling
+        uint32_t count = 0;
+        status = zeEventQueryTimestampsExp(
+            command->event, command->device, &count, nullptr);
+        PTI_ASSERT(status == ZE_RESULT_SUCCESS);
+        PTI_ASSERT(count > 0);
+
+        std::vector<ze_kernel_timestamp_result_t> timestamps(count);
+        status = zeEventQueryTimestampsExp(
+            command->event, command->device, &count, timestamps.data());
+        PTI_ASSERT(status == ZE_RESULT_SUCCESS);
+
+        if (count == 1) { // First tile is used only
+          ProcessCall(call, timestamps[0], 0, true);
+        } else {
+          ProcessCall(call, timestamp, -1, false);
+          for (uint32_t i = 0; i < count; ++i) {
+            ProcessCall(call, timestamps[i], static_cast<int>(i), true);
           }
         }
-      } else {
-        ProcessCall(call, timestamp, -1, true);
+      } else { // Explicit Scaling
+        if (device_map_.count(command->device) == 0) { // Subdevice
+          int sub_device_id = GetSubDeviceId(command->device);
+          PTI_ASSERT(sub_device_id >= 0);
+          ProcessCall(call, timestamp, sub_device_id, true);
+        } else { // Device with no subdevices
+          ProcessCall(call, timestamp, 0, true);
+        }
       }
-#endif // PTI_KERNEL_INTERVALS
+    } else {
+      ProcessCall(call, timestamp, -1, true);
     }
 
     //DO NOT RESET EVENT 
     //event_cache_.ResetEvent(command->event);
-    delete call;
+    command->event = nullptr;
   }
 
   void ProcessCalls(std::string callname) {
     ze_result_t status = ZE_RESULT_SUCCESS;
-    const std::lock_guard<std::mutex> lock(lock_);
 
     auto it = kernel_call_list_.begin();
     while (it != kernel_call_list_.end()) {
@@ -864,16 +883,18 @@ class ZeKernelCollector {
       ZeKernelCommand* command = call->command;
       PTI_ASSERT(command != nullptr);
 
-      PTI_ASSERT(command->event != nullptr);
+      if (command->event != nullptr) {
+        status = zeEventQueryStatus(command->event);
+        if (status == ZE_RESULT_SUCCESS) {
+          ProcessCall(callname, call);
+        }
+      }
 
-      status = zeEventQueryStatus(command->event);
-      if (status == ZE_RESULT_NOT_READY) {
-        ++it;
-      } else if (status == ZE_RESULT_SUCCESS) {
-        ProcessCall(callname, call);
+      if (command->event == nullptr) {
+        delete call;
         it = kernel_call_list_.erase(it);
       } else {
-        PTI_ASSERT(0);
+        ++it;
       }
     }
   }
@@ -1022,6 +1043,9 @@ class ZeKernelCollector {
     PTI_ASSERT(command_list != nullptr);
     PTI_ASSERT(context != nullptr);
     const std::lock_guard<std::mutex> lock(lock_);
+    if (command_list_map_.count(command_list)) {
+        command_list_map_.erase(command_list);
+    }
     PTI_ASSERT(command_list_map_.count(command_list) == 0);
     command_list_map_[command_list] =
       {std::vector<ZeKernelCommand*>(), context, device, immediate};
@@ -1031,6 +1055,7 @@ class ZeKernelCollector {
     correlator_->CreateCallIdList(command_list);
   }
 
+#if 0
   void RemoveKernelCommands(ze_command_list_handle_t command_list) {
     PTI_ASSERT(command_list != nullptr);
 
@@ -1070,6 +1095,7 @@ class ZeKernelCollector {
     correlator_->ResetKernelIdList(command_list);
     correlator_->ResetCallIdList(command_list);
   }
+#endif /* 0 */
 
   void AddKernelCalls(
       ze_command_list_handle_t command_list,
@@ -1222,7 +1248,9 @@ class ZeKernelCollector {
       ZeKernelCollector* collector =
         reinterpret_cast<ZeKernelCollector*>(global_data);
       PTI_ASSERT(collector != nullptr);
+      collector->lock_.lock();
       collector->ProcessCall("EventDestroy", *(params->phEvent));
+      collector->lock_.unlock();
     }
   }
 
@@ -1233,7 +1261,9 @@ class ZeKernelCollector {
       ZeKernelCollector* collector =
         reinterpret_cast<ZeKernelCollector*>(global_data);
       PTI_ASSERT(collector != nullptr);
+      collector->lock_.lock();
       collector->ProcessCall("EventHostReset", *(params->phEvent));
+      collector->lock_.unlock();
     }
   }
 
@@ -1245,7 +1275,23 @@ class ZeKernelCollector {
       ZeKernelCollector* collector =
         reinterpret_cast<ZeKernelCollector*>(global_data);
       PTI_ASSERT(collector != nullptr);
+      collector->lock_.lock();
       collector->ProcessCall("EventHostSynchronize", *(params->phEvent));
+      collector->lock_.unlock();
+    }
+  }
+
+  static void OnExitEventQueryStatus(
+      ze_event_query_status_params_t *params,
+      ze_result_t result, void *global_data, void **instance_data) {
+    if (result == ZE_RESULT_SUCCESS) {
+      PTI_ASSERT(*(params->phEvent) != nullptr);
+      ZeKernelCollector* collector =
+        reinterpret_cast<ZeKernelCollector*>(global_data);
+      PTI_ASSERT(collector != nullptr);
+      collector->lock_.lock();
+      collector->ProcessCall("EventQueryStatus", *(params->phEvent));
+      collector->lock_.unlock();
     }
   }
 
@@ -1257,7 +1303,9 @@ class ZeKernelCollector {
       ZeKernelCollector* collector =
         reinterpret_cast<ZeKernelCollector*>(global_data);
       PTI_ASSERT(collector != nullptr);
+      collector->lock_.lock();
       collector->ProcessCall("FenceHostSynchronize", *(params->phFence));
+      collector->lock_.unlock();
     }
   }
 
@@ -1938,8 +1986,10 @@ class ZeKernelCollector {
       ZeKernelCollector* collector =
         reinterpret_cast<ZeKernelCollector*>(global_data);
       PTI_ASSERT(collector != nullptr);
+      collector->lock_.lock();
       collector->ProcessCalls("CommandListDestroy");
-      collector->RemoveCommandList(*params->phCommandList);
+      // collector->RemoveCommandList(*params->phCommandList);
+      collector->lock_.unlock();
     }
   }
 
@@ -1951,8 +2001,10 @@ class ZeKernelCollector {
       ZeKernelCollector* collector =
         reinterpret_cast<ZeKernelCollector*>(global_data);
       PTI_ASSERT(collector != nullptr);
+      collector->lock_.lock();
       collector->ProcessCalls("CommandListReset");
-      collector->ResetCommandList(*params->phCommandList);
+      collector->lock_.unlock();
+      // collector->ResetCommandList(*params->phCommandList);
     }
   }
 
@@ -2026,7 +2078,9 @@ class ZeKernelCollector {
       ZeKernelCollector* collector =
         reinterpret_cast<ZeKernelCollector*>(global_data);
       PTI_ASSERT(collector != nullptr);
+      collector->lock_.lock();
       collector->ProcessCalls("CommandQueueSynchronize");
+      collector->lock_.unlock();
     }
   }
 
@@ -2037,7 +2091,9 @@ class ZeKernelCollector {
       ZeKernelCollector* collector =
         reinterpret_cast<ZeKernelCollector*>(global_data);
       PTI_ASSERT(collector != nullptr);
+      collector->lock_.lock();
       collector->ProcessCalls("CommandQueueDestroy");
+      collector->lock_.unlock();
     }
   }
 
-- 
2.34.1

