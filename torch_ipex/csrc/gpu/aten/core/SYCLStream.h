#pragma once

#include <cstdint>
#include <utility>

#include <c10/util/Exception.h>
#include <c10/core/Stream.h>

#include <core/SYCLMacros.h>
#include <core/SYCLUtils.h>

/*
* Stream pool note.
*
* A SYCLStream is an abstraction of an actual cuStream on the GPU. SYCLStreams
* are backed by cuStreams, but they use several pools to minimize the costs
* associated with creating, retaining, and destroying cuStreams.
*
* There are three pools per device, and a device's pools are lazily created.
*
* The first pool contains only the default stream. When the default stream
* is requested it's returned.
*
* The second pool is the "low priority" or "default priority" streams. In
* HIP builds there is no distinction between streams in this pool and streams
* in the third pool (below). There are 32 of these streams per device, and
* when a stream is requested one of these streams is returned round-robin.
* That is, the first stream requested is at index 0, the second at index 1...
* to index 31, then index 0 again.
*
* This means that if 33 low priority streams are requested, the first and
* last streams requested are actually the same stream (under the covers)
* and kernels enqueued on them cannot run concurrently.
*
* The third pool is the "high priority" streams. The third pool acts like
* the second pool except the streams are created with a higher priority.
*
* These pools suggest that stream users should prefer many short-lived streams,
* as the cost of acquiring and releasing streams is effectively zero. If
* many longer-lived streams are required in performance critical scenarios
* then the functionality here may need to be extended to allow, for example,
* "reserving" a subset of the pool so that other streams do not accidentally
* overlap the performance critical streams.
*
* Note: although the notion of "current stream for device" is thread local
* (every OS thread has a separate current stream, as one might expect),
* the stream pool is global across all threads; stream 0 is always stream 0
* no matter which thread you use it on.  Multiple threads can synchronize
* on the same stream.  Although the SYCL documentation is not very clear
* on the matter, streams are thread safe; e.g., it is safe to enqueue
* a kernel on the same stream from two different threads.
*/

namespace c10 {
namespace sycl {

#define syclStream_t  unsigned long

#define SYCL_STREAM_COMPUTATION_INDEX 0
#define SYCL_STREAM_IO_INDEX 1
#define SYCL_STREAM_NETWORK_INDEX 2
#define SYCL_STREAM_MAX_INDEX 32

// Value object representing a SYCL stream.  This is just a wrapper
// around c10::Stream, but it comes with a little extra SYCL-specific
// functionality (conversion to syclStream_t), and a guarantee that
// the wrapped c10::Stream really is a SYCL stream.
class C10_SYCL_API SYCLStream {
public:

  enum Unchecked { UNCHECKED };

  /// Construct a SYCLStream from a Stream.  This construction is checked,
  /// and will raise an error if the Stream is not, in fact, a SYCL stream.
  explicit SYCLStream(Stream stream) : stream_(stream) {
    TORCH_CHECK(stream_.device_type() == DeviceType::DPCPP);
  }

  /// Construct a SYCLStream from a Stream with no error checking.
  /// This constructor uses the "named" constructor idiom, and can
  /// be invoked as: SYCLStream(SYCLStream::UNCHECKED, stream)
  explicit SYCLStream(Unchecked, Stream stream) : stream_(stream) {}

  bool operator==(const SYCLStream& other) const noexcept {
    return unwrap() == other.unwrap();
  }

  bool operator!=(const SYCLStream& other) const noexcept {
    return unwrap() != other.unwrap();
  }

  /// Implicit conversion to Stream (a.k.a., forget that the stream is a
  /// SYCL stream).
  operator Stream() const { return unwrap(); }

  /// Get the SYCL device index that this stream is associated with.
  DeviceIndex device_index() const { return stream_.device_index(); }

  /// Get the full Device that this stream is associated with.  The Device
  /// is guaranteed to be a SYCL device.
  Device device() const { return Device(DeviceType::DPCPP, device_index()); }

  /// Return the stream ID corresponding to this particular stream.
  StreamId id() const { return stream_.id(); }

  /// Explicit conversion to Stream.
  Stream unwrap() const { return stream_; }

  /// Reversibly pack a SYCLStream into a uint64_t representation.  This may
  /// be helpful when storing a SYCLStream in a C struct, where you cannot
  /// conveniently place the SYCLStream object itself (which is morally
  /// equivalent, but unfortunately is not POD due to the fact that it
  /// has constructors.)
  ///
  /// The SYCLStream can be unpacked using unpack().  The format of
  /// the uint64_t is unspecified and may be changed.
  uint64_t pack() const noexcept {
    return stream_.pack();
  }

  // Unpack a SYCLStream from the uint64_t representation generated by pack().
  static SYCLStream unpack(uint64_t bits) {
    return SYCLStream(Stream::unpack(bits));
  }

	cl::sycl::queue& sycl_queue() const;

  // Explicit conversion to syclStream_t
  syclStream_t stream() const { return (syclStream_t)this->sycl_queue().get(); }

  // Deleted for now; use SYCLEvent::block instead
  // void synchronize_with(const SYCLEvent& event) const;

private:
  Stream stream_;
};

CAFFE2_API SYCLStream getSYCLStreamFromPool(const bool isDefault = false, DeviceIndex device_index = -1);

CAFFE2_API SYCLStream getDefaultSYCLStream(DeviceIndex device_index = -1);

CAFFE2_API SYCLStream getCurrentSYCLStream(DeviceIndex device_index = -1);

CAFFE2_API void setCurrentSYCLStream(SYCLStream stream);

CAFFE2_API SYCLStream getSYCLStreamOnDevice(DeviceIndex device_index, int stream_index);

C10_API std::ostream& operator<<(std::ostream& stream, const SYCLStream& s);

} // namespace sycl
} // namespace at

namespace std {
  template <>
  struct hash<c10::sycl::SYCLStream> {
    size_t operator()(c10::sycl::SYCLStream s) const noexcept {
      return std::hash<c10::Stream>{}(s.unwrap());
    }
  };
} // namespace std
