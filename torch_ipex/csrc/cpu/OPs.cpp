// Autogenerated file by gen-cpu-ops.py. Do not edit directly!
#include "torch_ipex/csrc/cpu/OPs.h"

#include <ATen/Context.h>
#include <ATen/CPUGenerator.h>
#include <c10/util/Exception.h>
#include <c10/util/Logging.h>

#include "torch_ipex/csrc/aten_ipex_bridge.h"
#include "torch_ipex/csrc/utils.h"

namespace torch_ipex {
namespace cpu {

at::Tensor AtenIpexCPUDefault::_cast_Byte(const at::Tensor & self, bool non_blocking) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::_cast_Byte(_ipex_self, non_blocking);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::_cast_Char(const at::Tensor & self, bool non_blocking) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::_cast_Char(_ipex_self, non_blocking);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::_cast_Double(const at::Tensor & self, bool non_blocking) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::_cast_Double(_ipex_self, non_blocking);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::_cast_Float(const at::Tensor & self, bool non_blocking) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::_cast_Float(_ipex_self, non_blocking);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::_cast_Int(const at::Tensor & self, bool non_blocking) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::_cast_Int(_ipex_self, non_blocking);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::_cast_Long(const at::Tensor & self, bool non_blocking) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::_cast_Long(_ipex_self, non_blocking);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::_cast_Short(const at::Tensor & self, bool non_blocking) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::_cast_Short(_ipex_self, non_blocking);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::_cast_Half(const at::Tensor & self, bool non_blocking) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::_cast_Half(_ipex_self, non_blocking);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

void AtenIpexCPUDefault::backward(const at::Tensor & self, const at::Tensor & gradient, bool keep_graph, bool create_graph) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(gradient.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(gradient.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_gradient = bridge::shallowFallbackToCPUTensor(gradient);
  _ipex_self.backward(_ipex_gradient, keep_graph, create_graph);
}

void AtenIpexCPUDefault::set_data(const at::Tensor & self, const at::Tensor & new_data) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(new_data.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(new_data.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_new_data = bridge::shallowFallbackToCPUTensor(new_data);
  _ipex_self.set_data(_ipex_new_data);
}

at::Tensor AtenIpexCPUDefault::data(const at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = _ipex_self.data();
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

bool AtenIpexCPUDefault::is_leaf(const at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = _ipex_self.is_leaf();
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return _ipex_result;
}

int64_t AtenIpexCPUDefault::output_nr(const at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = _ipex_self.output_nr();
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return _ipex_result;
}

int64_t AtenIpexCPUDefault::_version(const at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = _ipex_self._version();
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return _ipex_result;
}

at::Tensor & AtenIpexCPUDefault::requires_grad_(at::Tensor & self, bool _requires_grad) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = _ipex_self.requires_grad_(_requires_grad);
  self = bridge::shallowUpgradeToDPCPPTensor(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return self;
}

int64_t AtenIpexCPUDefault::_debug_has_internal_overlap(const at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::_debug_has_internal_overlap(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return _ipex_result;
}

std::tuple<at::Tensor,at::Tensor> AtenIpexCPUDefault::_fused_dropout(const at::Tensor & self, double p, at::Generator * generator) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::_fused_dropout(_ipex_self, p, generator);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return std::tuple<at::Tensor,at::Tensor>(bridge::upgradeToDPCPPTensor(std::get<0>(_ipex_result)), bridge::upgradeToDPCPPTensor(std::get<1>(_ipex_result)));
}

at::Tensor AtenIpexCPUDefault::_masked_scale(const at::Tensor & self, const at::Tensor & mask, double scale) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(mask.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(mask.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_mask = bridge::shallowFallbackToCPUTensor(mask);
  auto&& _ipex_result = at::_masked_scale(_ipex_self, _ipex_mask, scale);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

std::tuple<at::Tensor,at::Tensor> AtenIpexCPUDefault::_sobol_engine_draw(const at::Tensor & quasi, int64_t n, const at::Tensor & sobolstate, int64_t dimension, int64_t num_generated, c10::optional<at::ScalarType> dtype) {
  TORCH_INTERNAL_ASSERT(quasi.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(quasi.is_contiguous());
  TORCH_INTERNAL_ASSERT(sobolstate.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(sobolstate.is_contiguous());
  auto&& _ipex_quasi = bridge::shallowFallbackToCPUTensor(quasi);
  auto&& _ipex_sobolstate = bridge::shallowFallbackToCPUTensor(sobolstate);
  auto&& _ipex_result = at::_sobol_engine_draw(_ipex_quasi, n, _ipex_sobolstate, dimension, num_generated, dtype);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return std::tuple<at::Tensor,at::Tensor>(bridge::upgradeToDPCPPTensor(std::get<0>(_ipex_result)), bridge::upgradeToDPCPPTensor(std::get<1>(_ipex_result)));
}

at::Tensor & AtenIpexCPUDefault::_sobol_engine_ff_(at::Tensor & self, int64_t n, const at::Tensor & sobolstate, int64_t dimension, int64_t num_generated) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(sobolstate.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(sobolstate.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_sobolstate = bridge::shallowFallbackToCPUTensor(sobolstate);
  auto&& _ipex_result = at::_sobol_engine_ff_(_ipex_self, n, _ipex_sobolstate, dimension, num_generated);
  self = bridge::shallowUpgradeToDPCPPTensor(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return self;
}

at::Tensor & AtenIpexCPUDefault::_sobol_engine_scramble_(at::Tensor & self, const at::Tensor & ltm, int64_t dimension) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(ltm.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(ltm.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_ltm = bridge::shallowFallbackToCPUTensor(ltm);
  auto&& _ipex_result = at::_sobol_engine_scramble_(_ipex_self, _ipex_ltm, dimension);
  self = bridge::shallowUpgradeToDPCPPTensor(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return self;
}

at::Tensor & AtenIpexCPUDefault::_sobol_engine_initialize_state_(at::Tensor & self, int64_t dimension) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::_sobol_engine_initialize_state_(_ipex_self, dimension);
  self = bridge::shallowUpgradeToDPCPPTensor(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return self;
}

at::Tensor AtenIpexCPUDefault::_reshape_from_tensor(const at::Tensor & self, const at::Tensor & shape) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(shape.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(shape.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_shape = bridge::shallowFallbackToCPUTensor(shape);
  auto&& _ipex_result = at::_reshape_from_tensor(_ipex_self, _ipex_shape);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::_shape_as_tensor(const at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::_shape_as_tensor(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::dropout(const at::Tensor & input, double p, bool train) {
  TORCH_INTERNAL_ASSERT(input.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(input.is_contiguous());
  auto&& _ipex_input = bridge::shallowFallbackToCPUTensor(input);
  auto&& _ipex_result = at::dropout(_ipex_input, p, train);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::dropout_(at::Tensor & self, double p, bool train) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::dropout_(_ipex_self, p, train);
  self = bridge::shallowUpgradeToDPCPPTensor(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return self;
}

at::Tensor AtenIpexCPUDefault::feature_dropout(const at::Tensor & input, double p, bool train) {
  TORCH_INTERNAL_ASSERT(input.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(input.is_contiguous());
  auto&& _ipex_input = bridge::shallowFallbackToCPUTensor(input);
  auto&& _ipex_result = at::feature_dropout(_ipex_input, p, train);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::feature_dropout_(at::Tensor & self, double p, bool train) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::feature_dropout_(_ipex_self, p, train);
  self = bridge::shallowUpgradeToDPCPPTensor(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return self;
}

at::Tensor AtenIpexCPUDefault::alpha_dropout(const at::Tensor & input, double p, bool train) {
  TORCH_INTERNAL_ASSERT(input.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(input.is_contiguous());
  auto&& _ipex_input = bridge::shallowFallbackToCPUTensor(input);
  auto&& _ipex_result = at::alpha_dropout(_ipex_input, p, train);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::alpha_dropout_(at::Tensor & self, double p, bool train) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::alpha_dropout_(_ipex_self, p, train);
  self = bridge::shallowUpgradeToDPCPPTensor(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return self;
}

at::Tensor AtenIpexCPUDefault::feature_alpha_dropout(const at::Tensor & input, double p, bool train) {
  TORCH_INTERNAL_ASSERT(input.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(input.is_contiguous());
  auto&& _ipex_input = bridge::shallowFallbackToCPUTensor(input);
  auto&& _ipex_result = at::feature_alpha_dropout(_ipex_input, p, train);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::feature_alpha_dropout_(at::Tensor & self, double p, bool train) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::feature_alpha_dropout_(_ipex_self, p, train);
  self = bridge::shallowUpgradeToDPCPPTensor(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return self;
}

at::Tensor AtenIpexCPUDefault::abs(const at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::abs(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::abs_(at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::abs_(_ipex_self);
  self = bridge::shallowUpgradeToDPCPPTensor(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return self;
}

at::Tensor & AtenIpexCPUDefault::abs_out(at::Tensor & out, const at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::abs_out(_ipex_out, _ipex_self);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor AtenIpexCPUDefault::angle(const at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::angle(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::angle_out(at::Tensor & out, const at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::angle_out(_ipex_out, _ipex_self);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor AtenIpexCPUDefault::real(const at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::real(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::real_out(at::Tensor & out, const at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::real_out(_ipex_out, _ipex_self);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor AtenIpexCPUDefault::imag(const at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::imag(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::imag_out(at::Tensor & out, const at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::imag_out(_ipex_out, _ipex_self);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor AtenIpexCPUDefault::conj(const at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::conj(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::conj_out(at::Tensor & out, const at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::conj_out(_ipex_out, _ipex_self);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor AtenIpexCPUDefault::acos(const at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::acos(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::acos_(at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::acos_(_ipex_self);
  self = bridge::shallowUpgradeToDPCPPTensor(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return self;
}

at::Tensor & AtenIpexCPUDefault::acos_out(at::Tensor & out, const at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::acos_out(_ipex_out, _ipex_self);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor AtenIpexCPUDefault::avg_pool1d(const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, bool ceil_mode, bool count_include_pad) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::avg_pool1d(_ipex_self, kernel_size, stride, padding, ceil_mode, count_include_pad);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::adaptive_avg_pool1d(const at::Tensor & self, at::IntArrayRef output_size) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::adaptive_avg_pool1d(_ipex_self, output_size);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

std::tuple<at::Tensor,at::Tensor> AtenIpexCPUDefault::adaptive_max_pool1d(const at::Tensor & self, at::IntArrayRef output_size) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::adaptive_max_pool1d(_ipex_self, output_size);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return std::tuple<at::Tensor,at::Tensor>(bridge::upgradeToDPCPPTensor(std::get<0>(_ipex_result)), bridge::upgradeToDPCPPTensor(std::get<1>(_ipex_result)));
}

at::Tensor AtenIpexCPUDefault::add(const at::Tensor & self, const at::Tensor & other, at::Scalar alpha) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(other.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(other.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_other = bridge::shallowFallbackToCPUTensor(other);
  auto&& _ipex_result = at::add(_ipex_self, _ipex_other, alpha);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::add_(at::Tensor & self, const at::Tensor & other, at::Scalar alpha) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(other.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(other.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_other = bridge::shallowFallbackToCPUTensor(other);
  auto&& _ipex_result = _ipex_self.add_(_ipex_other, alpha);
  self = bridge::shallowUpgradeToDPCPPTensor(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return self;
}

at::Tensor & AtenIpexCPUDefault::add_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & other, at::Scalar alpha) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(other.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(other.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_other = bridge::shallowFallbackToCPUTensor(other);
  auto&& _ipex_result = at::add_out(_ipex_out, _ipex_self, _ipex_other, alpha);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor AtenIpexCPUDefault::add(const at::Tensor & self, at::Scalar other, at::Scalar alpha) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::add(_ipex_self, other, alpha);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::add_(at::Tensor & self, at::Scalar other, at::Scalar alpha) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = _ipex_self.add_(other, alpha);
  self = bridge::shallowUpgradeToDPCPPTensor(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return self;
}

at::Tensor AtenIpexCPUDefault::addmv(const at::Tensor & self, const at::Tensor & mat, const at::Tensor & vec, at::Scalar beta, at::Scalar alpha) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(mat.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(mat.is_contiguous());
  TORCH_INTERNAL_ASSERT(vec.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(vec.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_mat = bridge::shallowFallbackToCPUTensor(mat);
  auto&& _ipex_vec = bridge::shallowFallbackToCPUTensor(vec);
  auto&& _ipex_result = at::addmv(_ipex_self, _ipex_mat, _ipex_vec, beta, alpha);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::addmv_(at::Tensor & self, const at::Tensor & mat, const at::Tensor & vec, at::Scalar beta, at::Scalar alpha) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(mat.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(mat.is_contiguous());
  TORCH_INTERNAL_ASSERT(vec.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(vec.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_mat = bridge::shallowFallbackToCPUTensor(mat);
  auto&& _ipex_vec = bridge::shallowFallbackToCPUTensor(vec);
  auto&& _ipex_result = at::addmv_(_ipex_self, _ipex_mat, _ipex_vec, beta, alpha);
  self = bridge::shallowUpgradeToDPCPPTensor(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return self;
}

at::Tensor & AtenIpexCPUDefault::addmv_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & mat, const at::Tensor & vec, at::Scalar beta, at::Scalar alpha) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(mat.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(mat.is_contiguous());
  TORCH_INTERNAL_ASSERT(vec.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(vec.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_mat = bridge::shallowFallbackToCPUTensor(mat);
  auto&& _ipex_vec = bridge::shallowFallbackToCPUTensor(vec);
  auto&& _ipex_result = at::addmv_out(_ipex_out, _ipex_self, _ipex_mat, _ipex_vec, beta, alpha);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor AtenIpexCPUDefault::addr(const at::Tensor & self, const at::Tensor & vec1, const at::Tensor & vec2, at::Scalar beta, at::Scalar alpha) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(vec1.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(vec1.is_contiguous());
  TORCH_INTERNAL_ASSERT(vec2.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(vec2.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_vec1 = bridge::shallowFallbackToCPUTensor(vec1);
  auto&& _ipex_vec2 = bridge::shallowFallbackToCPUTensor(vec2);
  auto&& _ipex_result = at::addr(_ipex_self, _ipex_vec1, _ipex_vec2, beta, alpha);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::addr_(at::Tensor & self, const at::Tensor & vec1, const at::Tensor & vec2, at::Scalar beta, at::Scalar alpha) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(vec1.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(vec1.is_contiguous());
  TORCH_INTERNAL_ASSERT(vec2.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(vec2.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_vec1 = bridge::shallowFallbackToCPUTensor(vec1);
  auto&& _ipex_vec2 = bridge::shallowFallbackToCPUTensor(vec2);
  auto&& _ipex_result = _ipex_self.addr_(_ipex_vec1, _ipex_vec2, beta, alpha);
  self = bridge::shallowUpgradeToDPCPPTensor(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return self;
}

at::Tensor & AtenIpexCPUDefault::addr_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & vec1, const at::Tensor & vec2, at::Scalar beta, at::Scalar alpha) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(vec1.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(vec1.is_contiguous());
  TORCH_INTERNAL_ASSERT(vec2.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(vec2.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_vec1 = bridge::shallowFallbackToCPUTensor(vec1);
  auto&& _ipex_vec2 = bridge::shallowFallbackToCPUTensor(vec2);
  auto&& _ipex_result = at::addr_out(_ipex_out, _ipex_self, _ipex_vec1, _ipex_vec2, beta, alpha);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor AtenIpexCPUDefault::affine_grid_generator(const at::Tensor & theta, at::IntArrayRef size, bool align_corners) {
  TORCH_INTERNAL_ASSERT(theta.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(theta.is_contiguous());
  auto&& _ipex_theta = bridge::shallowFallbackToCPUTensor(theta);
  auto&& _ipex_result = at::affine_grid_generator(_ipex_theta, size, align_corners);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::affine_grid_generator_backward(const at::Tensor & grad, at::IntArrayRef size, bool align_corners) {
  TORCH_INTERNAL_ASSERT(grad.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad.is_contiguous());
  auto&& _ipex_grad = bridge::shallowFallbackToCPUTensor(grad);
  auto&& _ipex_result = at::affine_grid_generator_backward(_ipex_grad, size, align_corners);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::all(const at::Tensor & self, int64_t dim, bool keepdim) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::all(_ipex_self, dim, keepdim);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::all_out(at::Tensor & out, const at::Tensor & self, int64_t dim, bool keepdim) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::all_out(_ipex_out, _ipex_self, dim, keepdim);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

bool AtenIpexCPUDefault::allclose(const at::Tensor & self, const at::Tensor & other, double rtol, double atol, bool equal_nan) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(other.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(other.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_other = bridge::shallowFallbackToCPUTensor(other);
  auto&& _ipex_result = at::allclose(_ipex_self, _ipex_other, rtol, atol, equal_nan);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return _ipex_result;
}

at::Tensor AtenIpexCPUDefault::any(const at::Tensor & self, int64_t dim, bool keepdim) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::any(_ipex_self, dim, keepdim);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::any_out(at::Tensor & out, const at::Tensor & self, int64_t dim, bool keepdim) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::any_out(_ipex_out, _ipex_self, dim, keepdim);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor AtenIpexCPUDefault::arange(at::Scalar end, const at::TensorOptions & options) {
  TORCH_INTERNAL_ASSERT(options.device().type() == at::DeviceType::DPCPP);
  at::TensorOptions _ipex_options = options.device(at::DeviceType::CPU);
  auto&& _ipex_result = at::arange(end, _ipex_options);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::arange(at::Scalar start, at::Scalar end, const at::TensorOptions & options) {
  TORCH_INTERNAL_ASSERT(options.device().type() == at::DeviceType::DPCPP);
  at::TensorOptions _ipex_options = options.device(at::DeviceType::CPU);
  auto&& _ipex_result = at::arange(start, end, _ipex_options);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::arange(at::Scalar start, at::Scalar end, at::Scalar step, const at::TensorOptions & options) {
  TORCH_INTERNAL_ASSERT(options.device().type() == at::DeviceType::DPCPP);
  at::TensorOptions _ipex_options = options.device(at::DeviceType::CPU);
  auto&& _ipex_result = at::arange(start, end, step, _ipex_options);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::arange_out(at::Tensor & out, at::Scalar end) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_result = at::arange_out(_ipex_out, end);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor & AtenIpexCPUDefault::arange_out(at::Tensor & out, at::Scalar start, at::Scalar end, at::Scalar step) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_result = at::arange_out(_ipex_out, start, end, step);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor AtenIpexCPUDefault::_dim_arange(const at::Tensor & like, int64_t dim) {
  TORCH_INTERNAL_ASSERT(like.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(like.is_contiguous());
  auto&& _ipex_like = bridge::shallowFallbackToCPUTensor(like);
  auto&& _ipex_result = at::_dim_arange(_ipex_like, dim);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::argmax(const at::Tensor & self, c10::optional<int64_t> dim, bool keepdim) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::argmax(_ipex_self, dim, keepdim);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::argmin(const at::Tensor & self, c10::optional<int64_t> dim, bool keepdim) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::argmin(_ipex_self, dim, keepdim);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::as_strided(const at::Tensor & self, at::IntArrayRef size, at::IntArrayRef stride, c10::optional<int64_t> storage_offset) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::as_strided(_ipex_self, size, stride, storage_offset);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::as_strided_(at::Tensor & self, at::IntArrayRef size, at::IntArrayRef stride, c10::optional<int64_t> storage_offset) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::as_strided_(_ipex_self, size, stride, storage_offset);
  self = bridge::shallowUpgradeToDPCPPTensor(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return self;
}

at::Tensor AtenIpexCPUDefault::asin(const at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::asin(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::asin_(at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::asin_(_ipex_self);
  self = bridge::shallowUpgradeToDPCPPTensor(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return self;
}

at::Tensor & AtenIpexCPUDefault::asin_out(at::Tensor & out, const at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::asin_out(_ipex_out, _ipex_self);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor AtenIpexCPUDefault::atan(const at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::atan(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::atan_(at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::atan_(_ipex_self);
  self = bridge::shallowUpgradeToDPCPPTensor(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return self;
}

at::Tensor & AtenIpexCPUDefault::atan_out(at::Tensor & out, const at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::atan_out(_ipex_out, _ipex_self);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor AtenIpexCPUDefault::baddbmm(const at::Tensor & self, const at::Tensor & batch1, const at::Tensor & batch2, at::Scalar beta, at::Scalar alpha) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(batch1.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(batch1.is_contiguous());
  TORCH_INTERNAL_ASSERT(batch2.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(batch2.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_batch1 = bridge::shallowFallbackToCPUTensor(batch1);
  auto&& _ipex_batch2 = bridge::shallowFallbackToCPUTensor(batch2);
  auto&& _ipex_result = at::baddbmm(_ipex_self, _ipex_batch1, _ipex_batch2, beta, alpha);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::baddbmm_(at::Tensor & self, const at::Tensor & batch1, const at::Tensor & batch2, at::Scalar beta, at::Scalar alpha) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(batch1.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(batch1.is_contiguous());
  TORCH_INTERNAL_ASSERT(batch2.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(batch2.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_batch1 = bridge::shallowFallbackToCPUTensor(batch1);
  auto&& _ipex_batch2 = bridge::shallowFallbackToCPUTensor(batch2);
  auto&& _ipex_result = _ipex_self.baddbmm_(_ipex_batch1, _ipex_batch2, beta, alpha);
  self = bridge::shallowUpgradeToDPCPPTensor(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return self;
}

at::Tensor & AtenIpexCPUDefault::_baddbmm_mkl_(at::Tensor & self, const at::Tensor & batch1, const at::Tensor & batch2, at::Scalar beta, at::Scalar alpha) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(batch1.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(batch1.is_contiguous());
  TORCH_INTERNAL_ASSERT(batch2.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(batch2.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_batch1 = bridge::shallowFallbackToCPUTensor(batch1);
  auto&& _ipex_batch2 = bridge::shallowFallbackToCPUTensor(batch2);
  auto&& _ipex_result = at::_baddbmm_mkl_(_ipex_self, _ipex_batch1, _ipex_batch2, beta, alpha);
  self = bridge::shallowUpgradeToDPCPPTensor(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return self;
}

at::Tensor & AtenIpexCPUDefault::baddbmm_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & batch1, const at::Tensor & batch2, at::Scalar beta, at::Scalar alpha) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(batch1.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(batch1.is_contiguous());
  TORCH_INTERNAL_ASSERT(batch2.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(batch2.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_batch1 = bridge::shallowFallbackToCPUTensor(batch1);
  auto&& _ipex_batch2 = bridge::shallowFallbackToCPUTensor(batch2);
  auto&& _ipex_result = at::baddbmm_out(_ipex_out, _ipex_self, _ipex_batch1, _ipex_batch2, beta, alpha);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor AtenIpexCPUDefault::bartlett_window(int64_t window_length, const at::TensorOptions & options) {
  TORCH_INTERNAL_ASSERT(options.device().type() == at::DeviceType::DPCPP);
  at::TensorOptions _ipex_options = options.device(at::DeviceType::CPU);
  auto&& _ipex_result = at::bartlett_window(window_length, _ipex_options);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::bartlett_window(int64_t window_length, bool periodic, const at::TensorOptions & options) {
  TORCH_INTERNAL_ASSERT(options.device().type() == at::DeviceType::DPCPP);
  at::TensorOptions _ipex_options = options.device(at::DeviceType::CPU);
  auto&& _ipex_result = at::bartlett_window(window_length, periodic, _ipex_options);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::batch_norm(const at::Tensor & input, const at::Tensor & weight, const at::Tensor & bias, const at::Tensor & running_mean, const at::Tensor & running_var, bool training, double momentum, double eps, bool cudnn_enabled) {
  TORCH_INTERNAL_ASSERT(input.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(input.is_contiguous());
  TORCH_INTERNAL_ASSERT(weight.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(weight.is_contiguous());
  TORCH_INTERNAL_ASSERT(bias.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(bias.is_contiguous());
  TORCH_INTERNAL_ASSERT(running_mean.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(running_mean.is_contiguous());
  TORCH_INTERNAL_ASSERT(running_var.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(running_var.is_contiguous());
  auto&& _ipex_input = bridge::shallowFallbackToCPUTensor(input);
  auto&& _ipex_weight = bridge::shallowFallbackToCPUTensor(weight);
  auto&& _ipex_bias = bridge::shallowFallbackToCPUTensor(bias);
  auto&& _ipex_running_mean = bridge::shallowFallbackToCPUTensor(running_mean);
  auto&& _ipex_running_var = bridge::shallowFallbackToCPUTensor(running_var);
  auto&& _ipex_result = at::batch_norm(_ipex_input, _ipex_weight, _ipex_bias, _ipex_running_mean, _ipex_running_var, training, momentum, eps, cudnn_enabled);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

std::tuple<at::Tensor,at::Tensor,at::Tensor,at::Tensor,int64_t> AtenIpexCPUDefault::_batch_norm_impl_index(const at::Tensor & input, const at::Tensor & weight, const at::Tensor & bias, const at::Tensor & running_mean, const at::Tensor & running_var, bool training, double momentum, double eps, bool cudnn_enabled) {
  TORCH_INTERNAL_ASSERT(input.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(input.is_contiguous());
  TORCH_INTERNAL_ASSERT(weight.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(weight.is_contiguous());
  TORCH_INTERNAL_ASSERT(bias.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(bias.is_contiguous());
  TORCH_INTERNAL_ASSERT(running_mean.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(running_mean.is_contiguous());
  TORCH_INTERNAL_ASSERT(running_var.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(running_var.is_contiguous());
  auto&& _ipex_input = bridge::shallowFallbackToCPUTensor(input);
  auto&& _ipex_weight = bridge::shallowFallbackToCPUTensor(weight);
  auto&& _ipex_bias = bridge::shallowFallbackToCPUTensor(bias);
  auto&& _ipex_running_mean = bridge::shallowFallbackToCPUTensor(running_mean);
  auto&& _ipex_running_var = bridge::shallowFallbackToCPUTensor(running_var);
  auto&& _ipex_result = at::_batch_norm_impl_index(_ipex_input, _ipex_weight, _ipex_bias, _ipex_running_mean, _ipex_running_var, training, momentum, eps, cudnn_enabled);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return std::tuple<at::Tensor,at::Tensor,at::Tensor,at::Tensor,int64_t>(bridge::upgradeToDPCPPTensor(std::get<0>(_ipex_result)), bridge::upgradeToDPCPPTensor(std::get<1>(_ipex_result)), bridge::upgradeToDPCPPTensor(std::get<2>(_ipex_result)), bridge::upgradeToDPCPPTensor(std::get<3>(_ipex_result)), std::get<4>(_ipex_result));
}

std::tuple<at::Tensor,at::Tensor,at::Tensor> AtenIpexCPUDefault::_batch_norm_impl_index_backward(int64_t impl_index, const at::Tensor & input, const at::Tensor & grad_output, const at::Tensor & weight, const at::Tensor & running_mean, const at::Tensor & running_var, const at::Tensor & save_mean, const at::Tensor & save_var_transform, bool train, double eps, std::array<bool,3> output_mask, const at::Tensor & reservedSpace) {
  TORCH_INTERNAL_ASSERT(input.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(input.is_contiguous());
  TORCH_INTERNAL_ASSERT(grad_output.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_output.is_contiguous());
  TORCH_INTERNAL_ASSERT(weight.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(weight.is_contiguous());
  TORCH_INTERNAL_ASSERT(running_mean.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(running_mean.is_contiguous());
  TORCH_INTERNAL_ASSERT(running_var.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(running_var.is_contiguous());
  TORCH_INTERNAL_ASSERT(save_mean.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(save_mean.is_contiguous());
  TORCH_INTERNAL_ASSERT(save_var_transform.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(save_var_transform.is_contiguous());
  TORCH_INTERNAL_ASSERT(reservedSpace.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(reservedSpace.is_contiguous());
  auto&& _ipex_input = bridge::shallowFallbackToCPUTensor(input);
  auto&& _ipex_grad_output = bridge::shallowFallbackToCPUTensor(grad_output);
  auto&& _ipex_weight = bridge::shallowFallbackToCPUTensor(weight);
  auto&& _ipex_running_mean = bridge::shallowFallbackToCPUTensor(running_mean);
  auto&& _ipex_running_var = bridge::shallowFallbackToCPUTensor(running_var);
  auto&& _ipex_save_mean = bridge::shallowFallbackToCPUTensor(save_mean);
  auto&& _ipex_save_var_transform = bridge::shallowFallbackToCPUTensor(save_var_transform);
  auto&& _ipex_reservedSpace = bridge::shallowFallbackToCPUTensor(reservedSpace);
  auto&& _ipex_result = at::_batch_norm_impl_index_backward(impl_index, _ipex_input, _ipex_grad_output, _ipex_weight, _ipex_running_mean, _ipex_running_var, _ipex_save_mean, _ipex_save_var_transform, train, eps, output_mask, _ipex_reservedSpace);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return std::tuple<at::Tensor,at::Tensor,at::Tensor>(bridge::upgradeToDPCPPTensor(std::get<0>(_ipex_result)), bridge::upgradeToDPCPPTensor(std::get<1>(_ipex_result)), bridge::upgradeToDPCPPTensor(std::get<2>(_ipex_result)));
}

at::Tensor AtenIpexCPUDefault::bernoulli(const at::Tensor & self, at::Generator * generator) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::bernoulli(_ipex_self, generator);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::bernoulli_out(at::Tensor & out, const at::Tensor & self, at::Generator * generator) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::bernoulli_out(_ipex_out, _ipex_self, generator);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor & AtenIpexCPUDefault::bernoulli_(at::Tensor & self, const at::Tensor & p, at::Generator * generator) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(p.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(p.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_p = bridge::shallowFallbackToCPUTensor(p);
  auto&& _ipex_result = _ipex_self.bernoulli_(_ipex_p, generator);
  self = bridge::shallowUpgradeToDPCPPTensor(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return self;
}

at::Tensor & AtenIpexCPUDefault::bernoulli_(at::Tensor & self, double p, at::Generator * generator) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = _ipex_self.bernoulli_(p, generator);
  self = bridge::shallowUpgradeToDPCPPTensor(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return self;
}

at::Tensor AtenIpexCPUDefault::bernoulli(const at::Tensor & self, double p, at::Generator * generator) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::bernoulli(_ipex_self, p, generator);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::bilinear(const at::Tensor & input1, const at::Tensor & input2, const at::Tensor & weight, const at::Tensor & bias) {
  TORCH_INTERNAL_ASSERT(input1.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(input1.is_contiguous());
  TORCH_INTERNAL_ASSERT(input2.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(input2.is_contiguous());
  TORCH_INTERNAL_ASSERT(weight.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(weight.is_contiguous());
  TORCH_INTERNAL_ASSERT(bias.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(bias.is_contiguous());
  auto&& _ipex_input1 = bridge::shallowFallbackToCPUTensor(input1);
  auto&& _ipex_input2 = bridge::shallowFallbackToCPUTensor(input2);
  auto&& _ipex_weight = bridge::shallowFallbackToCPUTensor(weight);
  auto&& _ipex_bias = bridge::shallowFallbackToCPUTensor(bias);
  auto&& _ipex_result = at::bilinear(_ipex_input1, _ipex_input2, _ipex_weight, _ipex_bias);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::binary_cross_entropy_with_logits(const at::Tensor & self, const at::Tensor & target, const at::Tensor & weight, const at::Tensor & pos_weight, int64_t reduction) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(target.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(target.is_contiguous());
  TORCH_INTERNAL_ASSERT(weight.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(weight.is_contiguous());
  TORCH_INTERNAL_ASSERT(pos_weight.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(pos_weight.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_target = bridge::shallowFallbackToCPUTensor(target);
  auto&& _ipex_weight = bridge::shallowFallbackToCPUTensor(weight);
  auto&& _ipex_pos_weight = bridge::shallowFallbackToCPUTensor(pos_weight);
  auto&& _ipex_result = at::binary_cross_entropy_with_logits(_ipex_self, _ipex_target, _ipex_weight, _ipex_pos_weight, reduction);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::binary_cross_entropy_with_logits_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & target, const at::Tensor & weight, const at::Tensor & pos_weight, int64_t reduction) {
  TORCH_INTERNAL_ASSERT(grad_output.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_output.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(target.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(target.is_contiguous());
  TORCH_INTERNAL_ASSERT(weight.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(weight.is_contiguous());
  TORCH_INTERNAL_ASSERT(pos_weight.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(pos_weight.is_contiguous());
  auto&& _ipex_grad_output = bridge::shallowFallbackToCPUTensor(grad_output);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_target = bridge::shallowFallbackToCPUTensor(target);
  auto&& _ipex_weight = bridge::shallowFallbackToCPUTensor(weight);
  auto&& _ipex_pos_weight = bridge::shallowFallbackToCPUTensor(pos_weight);
  auto&& _ipex_result = at::binary_cross_entropy_with_logits_backward(_ipex_grad_output, _ipex_self, _ipex_target, _ipex_weight, _ipex_pos_weight, reduction);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::bincount(const at::Tensor & self, const at::Tensor & weights, int64_t minlength) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(weights.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(weights.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_weights = bridge::shallowFallbackToCPUTensor(weights);
  auto&& _ipex_result = at::bincount(_ipex_self, _ipex_weights, minlength);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::bitwise_not(const at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::bitwise_not(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::bitwise_not_(at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = _ipex_self.bitwise_not_();
  self = bridge::shallowUpgradeToDPCPPTensor(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return self;
}

at::Tensor & AtenIpexCPUDefault::bitwise_not_out(at::Tensor & out, const at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::bitwise_not_out(_ipex_out, _ipex_self);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor AtenIpexCPUDefault::logical_not(const at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::logical_not(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::logical_not_(at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = _ipex_self.logical_not_();
  self = bridge::shallowUpgradeToDPCPPTensor(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return self;
}

at::Tensor & AtenIpexCPUDefault::logical_not_out(at::Tensor & out, const at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::logical_not_out(_ipex_out, _ipex_self);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor AtenIpexCPUDefault::logical_xor(const at::Tensor & self, const at::Tensor & other) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(other.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(other.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_other = bridge::shallowFallbackToCPUTensor(other);
  auto&& _ipex_result = at::logical_xor(_ipex_self, _ipex_other);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::logical_xor_(at::Tensor & self, const at::Tensor & other) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(other.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(other.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_other = bridge::shallowFallbackToCPUTensor(other);
  auto&& _ipex_result = _ipex_self.logical_xor_(_ipex_other);
  self = bridge::shallowUpgradeToDPCPPTensor(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return self;
}

at::Tensor & AtenIpexCPUDefault::logical_xor_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & other) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(other.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(other.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_other = bridge::shallowFallbackToCPUTensor(other);
  auto&& _ipex_result = at::logical_xor_out(_ipex_out, _ipex_self, _ipex_other);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor AtenIpexCPUDefault::blackman_window(int64_t window_length, const at::TensorOptions & options) {
  TORCH_INTERNAL_ASSERT(options.device().type() == at::DeviceType::DPCPP);
  at::TensorOptions _ipex_options = options.device(at::DeviceType::CPU);
  auto&& _ipex_result = at::blackman_window(window_length, _ipex_options);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::blackman_window(int64_t window_length, bool periodic, const at::TensorOptions & options) {
  TORCH_INTERNAL_ASSERT(options.device().type() == at::DeviceType::DPCPP);
  at::TensorOptions _ipex_options = options.device(at::DeviceType::CPU);
  auto&& _ipex_result = at::blackman_window(window_length, periodic, _ipex_options);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::bmm(const at::Tensor & self, const at::Tensor & mat2) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(mat2.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(mat2.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_mat2 = bridge::shallowFallbackToCPUTensor(mat2);
  auto&& _ipex_result = at::bmm(_ipex_self, _ipex_mat2);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::bmm_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & mat2) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(mat2.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(mat2.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_mat2 = bridge::shallowFallbackToCPUTensor(mat2);
  auto&& _ipex_result = at::bmm_out(_ipex_out, _ipex_self, _ipex_mat2);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

std::vector<at::Tensor> AtenIpexCPUDefault::broadcast_tensors(at::TensorList tensors) {
  auto&& _ipex_tensors = bridge::shallowFallbackToCPUTensorList(tensors);
  auto&& _ipex_result = at::broadcast_tensors(_ipex_tensors);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return bridge::upgradeToDPCPPTensorVec(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::cat(at::TensorList tensors, int64_t dim) {
  auto&& _ipex_tensors = bridge::shallowFallbackToCPUTensorList(tensors);
  auto&& _ipex_result = at::cat(_ipex_tensors, dim);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::cat_out(at::Tensor & out, at::TensorList tensors, int64_t dim) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  auto&& _ipex_tensors = bridge::shallowFallbackToCPUTensorList(tensors);
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_result = at::cat_out(_ipex_out, _ipex_tensors, dim);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor AtenIpexCPUDefault::ceil(const at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::ceil(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::ceil_(at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::ceil_(_ipex_self);
  self = bridge::shallowUpgradeToDPCPPTensor(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return self;
}

at::Tensor & AtenIpexCPUDefault::ceil_out(at::Tensor & out, const at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::ceil_out(_ipex_out, _ipex_self);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor AtenIpexCPUDefault::chain_matmul(at::TensorList matrices) {
  auto&& _ipex_matrices = bridge::shallowFallbackToCPUTensorList(matrices);
  auto&& _ipex_result = at::chain_matmul(_ipex_matrices);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

std::vector<at::Tensor> AtenIpexCPUDefault::chunk(const at::Tensor & self, int64_t chunks, int64_t dim) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::chunk(_ipex_self, chunks, dim);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return bridge::upgradeToDPCPPTensorVec(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::clamp(const at::Tensor & self, c10::optional<at::Scalar> min, c10::optional<at::Scalar> max) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::clamp(_ipex_self, min, max);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::clamp_(at::Tensor & self, c10::optional<at::Scalar> min, c10::optional<at::Scalar> max) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::clamp_(_ipex_self, min, max);
  self = bridge::shallowUpgradeToDPCPPTensor(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return self;
}

at::Tensor & AtenIpexCPUDefault::clamp_out(at::Tensor & out, const at::Tensor & self, c10::optional<at::Scalar> min, c10::optional<at::Scalar> max) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::clamp_out(_ipex_out, _ipex_self, min, max);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor AtenIpexCPUDefault::clamp_max(const at::Tensor & self, at::Scalar max) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::clamp_max(_ipex_self, max);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::clamp_max_(at::Tensor & self, at::Scalar max) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::clamp_max_(_ipex_self, max);
  self = bridge::shallowUpgradeToDPCPPTensor(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return self;
}

at::Tensor & AtenIpexCPUDefault::clamp_max_out(at::Tensor & out, const at::Tensor & self, at::Scalar max) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::clamp_max_out(_ipex_out, _ipex_self, max);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor AtenIpexCPUDefault::clamp_min(const at::Tensor & self, at::Scalar min) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::clamp_min(_ipex_self, min);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::clamp_min_(at::Tensor & self, at::Scalar min) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::clamp_min_(_ipex_self, min);
  self = bridge::shallowUpgradeToDPCPPTensor(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return self;
}

at::Tensor & AtenIpexCPUDefault::clamp_min_out(at::Tensor & out, const at::Tensor & self, at::Scalar min) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::clamp_min_out(_ipex_out, _ipex_self, min);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor AtenIpexCPUDefault::constant_pad_nd(const at::Tensor & self, at::IntArrayRef pad, at::Scalar value) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::constant_pad_nd(_ipex_self, pad, value);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::contiguous(const at::Tensor & self, at::MemoryFormat memory_format) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(memory_format == c10::MemoryFormat::Contiguous);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = _ipex_self.contiguous(memory_format);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::convolution(const at::Tensor & input, const at::Tensor & weight, const at::Tensor & bias, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef dilation, bool transposed, at::IntArrayRef output_padding, int64_t groups) {
  TORCH_INTERNAL_ASSERT(input.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(input.is_contiguous());
  TORCH_INTERNAL_ASSERT(weight.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(weight.is_contiguous());
  TORCH_INTERNAL_ASSERT(bias.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(bias.is_contiguous());
  auto&& _ipex_input = bridge::shallowFallbackToCPUTensor(input);
  auto&& _ipex_weight = bridge::shallowFallbackToCPUTensor(weight);
  auto&& _ipex_bias = bridge::shallowFallbackToCPUTensor(bias);
  auto&& _ipex_result = at::convolution(_ipex_input, _ipex_weight, _ipex_bias, stride, padding, dilation, transposed, output_padding, groups);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::convolution_overrideable(const at::Tensor & input, const at::Tensor & weight, const at::Tensor & bias, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef dilation, bool transposed, at::IntArrayRef output_padding, int64_t groups) {
  TORCH_INTERNAL_ASSERT(input.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(input.is_contiguous());
  TORCH_INTERNAL_ASSERT(weight.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(weight.is_contiguous());
  TORCH_INTERNAL_ASSERT(bias.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(bias.is_contiguous());
  auto&& _ipex_input = bridge::shallowFallbackToCPUTensor(input);
  auto&& _ipex_weight = bridge::shallowFallbackToCPUTensor(weight);
  auto&& _ipex_bias = bridge::shallowFallbackToCPUTensor(bias);
  auto&& _ipex_result = at::convolution_overrideable(_ipex_input, _ipex_weight, _ipex_bias, stride, padding, dilation, transposed, output_padding, groups);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

std::tuple<at::Tensor,at::Tensor,at::Tensor> AtenIpexCPUDefault::convolution_backward_overrideable(const at::Tensor & grad_output, const at::Tensor & input, const at::Tensor & weight, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef dilation, bool transposed, at::IntArrayRef output_padding, int64_t groups, std::array<bool,3> output_mask) {
  TORCH_INTERNAL_ASSERT(grad_output.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_output.is_contiguous());
  TORCH_INTERNAL_ASSERT(input.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(input.is_contiguous());
  TORCH_INTERNAL_ASSERT(weight.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(weight.is_contiguous());
  auto&& _ipex_grad_output = bridge::shallowFallbackToCPUTensor(grad_output);
  auto&& _ipex_input = bridge::shallowFallbackToCPUTensor(input);
  auto&& _ipex_weight = bridge::shallowFallbackToCPUTensor(weight);
  auto&& _ipex_result = at::convolution_backward_overrideable(_ipex_grad_output, _ipex_input, _ipex_weight, stride, padding, dilation, transposed, output_padding, groups, output_mask);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return std::tuple<at::Tensor,at::Tensor,at::Tensor>(bridge::upgradeToDPCPPTensor(std::get<0>(_ipex_result)), bridge::upgradeToDPCPPTensor(std::get<1>(_ipex_result)), bridge::upgradeToDPCPPTensor(std::get<2>(_ipex_result)));
}

at::Tensor AtenIpexCPUDefault::_convolution(const at::Tensor & input, const at::Tensor & weight, const at::Tensor & bias, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef dilation, bool transposed, at::IntArrayRef output_padding, int64_t groups, bool benchmark, bool deterministic, bool cudnn_enabled) {
  TORCH_INTERNAL_ASSERT(input.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(input.is_contiguous());
  TORCH_INTERNAL_ASSERT(weight.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(weight.is_contiguous());
  TORCH_INTERNAL_ASSERT(bias.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(bias.is_contiguous());
  auto&& _ipex_input = bridge::shallowFallbackToCPUTensor(input);
  auto&& _ipex_weight = bridge::shallowFallbackToCPUTensor(weight);
  auto&& _ipex_bias = bridge::shallowFallbackToCPUTensor(bias);
  auto&& _ipex_result = at::_convolution(_ipex_input, _ipex_weight, _ipex_bias, stride, padding, dilation, transposed, output_padding, groups, benchmark, deterministic, cudnn_enabled);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::_convolution_nogroup(const at::Tensor & input, const at::Tensor & weight, const at::Tensor & bias, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef dilation, bool transposed, at::IntArrayRef output_padding) {
  TORCH_INTERNAL_ASSERT(input.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(input.is_contiguous());
  TORCH_INTERNAL_ASSERT(weight.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(weight.is_contiguous());
  TORCH_INTERNAL_ASSERT(bias.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(bias.is_contiguous());
  auto&& _ipex_input = bridge::shallowFallbackToCPUTensor(input);
  auto&& _ipex_weight = bridge::shallowFallbackToCPUTensor(weight);
  auto&& _ipex_bias = bridge::shallowFallbackToCPUTensor(bias);
  auto&& _ipex_result = at::_convolution_nogroup(_ipex_input, _ipex_weight, _ipex_bias, stride, padding, dilation, transposed, output_padding);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

std::tuple<at::Tensor,at::Tensor,at::Tensor> AtenIpexCPUDefault::_convolution_double_backward(const at::Tensor & ggI, const at::Tensor & ggW, const at::Tensor & ggb, const at::Tensor & gO, const at::Tensor & weight, const at::Tensor & self, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef dilation, bool transposed, at::IntArrayRef output_padding, int64_t groups, bool benchmark, bool deterministic, bool cudnn_enabled, std::array<bool,3> output_mask) {
  TORCH_INTERNAL_ASSERT(ggI.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(ggI.is_contiguous());
  TORCH_INTERNAL_ASSERT(ggW.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(ggW.is_contiguous());
  TORCH_INTERNAL_ASSERT(ggb.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(ggb.is_contiguous());
  TORCH_INTERNAL_ASSERT(gO.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(gO.is_contiguous());
  TORCH_INTERNAL_ASSERT(weight.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(weight.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_ggI = bridge::shallowFallbackToCPUTensor(ggI);
  auto&& _ipex_ggW = bridge::shallowFallbackToCPUTensor(ggW);
  auto&& _ipex_ggb = bridge::shallowFallbackToCPUTensor(ggb);
  auto&& _ipex_gO = bridge::shallowFallbackToCPUTensor(gO);
  auto&& _ipex_weight = bridge::shallowFallbackToCPUTensor(weight);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::_convolution_double_backward(_ipex_ggI, _ipex_ggW, _ipex_ggb, _ipex_gO, _ipex_weight, _ipex_self, stride, padding, dilation, transposed, output_padding, groups, benchmark, deterministic, cudnn_enabled, output_mask);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return std::tuple<at::Tensor,at::Tensor,at::Tensor>(bridge::upgradeToDPCPPTensor(std::get<0>(_ipex_result)), bridge::upgradeToDPCPPTensor(std::get<1>(_ipex_result)), bridge::upgradeToDPCPPTensor(std::get<2>(_ipex_result)));
}

at::Tensor AtenIpexCPUDefault::conv1d(const at::Tensor & input, const at::Tensor & weight, const at::Tensor & bias, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef dilation, int64_t groups) {
  TORCH_INTERNAL_ASSERT(input.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(input.is_contiguous());
  TORCH_INTERNAL_ASSERT(weight.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(weight.is_contiguous());
  TORCH_INTERNAL_ASSERT(bias.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(bias.is_contiguous());
  auto&& _ipex_input = bridge::shallowFallbackToCPUTensor(input);
  auto&& _ipex_weight = bridge::shallowFallbackToCPUTensor(weight);
  auto&& _ipex_bias = bridge::shallowFallbackToCPUTensor(bias);
  auto&& _ipex_result = at::conv1d(_ipex_input, _ipex_weight, _ipex_bias, stride, padding, dilation, groups);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::conv2d(const at::Tensor & input, const at::Tensor & weight, const at::Tensor & bias, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef dilation, int64_t groups) {
  TORCH_INTERNAL_ASSERT(input.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(input.is_contiguous());
  TORCH_INTERNAL_ASSERT(weight.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(weight.is_contiguous());
  TORCH_INTERNAL_ASSERT(bias.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(bias.is_contiguous());
  auto&& _ipex_input = bridge::shallowFallbackToCPUTensor(input);
  auto&& _ipex_weight = bridge::shallowFallbackToCPUTensor(weight);
  auto&& _ipex_bias = bridge::shallowFallbackToCPUTensor(bias);
  auto&& _ipex_result = at::conv2d(_ipex_input, _ipex_weight, _ipex_bias, stride, padding, dilation, groups);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::conv3d(const at::Tensor & input, const at::Tensor & weight, const at::Tensor & bias, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef dilation, int64_t groups) {
  TORCH_INTERNAL_ASSERT(input.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(input.is_contiguous());
  TORCH_INTERNAL_ASSERT(weight.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(weight.is_contiguous());
  TORCH_INTERNAL_ASSERT(bias.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(bias.is_contiguous());
  auto&& _ipex_input = bridge::shallowFallbackToCPUTensor(input);
  auto&& _ipex_weight = bridge::shallowFallbackToCPUTensor(weight);
  auto&& _ipex_bias = bridge::shallowFallbackToCPUTensor(bias);
  auto&& _ipex_result = at::conv3d(_ipex_input, _ipex_weight, _ipex_bias, stride, padding, dilation, groups);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::conv_tbc(const at::Tensor & self, const at::Tensor & weight, const at::Tensor & bias, int64_t pad) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(weight.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(weight.is_contiguous());
  TORCH_INTERNAL_ASSERT(bias.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(bias.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_weight = bridge::shallowFallbackToCPUTensor(weight);
  auto&& _ipex_bias = bridge::shallowFallbackToCPUTensor(bias);
  auto&& _ipex_result = at::conv_tbc(_ipex_self, _ipex_weight, _ipex_bias, pad);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

std::tuple<at::Tensor,at::Tensor,at::Tensor> AtenIpexCPUDefault::conv_tbc_backward(const at::Tensor & self, const at::Tensor & input, const at::Tensor & weight, const at::Tensor & bias, int64_t pad) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(input.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(input.is_contiguous());
  TORCH_INTERNAL_ASSERT(weight.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(weight.is_contiguous());
  TORCH_INTERNAL_ASSERT(bias.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(bias.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_input = bridge::shallowFallbackToCPUTensor(input);
  auto&& _ipex_weight = bridge::shallowFallbackToCPUTensor(weight);
  auto&& _ipex_bias = bridge::shallowFallbackToCPUTensor(bias);
  auto&& _ipex_result = at::conv_tbc_backward(_ipex_self, _ipex_input, _ipex_weight, _ipex_bias, pad);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return std::tuple<at::Tensor,at::Tensor,at::Tensor>(bridge::upgradeToDPCPPTensor(std::get<0>(_ipex_result)), bridge::upgradeToDPCPPTensor(std::get<1>(_ipex_result)), bridge::upgradeToDPCPPTensor(std::get<2>(_ipex_result)));
}

at::Tensor AtenIpexCPUDefault::conv_transpose1d(const at::Tensor & input, const at::Tensor & weight, const at::Tensor & bias, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef output_padding, int64_t groups, at::IntArrayRef dilation) {
  TORCH_INTERNAL_ASSERT(input.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(input.is_contiguous());
  TORCH_INTERNAL_ASSERT(weight.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(weight.is_contiguous());
  TORCH_INTERNAL_ASSERT(bias.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(bias.is_contiguous());
  auto&& _ipex_input = bridge::shallowFallbackToCPUTensor(input);
  auto&& _ipex_weight = bridge::shallowFallbackToCPUTensor(weight);
  auto&& _ipex_bias = bridge::shallowFallbackToCPUTensor(bias);
  auto&& _ipex_result = at::conv_transpose1d(_ipex_input, _ipex_weight, _ipex_bias, stride, padding, output_padding, groups, dilation);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::conv_transpose2d(const at::Tensor & input, const at::Tensor & weight, const at::Tensor & bias, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef output_padding, int64_t groups, at::IntArrayRef dilation) {
  TORCH_INTERNAL_ASSERT(input.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(input.is_contiguous());
  TORCH_INTERNAL_ASSERT(weight.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(weight.is_contiguous());
  TORCH_INTERNAL_ASSERT(bias.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(bias.is_contiguous());
  auto&& _ipex_input = bridge::shallowFallbackToCPUTensor(input);
  auto&& _ipex_weight = bridge::shallowFallbackToCPUTensor(weight);
  auto&& _ipex_bias = bridge::shallowFallbackToCPUTensor(bias);
  auto&& _ipex_result = at::conv_transpose2d(_ipex_input, _ipex_weight, _ipex_bias, stride, padding, output_padding, groups, dilation);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::conv_transpose3d(const at::Tensor & input, const at::Tensor & weight, const at::Tensor & bias, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef output_padding, int64_t groups, at::IntArrayRef dilation) {
  TORCH_INTERNAL_ASSERT(input.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(input.is_contiguous());
  TORCH_INTERNAL_ASSERT(weight.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(weight.is_contiguous());
  TORCH_INTERNAL_ASSERT(bias.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(bias.is_contiguous());
  auto&& _ipex_input = bridge::shallowFallbackToCPUTensor(input);
  auto&& _ipex_weight = bridge::shallowFallbackToCPUTensor(weight);
  auto&& _ipex_bias = bridge::shallowFallbackToCPUTensor(bias);
  auto&& _ipex_result = at::conv_transpose3d(_ipex_input, _ipex_weight, _ipex_bias, stride, padding, output_padding, groups, dilation);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::copy_(at::Tensor & self, const at::Tensor & src, bool non_blocking) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(src.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(src.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_src = bridge::shallowFallbackToCPUTensor(src);
  auto&& _ipex_result = _ipex_self.copy_(_ipex_src, non_blocking);
  self = bridge::shallowUpgradeToDPCPPTensor(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return self;
}

at::Tensor AtenIpexCPUDefault::_copy_from(const at::Tensor & self, const at::Tensor & dst, bool non_blocking) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(dst.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(dst.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_dst = bridge::shallowFallbackToCPUTensor(dst);
  auto&& _ipex_result = at::_copy_from(_ipex_self, _ipex_dst, non_blocking);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::cos(const at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::cos(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::cos_(at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::cos_(_ipex_self);
  self = bridge::shallowUpgradeToDPCPPTensor(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return self;
}

at::Tensor & AtenIpexCPUDefault::cos_out(at::Tensor & out, const at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::cos_out(_ipex_out, _ipex_self);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor AtenIpexCPUDefault::cosh(const at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::cosh(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::cosh_(at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::cosh_(_ipex_self);
  self = bridge::shallowUpgradeToDPCPPTensor(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return self;
}

at::Tensor & AtenIpexCPUDefault::cosh_out(at::Tensor & out, const at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::cosh_out(_ipex_out, _ipex_self);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor AtenIpexCPUDefault::cosine_embedding_loss(const at::Tensor & input1, const at::Tensor & input2, const at::Tensor & target, double margin, int64_t reduction) {
  TORCH_INTERNAL_ASSERT(input1.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(input1.is_contiguous());
  TORCH_INTERNAL_ASSERT(input2.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(input2.is_contiguous());
  TORCH_INTERNAL_ASSERT(target.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(target.is_contiguous());
  auto&& _ipex_input1 = bridge::shallowFallbackToCPUTensor(input1);
  auto&& _ipex_input2 = bridge::shallowFallbackToCPUTensor(input2);
  auto&& _ipex_target = bridge::shallowFallbackToCPUTensor(target);
  auto&& _ipex_result = at::cosine_embedding_loss(_ipex_input1, _ipex_input2, _ipex_target, margin, reduction);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::cumsum(const at::Tensor & self, int64_t dim, c10::optional<at::ScalarType> dtype) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::cumsum(_ipex_self, dim, dtype);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::cumsum_out(at::Tensor & out, const at::Tensor & self, int64_t dim, c10::optional<at::ScalarType> dtype) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::cumsum_out(_ipex_out, _ipex_self, dim, dtype);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor AtenIpexCPUDefault::cumprod(const at::Tensor & self, int64_t dim, c10::optional<at::ScalarType> dtype) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::cumprod(_ipex_self, dim, dtype);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::cumprod_out(at::Tensor & out, const at::Tensor & self, int64_t dim, c10::optional<at::ScalarType> dtype) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::cumprod_out(_ipex_out, _ipex_self, dim, dtype);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor AtenIpexCPUDefault::ctc_loss(const at::Tensor & log_probs, const at::Tensor & targets, at::IntArrayRef input_lengths, at::IntArrayRef target_lengths, int64_t blank, int64_t reduction, bool zero_infinity) {
  TORCH_INTERNAL_ASSERT(log_probs.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(log_probs.is_contiguous());
  TORCH_INTERNAL_ASSERT(targets.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(targets.is_contiguous());
  auto&& _ipex_log_probs = bridge::shallowFallbackToCPUTensor(log_probs);
  auto&& _ipex_targets = bridge::shallowFallbackToCPUTensor(targets);
  auto&& _ipex_result = at::ctc_loss(_ipex_log_probs, _ipex_targets, input_lengths, target_lengths, blank, reduction, zero_infinity);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::ctc_loss(const at::Tensor & log_probs, const at::Tensor & targets, const at::Tensor & input_lengths, const at::Tensor & target_lengths, int64_t blank, int64_t reduction, bool zero_infinity) {
  TORCH_INTERNAL_ASSERT(log_probs.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(log_probs.is_contiguous());
  TORCH_INTERNAL_ASSERT(targets.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(targets.is_contiguous());
  TORCH_INTERNAL_ASSERT(input_lengths.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(input_lengths.is_contiguous());
  TORCH_INTERNAL_ASSERT(target_lengths.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(target_lengths.is_contiguous());
  auto&& _ipex_log_probs = bridge::shallowFallbackToCPUTensor(log_probs);
  auto&& _ipex_targets = bridge::shallowFallbackToCPUTensor(targets);
  auto&& _ipex_input_lengths = bridge::shallowFallbackToCPUTensor(input_lengths);
  auto&& _ipex_target_lengths = bridge::shallowFallbackToCPUTensor(target_lengths);
  auto&& _ipex_result = at::ctc_loss(_ipex_log_probs, _ipex_targets, _ipex_input_lengths, _ipex_target_lengths, blank, reduction, zero_infinity);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

std::tuple<at::Tensor,at::Tensor> AtenIpexCPUDefault::_ctc_loss(const at::Tensor & log_probs, const at::Tensor & targets, at::IntArrayRef input_lengths, at::IntArrayRef target_lengths, int64_t blank, bool zero_infinity) {
  TORCH_INTERNAL_ASSERT(log_probs.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(log_probs.is_contiguous());
  TORCH_INTERNAL_ASSERT(targets.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(targets.is_contiguous());
  auto&& _ipex_log_probs = bridge::shallowFallbackToCPUTensor(log_probs);
  auto&& _ipex_targets = bridge::shallowFallbackToCPUTensor(targets);
  auto&& _ipex_result = at::_ctc_loss(_ipex_log_probs, _ipex_targets, input_lengths, target_lengths, blank, zero_infinity);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return std::tuple<at::Tensor,at::Tensor>(bridge::upgradeToDPCPPTensor(std::get<0>(_ipex_result)), bridge::upgradeToDPCPPTensor(std::get<1>(_ipex_result)));
}

at::Tensor AtenIpexCPUDefault::_ctc_loss_backward(const at::Tensor & grad, const at::Tensor & log_probs, const at::Tensor & targets, at::IntArrayRef input_lengths, at::IntArrayRef target_lengths, const at::Tensor & neg_log_likelihood, const at::Tensor & log_alpha, int64_t blank, bool zero_infinity) {
  TORCH_INTERNAL_ASSERT(grad.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad.is_contiguous());
  TORCH_INTERNAL_ASSERT(log_probs.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(log_probs.is_contiguous());
  TORCH_INTERNAL_ASSERT(targets.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(targets.is_contiguous());
  TORCH_INTERNAL_ASSERT(neg_log_likelihood.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(neg_log_likelihood.is_contiguous());
  TORCH_INTERNAL_ASSERT(log_alpha.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(log_alpha.is_contiguous());
  auto&& _ipex_grad = bridge::shallowFallbackToCPUTensor(grad);
  auto&& _ipex_log_probs = bridge::shallowFallbackToCPUTensor(log_probs);
  auto&& _ipex_targets = bridge::shallowFallbackToCPUTensor(targets);
  auto&& _ipex_neg_log_likelihood = bridge::shallowFallbackToCPUTensor(neg_log_likelihood);
  auto&& _ipex_log_alpha = bridge::shallowFallbackToCPUTensor(log_alpha);
  auto&& _ipex_result = at::_ctc_loss_backward(_ipex_grad, _ipex_log_probs, _ipex_targets, input_lengths, target_lengths, _ipex_neg_log_likelihood, _ipex_log_alpha, blank, zero_infinity);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::det(const at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::det(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::diag_embed(const at::Tensor & self, int64_t offset, int64_t dim1, int64_t dim2) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::diag_embed(_ipex_self, offset, dim1, dim2);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::diagflat(const at::Tensor & self, int64_t offset) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::diagflat(_ipex_self, offset);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::diagonal(const at::Tensor & self, int64_t offset, int64_t dim1, int64_t dim2) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::diagonal(_ipex_self, offset, dim1, dim2);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::fill_diagonal_(at::Tensor & self, at::Scalar fill_value, bool wrap) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = _ipex_self.fill_diagonal_(fill_value, wrap);
  self = bridge::shallowUpgradeToDPCPPTensor(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return self;
}

at::Tensor AtenIpexCPUDefault::div(const at::Tensor & self, const at::Tensor & other) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(other.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(other.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_other = bridge::shallowFallbackToCPUTensor(other);
  auto&& _ipex_result = at::div(_ipex_self, _ipex_other);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::div_(at::Tensor & self, const at::Tensor & other) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(other.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(other.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_other = bridge::shallowFallbackToCPUTensor(other);
  auto&& _ipex_result = _ipex_self.div_(_ipex_other);
  self = bridge::shallowUpgradeToDPCPPTensor(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return self;
}

at::Tensor & AtenIpexCPUDefault::div_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & other) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(other.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(other.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_other = bridge::shallowFallbackToCPUTensor(other);
  auto&& _ipex_result = at::div_out(_ipex_out, _ipex_self, _ipex_other);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor AtenIpexCPUDefault::div(const at::Tensor & self, at::Scalar other) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::div(_ipex_self, other);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::div_(at::Tensor & self, at::Scalar other) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = _ipex_self.div_(other);
  self = bridge::shallowUpgradeToDPCPPTensor(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return self;
}

at::Tensor AtenIpexCPUDefault::dot(const at::Tensor & self, const at::Tensor & tensor) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(tensor.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(tensor.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_tensor = bridge::shallowFallbackToCPUTensor(tensor);
  auto&& _ipex_result = at::dot(_ipex_self, _ipex_tensor);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::dot_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & tensor) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(tensor.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(tensor.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_tensor = bridge::shallowFallbackToCPUTensor(tensor);
  auto&& _ipex_result = at::dot_out(_ipex_out, _ipex_self, _ipex_tensor);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor AtenIpexCPUDefault::einsum(std::string equation, at::TensorList tensors) {
  auto&& _ipex_tensors = bridge::shallowFallbackToCPUTensorList(tensors);
  auto&& _ipex_result = at::einsum(equation, _ipex_tensors);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::embedding(const at::Tensor & weight, const at::Tensor & indices, int64_t padding_idx, bool scale_grad_by_freq, bool sparse) {
  TORCH_INTERNAL_ASSERT(weight.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(weight.is_contiguous());
  TORCH_INTERNAL_ASSERT(indices.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(indices.is_contiguous());
  auto&& _ipex_weight = bridge::shallowFallbackToCPUTensor(weight);
  auto&& _ipex_indices = bridge::shallowFallbackToCPUTensor(indices);
  auto&& _ipex_result = at::embedding(_ipex_weight, _ipex_indices, padding_idx, scale_grad_by_freq, sparse);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::embedding_backward(const at::Tensor & grad, const at::Tensor & indices, int64_t num_weights, int64_t padding_idx, bool scale_grad_by_freq, bool sparse) {
  TORCH_INTERNAL_ASSERT(grad.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad.is_contiguous());
  TORCH_INTERNAL_ASSERT(indices.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(indices.is_contiguous());
  auto&& _ipex_grad = bridge::shallowFallbackToCPUTensor(grad);
  auto&& _ipex_indices = bridge::shallowFallbackToCPUTensor(indices);
  auto&& _ipex_result = at::embedding_backward(_ipex_grad, _ipex_indices, num_weights, padding_idx, scale_grad_by_freq, sparse);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::embedding_dense_backward(const at::Tensor & grad_output, const at::Tensor & indices, int64_t num_weights, int64_t padding_idx, bool scale_grad_by_freq) {
  TORCH_INTERNAL_ASSERT(grad_output.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_output.is_contiguous());
  TORCH_INTERNAL_ASSERT(indices.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(indices.is_contiguous());
  auto&& _ipex_grad_output = bridge::shallowFallbackToCPUTensor(grad_output);
  auto&& _ipex_indices = bridge::shallowFallbackToCPUTensor(indices);
  auto&& _ipex_result = at::embedding_dense_backward(_ipex_grad_output, _ipex_indices, num_weights, padding_idx, scale_grad_by_freq);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::embedding_renorm_(at::Tensor & self, const at::Tensor & indices, double max_norm, double norm_type) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(indices.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(indices.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_indices = bridge::shallowFallbackToCPUTensor(indices);
  auto&& _ipex_result = at::embedding_renorm_(_ipex_self, _ipex_indices, max_norm, norm_type);
  self = bridge::shallowUpgradeToDPCPPTensor(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return self;
}

at::Tensor AtenIpexCPUDefault::embedding_sparse_backward(const at::Tensor & grad, const at::Tensor & indices, int64_t num_weights, int64_t padding_idx, bool scale_grad_by_freq) {
  TORCH_INTERNAL_ASSERT(grad.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad.is_contiguous());
  TORCH_INTERNAL_ASSERT(indices.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(indices.is_contiguous());
  auto&& _ipex_grad = bridge::shallowFallbackToCPUTensor(grad);
  auto&& _ipex_indices = bridge::shallowFallbackToCPUTensor(indices);
  auto&& _ipex_result = at::embedding_sparse_backward(_ipex_grad, _ipex_indices, num_weights, padding_idx, scale_grad_by_freq);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

std::tuple<at::Tensor,at::Tensor,at::Tensor,at::Tensor> AtenIpexCPUDefault::embedding_bag(const at::Tensor & weight, const at::Tensor & indices, const at::Tensor & offsets, bool scale_grad_by_freq, int64_t mode, bool sparse, const at::Tensor & per_sample_weights) {
  TORCH_INTERNAL_ASSERT(weight.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(weight.is_contiguous());
  TORCH_INTERNAL_ASSERT(indices.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(indices.is_contiguous());
  TORCH_INTERNAL_ASSERT(offsets.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(offsets.is_contiguous());
  TORCH_INTERNAL_ASSERT(per_sample_weights.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(per_sample_weights.is_contiguous());
  auto&& _ipex_weight = bridge::shallowFallbackToCPUTensor(weight);
  auto&& _ipex_indices = bridge::shallowFallbackToCPUTensor(indices);
  auto&& _ipex_offsets = bridge::shallowFallbackToCPUTensor(offsets);
  auto&& _ipex_per_sample_weights = bridge::shallowFallbackToCPUTensor(per_sample_weights);
  auto&& _ipex_result = at::embedding_bag(_ipex_weight, _ipex_indices, _ipex_offsets, scale_grad_by_freq, mode, sparse, _ipex_per_sample_weights);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return std::tuple<at::Tensor,at::Tensor,at::Tensor,at::Tensor>(bridge::upgradeToDPCPPTensor(std::get<0>(_ipex_result)), bridge::upgradeToDPCPPTensor(std::get<1>(_ipex_result)), bridge::upgradeToDPCPPTensor(std::get<2>(_ipex_result)), bridge::upgradeToDPCPPTensor(std::get<3>(_ipex_result)));
}

std::tuple<at::Tensor,at::Tensor,at::Tensor,at::Tensor> AtenIpexCPUDefault::_embedding_bag(const at::Tensor & weight, const at::Tensor & indices, const at::Tensor & offsets, bool scale_grad_by_freq, int64_t mode, bool sparse, const at::Tensor & per_sample_weights) {
  TORCH_INTERNAL_ASSERT(weight.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(weight.is_contiguous());
  TORCH_INTERNAL_ASSERT(indices.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(indices.is_contiguous());
  TORCH_INTERNAL_ASSERT(offsets.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(offsets.is_contiguous());
  TORCH_INTERNAL_ASSERT(per_sample_weights.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(per_sample_weights.is_contiguous());
  auto&& _ipex_weight = bridge::shallowFallbackToCPUTensor(weight);
  auto&& _ipex_indices = bridge::shallowFallbackToCPUTensor(indices);
  auto&& _ipex_offsets = bridge::shallowFallbackToCPUTensor(offsets);
  auto&& _ipex_per_sample_weights = bridge::shallowFallbackToCPUTensor(per_sample_weights);
  auto&& _ipex_result = at::_embedding_bag(_ipex_weight, _ipex_indices, _ipex_offsets, scale_grad_by_freq, mode, sparse, _ipex_per_sample_weights);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return std::tuple<at::Tensor,at::Tensor,at::Tensor,at::Tensor>(bridge::upgradeToDPCPPTensor(std::get<0>(_ipex_result)), bridge::upgradeToDPCPPTensor(std::get<1>(_ipex_result)), bridge::upgradeToDPCPPTensor(std::get<2>(_ipex_result)), bridge::upgradeToDPCPPTensor(std::get<3>(_ipex_result)));
}

at::Tensor AtenIpexCPUDefault::_embedding_bag_backward(const at::Tensor & grad, const at::Tensor & indices, const at::Tensor & offsets, const at::Tensor & offset2bag, const at::Tensor & bag_size, const at::Tensor & maximum_indices, int64_t num_weights, bool scale_grad_by_freq, int64_t mode, bool sparse, const at::Tensor & per_sample_weights) {
  TORCH_INTERNAL_ASSERT(grad.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad.is_contiguous());
  TORCH_INTERNAL_ASSERT(indices.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(indices.is_contiguous());
  TORCH_INTERNAL_ASSERT(offsets.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(offsets.is_contiguous());
  TORCH_INTERNAL_ASSERT(offset2bag.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(offset2bag.is_contiguous());
  TORCH_INTERNAL_ASSERT(bag_size.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(bag_size.is_contiguous());
  TORCH_INTERNAL_ASSERT(maximum_indices.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(maximum_indices.is_contiguous());
  TORCH_INTERNAL_ASSERT(per_sample_weights.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(per_sample_weights.is_contiguous());
  auto&& _ipex_grad = bridge::shallowFallbackToCPUTensor(grad);
  auto&& _ipex_indices = bridge::shallowFallbackToCPUTensor(indices);
  auto&& _ipex_offsets = bridge::shallowFallbackToCPUTensor(offsets);
  auto&& _ipex_offset2bag = bridge::shallowFallbackToCPUTensor(offset2bag);
  auto&& _ipex_bag_size = bridge::shallowFallbackToCPUTensor(bag_size);
  auto&& _ipex_maximum_indices = bridge::shallowFallbackToCPUTensor(maximum_indices);
  auto&& _ipex_per_sample_weights = bridge::shallowFallbackToCPUTensor(per_sample_weights);
  auto&& _ipex_result = at::_embedding_bag_backward(_ipex_grad, _ipex_indices, _ipex_offsets, _ipex_offset2bag, _ipex_bag_size, _ipex_maximum_indices, num_weights, scale_grad_by_freq, mode, sparse, _ipex_per_sample_weights);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::_embedding_bag_sparse_backward(const at::Tensor & grad, const at::Tensor & indices, const at::Tensor & offsets, const at::Tensor & offset2bag, const at::Tensor & bag_size, int64_t num_weights, bool scale_grad_by_freq, int64_t mode, const at::Tensor & per_sample_weights) {
  TORCH_INTERNAL_ASSERT(grad.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad.is_contiguous());
  TORCH_INTERNAL_ASSERT(indices.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(indices.is_contiguous());
  TORCH_INTERNAL_ASSERT(offsets.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(offsets.is_contiguous());
  TORCH_INTERNAL_ASSERT(offset2bag.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(offset2bag.is_contiguous());
  TORCH_INTERNAL_ASSERT(bag_size.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(bag_size.is_contiguous());
  TORCH_INTERNAL_ASSERT(per_sample_weights.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(per_sample_weights.is_contiguous());
  auto&& _ipex_grad = bridge::shallowFallbackToCPUTensor(grad);
  auto&& _ipex_indices = bridge::shallowFallbackToCPUTensor(indices);
  auto&& _ipex_offsets = bridge::shallowFallbackToCPUTensor(offsets);
  auto&& _ipex_offset2bag = bridge::shallowFallbackToCPUTensor(offset2bag);
  auto&& _ipex_bag_size = bridge::shallowFallbackToCPUTensor(bag_size);
  auto&& _ipex_per_sample_weights = bridge::shallowFallbackToCPUTensor(per_sample_weights);
  auto&& _ipex_result = at::_embedding_bag_sparse_backward(_ipex_grad, _ipex_indices, _ipex_offsets, _ipex_offset2bag, _ipex_bag_size, num_weights, scale_grad_by_freq, mode, _ipex_per_sample_weights);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::_embedding_bag_dense_backward(const at::Tensor & grad, const at::Tensor & indices, const at::Tensor & offsets, const at::Tensor & offset2bag, const at::Tensor & bag_size, const at::Tensor & maximum_indices, int64_t num_weights, bool scale_grad_by_freq, int64_t mode, const at::Tensor & per_sample_weights) {
  TORCH_INTERNAL_ASSERT(grad.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad.is_contiguous());
  TORCH_INTERNAL_ASSERT(indices.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(indices.is_contiguous());
  TORCH_INTERNAL_ASSERT(offsets.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(offsets.is_contiguous());
  TORCH_INTERNAL_ASSERT(offset2bag.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(offset2bag.is_contiguous());
  TORCH_INTERNAL_ASSERT(bag_size.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(bag_size.is_contiguous());
  TORCH_INTERNAL_ASSERT(maximum_indices.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(maximum_indices.is_contiguous());
  TORCH_INTERNAL_ASSERT(per_sample_weights.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(per_sample_weights.is_contiguous());
  auto&& _ipex_grad = bridge::shallowFallbackToCPUTensor(grad);
  auto&& _ipex_indices = bridge::shallowFallbackToCPUTensor(indices);
  auto&& _ipex_offsets = bridge::shallowFallbackToCPUTensor(offsets);
  auto&& _ipex_offset2bag = bridge::shallowFallbackToCPUTensor(offset2bag);
  auto&& _ipex_bag_size = bridge::shallowFallbackToCPUTensor(bag_size);
  auto&& _ipex_maximum_indices = bridge::shallowFallbackToCPUTensor(maximum_indices);
  auto&& _ipex_per_sample_weights = bridge::shallowFallbackToCPUTensor(per_sample_weights);
  auto&& _ipex_result = at::_embedding_bag_dense_backward(_ipex_grad, _ipex_indices, _ipex_offsets, _ipex_offset2bag, _ipex_bag_size, _ipex_maximum_indices, num_weights, scale_grad_by_freq, mode, _ipex_per_sample_weights);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::_embedding_bag_per_sample_weights_backward(const at::Tensor & grad, const at::Tensor & weight, const at::Tensor & indices, const at::Tensor & offsets, const at::Tensor & offset2bag, int64_t mode) {
  TORCH_INTERNAL_ASSERT(grad.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad.is_contiguous());
  TORCH_INTERNAL_ASSERT(weight.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(weight.is_contiguous());
  TORCH_INTERNAL_ASSERT(indices.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(indices.is_contiguous());
  TORCH_INTERNAL_ASSERT(offsets.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(offsets.is_contiguous());
  TORCH_INTERNAL_ASSERT(offset2bag.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(offset2bag.is_contiguous());
  auto&& _ipex_grad = bridge::shallowFallbackToCPUTensor(grad);
  auto&& _ipex_weight = bridge::shallowFallbackToCPUTensor(weight);
  auto&& _ipex_indices = bridge::shallowFallbackToCPUTensor(indices);
  auto&& _ipex_offsets = bridge::shallowFallbackToCPUTensor(offsets);
  auto&& _ipex_offset2bag = bridge::shallowFallbackToCPUTensor(offset2bag);
  auto&& _ipex_result = at::_embedding_bag_per_sample_weights_backward(_ipex_grad, _ipex_weight, _ipex_indices, _ipex_offsets, _ipex_offset2bag, mode);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::empty(at::IntArrayRef size, const at::TensorOptions & options, c10::optional<at::MemoryFormat> memory_format) {
  TORCH_INTERNAL_ASSERT(options.device().type() == at::DeviceType::DPCPP);
  at::TensorOptions _ipex_options = options.device(at::DeviceType::CPU);
  TORCH_INTERNAL_ASSERT(memory_format.value_or(c10::MemoryFormat::Contiguous) == c10::MemoryFormat::Contiguous);
  auto&& _ipex_result = at::empty(size, _ipex_options, memory_format);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::new_empty(const at::Tensor & self, at::IntArrayRef size, const at::TensorOptions & options) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(options.device().type() == at::DeviceType::DPCPP);
  at::TensorOptions _ipex_options = options.device(at::DeviceType::CPU);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = _ipex_self.new_empty(size, _ipex_options);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::new_full(const at::Tensor & self, at::IntArrayRef size, at::Scalar fill_value, const at::TensorOptions & options) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(options.device().type() == at::DeviceType::DPCPP);
  at::TensorOptions _ipex_options = options.device(at::DeviceType::CPU);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = _ipex_self.new_full(size, fill_value, _ipex_options);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::new_zeros(const at::Tensor & self, at::IntArrayRef size, const at::TensorOptions & options) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(options.device().type() == at::DeviceType::DPCPP);
  at::TensorOptions _ipex_options = options.device(at::DeviceType::CPU);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = _ipex_self.new_zeros(size, _ipex_options);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::_empty_affine_quantized(at::IntArrayRef size, const at::TensorOptions & options, double scale, int64_t zero_point, c10::optional<at::MemoryFormat> memory_format) {
  TORCH_INTERNAL_ASSERT(options.device().type() == at::DeviceType::DPCPP);
  at::TensorOptions _ipex_options = options.device(at::DeviceType::CPU);
  TORCH_INTERNAL_ASSERT(memory_format.value_or(c10::MemoryFormat::Contiguous) == c10::MemoryFormat::Contiguous);
  auto&& _ipex_result = at::_empty_affine_quantized(size, _ipex_options, scale, zero_point, memory_format);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::_empty_per_channel_affine_quantized(at::IntArrayRef size, const at::Tensor & scales, const at::Tensor & zero_points, int64_t axis, const at::TensorOptions & options, c10::optional<at::MemoryFormat> memory_format) {
  TORCH_INTERNAL_ASSERT(scales.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(scales.is_contiguous());
  TORCH_INTERNAL_ASSERT(zero_points.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(zero_points.is_contiguous());
  TORCH_INTERNAL_ASSERT(options.device().type() == at::DeviceType::DPCPP);
  at::TensorOptions _ipex_options = options.device(at::DeviceType::CPU);
  TORCH_INTERNAL_ASSERT(memory_format.value_or(c10::MemoryFormat::Contiguous) == c10::MemoryFormat::Contiguous);
  auto&& _ipex_scales = bridge::shallowFallbackToCPUTensor(scales);
  auto&& _ipex_zero_points = bridge::shallowFallbackToCPUTensor(zero_points);
  auto&& _ipex_result = at::_empty_per_channel_affine_quantized(size, _ipex_scales, _ipex_zero_points, axis, _ipex_options, memory_format);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::resize_(at::Tensor & self, at::IntArrayRef size) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = _ipex_self.resize_(size);
  self = bridge::shallowUpgradeToDPCPPTensor(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return self;
}

at::Tensor & AtenIpexCPUDefault::empty_out(at::Tensor & out, at::IntArrayRef size, c10::optional<at::MemoryFormat> memory_format) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  TORCH_INTERNAL_ASSERT(memory_format.value_or(c10::MemoryFormat::Contiguous) == c10::MemoryFormat::Contiguous);
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_result = at::empty_out(_ipex_out, size, memory_format);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor AtenIpexCPUDefault::empty_like(const at::Tensor & self, c10::optional<at::MemoryFormat> memory_format) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(memory_format.value_or(c10::MemoryFormat::Contiguous) == c10::MemoryFormat::Contiguous);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::empty_like(_ipex_self, memory_format);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::empty_like(const at::Tensor & self, const at::TensorOptions & options, c10::optional<at::MemoryFormat> memory_format) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(options.device().type() == at::DeviceType::DPCPP);
  at::TensorOptions _ipex_options = options.device(at::DeviceType::CPU);
  TORCH_INTERNAL_ASSERT(memory_format.value_or(c10::MemoryFormat::Contiguous) == c10::MemoryFormat::Contiguous);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::empty_like(_ipex_self, _ipex_options, memory_format);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::empty_strided(at::IntArrayRef size, at::IntArrayRef stride, const at::TensorOptions & options) {
  TORCH_INTERNAL_ASSERT(options.device().type() == at::DeviceType::DPCPP);
  at::TensorOptions _ipex_options = options.device(at::DeviceType::CPU);
  auto&& _ipex_result = at::empty_strided(size, stride, _ipex_options);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::erf(const at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::erf(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::erf_(at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::erf_(_ipex_self);
  self = bridge::shallowUpgradeToDPCPPTensor(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return self;
}

at::Tensor & AtenIpexCPUDefault::erf_out(at::Tensor & out, const at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::erf_out(_ipex_out, _ipex_self);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor AtenIpexCPUDefault::erfc(const at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::erfc(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::erfc_(at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::erfc_(_ipex_self);
  self = bridge::shallowUpgradeToDPCPPTensor(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return self;
}

at::Tensor & AtenIpexCPUDefault::erfc_out(at::Tensor & out, const at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::erfc_out(_ipex_out, _ipex_self);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor AtenIpexCPUDefault::exp(const at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::exp(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::exp_(at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::exp_(_ipex_self);
  self = bridge::shallowUpgradeToDPCPPTensor(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return self;
}

at::Tensor & AtenIpexCPUDefault::exp_out(at::Tensor & out, const at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::exp_out(_ipex_out, _ipex_self);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor AtenIpexCPUDefault::expm1(const at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::expm1(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::expm1_(at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::expm1_(_ipex_self);
  self = bridge::shallowUpgradeToDPCPPTensor(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return self;
}

at::Tensor & AtenIpexCPUDefault::expm1_out(at::Tensor & out, const at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::expm1_out(_ipex_out, _ipex_self);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor AtenIpexCPUDefault::expand(const at::Tensor & self, at::IntArrayRef size, bool implicit) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = _ipex_self.expand(size, implicit);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::expand_as(const at::Tensor & self, const at::Tensor & other) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(other.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(other.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_other = bridge::shallowFallbackToCPUTensor(other);
  auto&& _ipex_result = _ipex_self.expand_as(_ipex_other);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::eye(int64_t n, const at::TensorOptions & options) {
  TORCH_INTERNAL_ASSERT(options.device().type() == at::DeviceType::DPCPP);
  at::TensorOptions _ipex_options = options.device(at::DeviceType::CPU);
  auto&& _ipex_result = at::eye(n, _ipex_options);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::eye(int64_t n, int64_t m, const at::TensorOptions & options) {
  TORCH_INTERNAL_ASSERT(options.device().type() == at::DeviceType::DPCPP);
  at::TensorOptions _ipex_options = options.device(at::DeviceType::CPU);
  auto&& _ipex_result = at::eye(n, m, _ipex_options);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::eye_out(at::Tensor & out, int64_t n) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_result = at::eye_out(_ipex_out, n);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor & AtenIpexCPUDefault::eye_out(at::Tensor & out, int64_t n, int64_t m) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_result = at::eye_out(_ipex_out, n, m);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor AtenIpexCPUDefault::flatten(const at::Tensor & self, int64_t start_dim, int64_t end_dim) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::flatten(_ipex_self, start_dim, end_dim);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::fill_(at::Tensor & self, at::Scalar value) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::fill_(_ipex_self, value);
  self = bridge::shallowUpgradeToDPCPPTensor(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return self;
}

at::Tensor & AtenIpexCPUDefault::fill_(at::Tensor & self, const at::Tensor & value) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(value.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(value.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_value = bridge::shallowFallbackToCPUTensor(value);
  auto&& _ipex_result = at::fill_(_ipex_self, _ipex_value);
  self = bridge::shallowUpgradeToDPCPPTensor(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return self;
}

at::Tensor AtenIpexCPUDefault::floor(const at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::floor(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::floor_(at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::floor_(_ipex_self);
  self = bridge::shallowUpgradeToDPCPPTensor(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return self;
}

at::Tensor & AtenIpexCPUDefault::floor_out(at::Tensor & out, const at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::floor_out(_ipex_out, _ipex_self);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor AtenIpexCPUDefault::frac(const at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::frac(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::frac_(at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::frac_(_ipex_self);
  self = bridge::shallowUpgradeToDPCPPTensor(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return self;
}

at::Tensor & AtenIpexCPUDefault::frac_out(at::Tensor & out, const at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::frac_out(_ipex_out, _ipex_self);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor AtenIpexCPUDefault::full(at::IntArrayRef size, at::Scalar fill_value, const at::TensorOptions & options) {
  TORCH_INTERNAL_ASSERT(options.device().type() == at::DeviceType::DPCPP);
  at::TensorOptions _ipex_options = options.device(at::DeviceType::CPU);
  auto&& _ipex_result = at::full(size, fill_value, _ipex_options);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::full_out(at::Tensor & out, at::IntArrayRef size, at::Scalar fill_value) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_result = at::full_out(_ipex_out, size, fill_value);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor AtenIpexCPUDefault::full_like(const at::Tensor & self, at::Scalar fill_value, c10::optional<at::MemoryFormat> memory_format) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(memory_format.value_or(c10::MemoryFormat::Contiguous) == c10::MemoryFormat::Contiguous);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::full_like(_ipex_self, fill_value, memory_format);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::full_like(const at::Tensor & self, at::Scalar fill_value, const at::TensorOptions & options, c10::optional<at::MemoryFormat> memory_format) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(options.device().type() == at::DeviceType::DPCPP);
  at::TensorOptions _ipex_options = options.device(at::DeviceType::CPU);
  TORCH_INTERNAL_ASSERT(memory_format.value_or(c10::MemoryFormat::Contiguous) == c10::MemoryFormat::Contiguous);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::full_like(_ipex_self, fill_value, _ipex_options, memory_format);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::from_file(std::string filename, c10::optional<bool> shared, c10::optional<int64_t> size, const at::TensorOptions & options) {
  TORCH_INTERNAL_ASSERT(options.device().type() == at::DeviceType::DPCPP);
  at::TensorOptions _ipex_options = options.device(at::DeviceType::CPU);
  auto&& _ipex_result = at::from_file(filename, shared, size, _ipex_options);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::grid_sampler(const at::Tensor & input, const at::Tensor & grid, int64_t interpolation_mode, int64_t padding_mode, bool align_corners) {
  TORCH_INTERNAL_ASSERT(input.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(input.is_contiguous());
  TORCH_INTERNAL_ASSERT(grid.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grid.is_contiguous());
  auto&& _ipex_input = bridge::shallowFallbackToCPUTensor(input);
  auto&& _ipex_grid = bridge::shallowFallbackToCPUTensor(grid);
  auto&& _ipex_result = at::grid_sampler(_ipex_input, _ipex_grid, interpolation_mode, padding_mode, align_corners);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::grid_sampler_2d(const at::Tensor & input, const at::Tensor & grid, int64_t interpolation_mode, int64_t padding_mode, bool align_corners) {
  TORCH_INTERNAL_ASSERT(input.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(input.is_contiguous());
  TORCH_INTERNAL_ASSERT(grid.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grid.is_contiguous());
  auto&& _ipex_input = bridge::shallowFallbackToCPUTensor(input);
  auto&& _ipex_grid = bridge::shallowFallbackToCPUTensor(grid);
  auto&& _ipex_result = at::grid_sampler_2d(_ipex_input, _ipex_grid, interpolation_mode, padding_mode, align_corners);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

std::tuple<at::Tensor,at::Tensor> AtenIpexCPUDefault::grid_sampler_2d_backward(const at::Tensor & grad_output, const at::Tensor & input, const at::Tensor & grid, int64_t interpolation_mode, int64_t padding_mode, bool align_corners) {
  TORCH_INTERNAL_ASSERT(grad_output.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_output.is_contiguous());
  TORCH_INTERNAL_ASSERT(input.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(input.is_contiguous());
  TORCH_INTERNAL_ASSERT(grid.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grid.is_contiguous());
  auto&& _ipex_grad_output = bridge::shallowFallbackToCPUTensor(grad_output);
  auto&& _ipex_input = bridge::shallowFallbackToCPUTensor(input);
  auto&& _ipex_grid = bridge::shallowFallbackToCPUTensor(grid);
  auto&& _ipex_result = at::grid_sampler_2d_backward(_ipex_grad_output, _ipex_input, _ipex_grid, interpolation_mode, padding_mode, align_corners);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return std::tuple<at::Tensor,at::Tensor>(bridge::upgradeToDPCPPTensor(std::get<0>(_ipex_result)), bridge::upgradeToDPCPPTensor(std::get<1>(_ipex_result)));
}

at::Tensor AtenIpexCPUDefault::grid_sampler_3d(const at::Tensor & input, const at::Tensor & grid, int64_t interpolation_mode, int64_t padding_mode, bool align_corners) {
  TORCH_INTERNAL_ASSERT(input.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(input.is_contiguous());
  TORCH_INTERNAL_ASSERT(grid.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grid.is_contiguous());
  auto&& _ipex_input = bridge::shallowFallbackToCPUTensor(input);
  auto&& _ipex_grid = bridge::shallowFallbackToCPUTensor(grid);
  auto&& _ipex_result = at::grid_sampler_3d(_ipex_input, _ipex_grid, interpolation_mode, padding_mode, align_corners);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

std::tuple<at::Tensor,at::Tensor> AtenIpexCPUDefault::grid_sampler_3d_backward(const at::Tensor & grad_output, const at::Tensor & input, const at::Tensor & grid, int64_t interpolation_mode, int64_t padding_mode, bool align_corners) {
  TORCH_INTERNAL_ASSERT(grad_output.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_output.is_contiguous());
  TORCH_INTERNAL_ASSERT(input.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(input.is_contiguous());
  TORCH_INTERNAL_ASSERT(grid.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grid.is_contiguous());
  auto&& _ipex_grad_output = bridge::shallowFallbackToCPUTensor(grad_output);
  auto&& _ipex_input = bridge::shallowFallbackToCPUTensor(input);
  auto&& _ipex_grid = bridge::shallowFallbackToCPUTensor(grid);
  auto&& _ipex_result = at::grid_sampler_3d_backward(_ipex_grad_output, _ipex_input, _ipex_grid, interpolation_mode, padding_mode, align_corners);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return std::tuple<at::Tensor,at::Tensor>(bridge::upgradeToDPCPPTensor(std::get<0>(_ipex_result)), bridge::upgradeToDPCPPTensor(std::get<1>(_ipex_result)));
}

at::Tensor AtenIpexCPUDefault::hann_window(int64_t window_length, const at::TensorOptions & options) {
  TORCH_INTERNAL_ASSERT(options.device().type() == at::DeviceType::DPCPP);
  at::TensorOptions _ipex_options = options.device(at::DeviceType::CPU);
  auto&& _ipex_result = at::hann_window(window_length, _ipex_options);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::hann_window(int64_t window_length, bool periodic, const at::TensorOptions & options) {
  TORCH_INTERNAL_ASSERT(options.device().type() == at::DeviceType::DPCPP);
  at::TensorOptions _ipex_options = options.device(at::DeviceType::CPU);
  auto&& _ipex_result = at::hann_window(window_length, periodic, _ipex_options);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::hamming_window(int64_t window_length, const at::TensorOptions & options) {
  TORCH_INTERNAL_ASSERT(options.device().type() == at::DeviceType::DPCPP);
  at::TensorOptions _ipex_options = options.device(at::DeviceType::CPU);
  auto&& _ipex_result = at::hamming_window(window_length, _ipex_options);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::hamming_window(int64_t window_length, bool periodic, const at::TensorOptions & options) {
  TORCH_INTERNAL_ASSERT(options.device().type() == at::DeviceType::DPCPP);
  at::TensorOptions _ipex_options = options.device(at::DeviceType::CPU);
  auto&& _ipex_result = at::hamming_window(window_length, periodic, _ipex_options);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::hamming_window(int64_t window_length, bool periodic, double alpha, const at::TensorOptions & options) {
  TORCH_INTERNAL_ASSERT(options.device().type() == at::DeviceType::DPCPP);
  at::TensorOptions _ipex_options = options.device(at::DeviceType::CPU);
  auto&& _ipex_result = at::hamming_window(window_length, periodic, alpha, _ipex_options);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::hamming_window(int64_t window_length, bool periodic, double alpha, double beta, const at::TensorOptions & options) {
  TORCH_INTERNAL_ASSERT(options.device().type() == at::DeviceType::DPCPP);
  at::TensorOptions _ipex_options = options.device(at::DeviceType::CPU);
  auto&& _ipex_result = at::hamming_window(window_length, periodic, alpha, beta, _ipex_options);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::hinge_embedding_loss(const at::Tensor & self, const at::Tensor & target, double margin, int64_t reduction) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(target.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(target.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_target = bridge::shallowFallbackToCPUTensor(target);
  auto&& _ipex_result = at::hinge_embedding_loss(_ipex_self, _ipex_target, margin, reduction);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::ger(const at::Tensor & self, const at::Tensor & vec2) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(vec2.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(vec2.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_vec2 = bridge::shallowFallbackToCPUTensor(vec2);
  auto&& _ipex_result = at::ger(_ipex_self, _ipex_vec2);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::ger_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & vec2) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(vec2.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(vec2.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_vec2 = bridge::shallowFallbackToCPUTensor(vec2);
  auto&& _ipex_result = at::ger_out(_ipex_out, _ipex_self, _ipex_vec2);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor AtenIpexCPUDefault::group_norm(const at::Tensor & input, int64_t num_groups, const at::Tensor & weight, const at::Tensor & bias, double eps, bool cudnn_enabled) {
  TORCH_INTERNAL_ASSERT(input.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(input.is_contiguous());
  TORCH_INTERNAL_ASSERT(weight.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(weight.is_contiguous());
  TORCH_INTERNAL_ASSERT(bias.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(bias.is_contiguous());
  auto&& _ipex_input = bridge::shallowFallbackToCPUTensor(input);
  auto&& _ipex_weight = bridge::shallowFallbackToCPUTensor(weight);
  auto&& _ipex_bias = bridge::shallowFallbackToCPUTensor(bias);
  auto&& _ipex_result = at::group_norm(_ipex_input, num_groups, _ipex_weight, _ipex_bias, eps, cudnn_enabled);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::fft(const at::Tensor & self, int64_t signal_ndim, bool normalized) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::fft(_ipex_self, signal_ndim, normalized);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::ifft(const at::Tensor & self, int64_t signal_ndim, bool normalized) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::ifft(_ipex_self, signal_ndim, normalized);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::rfft(const at::Tensor & self, int64_t signal_ndim, bool normalized, bool onesided) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::rfft(_ipex_self, signal_ndim, normalized, onesided);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::irfft(const at::Tensor & self, int64_t signal_ndim, bool normalized, bool onesided, at::IntArrayRef signal_sizes) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::irfft(_ipex_self, signal_ndim, normalized, onesided, signal_sizes);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::_fft_with_size(const at::Tensor & self, int64_t signal_ndim, bool complex_input, bool complex_output, bool inverse, at::IntArrayRef checked_signal_sizes, bool normalized, bool onesided, at::IntArrayRef output_sizes) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::_fft_with_size(_ipex_self, signal_ndim, complex_input, complex_output, inverse, checked_signal_sizes, normalized, onesided, output_sizes);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::index(const at::Tensor & self, at::TensorList indices) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_indices = bridge::shallowFallbackToCPUTensorList(indices);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::index(_ipex_self, _ipex_indices);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::index_copy_(at::Tensor & self, int64_t dim, const at::Tensor & index, const at::Tensor & source) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(index.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(index.is_contiguous());
  TORCH_INTERNAL_ASSERT(source.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(source.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_index = bridge::shallowFallbackToCPUTensor(index);
  auto&& _ipex_source = bridge::shallowFallbackToCPUTensor(source);
  auto&& _ipex_result = _ipex_self.index_copy_(dim, _ipex_index, _ipex_source);
  self = bridge::shallowUpgradeToDPCPPTensor(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return self;
}

at::Tensor AtenIpexCPUDefault::index_copy(const at::Tensor & self, int64_t dim, const at::Tensor & index, const at::Tensor & source) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(index.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(index.is_contiguous());
  TORCH_INTERNAL_ASSERT(source.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(source.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_index = bridge::shallowFallbackToCPUTensor(index);
  auto&& _ipex_source = bridge::shallowFallbackToCPUTensor(source);
  auto&& _ipex_result = at::index_copy(_ipex_self, dim, _ipex_index, _ipex_source);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::index_put_(at::Tensor & self, at::TensorList indices, const at::Tensor & values, bool accumulate) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_indices = bridge::shallowFallbackToCPUTensorList(indices);
  TORCH_INTERNAL_ASSERT(values.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(values.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_values = bridge::shallowFallbackToCPUTensor(values);
  auto&& _ipex_result = at::index_put_(_ipex_self, _ipex_indices, _ipex_values, accumulate);
  self = bridge::shallowUpgradeToDPCPPTensor(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return self;
}

at::Tensor AtenIpexCPUDefault::index_put(const at::Tensor & self, at::TensorList indices, const at::Tensor & values, bool accumulate) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_indices = bridge::shallowFallbackToCPUTensorList(indices);
  TORCH_INTERNAL_ASSERT(values.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(values.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_values = bridge::shallowFallbackToCPUTensor(values);
  auto&& _ipex_result = at::index_put(_ipex_self, _ipex_indices, _ipex_values, accumulate);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::_index_put_impl_(at::Tensor & self, at::TensorList indices, const at::Tensor & values, bool accumulate, bool unsafe) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_indices = bridge::shallowFallbackToCPUTensorList(indices);
  TORCH_INTERNAL_ASSERT(values.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(values.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_values = bridge::shallowFallbackToCPUTensor(values);
  auto&& _ipex_result = at::_index_put_impl_(_ipex_self, _ipex_indices, _ipex_values, accumulate, unsafe);
  self = bridge::shallowUpgradeToDPCPPTensor(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return self;
}

at::Tensor AtenIpexCPUDefault::instance_norm(const at::Tensor & input, const at::Tensor & weight, const at::Tensor & bias, const at::Tensor & running_mean, const at::Tensor & running_var, bool use_input_stats, double momentum, double eps, bool cudnn_enabled) {
  TORCH_INTERNAL_ASSERT(input.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(input.is_contiguous());
  TORCH_INTERNAL_ASSERT(weight.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(weight.is_contiguous());
  TORCH_INTERNAL_ASSERT(bias.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(bias.is_contiguous());
  TORCH_INTERNAL_ASSERT(running_mean.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(running_mean.is_contiguous());
  TORCH_INTERNAL_ASSERT(running_var.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(running_var.is_contiguous());
  auto&& _ipex_input = bridge::shallowFallbackToCPUTensor(input);
  auto&& _ipex_weight = bridge::shallowFallbackToCPUTensor(weight);
  auto&& _ipex_bias = bridge::shallowFallbackToCPUTensor(bias);
  auto&& _ipex_running_mean = bridge::shallowFallbackToCPUTensor(running_mean);
  auto&& _ipex_running_var = bridge::shallowFallbackToCPUTensor(running_var);
  auto&& _ipex_result = at::instance_norm(_ipex_input, _ipex_weight, _ipex_bias, _ipex_running_mean, _ipex_running_var, use_input_stats, momentum, eps, cudnn_enabled);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::inverse(const at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::inverse(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::inverse_out(at::Tensor & out, const at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::inverse_out(_ipex_out, _ipex_self);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor AtenIpexCPUDefault::_inverse_helper(const at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::_inverse_helper(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::isclose(const at::Tensor & self, const at::Tensor & other, double rtol, double atol, bool equal_nan) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(other.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(other.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_other = bridge::shallowFallbackToCPUTensor(other);
  auto&& _ipex_result = at::isclose(_ipex_self, _ipex_other, rtol, atol, equal_nan);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::isnan(const at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::isnan(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

bool AtenIpexCPUDefault::is_distributed(const at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::is_distributed(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return _ipex_result;
}

bool AtenIpexCPUDefault::is_floating_point(const at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::is_floating_point(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return _ipex_result;
}

bool AtenIpexCPUDefault::is_complex(const at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::is_complex(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return _ipex_result;
}

bool AtenIpexCPUDefault::is_nonzero(const at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::is_nonzero(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return _ipex_result;
}

bool AtenIpexCPUDefault::is_same_size(const at::Tensor & self, const at::Tensor & other) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(other.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(other.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_other = bridge::shallowFallbackToCPUTensor(other);
  auto&& _ipex_result = at::is_same_size(_ipex_self, _ipex_other);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return _ipex_result;
}

bool AtenIpexCPUDefault::is_signed(const at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::is_signed(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return _ipex_result;
}

at::Tensor AtenIpexCPUDefault::kl_div(const at::Tensor & self, const at::Tensor & target, int64_t reduction) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(target.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(target.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_target = bridge::shallowFallbackToCPUTensor(target);
  auto&& _ipex_result = at::kl_div(_ipex_self, _ipex_target, reduction);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::kl_div_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & target, int64_t reduction) {
  TORCH_INTERNAL_ASSERT(grad_output.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_output.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(target.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(target.is_contiguous());
  auto&& _ipex_grad_output = bridge::shallowFallbackToCPUTensor(grad_output);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_target = bridge::shallowFallbackToCPUTensor(target);
  auto&& _ipex_result = at::kl_div_backward(_ipex_grad_output, _ipex_self, _ipex_target, reduction);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

std::tuple<at::Tensor,at::Tensor> AtenIpexCPUDefault::kthvalue(const at::Tensor & self, int64_t k, int64_t dim, bool keepdim) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::kthvalue(_ipex_self, k, dim, keepdim);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return std::tuple<at::Tensor,at::Tensor>(bridge::upgradeToDPCPPTensor(std::get<0>(_ipex_result)), bridge::upgradeToDPCPPTensor(std::get<1>(_ipex_result)));
}

std::tuple<at::Tensor &,at::Tensor &> AtenIpexCPUDefault::kthvalue_out(at::Tensor & values, at::Tensor & indices, const at::Tensor & self, int64_t k, int64_t dim, bool keepdim) {
  TORCH_INTERNAL_ASSERT(values.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(values.is_contiguous());
  TORCH_INTERNAL_ASSERT(indices.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(indices.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_values = bridge::shallowFallbackToCPUTensor(values);
  auto&& _ipex_indices = bridge::shallowFallbackToCPUTensor(indices);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::kthvalue_out(_ipex_values, _ipex_indices, _ipex_self, k, dim, keepdim);
  values = bridge::shallowUpgradeToDPCPPTensor(_ipex_values);
  indices = bridge::shallowUpgradeToDPCPPTensor(_ipex_indices);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return std::tuple<at::Tensor &,at::Tensor &>(values, indices);
}

at::Tensor AtenIpexCPUDefault::layer_norm(const at::Tensor & input, at::IntArrayRef normalized_shape, const at::Tensor & weight, const at::Tensor & bias, double eps, bool cudnn_enable) {
  TORCH_INTERNAL_ASSERT(input.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(input.is_contiguous());
  TORCH_INTERNAL_ASSERT(weight.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(weight.is_contiguous());
  TORCH_INTERNAL_ASSERT(bias.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(bias.is_contiguous());
  auto&& _ipex_input = bridge::shallowFallbackToCPUTensor(input);
  auto&& _ipex_weight = bridge::shallowFallbackToCPUTensor(weight);
  auto&& _ipex_bias = bridge::shallowFallbackToCPUTensor(bias);
  auto&& _ipex_result = at::layer_norm(_ipex_input, normalized_shape, _ipex_weight, _ipex_bias, eps, cudnn_enable);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

std::tuple<at::Tensor,at::Tensor,at::Tensor> AtenIpexCPUDefault::native_layer_norm(const at::Tensor & input, const at::Tensor & weight, const at::Tensor & bias, int64_t M, int64_t N, double eps) {
  TORCH_INTERNAL_ASSERT(input.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(input.is_contiguous());
  TORCH_INTERNAL_ASSERT(weight.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(weight.is_contiguous());
  TORCH_INTERNAL_ASSERT(bias.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(bias.is_contiguous());
  auto&& _ipex_input = bridge::shallowFallbackToCPUTensor(input);
  auto&& _ipex_weight = bridge::shallowFallbackToCPUTensor(weight);
  auto&& _ipex_bias = bridge::shallowFallbackToCPUTensor(bias);
  auto&& _ipex_result = at::native_layer_norm(_ipex_input, _ipex_weight, _ipex_bias, M, N, eps);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return std::tuple<at::Tensor,at::Tensor,at::Tensor>(bridge::upgradeToDPCPPTensor(std::get<0>(_ipex_result)), bridge::upgradeToDPCPPTensor(std::get<1>(_ipex_result)), bridge::upgradeToDPCPPTensor(std::get<2>(_ipex_result)));
}

std::tuple<at::Tensor,at::Tensor,at::Tensor> AtenIpexCPUDefault::native_layer_norm_backward(const at::Tensor & grad_out, const at::Tensor & input, const at::Tensor & mean, const at::Tensor & rstd, const at::Tensor & weight, int64_t M, int64_t N, std::array<bool,3> output_mask) {
  TORCH_INTERNAL_ASSERT(grad_out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_out.is_contiguous());
  TORCH_INTERNAL_ASSERT(input.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(input.is_contiguous());
  TORCH_INTERNAL_ASSERT(mean.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(mean.is_contiguous());
  TORCH_INTERNAL_ASSERT(rstd.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(rstd.is_contiguous());
  TORCH_INTERNAL_ASSERT(weight.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(weight.is_contiguous());
  auto&& _ipex_grad_out = bridge::shallowFallbackToCPUTensor(grad_out);
  auto&& _ipex_input = bridge::shallowFallbackToCPUTensor(input);
  auto&& _ipex_mean = bridge::shallowFallbackToCPUTensor(mean);
  auto&& _ipex_rstd = bridge::shallowFallbackToCPUTensor(rstd);
  auto&& _ipex_weight = bridge::shallowFallbackToCPUTensor(weight);
  auto&& _ipex_result = at::native_layer_norm_backward(_ipex_grad_out, _ipex_input, _ipex_mean, _ipex_rstd, _ipex_weight, M, N, output_mask);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return std::tuple<at::Tensor,at::Tensor,at::Tensor>(bridge::upgradeToDPCPPTensor(std::get<0>(_ipex_result)), bridge::upgradeToDPCPPTensor(std::get<1>(_ipex_result)), bridge::upgradeToDPCPPTensor(std::get<2>(_ipex_result)));
}

at::Tensor AtenIpexCPUDefault::linear(const at::Tensor & input, const at::Tensor & weight, const at::Tensor & bias) {
  TORCH_INTERNAL_ASSERT(input.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(input.is_contiguous());
  TORCH_INTERNAL_ASSERT(weight.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(weight.is_contiguous());
  TORCH_INTERNAL_ASSERT(bias.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(bias.is_contiguous());
  auto&& _ipex_input = bridge::shallowFallbackToCPUTensor(input);
  auto&& _ipex_weight = bridge::shallowFallbackToCPUTensor(weight);
  auto&& _ipex_bias = bridge::shallowFallbackToCPUTensor(bias);
  auto&& _ipex_result = at::linear(_ipex_input, _ipex_weight, _ipex_bias);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::fbgemm_linear_int8_weight_fp32_activation(const at::Tensor & input, const at::Tensor & weight, const at::Tensor & packed, const at::Tensor & col_offsets, at::Scalar weight_scale, at::Scalar weight_zero_point, const at::Tensor & bias) {
  TORCH_INTERNAL_ASSERT(input.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(input.is_contiguous());
  TORCH_INTERNAL_ASSERT(weight.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(weight.is_contiguous());
  TORCH_INTERNAL_ASSERT(packed.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(packed.is_contiguous());
  TORCH_INTERNAL_ASSERT(col_offsets.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(col_offsets.is_contiguous());
  TORCH_INTERNAL_ASSERT(bias.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(bias.is_contiguous());
  auto&& _ipex_input = bridge::shallowFallbackToCPUTensor(input);
  auto&& _ipex_weight = bridge::shallowFallbackToCPUTensor(weight);
  auto&& _ipex_packed = bridge::shallowFallbackToCPUTensor(packed);
  auto&& _ipex_col_offsets = bridge::shallowFallbackToCPUTensor(col_offsets);
  auto&& _ipex_bias = bridge::shallowFallbackToCPUTensor(bias);
  auto&& _ipex_result = at::fbgemm_linear_int8_weight_fp32_activation(_ipex_input, _ipex_weight, _ipex_packed, _ipex_col_offsets, weight_scale, weight_zero_point, _ipex_bias);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::fbgemm_linear_int8_weight(const at::Tensor & input, const at::Tensor & weight, const at::Tensor & packed, const at::Tensor & col_offsets, at::Scalar weight_scale, at::Scalar weight_zero_point, const at::Tensor & bias) {
  TORCH_INTERNAL_ASSERT(input.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(input.is_contiguous());
  TORCH_INTERNAL_ASSERT(weight.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(weight.is_contiguous());
  TORCH_INTERNAL_ASSERT(packed.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(packed.is_contiguous());
  TORCH_INTERNAL_ASSERT(col_offsets.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(col_offsets.is_contiguous());
  TORCH_INTERNAL_ASSERT(bias.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(bias.is_contiguous());
  auto&& _ipex_input = bridge::shallowFallbackToCPUTensor(input);
  auto&& _ipex_weight = bridge::shallowFallbackToCPUTensor(weight);
  auto&& _ipex_packed = bridge::shallowFallbackToCPUTensor(packed);
  auto&& _ipex_col_offsets = bridge::shallowFallbackToCPUTensor(col_offsets);
  auto&& _ipex_bias = bridge::shallowFallbackToCPUTensor(bias);
  auto&& _ipex_result = at::fbgemm_linear_int8_weight(_ipex_input, _ipex_weight, _ipex_packed, _ipex_col_offsets, weight_scale, weight_zero_point, _ipex_bias);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

std::tuple<at::Tensor,at::Tensor,double,int64_t> AtenIpexCPUDefault::fbgemm_linear_quantize_weight(const at::Tensor & input) {
  TORCH_INTERNAL_ASSERT(input.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(input.is_contiguous());
  auto&& _ipex_input = bridge::shallowFallbackToCPUTensor(input);
  auto&& _ipex_result = at::fbgemm_linear_quantize_weight(_ipex_input);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return std::tuple<at::Tensor,at::Tensor,double,int64_t>(bridge::upgradeToDPCPPTensor(std::get<0>(_ipex_result)), bridge::upgradeToDPCPPTensor(std::get<1>(_ipex_result)), std::get<2>(_ipex_result), std::get<3>(_ipex_result));
}

at::Tensor AtenIpexCPUDefault::fbgemm_pack_gemm_matrix_fp16(const at::Tensor & input) {
  TORCH_INTERNAL_ASSERT(input.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(input.is_contiguous());
  auto&& _ipex_input = bridge::shallowFallbackToCPUTensor(input);
  auto&& _ipex_result = at::fbgemm_pack_gemm_matrix_fp16(_ipex_input);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::fbgemm_linear_fp16_weight_fp32_activation(const at::Tensor & input, const at::Tensor & packed_weight, const at::Tensor & bias) {
  TORCH_INTERNAL_ASSERT(input.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(input.is_contiguous());
  TORCH_INTERNAL_ASSERT(packed_weight.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(packed_weight.is_contiguous());
  TORCH_INTERNAL_ASSERT(bias.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(bias.is_contiguous());
  auto&& _ipex_input = bridge::shallowFallbackToCPUTensor(input);
  auto&& _ipex_packed_weight = bridge::shallowFallbackToCPUTensor(packed_weight);
  auto&& _ipex_bias = bridge::shallowFallbackToCPUTensor(bias);
  auto&& _ipex_result = at::fbgemm_linear_fp16_weight_fp32_activation(_ipex_input, _ipex_packed_weight, _ipex_bias);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::fbgemm_linear_fp16_weight(const at::Tensor & input, const at::Tensor & packed_weight, const at::Tensor & bias) {
  TORCH_INTERNAL_ASSERT(input.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(input.is_contiguous());
  TORCH_INTERNAL_ASSERT(packed_weight.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(packed_weight.is_contiguous());
  TORCH_INTERNAL_ASSERT(bias.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(bias.is_contiguous());
  auto&& _ipex_input = bridge::shallowFallbackToCPUTensor(input);
  auto&& _ipex_packed_weight = bridge::shallowFallbackToCPUTensor(packed_weight);
  auto&& _ipex_bias = bridge::shallowFallbackToCPUTensor(bias);
  auto&& _ipex_result = at::fbgemm_linear_fp16_weight(_ipex_input, _ipex_packed_weight, _ipex_bias);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::fbgemm_pack_quantized_matrix(const at::Tensor & input) {
  TORCH_INTERNAL_ASSERT(input.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(input.is_contiguous());
  auto&& _ipex_input = bridge::shallowFallbackToCPUTensor(input);
  auto&& _ipex_result = at::fbgemm_pack_quantized_matrix(_ipex_input);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::fbgemm_pack_quantized_matrix(const at::Tensor & input, int64_t K, int64_t N) {
  TORCH_INTERNAL_ASSERT(input.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(input.is_contiguous());
  auto&& _ipex_input = bridge::shallowFallbackToCPUTensor(input);
  auto&& _ipex_result = at::fbgemm_pack_quantized_matrix(_ipex_input, K, N);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::linspace(at::Scalar start, at::Scalar end, int64_t steps, const at::TensorOptions & options) {
  TORCH_INTERNAL_ASSERT(options.device().type() == at::DeviceType::DPCPP);
  at::TensorOptions _ipex_options = options.device(at::DeviceType::CPU);
  auto&& _ipex_result = at::linspace(start, end, steps, _ipex_options);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::linspace_out(at::Tensor & out, at::Scalar start, at::Scalar end, int64_t steps) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_result = at::linspace_out(_ipex_out, start, end, steps);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor AtenIpexCPUDefault::log(const at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::log(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::log_(at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::log_(_ipex_self);
  self = bridge::shallowUpgradeToDPCPPTensor(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return self;
}

at::Tensor & AtenIpexCPUDefault::log_out(at::Tensor & out, const at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::log_out(_ipex_out, _ipex_self);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor AtenIpexCPUDefault::log10(const at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::log10(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::log10_(at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::log10_(_ipex_self);
  self = bridge::shallowUpgradeToDPCPPTensor(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return self;
}

at::Tensor & AtenIpexCPUDefault::log10_out(at::Tensor & out, const at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::log10_out(_ipex_out, _ipex_self);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor AtenIpexCPUDefault::log1p(const at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::log1p(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::log1p_(at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::log1p_(_ipex_self);
  self = bridge::shallowUpgradeToDPCPPTensor(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return self;
}

at::Tensor & AtenIpexCPUDefault::log1p_out(at::Tensor & out, const at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::log1p_out(_ipex_out, _ipex_self);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor AtenIpexCPUDefault::log2(const at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::log2(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::log2_(at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::log2_(_ipex_self);
  self = bridge::shallowUpgradeToDPCPPTensor(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return self;
}

at::Tensor & AtenIpexCPUDefault::log2_out(at::Tensor & out, const at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::log2_out(_ipex_out, _ipex_self);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor AtenIpexCPUDefault::logdet(const at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::logdet(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::logspace(at::Scalar start, at::Scalar end, int64_t steps, double base, const at::TensorOptions & options) {
  TORCH_INTERNAL_ASSERT(options.device().type() == at::DeviceType::DPCPP);
  at::TensorOptions _ipex_options = options.device(at::DeviceType::CPU);
  auto&& _ipex_result = at::logspace(start, end, steps, base, _ipex_options);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::logspace_out(at::Tensor & out, at::Scalar start, at::Scalar end, int64_t steps, double base) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_result = at::logspace_out(_ipex_out, start, end, steps, base);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor AtenIpexCPUDefault::log_softmax(const at::Tensor & self, int64_t dim, c10::optional<at::ScalarType> dtype) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::log_softmax(_ipex_self, dim, dtype);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::_log_softmax(const at::Tensor & self, int64_t dim, bool half_to_float) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::_log_softmax(_ipex_self, dim, half_to_float);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::_log_softmax_backward_data(const at::Tensor & grad_output, const at::Tensor & output, int64_t dim, const at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(grad_output.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_output.is_contiguous());
  TORCH_INTERNAL_ASSERT(output.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(output.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_grad_output = bridge::shallowFallbackToCPUTensor(grad_output);
  auto&& _ipex_output = bridge::shallowFallbackToCPUTensor(output);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::_log_softmax_backward_data(_ipex_grad_output, _ipex_output, dim, _ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::logsumexp(const at::Tensor & self, at::IntArrayRef dim, bool keepdim) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::logsumexp(_ipex_self, dim, keepdim);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::logsumexp_out(at::Tensor & out, const at::Tensor & self, at::IntArrayRef dim, bool keepdim) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::logsumexp_out(_ipex_out, _ipex_self, dim, keepdim);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor AtenIpexCPUDefault::margin_ranking_loss(const at::Tensor & input1, const at::Tensor & input2, const at::Tensor & target, double margin, int64_t reduction) {
  TORCH_INTERNAL_ASSERT(input1.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(input1.is_contiguous());
  TORCH_INTERNAL_ASSERT(input2.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(input2.is_contiguous());
  TORCH_INTERNAL_ASSERT(target.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(target.is_contiguous());
  auto&& _ipex_input1 = bridge::shallowFallbackToCPUTensor(input1);
  auto&& _ipex_input2 = bridge::shallowFallbackToCPUTensor(input2);
  auto&& _ipex_target = bridge::shallowFallbackToCPUTensor(target);
  auto&& _ipex_result = at::margin_ranking_loss(_ipex_input1, _ipex_input2, _ipex_target, margin, reduction);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::matmul(const at::Tensor & self, const at::Tensor & other) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(other.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(other.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_other = bridge::shallowFallbackToCPUTensor(other);
  auto&& _ipex_result = at::matmul(_ipex_self, _ipex_other);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::matmul_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & other) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(other.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(other.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_other = bridge::shallowFallbackToCPUTensor(other);
  auto&& _ipex_result = at::matmul_out(_ipex_out, _ipex_self, _ipex_other);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor AtenIpexCPUDefault::matrix_rank(const at::Tensor & self, double tol, bool symmetric) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::matrix_rank(_ipex_self, tol, symmetric);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::matrix_rank(const at::Tensor & self, bool symmetric) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::matrix_rank(_ipex_self, symmetric);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::matrix_power(const at::Tensor & self, int64_t n) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::matrix_power(_ipex_self, n);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

std::tuple<at::Tensor,at::Tensor> AtenIpexCPUDefault::max(const at::Tensor & self, int64_t dim, bool keepdim) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::max(_ipex_self, dim, keepdim);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return std::tuple<at::Tensor,at::Tensor>(bridge::upgradeToDPCPPTensor(std::get<0>(_ipex_result)), bridge::upgradeToDPCPPTensor(std::get<1>(_ipex_result)));
}

std::tuple<at::Tensor &,at::Tensor &> AtenIpexCPUDefault::max_out(at::Tensor & max, at::Tensor & max_values, const at::Tensor & self, int64_t dim, bool keepdim) {
  TORCH_INTERNAL_ASSERT(max.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(max.is_contiguous());
  TORCH_INTERNAL_ASSERT(max_values.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(max_values.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_max = bridge::shallowFallbackToCPUTensor(max);
  auto&& _ipex_max_values = bridge::shallowFallbackToCPUTensor(max_values);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::max_out(_ipex_max, _ipex_max_values, _ipex_self, dim, keepdim);
  max = bridge::shallowUpgradeToDPCPPTensor(_ipex_max);
  max_values = bridge::shallowUpgradeToDPCPPTensor(_ipex_max_values);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return std::tuple<at::Tensor &,at::Tensor &>(max, max_values);
}

at::Tensor AtenIpexCPUDefault::max_values(const at::Tensor & self, at::IntArrayRef dim, bool keepdim) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::max_values(_ipex_self, dim, keepdim);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

std::tuple<at::Tensor,at::Tensor> AtenIpexCPUDefault::max_pool1d_with_indices(const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef dilation, bool ceil_mode) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::max_pool1d_with_indices(_ipex_self, kernel_size, stride, padding, dilation, ceil_mode);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return std::tuple<at::Tensor,at::Tensor>(bridge::upgradeToDPCPPTensor(std::get<0>(_ipex_result)), bridge::upgradeToDPCPPTensor(std::get<1>(_ipex_result)));
}

at::Tensor AtenIpexCPUDefault::max_pool1d(const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef dilation, bool ceil_mode) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::max_pool1d(_ipex_self, kernel_size, stride, padding, dilation, ceil_mode);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::max_pool2d(const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef dilation, bool ceil_mode) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::max_pool2d(_ipex_self, kernel_size, stride, padding, dilation, ceil_mode);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::quantized_max_pool2d(const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef dilation, bool ceil_mode) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::quantized_max_pool2d(_ipex_self, kernel_size, stride, padding, dilation, ceil_mode);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::max_pool3d(const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef dilation, bool ceil_mode) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::max_pool3d(_ipex_self, kernel_size, stride, padding, dilation, ceil_mode);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::mean(const at::Tensor & self, c10::optional<at::ScalarType> dtype) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::mean(_ipex_self, dtype);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::mean(const at::Tensor & self, at::IntArrayRef dim, bool keepdim, c10::optional<at::ScalarType> dtype) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::mean(_ipex_self, dim, keepdim, dtype);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::mean_out(at::Tensor & out, const at::Tensor & self, at::IntArrayRef dim, bool keepdim, c10::optional<at::ScalarType> dtype) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::mean_out(_ipex_out, _ipex_self, dim, keepdim, dtype);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

std::tuple<at::Tensor,at::Tensor> AtenIpexCPUDefault::median(const at::Tensor & self, int64_t dim, bool keepdim) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::median(_ipex_self, dim, keepdim);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return std::tuple<at::Tensor,at::Tensor>(bridge::upgradeToDPCPPTensor(std::get<0>(_ipex_result)), bridge::upgradeToDPCPPTensor(std::get<1>(_ipex_result)));
}

std::tuple<at::Tensor &,at::Tensor &> AtenIpexCPUDefault::median_out(at::Tensor & values, at::Tensor & indices, const at::Tensor & self, int64_t dim, bool keepdim) {
  TORCH_INTERNAL_ASSERT(values.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(values.is_contiguous());
  TORCH_INTERNAL_ASSERT(indices.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(indices.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_values = bridge::shallowFallbackToCPUTensor(values);
  auto&& _ipex_indices = bridge::shallowFallbackToCPUTensor(indices);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::median_out(_ipex_values, _ipex_indices, _ipex_self, dim, keepdim);
  values = bridge::shallowUpgradeToDPCPPTensor(_ipex_values);
  indices = bridge::shallowUpgradeToDPCPPTensor(_ipex_indices);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return std::tuple<at::Tensor &,at::Tensor &>(values, indices);
}

std::tuple<at::Tensor,at::Tensor> AtenIpexCPUDefault::min(const at::Tensor & self, int64_t dim, bool keepdim) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::min(_ipex_self, dim, keepdim);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return std::tuple<at::Tensor,at::Tensor>(bridge::upgradeToDPCPPTensor(std::get<0>(_ipex_result)), bridge::upgradeToDPCPPTensor(std::get<1>(_ipex_result)));
}

std::tuple<at::Tensor &,at::Tensor &> AtenIpexCPUDefault::min_out(at::Tensor & min, at::Tensor & min_indices, const at::Tensor & self, int64_t dim, bool keepdim) {
  TORCH_INTERNAL_ASSERT(min.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(min.is_contiguous());
  TORCH_INTERNAL_ASSERT(min_indices.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(min_indices.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_min = bridge::shallowFallbackToCPUTensor(min);
  auto&& _ipex_min_indices = bridge::shallowFallbackToCPUTensor(min_indices);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::min_out(_ipex_min, _ipex_min_indices, _ipex_self, dim, keepdim);
  min = bridge::shallowUpgradeToDPCPPTensor(_ipex_min);
  min_indices = bridge::shallowUpgradeToDPCPPTensor(_ipex_min_indices);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return std::tuple<at::Tensor &,at::Tensor &>(min, min_indices);
}

at::Tensor AtenIpexCPUDefault::min_values(const at::Tensor & self, at::IntArrayRef dim, bool keepdim) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::min_values(_ipex_self, dim, keepdim);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

std::tuple<at::Tensor,at::Tensor,at::Tensor> AtenIpexCPUDefault::miopen_batch_norm(const at::Tensor & input, const at::Tensor & weight, const at::Tensor & bias, const at::Tensor & running_mean, const at::Tensor & running_var, bool training, double exponential_average_factor, double epsilon) {
  TORCH_INTERNAL_ASSERT(input.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(input.is_contiguous());
  TORCH_INTERNAL_ASSERT(weight.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(weight.is_contiguous());
  TORCH_INTERNAL_ASSERT(bias.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(bias.is_contiguous());
  TORCH_INTERNAL_ASSERT(running_mean.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(running_mean.is_contiguous());
  TORCH_INTERNAL_ASSERT(running_var.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(running_var.is_contiguous());
  auto&& _ipex_input = bridge::shallowFallbackToCPUTensor(input);
  auto&& _ipex_weight = bridge::shallowFallbackToCPUTensor(weight);
  auto&& _ipex_bias = bridge::shallowFallbackToCPUTensor(bias);
  auto&& _ipex_running_mean = bridge::shallowFallbackToCPUTensor(running_mean);
  auto&& _ipex_running_var = bridge::shallowFallbackToCPUTensor(running_var);
  auto&& _ipex_result = at::miopen_batch_norm(_ipex_input, _ipex_weight, _ipex_bias, _ipex_running_mean, _ipex_running_var, training, exponential_average_factor, epsilon);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return std::tuple<at::Tensor,at::Tensor,at::Tensor>(bridge::upgradeToDPCPPTensor(std::get<0>(_ipex_result)), bridge::upgradeToDPCPPTensor(std::get<1>(_ipex_result)), bridge::upgradeToDPCPPTensor(std::get<2>(_ipex_result)));
}

std::tuple<at::Tensor,at::Tensor,at::Tensor> AtenIpexCPUDefault::miopen_batch_norm_backward(const at::Tensor & input, const at::Tensor & grad_output, const at::Tensor & weight, const at::Tensor & running_mean, const at::Tensor & running_var, const at::Tensor & save_mean, const at::Tensor & save_var, double epsilon) {
  TORCH_INTERNAL_ASSERT(input.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(input.is_contiguous());
  TORCH_INTERNAL_ASSERT(grad_output.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_output.is_contiguous());
  TORCH_INTERNAL_ASSERT(weight.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(weight.is_contiguous());
  TORCH_INTERNAL_ASSERT(running_mean.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(running_mean.is_contiguous());
  TORCH_INTERNAL_ASSERT(running_var.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(running_var.is_contiguous());
  TORCH_INTERNAL_ASSERT(save_mean.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(save_mean.is_contiguous());
  TORCH_INTERNAL_ASSERT(save_var.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(save_var.is_contiguous());
  auto&& _ipex_input = bridge::shallowFallbackToCPUTensor(input);
  auto&& _ipex_grad_output = bridge::shallowFallbackToCPUTensor(grad_output);
  auto&& _ipex_weight = bridge::shallowFallbackToCPUTensor(weight);
  auto&& _ipex_running_mean = bridge::shallowFallbackToCPUTensor(running_mean);
  auto&& _ipex_running_var = bridge::shallowFallbackToCPUTensor(running_var);
  auto&& _ipex_save_mean = bridge::shallowFallbackToCPUTensor(save_mean);
  auto&& _ipex_save_var = bridge::shallowFallbackToCPUTensor(save_var);
  auto&& _ipex_result = at::miopen_batch_norm_backward(_ipex_input, _ipex_grad_output, _ipex_weight, _ipex_running_mean, _ipex_running_var, _ipex_save_mean, _ipex_save_var, epsilon);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return std::tuple<at::Tensor,at::Tensor,at::Tensor>(bridge::upgradeToDPCPPTensor(std::get<0>(_ipex_result)), bridge::upgradeToDPCPPTensor(std::get<1>(_ipex_result)), bridge::upgradeToDPCPPTensor(std::get<2>(_ipex_result)));
}

at::Tensor AtenIpexCPUDefault::miopen_convolution(const at::Tensor & self, const at::Tensor & weight, const at::Tensor & bias, at::IntArrayRef padding, at::IntArrayRef stride, at::IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(weight.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(weight.is_contiguous());
  TORCH_INTERNAL_ASSERT(bias.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(bias.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_weight = bridge::shallowFallbackToCPUTensor(weight);
  auto&& _ipex_bias = bridge::shallowFallbackToCPUTensor(bias);
  auto&& _ipex_result = at::miopen_convolution(_ipex_self, _ipex_weight, _ipex_bias, padding, stride, dilation, groups, benchmark, deterministic);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::miopen_convolution_backward_input(at::IntArrayRef self_size, const at::Tensor & grad_output, const at::Tensor & weight, at::IntArrayRef padding, at::IntArrayRef stride, at::IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic) {
  TORCH_INTERNAL_ASSERT(grad_output.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_output.is_contiguous());
  TORCH_INTERNAL_ASSERT(weight.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(weight.is_contiguous());
  auto&& _ipex_grad_output = bridge::shallowFallbackToCPUTensor(grad_output);
  auto&& _ipex_weight = bridge::shallowFallbackToCPUTensor(weight);
  auto&& _ipex_result = at::miopen_convolution_backward_input(self_size, _ipex_grad_output, _ipex_weight, padding, stride, dilation, groups, benchmark, deterministic);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

std::tuple<at::Tensor,at::Tensor,at::Tensor> AtenIpexCPUDefault::miopen_convolution_backward(const at::Tensor & self, const at::Tensor & grad_output, const at::Tensor & weight, at::IntArrayRef padding, at::IntArrayRef stride, at::IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic, std::array<bool,3> output_mask) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(grad_output.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_output.is_contiguous());
  TORCH_INTERNAL_ASSERT(weight.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(weight.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_grad_output = bridge::shallowFallbackToCPUTensor(grad_output);
  auto&& _ipex_weight = bridge::shallowFallbackToCPUTensor(weight);
  auto&& _ipex_result = at::miopen_convolution_backward(_ipex_self, _ipex_grad_output, _ipex_weight, padding, stride, dilation, groups, benchmark, deterministic, output_mask);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return std::tuple<at::Tensor,at::Tensor,at::Tensor>(bridge::upgradeToDPCPPTensor(std::get<0>(_ipex_result)), bridge::upgradeToDPCPPTensor(std::get<1>(_ipex_result)), bridge::upgradeToDPCPPTensor(std::get<2>(_ipex_result)));
}

at::Tensor AtenIpexCPUDefault::miopen_convolution_backward_bias(const at::Tensor & grad_output) {
  TORCH_INTERNAL_ASSERT(grad_output.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_output.is_contiguous());
  auto&& _ipex_grad_output = bridge::shallowFallbackToCPUTensor(grad_output);
  auto&& _ipex_result = at::miopen_convolution_backward_bias(_ipex_grad_output);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::miopen_convolution_backward_weight(at::IntArrayRef weight_size, const at::Tensor & grad_output, const at::Tensor & self, at::IntArrayRef padding, at::IntArrayRef stride, at::IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic) {
  TORCH_INTERNAL_ASSERT(grad_output.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_output.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_grad_output = bridge::shallowFallbackToCPUTensor(grad_output);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::miopen_convolution_backward_weight(weight_size, _ipex_grad_output, _ipex_self, padding, stride, dilation, groups, benchmark, deterministic);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::miopen_convolution_transpose(const at::Tensor & self, const at::Tensor & weight, const at::Tensor & bias, at::IntArrayRef padding, at::IntArrayRef output_padding, at::IntArrayRef stride, at::IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(weight.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(weight.is_contiguous());
  TORCH_INTERNAL_ASSERT(bias.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(bias.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_weight = bridge::shallowFallbackToCPUTensor(weight);
  auto&& _ipex_bias = bridge::shallowFallbackToCPUTensor(bias);
  auto&& _ipex_result = at::miopen_convolution_transpose(_ipex_self, _ipex_weight, _ipex_bias, padding, output_padding, stride, dilation, groups, benchmark, deterministic);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

std::tuple<at::Tensor,at::Tensor,at::Tensor> AtenIpexCPUDefault::miopen_convolution_transpose_backward(const at::Tensor & self, const at::Tensor & grad_output, const at::Tensor & weight, at::IntArrayRef padding, at::IntArrayRef output_padding, at::IntArrayRef stride, at::IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic, std::array<bool,3> output_mask) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(grad_output.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_output.is_contiguous());
  TORCH_INTERNAL_ASSERT(weight.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(weight.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_grad_output = bridge::shallowFallbackToCPUTensor(grad_output);
  auto&& _ipex_weight = bridge::shallowFallbackToCPUTensor(weight);
  auto&& _ipex_result = at::miopen_convolution_transpose_backward(_ipex_self, _ipex_grad_output, _ipex_weight, padding, output_padding, stride, dilation, groups, benchmark, deterministic, output_mask);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return std::tuple<at::Tensor,at::Tensor,at::Tensor>(bridge::upgradeToDPCPPTensor(std::get<0>(_ipex_result)), bridge::upgradeToDPCPPTensor(std::get<1>(_ipex_result)), bridge::upgradeToDPCPPTensor(std::get<2>(_ipex_result)));
}

at::Tensor AtenIpexCPUDefault::miopen_convolution_transpose_backward_input(const at::Tensor & grad_output, const at::Tensor & weight, at::IntArrayRef padding, at::IntArrayRef stride, at::IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic) {
  TORCH_INTERNAL_ASSERT(grad_output.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_output.is_contiguous());
  TORCH_INTERNAL_ASSERT(weight.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(weight.is_contiguous());
  auto&& _ipex_grad_output = bridge::shallowFallbackToCPUTensor(grad_output);
  auto&& _ipex_weight = bridge::shallowFallbackToCPUTensor(weight);
  auto&& _ipex_result = at::miopen_convolution_transpose_backward_input(_ipex_grad_output, _ipex_weight, padding, stride, dilation, groups, benchmark, deterministic);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::miopen_convolution_transpose_backward_weight(at::IntArrayRef weight_size, const at::Tensor & grad_output, const at::Tensor & self, at::IntArrayRef padding, at::IntArrayRef stride, at::IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic) {
  TORCH_INTERNAL_ASSERT(grad_output.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_output.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_grad_output = bridge::shallowFallbackToCPUTensor(grad_output);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::miopen_convolution_transpose_backward_weight(weight_size, _ipex_grad_output, _ipex_self, padding, stride, dilation, groups, benchmark, deterministic);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::miopen_depthwise_convolution(const at::Tensor & self, const at::Tensor & weight, const at::Tensor & bias, at::IntArrayRef padding, at::IntArrayRef stride, at::IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(weight.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(weight.is_contiguous());
  TORCH_INTERNAL_ASSERT(bias.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(bias.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_weight = bridge::shallowFallbackToCPUTensor(weight);
  auto&& _ipex_bias = bridge::shallowFallbackToCPUTensor(bias);
  auto&& _ipex_result = at::miopen_depthwise_convolution(_ipex_self, _ipex_weight, _ipex_bias, padding, stride, dilation, groups, benchmark, deterministic);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::miopen_depthwise_convolution_backward_input(at::IntArrayRef self_size, const at::Tensor & grad_output, const at::Tensor & weight, at::IntArrayRef padding, at::IntArrayRef stride, at::IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic) {
  TORCH_INTERNAL_ASSERT(grad_output.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_output.is_contiguous());
  TORCH_INTERNAL_ASSERT(weight.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(weight.is_contiguous());
  auto&& _ipex_grad_output = bridge::shallowFallbackToCPUTensor(grad_output);
  auto&& _ipex_weight = bridge::shallowFallbackToCPUTensor(weight);
  auto&& _ipex_result = at::miopen_depthwise_convolution_backward_input(self_size, _ipex_grad_output, _ipex_weight, padding, stride, dilation, groups, benchmark, deterministic);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

std::tuple<at::Tensor,at::Tensor,at::Tensor> AtenIpexCPUDefault::miopen_depthwise_convolution_backward(const at::Tensor & self, const at::Tensor & grad_output, const at::Tensor & weight, at::IntArrayRef padding, at::IntArrayRef stride, at::IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic, std::array<bool,3> output_mask) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(grad_output.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_output.is_contiguous());
  TORCH_INTERNAL_ASSERT(weight.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(weight.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_grad_output = bridge::shallowFallbackToCPUTensor(grad_output);
  auto&& _ipex_weight = bridge::shallowFallbackToCPUTensor(weight);
  auto&& _ipex_result = at::miopen_depthwise_convolution_backward(_ipex_self, _ipex_grad_output, _ipex_weight, padding, stride, dilation, groups, benchmark, deterministic, output_mask);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return std::tuple<at::Tensor,at::Tensor,at::Tensor>(bridge::upgradeToDPCPPTensor(std::get<0>(_ipex_result)), bridge::upgradeToDPCPPTensor(std::get<1>(_ipex_result)), bridge::upgradeToDPCPPTensor(std::get<2>(_ipex_result)));
}

at::Tensor AtenIpexCPUDefault::miopen_depthwise_convolution_backward_weight(at::IntArrayRef weight_size, const at::Tensor & grad_output, const at::Tensor & self, at::IntArrayRef padding, at::IntArrayRef stride, at::IntArrayRef dilation, int64_t groups, bool benchmark, bool deterministic) {
  TORCH_INTERNAL_ASSERT(grad_output.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_output.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_grad_output = bridge::shallowFallbackToCPUTensor(grad_output);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::miopen_depthwise_convolution_backward_weight(weight_size, _ipex_grad_output, _ipex_self, padding, stride, dilation, groups, benchmark, deterministic);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

std::tuple<at::Tensor,at::Tensor,at::Tensor,at::Tensor,at::Tensor> AtenIpexCPUDefault::miopen_rnn(const at::Tensor & input, at::TensorList weight, int64_t weight_stride0, const at::Tensor & hx, const at::Tensor & cx, int64_t mode, int64_t hidden_size, int64_t num_layers, bool batch_first, double dropout, bool train, bool bidirectional, at::IntArrayRef batch_sizes, const at::Tensor & dropout_state) {
  TORCH_INTERNAL_ASSERT(input.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(input.is_contiguous());
  auto&& _ipex_weight = bridge::shallowFallbackToCPUTensorList(weight);
  TORCH_INTERNAL_ASSERT(hx.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(hx.is_contiguous());
  TORCH_INTERNAL_ASSERT(cx.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(cx.is_contiguous());
  TORCH_INTERNAL_ASSERT(dropout_state.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(dropout_state.is_contiguous());
  auto&& _ipex_input = bridge::shallowFallbackToCPUTensor(input);
  auto&& _ipex_hx = bridge::shallowFallbackToCPUTensor(hx);
  auto&& _ipex_cx = bridge::shallowFallbackToCPUTensor(cx);
  auto&& _ipex_dropout_state = bridge::shallowFallbackToCPUTensor(dropout_state);
  auto&& _ipex_result = at::miopen_rnn(_ipex_input, _ipex_weight, weight_stride0, _ipex_hx, _ipex_cx, mode, hidden_size, num_layers, batch_first, dropout, train, bidirectional, batch_sizes, _ipex_dropout_state);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return std::tuple<at::Tensor,at::Tensor,at::Tensor,at::Tensor,at::Tensor>(bridge::upgradeToDPCPPTensor(std::get<0>(_ipex_result)), bridge::upgradeToDPCPPTensor(std::get<1>(_ipex_result)), bridge::upgradeToDPCPPTensor(std::get<2>(_ipex_result)), bridge::upgradeToDPCPPTensor(std::get<3>(_ipex_result)), bridge::upgradeToDPCPPTensor(std::get<4>(_ipex_result)));
}

std::tuple<at::Tensor,at::Tensor,at::Tensor,std::vector<at::Tensor>> AtenIpexCPUDefault::miopen_rnn_backward(const at::Tensor & input, at::TensorList weight, int64_t weight_stride0, const at::Tensor & weight_buf, const at::Tensor & hx, const at::Tensor & cx, const at::Tensor & output, const at::Tensor & grad_output, const at::Tensor & grad_hy, const at::Tensor & grad_cy, int64_t mode, int64_t hidden_size, int64_t num_layers, bool batch_first, double dropout, bool train, bool bidirectional, at::IntArrayRef batch_sizes, const at::Tensor & dropout_state, const at::Tensor & reserve, std::array<bool,4> output_mask) {
  TORCH_INTERNAL_ASSERT(input.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(input.is_contiguous());
  auto&& _ipex_weight = bridge::shallowFallbackToCPUTensorList(weight);
  TORCH_INTERNAL_ASSERT(weight_buf.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(weight_buf.is_contiguous());
  TORCH_INTERNAL_ASSERT(hx.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(hx.is_contiguous());
  TORCH_INTERNAL_ASSERT(cx.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(cx.is_contiguous());
  TORCH_INTERNAL_ASSERT(output.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(output.is_contiguous());
  TORCH_INTERNAL_ASSERT(grad_output.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_output.is_contiguous());
  TORCH_INTERNAL_ASSERT(grad_hy.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_hy.is_contiguous());
  TORCH_INTERNAL_ASSERT(grad_cy.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_cy.is_contiguous());
  TORCH_INTERNAL_ASSERT(dropout_state.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(dropout_state.is_contiguous());
  TORCH_INTERNAL_ASSERT(reserve.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(reserve.is_contiguous());
  auto&& _ipex_input = bridge::shallowFallbackToCPUTensor(input);
  auto&& _ipex_weight_buf = bridge::shallowFallbackToCPUTensor(weight_buf);
  auto&& _ipex_hx = bridge::shallowFallbackToCPUTensor(hx);
  auto&& _ipex_cx = bridge::shallowFallbackToCPUTensor(cx);
  auto&& _ipex_output = bridge::shallowFallbackToCPUTensor(output);
  auto&& _ipex_grad_output = bridge::shallowFallbackToCPUTensor(grad_output);
  auto&& _ipex_grad_hy = bridge::shallowFallbackToCPUTensor(grad_hy);
  auto&& _ipex_grad_cy = bridge::shallowFallbackToCPUTensor(grad_cy);
  auto&& _ipex_dropout_state = bridge::shallowFallbackToCPUTensor(dropout_state);
  auto&& _ipex_reserve = bridge::shallowFallbackToCPUTensor(reserve);
  auto&& _ipex_result = at::miopen_rnn_backward(_ipex_input, _ipex_weight, weight_stride0, _ipex_weight_buf, _ipex_hx, _ipex_cx, _ipex_output, _ipex_grad_output, _ipex_grad_hy, _ipex_grad_cy, mode, hidden_size, num_layers, batch_first, dropout, train, bidirectional, batch_sizes, _ipex_dropout_state, _ipex_reserve, output_mask);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return std::tuple<at::Tensor,at::Tensor,at::Tensor,std::vector<at::Tensor>>(bridge::upgradeToDPCPPTensor(std::get<0>(_ipex_result)), bridge::upgradeToDPCPPTensor(std::get<1>(_ipex_result)), bridge::upgradeToDPCPPTensor(std::get<2>(_ipex_result)), std::get<3>(_ipex_result));
}

at::Tensor AtenIpexCPUDefault::mm(const at::Tensor & self, const at::Tensor & mat2) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(mat2.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(mat2.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_mat2 = bridge::shallowFallbackToCPUTensor(mat2);
  auto&& _ipex_result = at::mm(_ipex_self, _ipex_mat2);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::mm_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & mat2) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(mat2.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(mat2.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_mat2 = bridge::shallowFallbackToCPUTensor(mat2);
  auto&& _ipex_result = at::mm_out(_ipex_out, _ipex_self, _ipex_mat2);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor AtenIpexCPUDefault::_sparse_mm(const at::Tensor & sparse, const at::Tensor & dense) {
  TORCH_INTERNAL_ASSERT(sparse.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(sparse.is_contiguous());
  TORCH_INTERNAL_ASSERT(dense.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(dense.is_contiguous());
  auto&& _ipex_sparse = bridge::shallowFallbackToCPUTensor(sparse);
  auto&& _ipex_dense = bridge::shallowFallbackToCPUTensor(dense);
  auto&& _ipex_result = at::_sparse_mm(_ipex_sparse, _ipex_dense);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

std::tuple<at::Tensor,at::Tensor> AtenIpexCPUDefault::mode(const at::Tensor & self, int64_t dim, bool keepdim) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::mode(_ipex_self, dim, keepdim);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return std::tuple<at::Tensor,at::Tensor>(bridge::upgradeToDPCPPTensor(std::get<0>(_ipex_result)), bridge::upgradeToDPCPPTensor(std::get<1>(_ipex_result)));
}

std::tuple<at::Tensor &,at::Tensor &> AtenIpexCPUDefault::mode_out(at::Tensor & values, at::Tensor & indices, const at::Tensor & self, int64_t dim, bool keepdim) {
  TORCH_INTERNAL_ASSERT(values.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(values.is_contiguous());
  TORCH_INTERNAL_ASSERT(indices.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(indices.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_values = bridge::shallowFallbackToCPUTensor(values);
  auto&& _ipex_indices = bridge::shallowFallbackToCPUTensor(indices);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::mode_out(_ipex_values, _ipex_indices, _ipex_self, dim, keepdim);
  values = bridge::shallowUpgradeToDPCPPTensor(_ipex_values);
  indices = bridge::shallowUpgradeToDPCPPTensor(_ipex_indices);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return std::tuple<at::Tensor &,at::Tensor &>(values, indices);
}

at::Tensor AtenIpexCPUDefault::mul(const at::Tensor & self, const at::Tensor & other) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(other.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(other.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_other = bridge::shallowFallbackToCPUTensor(other);
  auto&& _ipex_result = at::mul(_ipex_self, _ipex_other);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::mul_(at::Tensor & self, const at::Tensor & other) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(other.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(other.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_other = bridge::shallowFallbackToCPUTensor(other);
  auto&& _ipex_result = _ipex_self.mul_(_ipex_other);
  self = bridge::shallowUpgradeToDPCPPTensor(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return self;
}

at::Tensor & AtenIpexCPUDefault::mul_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & other) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(other.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(other.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_other = bridge::shallowFallbackToCPUTensor(other);
  auto&& _ipex_result = at::mul_out(_ipex_out, _ipex_self, _ipex_other);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor AtenIpexCPUDefault::mul(const at::Tensor & self, at::Scalar other) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::mul(_ipex_self, other);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::mul_(at::Tensor & self, at::Scalar other) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = _ipex_self.mul_(other);
  self = bridge::shallowUpgradeToDPCPPTensor(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return self;
}

at::Tensor AtenIpexCPUDefault::mv(const at::Tensor & self, const at::Tensor & vec) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(vec.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(vec.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_vec = bridge::shallowFallbackToCPUTensor(vec);
  auto&& _ipex_result = at::mv(_ipex_self, _ipex_vec);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::mv_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & vec) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(vec.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(vec.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_vec = bridge::shallowFallbackToCPUTensor(vec);
  auto&& _ipex_result = at::mv_out(_ipex_out, _ipex_self, _ipex_vec);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor AtenIpexCPUDefault::mvlgamma(const at::Tensor & self, int64_t p) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::mvlgamma(_ipex_self, p);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::mvlgamma_(at::Tensor & self, int64_t p) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = _ipex_self.mvlgamma_(p);
  self = bridge::shallowUpgradeToDPCPPTensor(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return self;
}

at::Tensor AtenIpexCPUDefault::narrow_copy(const at::Tensor & self, int64_t dim, int64_t start, int64_t length) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = _ipex_self.narrow_copy(dim, start, length);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::narrow(const at::Tensor & self, int64_t dim, int64_t start, int64_t length) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::narrow(_ipex_self, dim, start, length);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

std::tuple<at::Tensor,at::Tensor,at::Tensor> AtenIpexCPUDefault::native_batch_norm(const at::Tensor & input, const at::Tensor & weight, const at::Tensor & bias, const at::Tensor & running_mean, const at::Tensor & running_var, bool training, double momentum, double eps) {
  TORCH_INTERNAL_ASSERT(input.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(input.is_contiguous());
  TORCH_INTERNAL_ASSERT(weight.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(weight.is_contiguous());
  TORCH_INTERNAL_ASSERT(bias.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(bias.is_contiguous());
  TORCH_INTERNAL_ASSERT(running_mean.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(running_mean.is_contiguous());
  TORCH_INTERNAL_ASSERT(running_var.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(running_var.is_contiguous());
  auto&& _ipex_input = bridge::shallowFallbackToCPUTensor(input);
  auto&& _ipex_weight = bridge::shallowFallbackToCPUTensor(weight);
  auto&& _ipex_bias = bridge::shallowFallbackToCPUTensor(bias);
  auto&& _ipex_running_mean = bridge::shallowFallbackToCPUTensor(running_mean);
  auto&& _ipex_running_var = bridge::shallowFallbackToCPUTensor(running_var);
  auto&& _ipex_result = at::native_batch_norm(_ipex_input, _ipex_weight, _ipex_bias, _ipex_running_mean, _ipex_running_var, training, momentum, eps);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return std::tuple<at::Tensor,at::Tensor,at::Tensor>(bridge::upgradeToDPCPPTensor(std::get<0>(_ipex_result)), bridge::upgradeToDPCPPTensor(std::get<1>(_ipex_result)), bridge::upgradeToDPCPPTensor(std::get<2>(_ipex_result)));
}

std::tuple<at::Tensor,at::Tensor> AtenIpexCPUDefault::batch_norm_stats(const at::Tensor & input, double eps) {
  TORCH_INTERNAL_ASSERT(input.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(input.is_contiguous());
  auto&& _ipex_input = bridge::shallowFallbackToCPUTensor(input);
  auto&& _ipex_result = at::batch_norm_stats(_ipex_input, eps);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return std::tuple<at::Tensor,at::Tensor>(bridge::upgradeToDPCPPTensor(std::get<0>(_ipex_result)), bridge::upgradeToDPCPPTensor(std::get<1>(_ipex_result)));
}

at::Tensor AtenIpexCPUDefault::batch_norm_elemt(const at::Tensor & input, const at::Tensor & weight, const at::Tensor & bias, const at::Tensor & mean, const at::Tensor & invstd, double eps) {
  TORCH_INTERNAL_ASSERT(input.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(input.is_contiguous());
  TORCH_INTERNAL_ASSERT(weight.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(weight.is_contiguous());
  TORCH_INTERNAL_ASSERT(bias.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(bias.is_contiguous());
  TORCH_INTERNAL_ASSERT(mean.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(mean.is_contiguous());
  TORCH_INTERNAL_ASSERT(invstd.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(invstd.is_contiguous());
  auto&& _ipex_input = bridge::shallowFallbackToCPUTensor(input);
  auto&& _ipex_weight = bridge::shallowFallbackToCPUTensor(weight);
  auto&& _ipex_bias = bridge::shallowFallbackToCPUTensor(bias);
  auto&& _ipex_mean = bridge::shallowFallbackToCPUTensor(mean);
  auto&& _ipex_invstd = bridge::shallowFallbackToCPUTensor(invstd);
  auto&& _ipex_result = at::batch_norm_elemt(_ipex_input, _ipex_weight, _ipex_bias, _ipex_mean, _ipex_invstd, eps);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::batch_norm_elemt_out(at::Tensor & out, const at::Tensor & input, const at::Tensor & weight, const at::Tensor & bias, const at::Tensor & mean, const at::Tensor & invstd, double eps) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  TORCH_INTERNAL_ASSERT(input.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(input.is_contiguous());
  TORCH_INTERNAL_ASSERT(weight.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(weight.is_contiguous());
  TORCH_INTERNAL_ASSERT(bias.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(bias.is_contiguous());
  TORCH_INTERNAL_ASSERT(mean.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(mean.is_contiguous());
  TORCH_INTERNAL_ASSERT(invstd.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(invstd.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_input = bridge::shallowFallbackToCPUTensor(input);
  auto&& _ipex_weight = bridge::shallowFallbackToCPUTensor(weight);
  auto&& _ipex_bias = bridge::shallowFallbackToCPUTensor(bias);
  auto&& _ipex_mean = bridge::shallowFallbackToCPUTensor(mean);
  auto&& _ipex_invstd = bridge::shallowFallbackToCPUTensor(invstd);
  auto&& _ipex_result = at::batch_norm_elemt_out(_ipex_out, _ipex_input, _ipex_weight, _ipex_bias, _ipex_mean, _ipex_invstd, eps);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

std::tuple<at::Tensor,at::Tensor> AtenIpexCPUDefault::batch_norm_gather_stats(const at::Tensor & input, const at::Tensor & mean, const at::Tensor & invstd, const at::Tensor & running_mean, const at::Tensor & running_var, double momentum, double eps, int64_t count) {
  TORCH_INTERNAL_ASSERT(input.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(input.is_contiguous());
  TORCH_INTERNAL_ASSERT(mean.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(mean.is_contiguous());
  TORCH_INTERNAL_ASSERT(invstd.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(invstd.is_contiguous());
  TORCH_INTERNAL_ASSERT(running_mean.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(running_mean.is_contiguous());
  TORCH_INTERNAL_ASSERT(running_var.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(running_var.is_contiguous());
  auto&& _ipex_input = bridge::shallowFallbackToCPUTensor(input);
  auto&& _ipex_mean = bridge::shallowFallbackToCPUTensor(mean);
  auto&& _ipex_invstd = bridge::shallowFallbackToCPUTensor(invstd);
  auto&& _ipex_running_mean = bridge::shallowFallbackToCPUTensor(running_mean);
  auto&& _ipex_running_var = bridge::shallowFallbackToCPUTensor(running_var);
  auto&& _ipex_result = at::batch_norm_gather_stats(_ipex_input, _ipex_mean, _ipex_invstd, _ipex_running_mean, _ipex_running_var, momentum, eps, count);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return std::tuple<at::Tensor,at::Tensor>(bridge::upgradeToDPCPPTensor(std::get<0>(_ipex_result)), bridge::upgradeToDPCPPTensor(std::get<1>(_ipex_result)));
}

std::tuple<at::Tensor,at::Tensor> AtenIpexCPUDefault::batch_norm_gather_stats_with_counts(const at::Tensor & input, const at::Tensor & mean, const at::Tensor & invstd, const at::Tensor & running_mean, const at::Tensor & running_var, double momentum, double eps, at::IntArrayRef counts) {
  TORCH_INTERNAL_ASSERT(input.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(input.is_contiguous());
  TORCH_INTERNAL_ASSERT(mean.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(mean.is_contiguous());
  TORCH_INTERNAL_ASSERT(invstd.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(invstd.is_contiguous());
  TORCH_INTERNAL_ASSERT(running_mean.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(running_mean.is_contiguous());
  TORCH_INTERNAL_ASSERT(running_var.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(running_var.is_contiguous());
  auto&& _ipex_input = bridge::shallowFallbackToCPUTensor(input);
  auto&& _ipex_mean = bridge::shallowFallbackToCPUTensor(mean);
  auto&& _ipex_invstd = bridge::shallowFallbackToCPUTensor(invstd);
  auto&& _ipex_running_mean = bridge::shallowFallbackToCPUTensor(running_mean);
  auto&& _ipex_running_var = bridge::shallowFallbackToCPUTensor(running_var);
  auto&& _ipex_result = at::batch_norm_gather_stats_with_counts(_ipex_input, _ipex_mean, _ipex_invstd, _ipex_running_mean, _ipex_running_var, momentum, eps, counts);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return std::tuple<at::Tensor,at::Tensor>(bridge::upgradeToDPCPPTensor(std::get<0>(_ipex_result)), bridge::upgradeToDPCPPTensor(std::get<1>(_ipex_result)));
}

std::tuple<at::Tensor,at::Tensor,at::Tensor> AtenIpexCPUDefault::native_batch_norm_backward(const at::Tensor & grad_out, const at::Tensor & input, const at::Tensor & weight, const at::Tensor & running_mean, const at::Tensor & running_var, const at::Tensor & save_mean, const at::Tensor & save_invstd, bool train, double eps, std::array<bool,3> output_mask) {
  TORCH_INTERNAL_ASSERT(grad_out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_out.is_contiguous());
  TORCH_INTERNAL_ASSERT(input.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(input.is_contiguous());
  TORCH_INTERNAL_ASSERT(weight.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(weight.is_contiguous());
  TORCH_INTERNAL_ASSERT(running_mean.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(running_mean.is_contiguous());
  TORCH_INTERNAL_ASSERT(running_var.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(running_var.is_contiguous());
  TORCH_INTERNAL_ASSERT(save_mean.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(save_mean.is_contiguous());
  TORCH_INTERNAL_ASSERT(save_invstd.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(save_invstd.is_contiguous());
  auto&& _ipex_grad_out = bridge::shallowFallbackToCPUTensor(grad_out);
  auto&& _ipex_input = bridge::shallowFallbackToCPUTensor(input);
  auto&& _ipex_weight = bridge::shallowFallbackToCPUTensor(weight);
  auto&& _ipex_running_mean = bridge::shallowFallbackToCPUTensor(running_mean);
  auto&& _ipex_running_var = bridge::shallowFallbackToCPUTensor(running_var);
  auto&& _ipex_save_mean = bridge::shallowFallbackToCPUTensor(save_mean);
  auto&& _ipex_save_invstd = bridge::shallowFallbackToCPUTensor(save_invstd);
  auto&& _ipex_result = at::native_batch_norm_backward(_ipex_grad_out, _ipex_input, _ipex_weight, _ipex_running_mean, _ipex_running_var, _ipex_save_mean, _ipex_save_invstd, train, eps, output_mask);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return std::tuple<at::Tensor,at::Tensor,at::Tensor>(bridge::upgradeToDPCPPTensor(std::get<0>(_ipex_result)), bridge::upgradeToDPCPPTensor(std::get<1>(_ipex_result)), bridge::upgradeToDPCPPTensor(std::get<2>(_ipex_result)));
}

std::tuple<at::Tensor,at::Tensor,at::Tensor,at::Tensor> AtenIpexCPUDefault::batch_norm_backward_reduce(const at::Tensor & grad_out, const at::Tensor & input, const at::Tensor & mean, const at::Tensor & invstd, const at::Tensor & weight, bool input_g, bool weight_g, bool bias_g) {
  TORCH_INTERNAL_ASSERT(grad_out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_out.is_contiguous());
  TORCH_INTERNAL_ASSERT(input.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(input.is_contiguous());
  TORCH_INTERNAL_ASSERT(mean.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(mean.is_contiguous());
  TORCH_INTERNAL_ASSERT(invstd.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(invstd.is_contiguous());
  TORCH_INTERNAL_ASSERT(weight.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(weight.is_contiguous());
  auto&& _ipex_grad_out = bridge::shallowFallbackToCPUTensor(grad_out);
  auto&& _ipex_input = bridge::shallowFallbackToCPUTensor(input);
  auto&& _ipex_mean = bridge::shallowFallbackToCPUTensor(mean);
  auto&& _ipex_invstd = bridge::shallowFallbackToCPUTensor(invstd);
  auto&& _ipex_weight = bridge::shallowFallbackToCPUTensor(weight);
  auto&& _ipex_result = at::batch_norm_backward_reduce(_ipex_grad_out, _ipex_input, _ipex_mean, _ipex_invstd, _ipex_weight, input_g, weight_g, bias_g);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return std::tuple<at::Tensor,at::Tensor,at::Tensor,at::Tensor>(bridge::upgradeToDPCPPTensor(std::get<0>(_ipex_result)), bridge::upgradeToDPCPPTensor(std::get<1>(_ipex_result)), bridge::upgradeToDPCPPTensor(std::get<2>(_ipex_result)), bridge::upgradeToDPCPPTensor(std::get<3>(_ipex_result)));
}

at::Tensor AtenIpexCPUDefault::batch_norm_backward_elemt(const at::Tensor & grad_out, const at::Tensor & input, const at::Tensor & mean, const at::Tensor & invstd, const at::Tensor & weight, const at::Tensor & mean_dy, const at::Tensor & mean_dy_xmu) {
  TORCH_INTERNAL_ASSERT(grad_out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_out.is_contiguous());
  TORCH_INTERNAL_ASSERT(input.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(input.is_contiguous());
  TORCH_INTERNAL_ASSERT(mean.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(mean.is_contiguous());
  TORCH_INTERNAL_ASSERT(invstd.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(invstd.is_contiguous());
  TORCH_INTERNAL_ASSERT(weight.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(weight.is_contiguous());
  TORCH_INTERNAL_ASSERT(mean_dy.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(mean_dy.is_contiguous());
  TORCH_INTERNAL_ASSERT(mean_dy_xmu.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(mean_dy_xmu.is_contiguous());
  auto&& _ipex_grad_out = bridge::shallowFallbackToCPUTensor(grad_out);
  auto&& _ipex_input = bridge::shallowFallbackToCPUTensor(input);
  auto&& _ipex_mean = bridge::shallowFallbackToCPUTensor(mean);
  auto&& _ipex_invstd = bridge::shallowFallbackToCPUTensor(invstd);
  auto&& _ipex_weight = bridge::shallowFallbackToCPUTensor(weight);
  auto&& _ipex_mean_dy = bridge::shallowFallbackToCPUTensor(mean_dy);
  auto&& _ipex_mean_dy_xmu = bridge::shallowFallbackToCPUTensor(mean_dy_xmu);
  auto&& _ipex_result = at::batch_norm_backward_elemt(_ipex_grad_out, _ipex_input, _ipex_mean, _ipex_invstd, _ipex_weight, _ipex_mean_dy, _ipex_mean_dy_xmu);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

std::tuple<at::Tensor,at::Tensor> AtenIpexCPUDefault::batch_norm_update_stats(const at::Tensor & input, const at::Tensor & running_mean, const at::Tensor & running_var, double momentum) {
  TORCH_INTERNAL_ASSERT(input.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(input.is_contiguous());
  TORCH_INTERNAL_ASSERT(running_mean.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(running_mean.is_contiguous());
  TORCH_INTERNAL_ASSERT(running_var.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(running_var.is_contiguous());
  auto&& _ipex_input = bridge::shallowFallbackToCPUTensor(input);
  auto&& _ipex_running_mean = bridge::shallowFallbackToCPUTensor(running_mean);
  auto&& _ipex_running_var = bridge::shallowFallbackToCPUTensor(running_var);
  auto&& _ipex_result = at::batch_norm_update_stats(_ipex_input, _ipex_running_mean, _ipex_running_var, momentum);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return std::tuple<at::Tensor,at::Tensor>(bridge::upgradeToDPCPPTensor(std::get<0>(_ipex_result)), bridge::upgradeToDPCPPTensor(std::get<1>(_ipex_result)));
}

at::Tensor AtenIpexCPUDefault::_nnpack_spatial_convolution(const at::Tensor & input, const at::Tensor & weight, const at::Tensor & bias, at::IntArrayRef padding) {
  TORCH_INTERNAL_ASSERT(input.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(input.is_contiguous());
  TORCH_INTERNAL_ASSERT(weight.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(weight.is_contiguous());
  TORCH_INTERNAL_ASSERT(bias.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(bias.is_contiguous());
  auto&& _ipex_input = bridge::shallowFallbackToCPUTensor(input);
  auto&& _ipex_weight = bridge::shallowFallbackToCPUTensor(weight);
  auto&& _ipex_bias = bridge::shallowFallbackToCPUTensor(bias);
  auto&& _ipex_result = at::_nnpack_spatial_convolution(_ipex_input, _ipex_weight, _ipex_bias, padding);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

std::tuple<at::Tensor,at::Tensor,at::Tensor> AtenIpexCPUDefault::_nnpack_spatial_convolution_backward(const at::Tensor & input, const at::Tensor & grad_output, const at::Tensor & weight, at::IntArrayRef padding, std::array<bool,3> output_mask) {
  TORCH_INTERNAL_ASSERT(input.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(input.is_contiguous());
  TORCH_INTERNAL_ASSERT(grad_output.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_output.is_contiguous());
  TORCH_INTERNAL_ASSERT(weight.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(weight.is_contiguous());
  auto&& _ipex_input = bridge::shallowFallbackToCPUTensor(input);
  auto&& _ipex_grad_output = bridge::shallowFallbackToCPUTensor(grad_output);
  auto&& _ipex_weight = bridge::shallowFallbackToCPUTensor(weight);
  auto&& _ipex_result = at::_nnpack_spatial_convolution_backward(_ipex_input, _ipex_grad_output, _ipex_weight, padding, output_mask);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return std::tuple<at::Tensor,at::Tensor,at::Tensor>(bridge::upgradeToDPCPPTensor(std::get<0>(_ipex_result)), bridge::upgradeToDPCPPTensor(std::get<1>(_ipex_result)), bridge::upgradeToDPCPPTensor(std::get<2>(_ipex_result)));
}

at::Tensor AtenIpexCPUDefault::_nnpack_spatial_convolution_backward_input(const at::Tensor & input, const at::Tensor & grad_output, const at::Tensor & weight, at::IntArrayRef padding) {
  TORCH_INTERNAL_ASSERT(input.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(input.is_contiguous());
  TORCH_INTERNAL_ASSERT(grad_output.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_output.is_contiguous());
  TORCH_INTERNAL_ASSERT(weight.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(weight.is_contiguous());
  auto&& _ipex_input = bridge::shallowFallbackToCPUTensor(input);
  auto&& _ipex_grad_output = bridge::shallowFallbackToCPUTensor(grad_output);
  auto&& _ipex_weight = bridge::shallowFallbackToCPUTensor(weight);
  auto&& _ipex_result = at::_nnpack_spatial_convolution_backward_input(_ipex_input, _ipex_grad_output, _ipex_weight, padding);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::_nnpack_spatial_convolution_backward_weight(const at::Tensor & input, at::IntArrayRef weightsize, const at::Tensor & grad_output, at::IntArrayRef padding) {
  TORCH_INTERNAL_ASSERT(input.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(input.is_contiguous());
  TORCH_INTERNAL_ASSERT(grad_output.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_output.is_contiguous());
  auto&& _ipex_input = bridge::shallowFallbackToCPUTensor(input);
  auto&& _ipex_grad_output = bridge::shallowFallbackToCPUTensor(grad_output);
  auto&& _ipex_result = at::_nnpack_spatial_convolution_backward_weight(_ipex_input, weightsize, _ipex_grad_output, padding);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::ones(at::IntArrayRef size, const at::TensorOptions & options) {
  TORCH_INTERNAL_ASSERT(options.device().type() == at::DeviceType::DPCPP);
  at::TensorOptions _ipex_options = options.device(at::DeviceType::CPU);
  auto&& _ipex_result = at::ones(size, _ipex_options);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::ones_out(at::Tensor & out, at::IntArrayRef size) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_result = at::ones_out(_ipex_out, size);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor AtenIpexCPUDefault::ones_like(const at::Tensor & self, c10::optional<at::MemoryFormat> memory_format) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(memory_format.value_or(c10::MemoryFormat::Contiguous) == c10::MemoryFormat::Contiguous);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::ones_like(_ipex_self, memory_format);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::ones_like(const at::Tensor & self, const at::TensorOptions & options, c10::optional<at::MemoryFormat> memory_format) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(options.device().type() == at::DeviceType::DPCPP);
  at::TensorOptions _ipex_options = options.device(at::DeviceType::CPU);
  TORCH_INTERNAL_ASSERT(memory_format.value_or(c10::MemoryFormat::Contiguous) == c10::MemoryFormat::Contiguous);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::ones_like(_ipex_self, _ipex_options, memory_format);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::pairwise_distance(const at::Tensor & x1, const at::Tensor & x2, double p, double eps, bool keepdim) {
  TORCH_INTERNAL_ASSERT(x1.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(x1.is_contiguous());
  TORCH_INTERNAL_ASSERT(x2.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(x2.is_contiguous());
  auto&& _ipex_x1 = bridge::shallowFallbackToCPUTensor(x1);
  auto&& _ipex_x2 = bridge::shallowFallbackToCPUTensor(x2);
  auto&& _ipex_result = at::pairwise_distance(_ipex_x1, _ipex_x2, p, eps, keepdim);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::cdist(const at::Tensor & x1, const at::Tensor & x2, double p, c10::optional<int64_t> compute_mode) {
  TORCH_INTERNAL_ASSERT(x1.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(x1.is_contiguous());
  TORCH_INTERNAL_ASSERT(x2.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(x2.is_contiguous());
  auto&& _ipex_x1 = bridge::shallowFallbackToCPUTensor(x1);
  auto&& _ipex_x2 = bridge::shallowFallbackToCPUTensor(x2);
  auto&& _ipex_result = at::cdist(_ipex_x1, _ipex_x2, p, compute_mode);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::_cdist_backward(const at::Tensor & grad, const at::Tensor & x1, const at::Tensor & x2, double p, const at::Tensor & cdist) {
  TORCH_INTERNAL_ASSERT(grad.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad.is_contiguous());
  TORCH_INTERNAL_ASSERT(x1.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(x1.is_contiguous());
  TORCH_INTERNAL_ASSERT(x2.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(x2.is_contiguous());
  TORCH_INTERNAL_ASSERT(cdist.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(cdist.is_contiguous());
  auto&& _ipex_grad = bridge::shallowFallbackToCPUTensor(grad);
  auto&& _ipex_x1 = bridge::shallowFallbackToCPUTensor(x1);
  auto&& _ipex_x2 = bridge::shallowFallbackToCPUTensor(x2);
  auto&& _ipex_cdist = bridge::shallowFallbackToCPUTensor(cdist);
  auto&& _ipex_result = at::_cdist_backward(_ipex_grad, _ipex_x1, _ipex_x2, p, _ipex_cdist);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::pdist(const at::Tensor & self, double p) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::pdist(_ipex_self, p);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::_pdist_forward(const at::Tensor & self, double p) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::_pdist_forward(_ipex_self, p);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::_pdist_backward(const at::Tensor & grad, const at::Tensor & self, double p, const at::Tensor & pdist) {
  TORCH_INTERNAL_ASSERT(grad.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(pdist.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(pdist.is_contiguous());
  auto&& _ipex_grad = bridge::shallowFallbackToCPUTensor(grad);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_pdist = bridge::shallowFallbackToCPUTensor(pdist);
  auto&& _ipex_result = at::_pdist_backward(_ipex_grad, _ipex_self, p, _ipex_pdist);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::cosine_similarity(const at::Tensor & x1, const at::Tensor & x2, int64_t dim, double eps) {
  TORCH_INTERNAL_ASSERT(x1.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(x1.is_contiguous());
  TORCH_INTERNAL_ASSERT(x2.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(x2.is_contiguous());
  auto&& _ipex_x1 = bridge::shallowFallbackToCPUTensor(x1);
  auto&& _ipex_x2 = bridge::shallowFallbackToCPUTensor(x2);
  auto&& _ipex_result = at::cosine_similarity(_ipex_x1, _ipex_x2, dim, eps);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::permute(const at::Tensor & self, at::IntArrayRef dims) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = _ipex_self.permute(dims);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::numpy_T(const at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = _ipex_self.numpy_T();
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::pixel_shuffle(const at::Tensor & self, int64_t upscale_factor) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::pixel_shuffle(_ipex_self, upscale_factor);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

bool AtenIpexCPUDefault::is_pinned(const at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = _ipex_self.is_pinned();
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return _ipex_result;
}

at::Tensor AtenIpexCPUDefault::pin_memory(const at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = _ipex_self.pin_memory();
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::pinverse(const at::Tensor & self, double rcond) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::pinverse(_ipex_self, rcond);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::poisson_nll_loss(const at::Tensor & input, const at::Tensor & target, bool log_input, bool full, double eps, int64_t reduction) {
  TORCH_INTERNAL_ASSERT(input.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(input.is_contiguous());
  TORCH_INTERNAL_ASSERT(target.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(target.is_contiguous());
  auto&& _ipex_input = bridge::shallowFallbackToCPUTensor(input);
  auto&& _ipex_target = bridge::shallowFallbackToCPUTensor(target);
  auto&& _ipex_result = at::poisson_nll_loss(_ipex_input, _ipex_target, log_input, full, eps, reduction);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::scalar_tensor(at::Scalar s, const at::TensorOptions & options) {
  TORCH_INTERNAL_ASSERT(options.device().type() == at::DeviceType::DPCPP);
  at::TensorOptions _ipex_options = options.device(at::DeviceType::CPU);
  auto&& _ipex_result = at::scalar_tensor(s, _ipex_options);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::rand(at::IntArrayRef size, const at::TensorOptions & options) {
  TORCH_INTERNAL_ASSERT(options.device().type() == at::DeviceType::DPCPP);
  at::TensorOptions _ipex_options = options.device(at::DeviceType::CPU);
  auto&& _ipex_result = at::rand(size, _ipex_options);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::rand(at::IntArrayRef size, at::Generator * generator, const at::TensorOptions & options) {
  TORCH_INTERNAL_ASSERT(options.device().type() == at::DeviceType::DPCPP);
  at::TensorOptions _ipex_options = options.device(at::DeviceType::CPU);
  auto&& _ipex_result = at::rand(size, generator, _ipex_options);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::rand_out(at::Tensor & out, at::IntArrayRef size) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_result = at::rand_out(_ipex_out, size);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor & AtenIpexCPUDefault::rand_out(at::Tensor & out, at::IntArrayRef size, at::Generator * generator) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_result = at::rand_out(_ipex_out, size, generator);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor AtenIpexCPUDefault::rand_like(const at::Tensor & self, c10::optional<at::MemoryFormat> memory_format) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(memory_format.value_or(c10::MemoryFormat::Contiguous) == c10::MemoryFormat::Contiguous);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::rand_like(_ipex_self, memory_format);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::rand_like(const at::Tensor & self, const at::TensorOptions & options, c10::optional<at::MemoryFormat> memory_format) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(options.device().type() == at::DeviceType::DPCPP);
  at::TensorOptions _ipex_options = options.device(at::DeviceType::CPU);
  TORCH_INTERNAL_ASSERT(memory_format.value_or(c10::MemoryFormat::Contiguous) == c10::MemoryFormat::Contiguous);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::rand_like(_ipex_self, _ipex_options, memory_format);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::randint(int64_t high, at::IntArrayRef size, const at::TensorOptions & options) {
  TORCH_INTERNAL_ASSERT(options.device().type() == at::DeviceType::DPCPP);
  at::TensorOptions _ipex_options = options.device(at::DeviceType::CPU);
  auto&& _ipex_result = at::randint(high, size, _ipex_options);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::randint(int64_t high, at::IntArrayRef size, at::Generator * generator, const at::TensorOptions & options) {
  TORCH_INTERNAL_ASSERT(options.device().type() == at::DeviceType::DPCPP);
  at::TensorOptions _ipex_options = options.device(at::DeviceType::CPU);
  auto&& _ipex_result = at::randint(high, size, generator, _ipex_options);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::randint(int64_t low, int64_t high, at::IntArrayRef size, const at::TensorOptions & options) {
  TORCH_INTERNAL_ASSERT(options.device().type() == at::DeviceType::DPCPP);
  at::TensorOptions _ipex_options = options.device(at::DeviceType::CPU);
  auto&& _ipex_result = at::randint(low, high, size, _ipex_options);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::randint(int64_t low, int64_t high, at::IntArrayRef size, at::Generator * generator, const at::TensorOptions & options) {
  TORCH_INTERNAL_ASSERT(options.device().type() == at::DeviceType::DPCPP);
  at::TensorOptions _ipex_options = options.device(at::DeviceType::CPU);
  auto&& _ipex_result = at::randint(low, high, size, generator, _ipex_options);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::randint_out(at::Tensor & out, int64_t high, at::IntArrayRef size) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_result = at::randint_out(_ipex_out, high, size);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor & AtenIpexCPUDefault::randint_out(at::Tensor & out, int64_t high, at::IntArrayRef size, at::Generator * generator) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_result = at::randint_out(_ipex_out, high, size, generator);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor & AtenIpexCPUDefault::randint_out(at::Tensor & out, int64_t low, int64_t high, at::IntArrayRef size) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_result = at::randint_out(_ipex_out, low, high, size);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor & AtenIpexCPUDefault::randint_out(at::Tensor & out, int64_t low, int64_t high, at::IntArrayRef size, at::Generator * generator) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_result = at::randint_out(_ipex_out, low, high, size, generator);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor AtenIpexCPUDefault::randint_like(const at::Tensor & self, int64_t high, c10::optional<at::MemoryFormat> memory_format) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(memory_format.value_or(c10::MemoryFormat::Contiguous) == c10::MemoryFormat::Contiguous);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::randint_like(_ipex_self, high, memory_format);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::randint_like(const at::Tensor & self, int64_t low, int64_t high, c10::optional<at::MemoryFormat> memory_format) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(memory_format.value_or(c10::MemoryFormat::Contiguous) == c10::MemoryFormat::Contiguous);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::randint_like(_ipex_self, low, high, memory_format);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::randint_like(const at::Tensor & self, int64_t high, const at::TensorOptions & options, c10::optional<at::MemoryFormat> memory_format) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(options.device().type() == at::DeviceType::DPCPP);
  at::TensorOptions _ipex_options = options.device(at::DeviceType::CPU);
  TORCH_INTERNAL_ASSERT(memory_format.value_or(c10::MemoryFormat::Contiguous) == c10::MemoryFormat::Contiguous);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::randint_like(_ipex_self, high, _ipex_options, memory_format);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::randint_like(const at::Tensor & self, int64_t low, int64_t high, const at::TensorOptions & options, c10::optional<at::MemoryFormat> memory_format) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(options.device().type() == at::DeviceType::DPCPP);
  at::TensorOptions _ipex_options = options.device(at::DeviceType::CPU);
  TORCH_INTERNAL_ASSERT(memory_format.value_or(c10::MemoryFormat::Contiguous) == c10::MemoryFormat::Contiguous);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::randint_like(_ipex_self, low, high, _ipex_options, memory_format);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::randn(at::IntArrayRef size, const at::TensorOptions & options) {
  TORCH_INTERNAL_ASSERT(options.device().type() == at::DeviceType::DPCPP);
  at::TensorOptions _ipex_options = options.device(at::DeviceType::CPU);
  auto&& _ipex_result = at::randn(size, _ipex_options);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::randn(at::IntArrayRef size, at::Generator * generator, const at::TensorOptions & options) {
  TORCH_INTERNAL_ASSERT(options.device().type() == at::DeviceType::DPCPP);
  at::TensorOptions _ipex_options = options.device(at::DeviceType::CPU);
  auto&& _ipex_result = at::randn(size, generator, _ipex_options);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::randn_out(at::Tensor & out, at::IntArrayRef size) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_result = at::randn_out(_ipex_out, size);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor & AtenIpexCPUDefault::randn_out(at::Tensor & out, at::IntArrayRef size, at::Generator * generator) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_result = at::randn_out(_ipex_out, size, generator);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor AtenIpexCPUDefault::randn_like(const at::Tensor & self, c10::optional<at::MemoryFormat> memory_format) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(memory_format.value_or(c10::MemoryFormat::Contiguous) == c10::MemoryFormat::Contiguous);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::randn_like(_ipex_self, memory_format);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::randn_like(const at::Tensor & self, const at::TensorOptions & options, c10::optional<at::MemoryFormat> memory_format) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(options.device().type() == at::DeviceType::DPCPP);
  at::TensorOptions _ipex_options = options.device(at::DeviceType::CPU);
  TORCH_INTERNAL_ASSERT(memory_format.value_or(c10::MemoryFormat::Contiguous) == c10::MemoryFormat::Contiguous);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::randn_like(_ipex_self, _ipex_options, memory_format);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::randperm(int64_t n, const at::TensorOptions & options) {
  TORCH_INTERNAL_ASSERT(options.device().type() == at::DeviceType::DPCPP);
  at::TensorOptions _ipex_options = options.device(at::DeviceType::CPU);
  auto&& _ipex_result = at::randperm(n, _ipex_options);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::randperm(int64_t n, at::Generator * generator, const at::TensorOptions & options) {
  TORCH_INTERNAL_ASSERT(options.device().type() == at::DeviceType::DPCPP);
  at::TensorOptions _ipex_options = options.device(at::DeviceType::CPU);
  auto&& _ipex_result = at::randperm(n, generator, _ipex_options);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::randperm_out(at::Tensor & out, int64_t n) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_result = at::randperm_out(_ipex_out, n);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor & AtenIpexCPUDefault::randperm_out(at::Tensor & out, int64_t n, at::Generator * generator) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_result = at::randperm_out(_ipex_out, n, generator);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor AtenIpexCPUDefault::range(at::Scalar start, at::Scalar end, at::Scalar step, const at::TensorOptions & options) {
  TORCH_INTERNAL_ASSERT(options.device().type() == at::DeviceType::DPCPP);
  at::TensorOptions _ipex_options = options.device(at::DeviceType::CPU);
  auto&& _ipex_result = at::range(start, end, step, _ipex_options);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::range(at::Scalar start, at::Scalar end, const at::TensorOptions & options) {
  TORCH_INTERNAL_ASSERT(options.device().type() == at::DeviceType::DPCPP);
  at::TensorOptions _ipex_options = options.device(at::DeviceType::CPU);
  auto&& _ipex_result = at::range(start, end, _ipex_options);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::range_out(at::Tensor & out, at::Scalar start, at::Scalar end, at::Scalar step) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_result = at::range_out(_ipex_out, start, end, step);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor AtenIpexCPUDefault::reciprocal(const at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::reciprocal(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::reciprocal_(at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::reciprocal_(_ipex_self);
  self = bridge::shallowUpgradeToDPCPPTensor(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return self;
}

at::Tensor & AtenIpexCPUDefault::reciprocal_out(at::Tensor & out, const at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::reciprocal_out(_ipex_out, _ipex_self);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor AtenIpexCPUDefault::neg(const at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::neg(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::neg_(at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::neg_(_ipex_self);
  self = bridge::shallowUpgradeToDPCPPTensor(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return self;
}

at::Tensor & AtenIpexCPUDefault::neg_out(at::Tensor & out, const at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::neg_out(_ipex_out, _ipex_self);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor AtenIpexCPUDefault::repeat(const at::Tensor & self, at::IntArrayRef repeats) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = _ipex_self.repeat(repeats);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::repeat_interleave(const at::Tensor & repeats) {
  TORCH_INTERNAL_ASSERT(repeats.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(repeats.is_contiguous());
  auto&& _ipex_repeats = bridge::shallowFallbackToCPUTensor(repeats);
  auto&& _ipex_result = at::repeat_interleave(_ipex_repeats);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::repeat_interleave(const at::Tensor & self, const at::Tensor & repeats, c10::optional<int64_t> dim) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(repeats.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(repeats.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_repeats = bridge::shallowFallbackToCPUTensor(repeats);
  auto&& _ipex_result = at::repeat_interleave(_ipex_self, _ipex_repeats, dim);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::repeat_interleave(const at::Tensor & self, int64_t repeats, c10::optional<int64_t> dim) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::repeat_interleave(_ipex_self, repeats, dim);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::reshape(const at::Tensor & self, at::IntArrayRef shape) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::reshape(_ipex_self, shape);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::reshape_as(const at::Tensor & self, const at::Tensor & other) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(other.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(other.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_other = bridge::shallowFallbackToCPUTensor(other);
  auto&& _ipex_result = _ipex_self.reshape_as(_ipex_other);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::round(const at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::round(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::round_(at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::round_(_ipex_self);
  self = bridge::shallowUpgradeToDPCPPTensor(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return self;
}

at::Tensor & AtenIpexCPUDefault::round_out(at::Tensor & out, const at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::round_out(_ipex_out, _ipex_self);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor AtenIpexCPUDefault::rrelu(const at::Tensor & self, at::Scalar lower, at::Scalar upper, bool training, at::Generator * generator) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::rrelu(_ipex_self, lower, upper, training, generator);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::rrelu_(at::Tensor & self, at::Scalar lower, at::Scalar upper, bool training, at::Generator * generator) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::rrelu_(_ipex_self, lower, upper, training, generator);
  self = bridge::shallowUpgradeToDPCPPTensor(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return self;
}

at::Tensor AtenIpexCPUDefault::relu(const at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::relu(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::relu_(at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::relu_(_ipex_self);
  self = bridge::shallowUpgradeToDPCPPTensor(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return self;
}

at::Tensor AtenIpexCPUDefault::prelu(const at::Tensor & self, const at::Tensor & weight) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(weight.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(weight.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_weight = bridge::shallowFallbackToCPUTensor(weight);
  auto&& _ipex_result = at::prelu(_ipex_self, _ipex_weight);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

std::tuple<at::Tensor,at::Tensor> AtenIpexCPUDefault::prelu_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & weight) {
  TORCH_INTERNAL_ASSERT(grad_output.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_output.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(weight.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(weight.is_contiguous());
  auto&& _ipex_grad_output = bridge::shallowFallbackToCPUTensor(grad_output);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_weight = bridge::shallowFallbackToCPUTensor(weight);
  auto&& _ipex_result = at::prelu_backward(_ipex_grad_output, _ipex_self, _ipex_weight);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return std::tuple<at::Tensor,at::Tensor>(bridge::upgradeToDPCPPTensor(std::get<0>(_ipex_result)), bridge::upgradeToDPCPPTensor(std::get<1>(_ipex_result)));
}

at::Tensor AtenIpexCPUDefault::gelu(const at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::gelu(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::gelu_backward(const at::Tensor & grad, const at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(grad.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_grad = bridge::shallowFallbackToCPUTensor(grad);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::gelu_backward(_ipex_grad, _ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::hardshrink(const at::Tensor & self, at::Scalar lambd) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::hardshrink(_ipex_self, lambd);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::hardshrink_backward(const at::Tensor & grad_out, const at::Tensor & self, at::Scalar lambd) {
  TORCH_INTERNAL_ASSERT(grad_out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_out.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_grad_out = bridge::shallowFallbackToCPUTensor(grad_out);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::hardshrink_backward(_ipex_grad_out, _ipex_self, lambd);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::rsqrt(const at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::rsqrt(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::rsqrt_(at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::rsqrt_(_ipex_self);
  self = bridge::shallowUpgradeToDPCPPTensor(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return self;
}

at::Tensor & AtenIpexCPUDefault::rsqrt_out(at::Tensor & out, const at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::rsqrt_out(_ipex_out, _ipex_self);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor AtenIpexCPUDefault::select(const at::Tensor & self, int64_t dim, int64_t index) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::select(_ipex_self, dim, index);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::shallowUpgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::selu(const at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::selu(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::selu_(at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::selu_(_ipex_self);
  self = bridge::shallowUpgradeToDPCPPTensor(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return self;
}

at::Tensor AtenIpexCPUDefault::celu(const at::Tensor & self, at::Scalar alpha) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::celu(_ipex_self, alpha);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::celu_(at::Tensor & self, at::Scalar alpha) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::celu_(_ipex_self, alpha);
  self = bridge::shallowUpgradeToDPCPPTensor(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return self;
}

at::Tensor AtenIpexCPUDefault::sigmoid(const at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::sigmoid(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::sigmoid_(at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::sigmoid_(_ipex_self);
  self = bridge::shallowUpgradeToDPCPPTensor(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return self;
}

at::Tensor & AtenIpexCPUDefault::sigmoid_out(at::Tensor & out, const at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::sigmoid_out(_ipex_out, _ipex_self);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor AtenIpexCPUDefault::sin(const at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::sin(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::sin_(at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::sin_(_ipex_self);
  self = bridge::shallowUpgradeToDPCPPTensor(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return self;
}

at::Tensor & AtenIpexCPUDefault::sin_out(at::Tensor & out, const at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::sin_out(_ipex_out, _ipex_self);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor AtenIpexCPUDefault::sinh(const at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::sinh(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::sinh_(at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::sinh_(_ipex_self);
  self = bridge::shallowUpgradeToDPCPPTensor(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return self;
}

at::Tensor & AtenIpexCPUDefault::sinh_out(at::Tensor & out, const at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::sinh_out(_ipex_out, _ipex_self);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor AtenIpexCPUDefault::detach(const at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::detach(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::detach_(at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::detach_(_ipex_self);
  self = bridge::shallowUpgradeToDPCPPTensor(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return self;
}

int64_t AtenIpexCPUDefault::size(const at::Tensor & self, int64_t dim) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::size(_ipex_self, dim);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return _ipex_result;
}

at::Tensor AtenIpexCPUDefault::slice(const at::Tensor & self, int64_t dim, int64_t start, int64_t end, int64_t step) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::slice(_ipex_self, dim, start, end, step);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

std::tuple<at::Tensor,at::Tensor> AtenIpexCPUDefault::slogdet(const at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::slogdet(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return std::tuple<at::Tensor,at::Tensor>(bridge::upgradeToDPCPPTensor(std::get<0>(_ipex_result)), bridge::upgradeToDPCPPTensor(std::get<1>(_ipex_result)));
}

at::Tensor AtenIpexCPUDefault::smm(const at::Tensor & self, const at::Tensor & mat2) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(mat2.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(mat2.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_mat2 = bridge::shallowFallbackToCPUTensor(mat2);
  auto&& _ipex_result = at::smm(_ipex_self, _ipex_mat2);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::softmax(const at::Tensor & self, int64_t dim, c10::optional<at::ScalarType> dtype) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::softmax(_ipex_self, dim, dtype);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::_softmax(const at::Tensor & self, int64_t dim, bool half_to_float) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::_softmax(_ipex_self, dim, half_to_float);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::_softmax_backward_data(const at::Tensor & grad_output, const at::Tensor & output, int64_t dim, const at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(grad_output.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_output.is_contiguous());
  TORCH_INTERNAL_ASSERT(output.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(output.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_grad_output = bridge::shallowFallbackToCPUTensor(grad_output);
  auto&& _ipex_output = bridge::shallowFallbackToCPUTensor(output);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::_softmax_backward_data(_ipex_grad_output, _ipex_output, dim, _ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

std::vector<at::Tensor> AtenIpexCPUDefault::split(const at::Tensor & self, int64_t split_size, int64_t dim) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::split(_ipex_self, split_size, dim);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return bridge::upgradeToDPCPPTensorVec(_ipex_result);
}

std::vector<at::Tensor> AtenIpexCPUDefault::split_with_sizes(const at::Tensor & self, at::IntArrayRef split_sizes, int64_t dim) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::split_with_sizes(_ipex_self, split_sizes, dim);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return bridge::upgradeToDPCPPTensorVec(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::squeeze(const at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::squeeze(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::squeeze(const at::Tensor & self, int64_t dim) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::squeeze(_ipex_self, dim);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::squeeze_(at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = _ipex_self.squeeze_();
  self = bridge::shallowUpgradeToDPCPPTensor(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return self;
}

at::Tensor & AtenIpexCPUDefault::squeeze_(at::Tensor & self, int64_t dim) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = _ipex_self.squeeze_(dim);
  self = bridge::shallowUpgradeToDPCPPTensor(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return self;
}

at::Tensor AtenIpexCPUDefault::sspaddmm(const at::Tensor & self, const at::Tensor & mat1, const at::Tensor & mat2, at::Scalar beta, at::Scalar alpha) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(mat1.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(mat1.is_contiguous());
  TORCH_INTERNAL_ASSERT(mat2.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(mat2.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_mat1 = bridge::shallowFallbackToCPUTensor(mat1);
  auto&& _ipex_mat2 = bridge::shallowFallbackToCPUTensor(mat2);
  auto&& _ipex_result = at::sspaddmm(_ipex_self, _ipex_mat1, _ipex_mat2, beta, alpha);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::sspaddmm_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & mat1, const at::Tensor & mat2, at::Scalar beta, at::Scalar alpha) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(mat1.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(mat1.is_contiguous());
  TORCH_INTERNAL_ASSERT(mat2.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(mat2.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_mat1 = bridge::shallowFallbackToCPUTensor(mat1);
  auto&& _ipex_mat2 = bridge::shallowFallbackToCPUTensor(mat2);
  auto&& _ipex_result = at::sspaddmm_out(_ipex_out, _ipex_self, _ipex_mat1, _ipex_mat2, beta, alpha);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor AtenIpexCPUDefault::stack(at::TensorList tensors, int64_t dim) {
  auto&& _ipex_tensors = bridge::shallowFallbackToCPUTensorList(tensors);
  auto&& _ipex_result = at::stack(_ipex_tensors, dim);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::stack_out(at::Tensor & out, at::TensorList tensors, int64_t dim) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  auto&& _ipex_tensors = bridge::shallowFallbackToCPUTensorList(tensors);
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_result = at::stack_out(_ipex_out, _ipex_tensors, dim);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor AtenIpexCPUDefault::stft(const at::Tensor & self, int64_t n_fft, c10::optional<int64_t> hop_length, c10::optional<int64_t> win_length, const at::Tensor & window, bool normalized, bool onesided) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(window.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(window.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_window = bridge::shallowFallbackToCPUTensor(window);
  auto&& _ipex_result = at::stft(_ipex_self, n_fft, hop_length, win_length, _ipex_window, normalized, onesided);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

int64_t AtenIpexCPUDefault::stride(const at::Tensor & self, int64_t dim) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::stride(_ipex_self, dim);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return _ipex_result;
}

at::Tensor AtenIpexCPUDefault::sum(const at::Tensor & self, c10::optional<at::ScalarType> dtype) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::sum(_ipex_self, dtype);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::sum(const at::Tensor & self, at::IntArrayRef dim, bool keepdim, c10::optional<at::ScalarType> dtype) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::sum(_ipex_self, dim, keepdim, dtype);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::sum_out(at::Tensor & out, const at::Tensor & self, at::IntArrayRef dim, bool keepdim, c10::optional<at::ScalarType> dtype) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::sum_out(_ipex_out, _ipex_self, dim, keepdim, dtype);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor AtenIpexCPUDefault::sum_to_size(const at::Tensor & self, at::IntArrayRef size) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = _ipex_self.sum_to_size(size);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::sqrt(const at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::sqrt(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::sqrt_(at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::sqrt_(_ipex_self);
  self = bridge::shallowUpgradeToDPCPPTensor(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return self;
}

at::Tensor & AtenIpexCPUDefault::sqrt_out(at::Tensor & out, const at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::sqrt_out(_ipex_out, _ipex_self);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor AtenIpexCPUDefault::std(const at::Tensor & self, bool unbiased) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::std(_ipex_self, unbiased);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::std(const at::Tensor & self, at::IntArrayRef dim, bool unbiased, bool keepdim) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::std(_ipex_self, dim, unbiased, keepdim);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

std::tuple<at::Tensor,at::Tensor> AtenIpexCPUDefault::std_mean(const at::Tensor & self, bool unbiased) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::std_mean(_ipex_self, unbiased);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return std::tuple<at::Tensor,at::Tensor>(bridge::upgradeToDPCPPTensor(std::get<0>(_ipex_result)), bridge::upgradeToDPCPPTensor(std::get<1>(_ipex_result)));
}

std::tuple<at::Tensor,at::Tensor> AtenIpexCPUDefault::std_mean(const at::Tensor & self, at::IntArrayRef dim, bool unbiased, bool keepdim) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::std_mean(_ipex_self, dim, unbiased, keepdim);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return std::tuple<at::Tensor,at::Tensor>(bridge::upgradeToDPCPPTensor(std::get<0>(_ipex_result)), bridge::upgradeToDPCPPTensor(std::get<1>(_ipex_result)));
}

at::Tensor & AtenIpexCPUDefault::std_out(at::Tensor & out, const at::Tensor & self, at::IntArrayRef dim, bool unbiased, bool keepdim) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::std_out(_ipex_out, _ipex_self, dim, unbiased, keepdim);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor AtenIpexCPUDefault::prod(const at::Tensor & self, c10::optional<at::ScalarType> dtype) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::prod(_ipex_self, dtype);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::prod(const at::Tensor & self, int64_t dim, bool keepdim, c10::optional<at::ScalarType> dtype) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::prod(_ipex_self, dim, keepdim, dtype);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::prod_out(at::Tensor & out, const at::Tensor & self, int64_t dim, bool keepdim, c10::optional<at::ScalarType> dtype) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::prod_out(_ipex_out, _ipex_self, dim, keepdim, dtype);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor AtenIpexCPUDefault::t(const at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::t(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::t_(at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = _ipex_self.t_();
  self = bridge::shallowUpgradeToDPCPPTensor(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return self;
}

at::Tensor AtenIpexCPUDefault::tan(const at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::tan(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::tan_(at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::tan_(_ipex_self);
  self = bridge::shallowUpgradeToDPCPPTensor(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return self;
}

at::Tensor & AtenIpexCPUDefault::tan_out(at::Tensor & out, const at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::tan_out(_ipex_out, _ipex_self);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor AtenIpexCPUDefault::tanh(const at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::tanh(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::tanh_(at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::tanh_(_ipex_self);
  self = bridge::shallowUpgradeToDPCPPTensor(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return self;
}

at::Tensor & AtenIpexCPUDefault::tanh_out(at::Tensor & out, const at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::tanh_out(_ipex_out, _ipex_self);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor AtenIpexCPUDefault::tensordot(const at::Tensor & self, const at::Tensor & other, at::IntArrayRef dims_self, at::IntArrayRef dims_other) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(other.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(other.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_other = bridge::shallowFallbackToCPUTensor(other);
  auto&& _ipex_result = at::tensordot(_ipex_self, _ipex_other, dims_self, dims_other);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::threshold(const at::Tensor & self, at::Scalar threshold, at::Scalar value) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::threshold(_ipex_self, threshold, value);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::threshold_(at::Tensor & self, at::Scalar threshold, at::Scalar value) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::threshold_(_ipex_self, threshold, value);
  self = bridge::shallowUpgradeToDPCPPTensor(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return self;
}

at::Tensor & AtenIpexCPUDefault::threshold_out(at::Tensor & out, const at::Tensor & self, at::Scalar threshold, at::Scalar value) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::threshold_out(_ipex_out, _ipex_self, threshold, value);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor AtenIpexCPUDefault::threshold_backward(const at::Tensor & grad_output, const at::Tensor & self, at::Scalar threshold) {
  TORCH_INTERNAL_ASSERT(grad_output.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_output.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_grad_output = bridge::shallowFallbackToCPUTensor(grad_output);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::threshold_backward(_ipex_grad_output, _ipex_self, threshold);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::transpose(const at::Tensor & self, int64_t dim0, int64_t dim1) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::transpose(_ipex_self, dim0, dim1);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::transpose_(at::Tensor & self, int64_t dim0, int64_t dim1) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = _ipex_self.transpose_(dim0, dim1);
  self = bridge::shallowUpgradeToDPCPPTensor(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return self;
}

at::Tensor AtenIpexCPUDefault::one_hot(const at::Tensor & self, int64_t num_classes) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::one_hot(_ipex_self, num_classes);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::flip(const at::Tensor & self, at::IntArrayRef dims) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::flip(_ipex_self, dims);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::roll(const at::Tensor & self, at::IntArrayRef shifts, at::IntArrayRef dims) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::roll(_ipex_self, shifts, dims);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::rot90(const at::Tensor & self, int64_t k, at::IntArrayRef dims) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::rot90(_ipex_self, k, dims);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::trapz(const at::Tensor & y, const at::Tensor & x, int64_t dim) {
  TORCH_INTERNAL_ASSERT(y.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(y.is_contiguous());
  TORCH_INTERNAL_ASSERT(x.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(x.is_contiguous());
  auto&& _ipex_y = bridge::shallowFallbackToCPUTensor(y);
  auto&& _ipex_x = bridge::shallowFallbackToCPUTensor(x);
  auto&& _ipex_result = at::trapz(_ipex_y, _ipex_x, dim);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::trapz(const at::Tensor & y, double dx, int64_t dim) {
  TORCH_INTERNAL_ASSERT(y.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(y.is_contiguous());
  auto&& _ipex_y = bridge::shallowFallbackToCPUTensor(y);
  auto&& _ipex_result = at::trapz(_ipex_y, dx, dim);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::_trilinear(const at::Tensor & i1, const at::Tensor & i2, const at::Tensor & i3, at::IntArrayRef expand1, at::IntArrayRef expand2, at::IntArrayRef expand3, at::IntArrayRef sumdim, int64_t unroll_dim) {
  TORCH_INTERNAL_ASSERT(i1.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(i1.is_contiguous());
  TORCH_INTERNAL_ASSERT(i2.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(i2.is_contiguous());
  TORCH_INTERNAL_ASSERT(i3.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(i3.is_contiguous());
  auto&& _ipex_i1 = bridge::shallowFallbackToCPUTensor(i1);
  auto&& _ipex_i2 = bridge::shallowFallbackToCPUTensor(i2);
  auto&& _ipex_i3 = bridge::shallowFallbackToCPUTensor(i3);
  auto&& _ipex_result = at::_trilinear(_ipex_i1, _ipex_i2, _ipex_i3, expand1, expand2, expand3, sumdim, unroll_dim);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::triplet_margin_loss(const at::Tensor & anchor, const at::Tensor & positive, const at::Tensor & negative, double margin, double p, double eps, bool swap, int64_t reduction) {
  TORCH_INTERNAL_ASSERT(anchor.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(anchor.is_contiguous());
  TORCH_INTERNAL_ASSERT(positive.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(positive.is_contiguous());
  TORCH_INTERNAL_ASSERT(negative.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(negative.is_contiguous());
  auto&& _ipex_anchor = bridge::shallowFallbackToCPUTensor(anchor);
  auto&& _ipex_positive = bridge::shallowFallbackToCPUTensor(positive);
  auto&& _ipex_negative = bridge::shallowFallbackToCPUTensor(negative);
  auto&& _ipex_result = at::triplet_margin_loss(_ipex_anchor, _ipex_positive, _ipex_negative, margin, p, eps, swap, reduction);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::trunc(const at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::trunc(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::trunc_(at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::trunc_(_ipex_self);
  self = bridge::shallowUpgradeToDPCPPTensor(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return self;
}

at::Tensor & AtenIpexCPUDefault::trunc_out(at::Tensor & out, const at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::trunc_out(_ipex_out, _ipex_self);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor AtenIpexCPUDefault::type_as(const at::Tensor & self, const at::Tensor & other) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(other.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(other.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_other = bridge::shallowFallbackToCPUTensor(other);
  auto&& _ipex_result = _ipex_self.type_as(_ipex_other);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

bool AtenIpexCPUDefault::_has_compatible_shallow_copy_type(const at::Tensor & self, const at::Tensor & from) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(from.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(from.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_from = bridge::shallowFallbackToCPUTensor(from);
  auto&& _ipex_result = at::_has_compatible_shallow_copy_type(_ipex_self, _ipex_from);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return _ipex_result;
}

std::tuple<at::Tensor,at::Tensor> AtenIpexCPUDefault::_unique(const at::Tensor & self, bool sorted, bool return_inverse) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::_unique(_ipex_self, sorted, return_inverse);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return std::tuple<at::Tensor,at::Tensor>(bridge::upgradeToDPCPPTensor(std::get<0>(_ipex_result)), bridge::upgradeToDPCPPTensor(std::get<1>(_ipex_result)));
}

std::tuple<at::Tensor,at::Tensor,at::Tensor> AtenIpexCPUDefault::unique_dim(const at::Tensor & self, int64_t dim, bool sorted, bool return_inverse, bool return_counts) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::unique_dim(_ipex_self, dim, sorted, return_inverse, return_counts);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return std::tuple<at::Tensor,at::Tensor,at::Tensor>(bridge::upgradeToDPCPPTensor(std::get<0>(_ipex_result)), bridge::upgradeToDPCPPTensor(std::get<1>(_ipex_result)), bridge::upgradeToDPCPPTensor(std::get<2>(_ipex_result)));
}

std::tuple<at::Tensor,at::Tensor,at::Tensor> AtenIpexCPUDefault::unique_consecutive(const at::Tensor & self, bool return_inverse, bool return_counts, c10::optional<int64_t> dim) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::unique_consecutive(_ipex_self, return_inverse, return_counts, dim);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return std::tuple<at::Tensor,at::Tensor,at::Tensor>(bridge::upgradeToDPCPPTensor(std::get<0>(_ipex_result)), bridge::upgradeToDPCPPTensor(std::get<1>(_ipex_result)), bridge::upgradeToDPCPPTensor(std::get<2>(_ipex_result)));
}

std::tuple<at::Tensor,at::Tensor,at::Tensor> AtenIpexCPUDefault::unique_dim_consecutive(const at::Tensor & self, int64_t dim, bool return_inverse, bool return_counts) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::unique_dim_consecutive(_ipex_self, dim, return_inverse, return_counts);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return std::tuple<at::Tensor,at::Tensor,at::Tensor>(bridge::upgradeToDPCPPTensor(std::get<0>(_ipex_result)), bridge::upgradeToDPCPPTensor(std::get<1>(_ipex_result)), bridge::upgradeToDPCPPTensor(std::get<2>(_ipex_result)));
}

std::tuple<at::Tensor,at::Tensor,at::Tensor> AtenIpexCPUDefault::_unique2(const at::Tensor & self, bool sorted, bool return_inverse, bool return_counts) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::_unique2(_ipex_self, sorted, return_inverse, return_counts);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return std::tuple<at::Tensor,at::Tensor,at::Tensor>(bridge::upgradeToDPCPPTensor(std::get<0>(_ipex_result)), bridge::upgradeToDPCPPTensor(std::get<1>(_ipex_result)), bridge::upgradeToDPCPPTensor(std::get<2>(_ipex_result)));
}

at::Tensor AtenIpexCPUDefault::_unsafe_view(const at::Tensor & self, at::IntArrayRef size) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::_unsafe_view(_ipex_self, size);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::unsqueeze(const at::Tensor & self, int64_t dim) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::unsqueeze(_ipex_self, dim);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::unsqueeze_(at::Tensor & self, int64_t dim) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = _ipex_self.unsqueeze_(dim);
  self = bridge::shallowUpgradeToDPCPPTensor(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return self;
}

at::Tensor AtenIpexCPUDefault::var(const at::Tensor & self, bool unbiased) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::var(_ipex_self, unbiased);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::var(const at::Tensor & self, at::IntArrayRef dim, bool unbiased, bool keepdim) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::var(_ipex_self, dim, unbiased, keepdim);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::var_out(at::Tensor & out, const at::Tensor & self, at::IntArrayRef dim, bool unbiased, bool keepdim) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::var_out(_ipex_out, _ipex_self, dim, unbiased, keepdim);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

std::tuple<at::Tensor,at::Tensor> AtenIpexCPUDefault::var_mean(const at::Tensor & self, bool unbiased) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::var_mean(_ipex_self, unbiased);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return std::tuple<at::Tensor,at::Tensor>(bridge::upgradeToDPCPPTensor(std::get<0>(_ipex_result)), bridge::upgradeToDPCPPTensor(std::get<1>(_ipex_result)));
}

std::tuple<at::Tensor,at::Tensor> AtenIpexCPUDefault::var_mean(const at::Tensor & self, at::IntArrayRef dim, bool unbiased, bool keepdim) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::var_mean(_ipex_self, dim, unbiased, keepdim);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return std::tuple<at::Tensor,at::Tensor>(bridge::upgradeToDPCPPTensor(std::get<0>(_ipex_result)), bridge::upgradeToDPCPPTensor(std::get<1>(_ipex_result)));
}

at::Tensor AtenIpexCPUDefault::view_as(const at::Tensor & self, const at::Tensor & other) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(other.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(other.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_other = bridge::shallowFallbackToCPUTensor(other);
  auto&& _ipex_result = _ipex_self.view_as(_ipex_other);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::where(const at::Tensor & condition, const at::Tensor & self, const at::Tensor & other) {
  TORCH_INTERNAL_ASSERT(condition.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(condition.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(other.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(other.is_contiguous());
  auto&& _ipex_condition = bridge::shallowFallbackToCPUTensor(condition);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_other = bridge::shallowFallbackToCPUTensor(other);
  auto&& _ipex_result = at::where(_ipex_condition, _ipex_self, _ipex_other);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

std::vector<at::Tensor> AtenIpexCPUDefault::where(const at::Tensor & condition) {
  TORCH_INTERNAL_ASSERT(condition.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(condition.is_contiguous());
  auto&& _ipex_condition = bridge::shallowFallbackToCPUTensor(condition);
  auto&& _ipex_result = at::where(_ipex_condition);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return bridge::upgradeToDPCPPTensorVec(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::_s_where(const at::Tensor & condition, const at::Tensor & self, const at::Tensor & other) {
  TORCH_INTERNAL_ASSERT(condition.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(condition.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(other.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(other.is_contiguous());
  auto&& _ipex_condition = bridge::shallowFallbackToCPUTensor(condition);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_other = bridge::shallowFallbackToCPUTensor(other);
  auto&& _ipex_result = at::_s_where(_ipex_condition, _ipex_self, _ipex_other);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::norm_except_dim(const at::Tensor & v, int64_t pow, int64_t dim) {
  TORCH_INTERNAL_ASSERT(v.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(v.is_contiguous());
  auto&& _ipex_v = bridge::shallowFallbackToCPUTensor(v);
  auto&& _ipex_result = at::norm_except_dim(_ipex_v, pow, dim);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::_weight_norm(const at::Tensor & v, const at::Tensor & g, int64_t dim) {
  TORCH_INTERNAL_ASSERT(v.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(v.is_contiguous());
  TORCH_INTERNAL_ASSERT(g.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(g.is_contiguous());
  auto&& _ipex_v = bridge::shallowFallbackToCPUTensor(v);
  auto&& _ipex_g = bridge::shallowFallbackToCPUTensor(g);
  auto&& _ipex_result = at::_weight_norm(_ipex_v, _ipex_g, dim);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

std::tuple<at::Tensor,at::Tensor> AtenIpexCPUDefault::_weight_norm_cuda_interface(const at::Tensor & v, const at::Tensor & g, int64_t dim) {
  TORCH_INTERNAL_ASSERT(v.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(v.is_contiguous());
  TORCH_INTERNAL_ASSERT(g.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(g.is_contiguous());
  auto&& _ipex_v = bridge::shallowFallbackToCPUTensor(v);
  auto&& _ipex_g = bridge::shallowFallbackToCPUTensor(g);
  auto&& _ipex_result = at::_weight_norm_cuda_interface(_ipex_v, _ipex_g, dim);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return std::tuple<at::Tensor,at::Tensor>(bridge::upgradeToDPCPPTensor(std::get<0>(_ipex_result)), bridge::upgradeToDPCPPTensor(std::get<1>(_ipex_result)));
}

std::tuple<at::Tensor,at::Tensor> AtenIpexCPUDefault::_weight_norm_cuda_interface_backward(const at::Tensor & grad_w, const at::Tensor & saved_v, const at::Tensor & saved_g, const at::Tensor & saved_norms, int64_t dim) {
  TORCH_INTERNAL_ASSERT(grad_w.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_w.is_contiguous());
  TORCH_INTERNAL_ASSERT(saved_v.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(saved_v.is_contiguous());
  TORCH_INTERNAL_ASSERT(saved_g.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(saved_g.is_contiguous());
  TORCH_INTERNAL_ASSERT(saved_norms.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(saved_norms.is_contiguous());
  auto&& _ipex_grad_w = bridge::shallowFallbackToCPUTensor(grad_w);
  auto&& _ipex_saved_v = bridge::shallowFallbackToCPUTensor(saved_v);
  auto&& _ipex_saved_g = bridge::shallowFallbackToCPUTensor(saved_g);
  auto&& _ipex_saved_norms = bridge::shallowFallbackToCPUTensor(saved_norms);
  auto&& _ipex_result = at::_weight_norm_cuda_interface_backward(_ipex_grad_w, _ipex_saved_v, _ipex_saved_g, _ipex_saved_norms, dim);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return std::tuple<at::Tensor,at::Tensor>(bridge::upgradeToDPCPPTensor(std::get<0>(_ipex_result)), bridge::upgradeToDPCPPTensor(std::get<1>(_ipex_result)));
}

std::tuple<at::Tensor,at::Tensor> AtenIpexCPUDefault::_weight_norm_differentiable_backward(const at::Tensor & grad_w, const at::Tensor & saved_v, const at::Tensor & saved_g, const at::Tensor & saved_norms, int64_t dim) {
  TORCH_INTERNAL_ASSERT(grad_w.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_w.is_contiguous());
  TORCH_INTERNAL_ASSERT(saved_v.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(saved_v.is_contiguous());
  TORCH_INTERNAL_ASSERT(saved_g.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(saved_g.is_contiguous());
  TORCH_INTERNAL_ASSERT(saved_norms.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(saved_norms.is_contiguous());
  auto&& _ipex_grad_w = bridge::shallowFallbackToCPUTensor(grad_w);
  auto&& _ipex_saved_v = bridge::shallowFallbackToCPUTensor(saved_v);
  auto&& _ipex_saved_g = bridge::shallowFallbackToCPUTensor(saved_g);
  auto&& _ipex_saved_norms = bridge::shallowFallbackToCPUTensor(saved_norms);
  auto&& _ipex_result = at::_weight_norm_differentiable_backward(_ipex_grad_w, _ipex_saved_v, _ipex_saved_g, _ipex_saved_norms, dim);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return std::tuple<at::Tensor,at::Tensor>(bridge::upgradeToDPCPPTensor(std::get<0>(_ipex_result)), bridge::upgradeToDPCPPTensor(std::get<1>(_ipex_result)));
}

at::Tensor AtenIpexCPUDefault::zeros(at::IntArrayRef size, const at::TensorOptions & options) {
  TORCH_INTERNAL_ASSERT(options.device().type() == at::DeviceType::DPCPP);
  at::TensorOptions _ipex_options = options.device(at::DeviceType::CPU);
  auto&& _ipex_result = at::zeros(size, _ipex_options);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::zeros_out(at::Tensor & out, at::IntArrayRef size) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_result = at::zeros_out(_ipex_out, size);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor AtenIpexCPUDefault::zeros_like(const at::Tensor & self, c10::optional<at::MemoryFormat> memory_format) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(memory_format.value_or(c10::MemoryFormat::Contiguous) == c10::MemoryFormat::Contiguous);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::zeros_like(_ipex_self, memory_format);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::zeros_like(const at::Tensor & self, const at::TensorOptions & options, c10::optional<at::MemoryFormat> memory_format) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(options.device().type() == at::DeviceType::DPCPP);
  at::TensorOptions _ipex_options = options.device(at::DeviceType::CPU);
  TORCH_INTERNAL_ASSERT(memory_format.value_or(c10::MemoryFormat::Contiguous) == c10::MemoryFormat::Contiguous);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::zeros_like(_ipex_self, _ipex_options, memory_format);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::_standard_gamma_grad(const at::Tensor & self, const at::Tensor & output) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(output.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(output.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_output = bridge::shallowFallbackToCPUTensor(output);
  auto&& _ipex_result = at::_standard_gamma_grad(_ipex_self, _ipex_output);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::_standard_gamma(const at::Tensor & self, at::Generator * generator) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::_standard_gamma(_ipex_self, generator);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::_dirichlet_grad(const at::Tensor & x, const at::Tensor & alpha, const at::Tensor & total) {
  TORCH_INTERNAL_ASSERT(x.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(x.is_contiguous());
  TORCH_INTERNAL_ASSERT(alpha.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(alpha.is_contiguous());
  TORCH_INTERNAL_ASSERT(total.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(total.is_contiguous());
  auto&& _ipex_x = bridge::shallowFallbackToCPUTensor(x);
  auto&& _ipex_alpha = bridge::shallowFallbackToCPUTensor(alpha);
  auto&& _ipex_total = bridge::shallowFallbackToCPUTensor(total);
  auto&& _ipex_result = at::_dirichlet_grad(_ipex_x, _ipex_alpha, _ipex_total);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::_sample_dirichlet(const at::Tensor & self, at::Generator * generator) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::_sample_dirichlet(_ipex_self, generator);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::poisson(const at::Tensor & self, at::Generator * generator) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::poisson(_ipex_self, generator);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::native_norm(const at::Tensor & self, at::Scalar p) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::native_norm(_ipex_self, p);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::_sparse_sum(const at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::_sparse_sum(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::_sparse_sum(const at::Tensor & self, at::ScalarType dtype) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::_sparse_sum(_ipex_self, dtype);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::_sparse_sum(const at::Tensor & self, at::IntArrayRef dim) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::_sparse_sum(_ipex_self, dim);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::_sparse_sum(const at::Tensor & self, at::IntArrayRef dim, at::ScalarType dtype) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::_sparse_sum(_ipex_self, dim, dtype);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::_sparse_sum_backward(const at::Tensor & grad, const at::Tensor & self, at::IntArrayRef dim) {
  TORCH_INTERNAL_ASSERT(grad.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_grad = bridge::shallowFallbackToCPUTensor(grad);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::_sparse_sum_backward(_ipex_grad, _ipex_self, dim);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::norm(const at::Tensor & self, c10::optional<at::Scalar> p, at::ScalarType dtype) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::norm(_ipex_self, p, dtype);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::norm(const at::Tensor & self, at::Scalar p) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::norm(_ipex_self, p);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::norm(const at::Tensor & self, c10::optional<at::Scalar> p, at::IntArrayRef dim, bool keepdim, at::ScalarType dtype) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::norm(_ipex_self, p, dim, keepdim, dtype);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::norm(const at::Tensor & self, c10::optional<at::Scalar> p, at::IntArrayRef dim, bool keepdim) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::norm(_ipex_self, p, dim, keepdim);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::norm_out(at::Tensor & out, const at::Tensor & self, c10::optional<at::Scalar> p, at::IntArrayRef dim, bool keepdim, at::ScalarType dtype) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::norm_out(_ipex_out, _ipex_self, p, dim, keepdim, dtype);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor & AtenIpexCPUDefault::norm_out(at::Tensor & out, const at::Tensor & self, c10::optional<at::Scalar> p, at::IntArrayRef dim, bool keepdim) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::norm_out(_ipex_out, _ipex_self, p, dim, keepdim);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor AtenIpexCPUDefault::frobenius_norm(const at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::frobenius_norm(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::frobenius_norm(const at::Tensor & self, at::IntArrayRef dim, bool keepdim) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::frobenius_norm(_ipex_self, dim, keepdim);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::frobenius_norm_out(at::Tensor & out, const at::Tensor & self, at::IntArrayRef dim, bool keepdim) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::frobenius_norm_out(_ipex_out, _ipex_self, dim, keepdim);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor AtenIpexCPUDefault::nuclear_norm(const at::Tensor & self, bool keepdim) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::nuclear_norm(_ipex_self, keepdim);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::nuclear_norm_out(at::Tensor & out, const at::Tensor & self, bool keepdim) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::nuclear_norm_out(_ipex_out, _ipex_self, keepdim);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor AtenIpexCPUDefault::nuclear_norm(const at::Tensor & self, at::IntArrayRef dim, bool keepdim) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::nuclear_norm(_ipex_self, dim, keepdim);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::nuclear_norm_out(at::Tensor & out, const at::Tensor & self, at::IntArrayRef dim, bool keepdim) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::nuclear_norm_out(_ipex_out, _ipex_self, dim, keepdim);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor AtenIpexCPUDefault::clone(const at::Tensor & self, c10::optional<at::MemoryFormat> memory_format) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(memory_format.value_or(c10::MemoryFormat::Contiguous) == c10::MemoryFormat::Contiguous);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::clone(_ipex_self, memory_format);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::resize_as_(at::Tensor & self, const at::Tensor & the_template) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(the_template.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(the_template.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_the_template = bridge::shallowFallbackToCPUTensor(the_template);
  auto&& _ipex_result = at::resize_as_(_ipex_self, _ipex_the_template);
  self = bridge::shallowUpgradeToDPCPPTensor(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return self;
}

at::Tensor & AtenIpexCPUDefault::pow_out(at::Tensor & out, const at::Tensor & self, at::Scalar exponent) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::pow_out(_ipex_out, _ipex_self, exponent);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor AtenIpexCPUDefault::pow(const at::Tensor & self, at::Scalar exponent) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::pow(_ipex_self, exponent);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::zero_(at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::zero_(_ipex_self);
  self = bridge::shallowUpgradeToDPCPPTensor(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return self;
}

at::Tensor & AtenIpexCPUDefault::sub_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & other, at::Scalar alpha) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(other.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(other.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_other = bridge::shallowFallbackToCPUTensor(other);
  auto&& _ipex_result = at::sub_out(_ipex_out, _ipex_self, _ipex_other, alpha);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor AtenIpexCPUDefault::sub(const at::Tensor & self, const at::Tensor & other, at::Scalar alpha) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(other.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(other.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_other = bridge::shallowFallbackToCPUTensor(other);
  auto&& _ipex_result = at::sub(_ipex_self, _ipex_other, alpha);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::sub_(at::Tensor & self, const at::Tensor & other, at::Scalar alpha) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(other.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(other.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_other = bridge::shallowFallbackToCPUTensor(other);
  auto&& _ipex_result = _ipex_self.sub_(_ipex_other, alpha);
  self = bridge::shallowUpgradeToDPCPPTensor(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return self;
}

at::Tensor AtenIpexCPUDefault::sub(const at::Tensor & self, at::Scalar other, at::Scalar alpha) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::sub(_ipex_self, other, alpha);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::sub_(at::Tensor & self, at::Scalar other, at::Scalar alpha) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = _ipex_self.sub_(other, alpha);
  self = bridge::shallowUpgradeToDPCPPTensor(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return self;
}

at::Tensor AtenIpexCPUDefault::rsub(const at::Tensor & self, const at::Tensor & other, at::Scalar alpha) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(other.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(other.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_other = bridge::shallowFallbackToCPUTensor(other);
  auto&& _ipex_result = at::rsub(_ipex_self, _ipex_other, alpha);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::rsub(const at::Tensor & self, at::Scalar other, at::Scalar alpha) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::rsub(_ipex_self, other, alpha);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::_sparse_addmm(const at::Tensor & self, const at::Tensor & sparse, const at::Tensor & dense, at::Scalar beta, at::Scalar alpha) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(sparse.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(sparse.is_contiguous());
  TORCH_INTERNAL_ASSERT(dense.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(dense.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_sparse = bridge::shallowFallbackToCPUTensor(sparse);
  auto&& _ipex_dense = bridge::shallowFallbackToCPUTensor(dense);
  auto&& _ipex_result = at::_sparse_addmm(_ipex_self, _ipex_sparse, _ipex_dense, beta, alpha);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::addmm_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & mat1, const at::Tensor & mat2, at::Scalar beta, at::Scalar alpha) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(mat1.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(mat1.is_contiguous());
  TORCH_INTERNAL_ASSERT(mat2.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(mat2.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_mat1 = bridge::shallowFallbackToCPUTensor(mat1);
  auto&& _ipex_mat2 = bridge::shallowFallbackToCPUTensor(mat2);
  auto&& _ipex_result = at::addmm_out(_ipex_out, _ipex_self, _ipex_mat1, _ipex_mat2, beta, alpha);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor AtenIpexCPUDefault::addmm(const at::Tensor & self, const at::Tensor & mat1, const at::Tensor & mat2, at::Scalar beta, at::Scalar alpha) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(mat1.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(mat1.is_contiguous());
  TORCH_INTERNAL_ASSERT(mat2.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(mat2.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_mat1 = bridge::shallowFallbackToCPUTensor(mat1);
  auto&& _ipex_mat2 = bridge::shallowFallbackToCPUTensor(mat2);
  auto&& _ipex_result = at::addmm(_ipex_self, _ipex_mat1, _ipex_mat2, beta, alpha);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::addmm_(at::Tensor & self, const at::Tensor & mat1, const at::Tensor & mat2, at::Scalar beta, at::Scalar alpha) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(mat1.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(mat1.is_contiguous());
  TORCH_INTERNAL_ASSERT(mat2.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(mat2.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_mat1 = bridge::shallowFallbackToCPUTensor(mat1);
  auto&& _ipex_mat2 = bridge::shallowFallbackToCPUTensor(mat2);
  auto&& _ipex_result = _ipex_self.addmm_(_ipex_mat1, _ipex_mat2, beta, alpha);
  self = bridge::shallowUpgradeToDPCPPTensor(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return self;
}

at::Tensor AtenIpexCPUDefault::sparse_coo_tensor(at::IntArrayRef size, const at::TensorOptions & options) {
  TORCH_INTERNAL_ASSERT(options.device().type() == at::DeviceType::DPCPP);
  at::TensorOptions _ipex_options = options.device(at::DeviceType::CPU);
  auto&& _ipex_result = at::sparse_coo_tensor(size, _ipex_options);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::sparse_coo_tensor(const at::Tensor & indices, const at::Tensor & values, const at::TensorOptions & options) {
  TORCH_INTERNAL_ASSERT(indices.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(indices.is_contiguous());
  TORCH_INTERNAL_ASSERT(values.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(values.is_contiguous());
  TORCH_INTERNAL_ASSERT(options.device().type() == at::DeviceType::DPCPP);
  at::TensorOptions _ipex_options = options.device(at::DeviceType::CPU);
  auto&& _ipex_indices = bridge::shallowFallbackToCPUTensor(indices);
  auto&& _ipex_values = bridge::shallowFallbackToCPUTensor(values);
  auto&& _ipex_result = at::sparse_coo_tensor(_ipex_indices, _ipex_values, _ipex_options);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::sparse_coo_tensor(const at::Tensor & indices, const at::Tensor & values, at::IntArrayRef size, const at::TensorOptions & options) {
  TORCH_INTERNAL_ASSERT(indices.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(indices.is_contiguous());
  TORCH_INTERNAL_ASSERT(values.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(values.is_contiguous());
  TORCH_INTERNAL_ASSERT(options.device().type() == at::DeviceType::DPCPP);
  at::TensorOptions _ipex_options = options.device(at::DeviceType::CPU);
  auto&& _ipex_indices = bridge::shallowFallbackToCPUTensor(indices);
  auto&& _ipex_values = bridge::shallowFallbackToCPUTensor(values);
  auto&& _ipex_result = at::sparse_coo_tensor(_ipex_indices, _ipex_values, size, _ipex_options);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::_sparse_coo_tensor_unsafe(const at::Tensor & indices, const at::Tensor & values, at::IntArrayRef size, const at::TensorOptions & options) {
  TORCH_INTERNAL_ASSERT(indices.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(indices.is_contiguous());
  TORCH_INTERNAL_ASSERT(values.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(values.is_contiguous());
  TORCH_INTERNAL_ASSERT(options.device().type() == at::DeviceType::DPCPP);
  at::TensorOptions _ipex_options = options.device(at::DeviceType::CPU);
  auto&& _ipex_indices = bridge::shallowFallbackToCPUTensor(indices);
  auto&& _ipex_values = bridge::shallowFallbackToCPUTensor(values);
  auto&& _ipex_result = at::_sparse_coo_tensor_unsafe(_ipex_indices, _ipex_values, size, _ipex_options);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::_sparse_coo_tensor_with_dims(int64_t sparse_dim, int64_t dense_dim, at::IntArrayRef size, const at::TensorOptions & options) {
  TORCH_INTERNAL_ASSERT(options.device().type() == at::DeviceType::DPCPP);
  at::TensorOptions _ipex_options = options.device(at::DeviceType::CPU);
  auto&& _ipex_result = at::_sparse_coo_tensor_with_dims(sparse_dim, dense_dim, size, _ipex_options);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::_sparse_coo_tensor_with_dims_and_tensors(int64_t sparse_dim, int64_t dense_dim, at::IntArrayRef size, const at::Tensor & indices, const at::Tensor & values, const at::TensorOptions & options) {
  TORCH_INTERNAL_ASSERT(indices.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(indices.is_contiguous());
  TORCH_INTERNAL_ASSERT(values.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(values.is_contiguous());
  TORCH_INTERNAL_ASSERT(options.device().type() == at::DeviceType::DPCPP);
  at::TensorOptions _ipex_options = options.device(at::DeviceType::CPU);
  auto&& _ipex_indices = bridge::shallowFallbackToCPUTensor(indices);
  auto&& _ipex_values = bridge::shallowFallbackToCPUTensor(values);
  auto&& _ipex_result = at::_sparse_coo_tensor_with_dims_and_tensors(sparse_dim, dense_dim, size, _ipex_indices, _ipex_values, _ipex_options);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::sparse_resize_(at::Tensor & self, at::IntArrayRef size, int64_t sparse_dim, int64_t dense_dim) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = _ipex_self.sparse_resize_(size, sparse_dim, dense_dim);
  self = bridge::shallowUpgradeToDPCPPTensor(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return self;
}

at::Tensor & AtenIpexCPUDefault::sparse_resize_and_clear_(at::Tensor & self, at::IntArrayRef size, int64_t sparse_dim, int64_t dense_dim) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = _ipex_self.sparse_resize_and_clear_(size, sparse_dim, dense_dim);
  self = bridge::shallowUpgradeToDPCPPTensor(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return self;
}

at::Tensor AtenIpexCPUDefault::sparse_mask(const at::Tensor & self, const at::Tensor & mask) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(mask.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(mask.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_mask = bridge::shallowFallbackToCPUTensor(mask);
  auto&& _ipex_result = _ipex_self.sparse_mask(_ipex_mask);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::to_dense(const at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = _ipex_self.to_dense();
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::to_dense_backward(const at::Tensor & grad, const at::Tensor & input) {
  TORCH_INTERNAL_ASSERT(grad.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad.is_contiguous());
  TORCH_INTERNAL_ASSERT(input.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(input.is_contiguous());
  auto&& _ipex_grad = bridge::shallowFallbackToCPUTensor(grad);
  auto&& _ipex_input = bridge::shallowFallbackToCPUTensor(input);
  auto&& _ipex_result = at::to_dense_backward(_ipex_grad, _ipex_input);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

int64_t AtenIpexCPUDefault::sparse_dim(const at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = _ipex_self.sparse_dim();
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return _ipex_result;
}

int64_t AtenIpexCPUDefault::_dimI(const at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = _ipex_self._dimI();
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return _ipex_result;
}

int64_t AtenIpexCPUDefault::dense_dim(const at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = _ipex_self.dense_dim();
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return _ipex_result;
}

int64_t AtenIpexCPUDefault::_dimV(const at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = _ipex_self._dimV();
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return _ipex_result;
}

int64_t AtenIpexCPUDefault::_nnz(const at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = _ipex_self._nnz();
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return _ipex_result;
}

at::Tensor AtenIpexCPUDefault::coalesce(const at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = _ipex_self.coalesce();
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

bool AtenIpexCPUDefault::is_coalesced(const at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = _ipex_self.is_coalesced();
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return _ipex_result;
}

at::Tensor AtenIpexCPUDefault::_indices(const at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = _ipex_self._indices();
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::_values(const at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = _ipex_self._values();
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::_coalesced_(at::Tensor & self, bool coalesced) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = _ipex_self._coalesced_(coalesced);
  self = bridge::shallowUpgradeToDPCPPTensor(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return self;
}

at::Tensor AtenIpexCPUDefault::indices(const at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = _ipex_self.indices();
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::values(const at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = _ipex_self.values();
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::hspmm_out(at::Tensor & out, const at::Tensor & mat1, const at::Tensor & mat2) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  TORCH_INTERNAL_ASSERT(mat1.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(mat1.is_contiguous());
  TORCH_INTERNAL_ASSERT(mat2.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(mat2.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_mat1 = bridge::shallowFallbackToCPUTensor(mat1);
  auto&& _ipex_mat2 = bridge::shallowFallbackToCPUTensor(mat2);
  auto&& _ipex_result = at::hspmm_out(_ipex_out, _ipex_mat1, _ipex_mat2);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor AtenIpexCPUDefault::hspmm(const at::Tensor & mat1, const at::Tensor & mat2) {
  TORCH_INTERNAL_ASSERT(mat1.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(mat1.is_contiguous());
  TORCH_INTERNAL_ASSERT(mat2.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(mat2.is_contiguous());
  auto&& _ipex_mat1 = bridge::shallowFallbackToCPUTensor(mat1);
  auto&& _ipex_mat2 = bridge::shallowFallbackToCPUTensor(mat2);
  auto&& _ipex_result = at::hspmm(_ipex_mat1, _ipex_mat2);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::copy_sparse_to_sparse_(at::Tensor & self, const at::Tensor & src, bool non_blocking) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(src.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(src.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_src = bridge::shallowFallbackToCPUTensor(src);
  auto&& _ipex_result = at::copy_sparse_to_sparse_(_ipex_self, _ipex_src, non_blocking);
  self = bridge::shallowUpgradeToDPCPPTensor(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return self;
}

std::vector<at::Tensor> AtenIpexCPUDefault::unbind(const at::Tensor & self, int64_t dim) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::unbind(_ipex_self, dim);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return bridge::upgradeToDPCPPTensorVec(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::to_sparse(const at::Tensor & self, int64_t sparse_dim) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = _ipex_self.to_sparse(sparse_dim);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::to_sparse(const at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = _ipex_self.to_sparse();
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::quantize_per_tensor(const at::Tensor & self, double scale, int64_t zero_point, at::ScalarType dtype) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::quantize_per_tensor(_ipex_self, scale, zero_point, dtype);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::quantize_per_channel(const at::Tensor & self, const at::Tensor & scales, const at::Tensor & zero_points, int64_t axis, at::ScalarType dtype) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(scales.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(scales.is_contiguous());
  TORCH_INTERNAL_ASSERT(zero_points.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(zero_points.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_scales = bridge::shallowFallbackToCPUTensor(scales);
  auto&& _ipex_zero_points = bridge::shallowFallbackToCPUTensor(zero_points);
  auto&& _ipex_result = at::quantize_per_channel(_ipex_self, _ipex_scales, _ipex_zero_points, axis, dtype);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::dequantize(const at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::dequantize(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

double AtenIpexCPUDefault::q_scale(const at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::q_scale(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return _ipex_result;
}

int64_t AtenIpexCPUDefault::q_zero_point(const at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::q_zero_point(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return _ipex_result;
}

at::Tensor AtenIpexCPUDefault::q_per_channel_scales(const at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::q_per_channel_scales(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::q_per_channel_zero_points(const at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::q_per_channel_zero_points(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

int64_t AtenIpexCPUDefault::q_per_channel_axis(const at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::q_per_channel_axis(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return _ipex_result;
}

at::Tensor AtenIpexCPUDefault::int_repr(const at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::int_repr(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::_make_per_tensor_quantized_tensor(const at::Tensor & self, double scale, int64_t zero_point) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::_make_per_tensor_quantized_tensor(_ipex_self, scale, zero_point);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::_make_per_channel_quantized_tensor(const at::Tensor & self, const at::Tensor & scale, const at::Tensor & zero_point, int64_t axis) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(scale.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(scale.is_contiguous());
  TORCH_INTERNAL_ASSERT(zero_point.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(zero_point.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_scale = bridge::shallowFallbackToCPUTensor(scale);
  auto&& _ipex_zero_point = bridge::shallowFallbackToCPUTensor(zero_point);
  auto&& _ipex_result = at::_make_per_channel_quantized_tensor(_ipex_self, _ipex_scale, _ipex_zero_point, axis);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::QScheme AtenIpexCPUDefault::qscheme(const at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = _ipex_self.qscheme();
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return _ipex_result;
}

at::Tensor AtenIpexCPUDefault::fake_quantize_per_tensor_affine(const at::Tensor & self, double scale, int64_t zero_point, int64_t quant_min, int64_t quant_max) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::fake_quantize_per_tensor_affine(_ipex_self, scale, zero_point, quant_min, quant_max);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::fake_quantize_per_tensor_affine_backward(const at::Tensor & grad, const at::Tensor & self, double scale, int64_t zero_point, int64_t quant_min, int64_t quant_max) {
  TORCH_INTERNAL_ASSERT(grad.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_grad = bridge::shallowFallbackToCPUTensor(grad);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::fake_quantize_per_tensor_affine_backward(_ipex_grad, _ipex_self, scale, zero_point, quant_min, quant_max);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::fake_quantize_per_channel_affine(const at::Tensor & self, const at::Tensor & scale, const at::Tensor & zero_point, int64_t axis, int64_t quant_min, int64_t quant_max) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(scale.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(scale.is_contiguous());
  TORCH_INTERNAL_ASSERT(zero_point.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(zero_point.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_scale = bridge::shallowFallbackToCPUTensor(scale);
  auto&& _ipex_zero_point = bridge::shallowFallbackToCPUTensor(zero_point);
  auto&& _ipex_result = at::fake_quantize_per_channel_affine(_ipex_self, _ipex_scale, _ipex_zero_point, axis, quant_min, quant_max);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::fake_quantize_per_channel_affine_backward(const at::Tensor & grad, const at::Tensor & self, const at::Tensor & scale, const at::Tensor & zero_point, int64_t axis, int64_t quant_min, int64_t quant_max) {
  TORCH_INTERNAL_ASSERT(grad.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(scale.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(scale.is_contiguous());
  TORCH_INTERNAL_ASSERT(zero_point.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(zero_point.is_contiguous());
  auto&& _ipex_grad = bridge::shallowFallbackToCPUTensor(grad);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_scale = bridge::shallowFallbackToCPUTensor(scale);
  auto&& _ipex_zero_point = bridge::shallowFallbackToCPUTensor(zero_point);
  auto&& _ipex_result = at::fake_quantize_per_channel_affine_backward(_ipex_grad, _ipex_self, _ipex_scale, _ipex_zero_point, axis, quant_min, quant_max);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::to(const at::Tensor & self, const at::TensorOptions & options, bool non_blocking, bool copy, c10::optional<at::MemoryFormat> memory_format) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(options.device().type() == at::DeviceType::DPCPP);
  at::TensorOptions _ipex_options = options.device(at::DeviceType::CPU);
  TORCH_INTERNAL_ASSERT(memory_format.value_or(c10::MemoryFormat::Contiguous) == c10::MemoryFormat::Contiguous);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = _ipex_self.to(_ipex_options, non_blocking, copy, memory_format);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::to(const at::Tensor & self, c10::Device device, at::ScalarType dtype, bool non_blocking, bool copy, c10::optional<at::MemoryFormat> memory_format) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(memory_format.value_or(c10::MemoryFormat::Contiguous) == c10::MemoryFormat::Contiguous);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = _ipex_self.to(device, dtype, non_blocking, copy, memory_format);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::to(const at::Tensor & self, at::ScalarType dtype, bool non_blocking, bool copy, c10::optional<at::MemoryFormat> memory_format) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(memory_format.value_or(c10::MemoryFormat::Contiguous) == c10::MemoryFormat::Contiguous);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = _ipex_self.to(dtype, non_blocking, copy, memory_format);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::to(const at::Tensor & self, const at::Tensor & other, bool non_blocking, bool copy, c10::optional<at::MemoryFormat> memory_format) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(other.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(other.is_contiguous());
  TORCH_INTERNAL_ASSERT(memory_format.value_or(c10::MemoryFormat::Contiguous) == c10::MemoryFormat::Contiguous);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_other = bridge::shallowFallbackToCPUTensor(other);
  auto&& _ipex_result = _ipex_self.to(_ipex_other, non_blocking, copy, memory_format);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

std::vector<at::Tensor> AtenIpexCPUDefault::meshgrid(at::TensorList tensors) {
  auto&& _ipex_tensors = bridge::shallowFallbackToCPUTensorList(tensors);
  auto&& _ipex_result = at::meshgrid(_ipex_tensors);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return bridge::upgradeToDPCPPTensorVec(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::cartesian_prod(at::TensorList tensors) {
  auto&& _ipex_tensors = bridge::shallowFallbackToCPUTensorList(tensors);
  auto&& _ipex_result = at::cartesian_prod(_ipex_tensors);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::combinations(const at::Tensor & self, int64_t r, bool with_replacement) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::combinations(_ipex_self, r, with_replacement);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Scalar AtenIpexCPUDefault::item(const at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = _ipex_self.item();
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return _ipex_result;
}

at::ScalarType AtenIpexCPUDefault::result_type(const at::Tensor & tensor, const at::Tensor & other) {
  TORCH_INTERNAL_ASSERT(tensor.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(tensor.is_contiguous());
  TORCH_INTERNAL_ASSERT(other.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(other.is_contiguous());
  auto&& _ipex_tensor = bridge::shallowFallbackToCPUTensor(tensor);
  auto&& _ipex_other = bridge::shallowFallbackToCPUTensor(other);
  auto&& _ipex_result = at::result_type(_ipex_tensor, _ipex_other);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return _ipex_result;
}

at::ScalarType AtenIpexCPUDefault::result_type(const at::Tensor & tensor, at::Scalar other) {
  TORCH_INTERNAL_ASSERT(tensor.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(tensor.is_contiguous());
  auto&& _ipex_tensor = bridge::shallowFallbackToCPUTensor(tensor);
  auto&& _ipex_result = at::result_type(_ipex_tensor, other);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return _ipex_result;
}

at::ScalarType AtenIpexCPUDefault::result_type(at::Scalar scalar, const at::Tensor & tensor) {
  TORCH_INTERNAL_ASSERT(tensor.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(tensor.is_contiguous());
  auto&& _ipex_tensor = bridge::shallowFallbackToCPUTensor(tensor);
  auto&& _ipex_result = at::result_type(scalar, _ipex_tensor);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return _ipex_result;
}

at::ScalarType AtenIpexCPUDefault::result_type(at::Scalar scalar1, at::Scalar scalar2) {
  auto&& _ipex_result = at::result_type(scalar1, scalar2);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return _ipex_result;
}

bool AtenIpexCPUDefault::can_cast(at::ScalarType from, at::ScalarType to) {
  auto&& _ipex_result = at::can_cast(from, to);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return _ipex_result;
}

at::ScalarType AtenIpexCPUDefault::promote_types(at::ScalarType type1, at::ScalarType type2) {
  auto&& _ipex_result = at::promote_types(type1, type2);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return _ipex_result;
}

at::Scalar AtenIpexCPUDefault::_local_scalar_dense(const at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::_local_scalar_dense(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return _ipex_result;
}

std::tuple<at::Tensor,at::Tensor,at::Tensor> AtenIpexCPUDefault::_thnn_fused_lstm_cell(const at::Tensor & input_gates, const at::Tensor & hidden_gates, const at::Tensor & cx, const at::Tensor & input_bias, const at::Tensor & hidden_bias) {
  TORCH_INTERNAL_ASSERT(input_gates.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(input_gates.is_contiguous());
  TORCH_INTERNAL_ASSERT(hidden_gates.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(hidden_gates.is_contiguous());
  TORCH_INTERNAL_ASSERT(cx.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(cx.is_contiguous());
  TORCH_INTERNAL_ASSERT(input_bias.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(input_bias.is_contiguous());
  TORCH_INTERNAL_ASSERT(hidden_bias.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(hidden_bias.is_contiguous());
  auto&& _ipex_input_gates = bridge::shallowFallbackToCPUTensor(input_gates);
  auto&& _ipex_hidden_gates = bridge::shallowFallbackToCPUTensor(hidden_gates);
  auto&& _ipex_cx = bridge::shallowFallbackToCPUTensor(cx);
  auto&& _ipex_input_bias = bridge::shallowFallbackToCPUTensor(input_bias);
  auto&& _ipex_hidden_bias = bridge::shallowFallbackToCPUTensor(hidden_bias);
  auto&& _ipex_result = at::_thnn_fused_lstm_cell(_ipex_input_gates, _ipex_hidden_gates, _ipex_cx, _ipex_input_bias, _ipex_hidden_bias);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return std::tuple<at::Tensor,at::Tensor,at::Tensor>(bridge::upgradeToDPCPPTensor(std::get<0>(_ipex_result)), bridge::upgradeToDPCPPTensor(std::get<1>(_ipex_result)), bridge::upgradeToDPCPPTensor(std::get<2>(_ipex_result)));
}

std::tuple<at::Tensor,at::Tensor,at::Tensor,at::Tensor,at::Tensor> AtenIpexCPUDefault::_thnn_fused_lstm_cell_backward(const at::Tensor & grad_hy, const at::Tensor & grad_cy, const at::Tensor & cx, const at::Tensor & cy, const at::Tensor & workspace, bool has_bias) {
  TORCH_INTERNAL_ASSERT(grad_hy.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_hy.is_contiguous());
  TORCH_INTERNAL_ASSERT(grad_cy.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_cy.is_contiguous());
  TORCH_INTERNAL_ASSERT(cx.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(cx.is_contiguous());
  TORCH_INTERNAL_ASSERT(cy.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(cy.is_contiguous());
  TORCH_INTERNAL_ASSERT(workspace.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(workspace.is_contiguous());
  auto&& _ipex_grad_hy = bridge::shallowFallbackToCPUTensor(grad_hy);
  auto&& _ipex_grad_cy = bridge::shallowFallbackToCPUTensor(grad_cy);
  auto&& _ipex_cx = bridge::shallowFallbackToCPUTensor(cx);
  auto&& _ipex_cy = bridge::shallowFallbackToCPUTensor(cy);
  auto&& _ipex_workspace = bridge::shallowFallbackToCPUTensor(workspace);
  auto&& _ipex_result = at::_thnn_fused_lstm_cell_backward(_ipex_grad_hy, _ipex_grad_cy, _ipex_cx, _ipex_cy, _ipex_workspace, has_bias);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return std::tuple<at::Tensor,at::Tensor,at::Tensor,at::Tensor,at::Tensor>(bridge::upgradeToDPCPPTensor(std::get<0>(_ipex_result)), bridge::upgradeToDPCPPTensor(std::get<1>(_ipex_result)), bridge::upgradeToDPCPPTensor(std::get<2>(_ipex_result)), bridge::upgradeToDPCPPTensor(std::get<3>(_ipex_result)), bridge::upgradeToDPCPPTensor(std::get<4>(_ipex_result)));
}

std::tuple<at::Tensor,at::Tensor,at::Tensor,at::Tensor,at::Tensor> AtenIpexCPUDefault::_thnn_differentiable_lstm_cell_backward(const at::Tensor & grad_hy, const at::Tensor & grad_cy, const at::Tensor & input_gates, const at::Tensor & hidden_gates, const at::Tensor & input_bias, const at::Tensor & hidden_bias, const at::Tensor & cx, const at::Tensor & cy) {
  TORCH_INTERNAL_ASSERT(grad_hy.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_hy.is_contiguous());
  TORCH_INTERNAL_ASSERT(grad_cy.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_cy.is_contiguous());
  TORCH_INTERNAL_ASSERT(input_gates.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(input_gates.is_contiguous());
  TORCH_INTERNAL_ASSERT(hidden_gates.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(hidden_gates.is_contiguous());
  TORCH_INTERNAL_ASSERT(input_bias.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(input_bias.is_contiguous());
  TORCH_INTERNAL_ASSERT(hidden_bias.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(hidden_bias.is_contiguous());
  TORCH_INTERNAL_ASSERT(cx.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(cx.is_contiguous());
  TORCH_INTERNAL_ASSERT(cy.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(cy.is_contiguous());
  auto&& _ipex_grad_hy = bridge::shallowFallbackToCPUTensor(grad_hy);
  auto&& _ipex_grad_cy = bridge::shallowFallbackToCPUTensor(grad_cy);
  auto&& _ipex_input_gates = bridge::shallowFallbackToCPUTensor(input_gates);
  auto&& _ipex_hidden_gates = bridge::shallowFallbackToCPUTensor(hidden_gates);
  auto&& _ipex_input_bias = bridge::shallowFallbackToCPUTensor(input_bias);
  auto&& _ipex_hidden_bias = bridge::shallowFallbackToCPUTensor(hidden_bias);
  auto&& _ipex_cx = bridge::shallowFallbackToCPUTensor(cx);
  auto&& _ipex_cy = bridge::shallowFallbackToCPUTensor(cy);
  auto&& _ipex_result = at::_thnn_differentiable_lstm_cell_backward(_ipex_grad_hy, _ipex_grad_cy, _ipex_input_gates, _ipex_hidden_gates, _ipex_input_bias, _ipex_hidden_bias, _ipex_cx, _ipex_cy);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return std::tuple<at::Tensor,at::Tensor,at::Tensor,at::Tensor,at::Tensor>(bridge::upgradeToDPCPPTensor(std::get<0>(_ipex_result)), bridge::upgradeToDPCPPTensor(std::get<1>(_ipex_result)), bridge::upgradeToDPCPPTensor(std::get<2>(_ipex_result)), bridge::upgradeToDPCPPTensor(std::get<3>(_ipex_result)), bridge::upgradeToDPCPPTensor(std::get<4>(_ipex_result)));
}

std::tuple<at::Tensor,at::Tensor> AtenIpexCPUDefault::_thnn_fused_gru_cell(const at::Tensor & input_gates, const at::Tensor & hidden_gates, const at::Tensor & hx, const at::Tensor & input_bias, const at::Tensor & hidden_bias) {
  TORCH_INTERNAL_ASSERT(input_gates.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(input_gates.is_contiguous());
  TORCH_INTERNAL_ASSERT(hidden_gates.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(hidden_gates.is_contiguous());
  TORCH_INTERNAL_ASSERT(hx.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(hx.is_contiguous());
  TORCH_INTERNAL_ASSERT(input_bias.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(input_bias.is_contiguous());
  TORCH_INTERNAL_ASSERT(hidden_bias.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(hidden_bias.is_contiguous());
  auto&& _ipex_input_gates = bridge::shallowFallbackToCPUTensor(input_gates);
  auto&& _ipex_hidden_gates = bridge::shallowFallbackToCPUTensor(hidden_gates);
  auto&& _ipex_hx = bridge::shallowFallbackToCPUTensor(hx);
  auto&& _ipex_input_bias = bridge::shallowFallbackToCPUTensor(input_bias);
  auto&& _ipex_hidden_bias = bridge::shallowFallbackToCPUTensor(hidden_bias);
  auto&& _ipex_result = at::_thnn_fused_gru_cell(_ipex_input_gates, _ipex_hidden_gates, _ipex_hx, _ipex_input_bias, _ipex_hidden_bias);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return std::tuple<at::Tensor,at::Tensor>(bridge::upgradeToDPCPPTensor(std::get<0>(_ipex_result)), bridge::upgradeToDPCPPTensor(std::get<1>(_ipex_result)));
}

std::tuple<at::Tensor,at::Tensor,at::Tensor,at::Tensor,at::Tensor> AtenIpexCPUDefault::_thnn_fused_gru_cell_backward(const at::Tensor & grad_hy, const at::Tensor & workspace, bool has_bias) {
  TORCH_INTERNAL_ASSERT(grad_hy.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_hy.is_contiguous());
  TORCH_INTERNAL_ASSERT(workspace.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(workspace.is_contiguous());
  auto&& _ipex_grad_hy = bridge::shallowFallbackToCPUTensor(grad_hy);
  auto&& _ipex_workspace = bridge::shallowFallbackToCPUTensor(workspace);
  auto&& _ipex_result = at::_thnn_fused_gru_cell_backward(_ipex_grad_hy, _ipex_workspace, has_bias);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return std::tuple<at::Tensor,at::Tensor,at::Tensor,at::Tensor,at::Tensor>(bridge::upgradeToDPCPPTensor(std::get<0>(_ipex_result)), bridge::upgradeToDPCPPTensor(std::get<1>(_ipex_result)), bridge::upgradeToDPCPPTensor(std::get<2>(_ipex_result)), bridge::upgradeToDPCPPTensor(std::get<3>(_ipex_result)), bridge::upgradeToDPCPPTensor(std::get<4>(_ipex_result)));
}

std::tuple<at::Tensor,at::Tensor,at::Tensor,at::Tensor,at::Tensor> AtenIpexCPUDefault::_thnn_differentiable_gru_cell_backward(const at::Tensor & grad_hy, const at::Tensor & input_gates, const at::Tensor & hidden_gates, const at::Tensor & hx, const at::Tensor & input_bias, const at::Tensor & hidden_bias) {
  TORCH_INTERNAL_ASSERT(grad_hy.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_hy.is_contiguous());
  TORCH_INTERNAL_ASSERT(input_gates.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(input_gates.is_contiguous());
  TORCH_INTERNAL_ASSERT(hidden_gates.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(hidden_gates.is_contiguous());
  TORCH_INTERNAL_ASSERT(hx.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(hx.is_contiguous());
  TORCH_INTERNAL_ASSERT(input_bias.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(input_bias.is_contiguous());
  TORCH_INTERNAL_ASSERT(hidden_bias.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(hidden_bias.is_contiguous());
  auto&& _ipex_grad_hy = bridge::shallowFallbackToCPUTensor(grad_hy);
  auto&& _ipex_input_gates = bridge::shallowFallbackToCPUTensor(input_gates);
  auto&& _ipex_hidden_gates = bridge::shallowFallbackToCPUTensor(hidden_gates);
  auto&& _ipex_hx = bridge::shallowFallbackToCPUTensor(hx);
  auto&& _ipex_input_bias = bridge::shallowFallbackToCPUTensor(input_bias);
  auto&& _ipex_hidden_bias = bridge::shallowFallbackToCPUTensor(hidden_bias);
  auto&& _ipex_result = at::_thnn_differentiable_gru_cell_backward(_ipex_grad_hy, _ipex_input_gates, _ipex_hidden_gates, _ipex_hx, _ipex_input_bias, _ipex_hidden_bias);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return std::tuple<at::Tensor,at::Tensor,at::Tensor,at::Tensor,at::Tensor>(bridge::upgradeToDPCPPTensor(std::get<0>(_ipex_result)), bridge::upgradeToDPCPPTensor(std::get<1>(_ipex_result)), bridge::upgradeToDPCPPTensor(std::get<2>(_ipex_result)), bridge::upgradeToDPCPPTensor(std::get<3>(_ipex_result)), bridge::upgradeToDPCPPTensor(std::get<4>(_ipex_result)));
}

std::tuple<at::Tensor,at::Tensor,at::Tensor> AtenIpexCPUDefault::lstm(const at::Tensor & input, at::TensorList hx, at::TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional, bool batch_first) {
  TORCH_INTERNAL_ASSERT(input.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(input.is_contiguous());
  auto&& _ipex_hx = bridge::shallowFallbackToCPUTensorList(hx);
  auto&& _ipex_params = bridge::shallowFallbackToCPUTensorList(params);
  auto&& _ipex_input = bridge::shallowFallbackToCPUTensor(input);
  auto&& _ipex_result = at::lstm(_ipex_input, _ipex_hx, _ipex_params, has_biases, num_layers, dropout, train, bidirectional, batch_first);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return std::tuple<at::Tensor,at::Tensor,at::Tensor>(bridge::upgradeToDPCPPTensor(std::get<0>(_ipex_result)), bridge::upgradeToDPCPPTensor(std::get<1>(_ipex_result)), bridge::upgradeToDPCPPTensor(std::get<2>(_ipex_result)));
}

std::tuple<at::Tensor,at::Tensor,at::Tensor> AtenIpexCPUDefault::lstm(const at::Tensor & data, const at::Tensor & batch_sizes, at::TensorList hx, at::TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional) {
  TORCH_INTERNAL_ASSERT(data.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(data.is_contiguous());
  TORCH_INTERNAL_ASSERT(batch_sizes.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(batch_sizes.is_contiguous());
  auto&& _ipex_hx = bridge::shallowFallbackToCPUTensorList(hx);
  auto&& _ipex_params = bridge::shallowFallbackToCPUTensorList(params);
  auto&& _ipex_data = bridge::shallowFallbackToCPUTensor(data);
  auto&& _ipex_batch_sizes = bridge::shallowFallbackToCPUTensor(batch_sizes);
  auto&& _ipex_result = at::lstm(_ipex_data, _ipex_batch_sizes, _ipex_hx, _ipex_params, has_biases, num_layers, dropout, train, bidirectional);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return std::tuple<at::Tensor,at::Tensor,at::Tensor>(bridge::upgradeToDPCPPTensor(std::get<0>(_ipex_result)), bridge::upgradeToDPCPPTensor(std::get<1>(_ipex_result)), bridge::upgradeToDPCPPTensor(std::get<2>(_ipex_result)));
}

std::tuple<at::Tensor,at::Tensor> AtenIpexCPUDefault::gru(const at::Tensor & input, const at::Tensor & hx, at::TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional, bool batch_first) {
  TORCH_INTERNAL_ASSERT(input.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(input.is_contiguous());
  TORCH_INTERNAL_ASSERT(hx.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(hx.is_contiguous());
  auto&& _ipex_params = bridge::shallowFallbackToCPUTensorList(params);
  auto&& _ipex_input = bridge::shallowFallbackToCPUTensor(input);
  auto&& _ipex_hx = bridge::shallowFallbackToCPUTensor(hx);
  auto&& _ipex_result = at::gru(_ipex_input, _ipex_hx, _ipex_params, has_biases, num_layers, dropout, train, bidirectional, batch_first);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return std::tuple<at::Tensor,at::Tensor>(bridge::upgradeToDPCPPTensor(std::get<0>(_ipex_result)), bridge::upgradeToDPCPPTensor(std::get<1>(_ipex_result)));
}

std::tuple<at::Tensor,at::Tensor> AtenIpexCPUDefault::gru(const at::Tensor & data, const at::Tensor & batch_sizes, const at::Tensor & hx, at::TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional) {
  TORCH_INTERNAL_ASSERT(data.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(data.is_contiguous());
  TORCH_INTERNAL_ASSERT(batch_sizes.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(batch_sizes.is_contiguous());
  TORCH_INTERNAL_ASSERT(hx.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(hx.is_contiguous());
  auto&& _ipex_params = bridge::shallowFallbackToCPUTensorList(params);
  auto&& _ipex_data = bridge::shallowFallbackToCPUTensor(data);
  auto&& _ipex_batch_sizes = bridge::shallowFallbackToCPUTensor(batch_sizes);
  auto&& _ipex_hx = bridge::shallowFallbackToCPUTensor(hx);
  auto&& _ipex_result = at::gru(_ipex_data, _ipex_batch_sizes, _ipex_hx, _ipex_params, has_biases, num_layers, dropout, train, bidirectional);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return std::tuple<at::Tensor,at::Tensor>(bridge::upgradeToDPCPPTensor(std::get<0>(_ipex_result)), bridge::upgradeToDPCPPTensor(std::get<1>(_ipex_result)));
}

std::tuple<at::Tensor,at::Tensor> AtenIpexCPUDefault::rnn_tanh(const at::Tensor & input, const at::Tensor & hx, at::TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional, bool batch_first) {
  TORCH_INTERNAL_ASSERT(input.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(input.is_contiguous());
  TORCH_INTERNAL_ASSERT(hx.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(hx.is_contiguous());
  auto&& _ipex_params = bridge::shallowFallbackToCPUTensorList(params);
  auto&& _ipex_input = bridge::shallowFallbackToCPUTensor(input);
  auto&& _ipex_hx = bridge::shallowFallbackToCPUTensor(hx);
  auto&& _ipex_result = at::rnn_tanh(_ipex_input, _ipex_hx, _ipex_params, has_biases, num_layers, dropout, train, bidirectional, batch_first);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return std::tuple<at::Tensor,at::Tensor>(bridge::upgradeToDPCPPTensor(std::get<0>(_ipex_result)), bridge::upgradeToDPCPPTensor(std::get<1>(_ipex_result)));
}

std::tuple<at::Tensor,at::Tensor> AtenIpexCPUDefault::rnn_tanh(const at::Tensor & data, const at::Tensor & batch_sizes, const at::Tensor & hx, at::TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional) {
  TORCH_INTERNAL_ASSERT(data.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(data.is_contiguous());
  TORCH_INTERNAL_ASSERT(batch_sizes.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(batch_sizes.is_contiguous());
  TORCH_INTERNAL_ASSERT(hx.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(hx.is_contiguous());
  auto&& _ipex_params = bridge::shallowFallbackToCPUTensorList(params);
  auto&& _ipex_data = bridge::shallowFallbackToCPUTensor(data);
  auto&& _ipex_batch_sizes = bridge::shallowFallbackToCPUTensor(batch_sizes);
  auto&& _ipex_hx = bridge::shallowFallbackToCPUTensor(hx);
  auto&& _ipex_result = at::rnn_tanh(_ipex_data, _ipex_batch_sizes, _ipex_hx, _ipex_params, has_biases, num_layers, dropout, train, bidirectional);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return std::tuple<at::Tensor,at::Tensor>(bridge::upgradeToDPCPPTensor(std::get<0>(_ipex_result)), bridge::upgradeToDPCPPTensor(std::get<1>(_ipex_result)));
}

std::tuple<at::Tensor,at::Tensor> AtenIpexCPUDefault::rnn_relu(const at::Tensor & input, const at::Tensor & hx, at::TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional, bool batch_first) {
  TORCH_INTERNAL_ASSERT(input.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(input.is_contiguous());
  TORCH_INTERNAL_ASSERT(hx.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(hx.is_contiguous());
  auto&& _ipex_params = bridge::shallowFallbackToCPUTensorList(params);
  auto&& _ipex_input = bridge::shallowFallbackToCPUTensor(input);
  auto&& _ipex_hx = bridge::shallowFallbackToCPUTensor(hx);
  auto&& _ipex_result = at::rnn_relu(_ipex_input, _ipex_hx, _ipex_params, has_biases, num_layers, dropout, train, bidirectional, batch_first);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return std::tuple<at::Tensor,at::Tensor>(bridge::upgradeToDPCPPTensor(std::get<0>(_ipex_result)), bridge::upgradeToDPCPPTensor(std::get<1>(_ipex_result)));
}

std::tuple<at::Tensor,at::Tensor> AtenIpexCPUDefault::rnn_relu(const at::Tensor & data, const at::Tensor & batch_sizes, const at::Tensor & hx, at::TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional) {
  TORCH_INTERNAL_ASSERT(data.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(data.is_contiguous());
  TORCH_INTERNAL_ASSERT(batch_sizes.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(batch_sizes.is_contiguous());
  TORCH_INTERNAL_ASSERT(hx.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(hx.is_contiguous());
  auto&& _ipex_params = bridge::shallowFallbackToCPUTensorList(params);
  auto&& _ipex_data = bridge::shallowFallbackToCPUTensor(data);
  auto&& _ipex_batch_sizes = bridge::shallowFallbackToCPUTensor(batch_sizes);
  auto&& _ipex_hx = bridge::shallowFallbackToCPUTensor(hx);
  auto&& _ipex_result = at::rnn_relu(_ipex_data, _ipex_batch_sizes, _ipex_hx, _ipex_params, has_biases, num_layers, dropout, train, bidirectional);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return std::tuple<at::Tensor,at::Tensor>(bridge::upgradeToDPCPPTensor(std::get<0>(_ipex_result)), bridge::upgradeToDPCPPTensor(std::get<1>(_ipex_result)));
}

std::tuple<at::Tensor,at::Tensor> AtenIpexCPUDefault::lstm_cell(const at::Tensor & input, at::TensorList hx, const at::Tensor & w_ih, const at::Tensor & w_hh, const at::Tensor & b_ih, const at::Tensor & b_hh) {
  TORCH_INTERNAL_ASSERT(input.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(input.is_contiguous());
  auto&& _ipex_hx = bridge::shallowFallbackToCPUTensorList(hx);
  TORCH_INTERNAL_ASSERT(w_ih.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(w_ih.is_contiguous());
  TORCH_INTERNAL_ASSERT(w_hh.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(w_hh.is_contiguous());
  TORCH_INTERNAL_ASSERT(b_ih.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(b_ih.is_contiguous());
  TORCH_INTERNAL_ASSERT(b_hh.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(b_hh.is_contiguous());
  auto&& _ipex_input = bridge::shallowFallbackToCPUTensor(input);
  auto&& _ipex_w_ih = bridge::shallowFallbackToCPUTensor(w_ih);
  auto&& _ipex_w_hh = bridge::shallowFallbackToCPUTensor(w_hh);
  auto&& _ipex_b_ih = bridge::shallowFallbackToCPUTensor(b_ih);
  auto&& _ipex_b_hh = bridge::shallowFallbackToCPUTensor(b_hh);
  auto&& _ipex_result = at::lstm_cell(_ipex_input, _ipex_hx, _ipex_w_ih, _ipex_w_hh, _ipex_b_ih, _ipex_b_hh);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return std::tuple<at::Tensor,at::Tensor>(bridge::upgradeToDPCPPTensor(std::get<0>(_ipex_result)), bridge::upgradeToDPCPPTensor(std::get<1>(_ipex_result)));
}

at::Tensor AtenIpexCPUDefault::gru_cell(const at::Tensor & input, const at::Tensor & hx, const at::Tensor & w_ih, const at::Tensor & w_hh, const at::Tensor & b_ih, const at::Tensor & b_hh) {
  TORCH_INTERNAL_ASSERT(input.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(input.is_contiguous());
  TORCH_INTERNAL_ASSERT(hx.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(hx.is_contiguous());
  TORCH_INTERNAL_ASSERT(w_ih.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(w_ih.is_contiguous());
  TORCH_INTERNAL_ASSERT(w_hh.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(w_hh.is_contiguous());
  TORCH_INTERNAL_ASSERT(b_ih.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(b_ih.is_contiguous());
  TORCH_INTERNAL_ASSERT(b_hh.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(b_hh.is_contiguous());
  auto&& _ipex_input = bridge::shallowFallbackToCPUTensor(input);
  auto&& _ipex_hx = bridge::shallowFallbackToCPUTensor(hx);
  auto&& _ipex_w_ih = bridge::shallowFallbackToCPUTensor(w_ih);
  auto&& _ipex_w_hh = bridge::shallowFallbackToCPUTensor(w_hh);
  auto&& _ipex_b_ih = bridge::shallowFallbackToCPUTensor(b_ih);
  auto&& _ipex_b_hh = bridge::shallowFallbackToCPUTensor(b_hh);
  auto&& _ipex_result = at::gru_cell(_ipex_input, _ipex_hx, _ipex_w_ih, _ipex_w_hh, _ipex_b_ih, _ipex_b_hh);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::rnn_tanh_cell(const at::Tensor & input, const at::Tensor & hx, const at::Tensor & w_ih, const at::Tensor & w_hh, const at::Tensor & b_ih, const at::Tensor & b_hh) {
  TORCH_INTERNAL_ASSERT(input.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(input.is_contiguous());
  TORCH_INTERNAL_ASSERT(hx.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(hx.is_contiguous());
  TORCH_INTERNAL_ASSERT(w_ih.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(w_ih.is_contiguous());
  TORCH_INTERNAL_ASSERT(w_hh.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(w_hh.is_contiguous());
  TORCH_INTERNAL_ASSERT(b_ih.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(b_ih.is_contiguous());
  TORCH_INTERNAL_ASSERT(b_hh.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(b_hh.is_contiguous());
  auto&& _ipex_input = bridge::shallowFallbackToCPUTensor(input);
  auto&& _ipex_hx = bridge::shallowFallbackToCPUTensor(hx);
  auto&& _ipex_w_ih = bridge::shallowFallbackToCPUTensor(w_ih);
  auto&& _ipex_w_hh = bridge::shallowFallbackToCPUTensor(w_hh);
  auto&& _ipex_b_ih = bridge::shallowFallbackToCPUTensor(b_ih);
  auto&& _ipex_b_hh = bridge::shallowFallbackToCPUTensor(b_hh);
  auto&& _ipex_result = at::rnn_tanh_cell(_ipex_input, _ipex_hx, _ipex_w_ih, _ipex_w_hh, _ipex_b_ih, _ipex_b_hh);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::rnn_relu_cell(const at::Tensor & input, const at::Tensor & hx, const at::Tensor & w_ih, const at::Tensor & w_hh, const at::Tensor & b_ih, const at::Tensor & b_hh) {
  TORCH_INTERNAL_ASSERT(input.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(input.is_contiguous());
  TORCH_INTERNAL_ASSERT(hx.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(hx.is_contiguous());
  TORCH_INTERNAL_ASSERT(w_ih.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(w_ih.is_contiguous());
  TORCH_INTERNAL_ASSERT(w_hh.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(w_hh.is_contiguous());
  TORCH_INTERNAL_ASSERT(b_ih.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(b_ih.is_contiguous());
  TORCH_INTERNAL_ASSERT(b_hh.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(b_hh.is_contiguous());
  auto&& _ipex_input = bridge::shallowFallbackToCPUTensor(input);
  auto&& _ipex_hx = bridge::shallowFallbackToCPUTensor(hx);
  auto&& _ipex_w_ih = bridge::shallowFallbackToCPUTensor(w_ih);
  auto&& _ipex_w_hh = bridge::shallowFallbackToCPUTensor(w_hh);
  auto&& _ipex_b_ih = bridge::shallowFallbackToCPUTensor(b_ih);
  auto&& _ipex_b_hh = bridge::shallowFallbackToCPUTensor(b_hh);
  auto&& _ipex_result = at::rnn_relu_cell(_ipex_input, _ipex_hx, _ipex_w_ih, _ipex_w_hh, _ipex_b_ih, _ipex_b_hh);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

std::tuple<at::Tensor,at::Tensor,at::Tensor> AtenIpexCPUDefault::quantized_lstm(const at::Tensor & input, at::TensorList hx, at::TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional, bool batch_first, c10::optional<at::ScalarType> dtype, bool use_dynamic) {
  TORCH_INTERNAL_ASSERT(input.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(input.is_contiguous());
  auto&& _ipex_hx = bridge::shallowFallbackToCPUTensorList(hx);
  auto&& _ipex_params = bridge::shallowFallbackToCPUTensorList(params);
  auto&& _ipex_input = bridge::shallowFallbackToCPUTensor(input);
  auto&& _ipex_result = at::quantized_lstm(_ipex_input, _ipex_hx, _ipex_params, has_biases, num_layers, dropout, train, bidirectional, batch_first, dtype, use_dynamic);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return std::tuple<at::Tensor,at::Tensor,at::Tensor>(bridge::upgradeToDPCPPTensor(std::get<0>(_ipex_result)), bridge::upgradeToDPCPPTensor(std::get<1>(_ipex_result)), bridge::upgradeToDPCPPTensor(std::get<2>(_ipex_result)));
}

std::tuple<at::Tensor,at::Tensor> AtenIpexCPUDefault::quantized_gru(const at::Tensor & input, const at::Tensor & hx, at::TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional, bool batch_first) {
  TORCH_INTERNAL_ASSERT(input.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(input.is_contiguous());
  TORCH_INTERNAL_ASSERT(hx.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(hx.is_contiguous());
  auto&& _ipex_params = bridge::shallowFallbackToCPUTensorList(params);
  auto&& _ipex_input = bridge::shallowFallbackToCPUTensor(input);
  auto&& _ipex_hx = bridge::shallowFallbackToCPUTensor(hx);
  auto&& _ipex_result = at::quantized_gru(_ipex_input, _ipex_hx, _ipex_params, has_biases, num_layers, dropout, train, bidirectional, batch_first);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return std::tuple<at::Tensor,at::Tensor>(bridge::upgradeToDPCPPTensor(std::get<0>(_ipex_result)), bridge::upgradeToDPCPPTensor(std::get<1>(_ipex_result)));
}

std::tuple<at::Tensor,at::Tensor> AtenIpexCPUDefault::quantized_gru(const at::Tensor & data, const at::Tensor & batch_sizes, const at::Tensor & hx, at::TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional) {
  TORCH_INTERNAL_ASSERT(data.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(data.is_contiguous());
  TORCH_INTERNAL_ASSERT(batch_sizes.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(batch_sizes.is_contiguous());
  TORCH_INTERNAL_ASSERT(hx.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(hx.is_contiguous());
  auto&& _ipex_params = bridge::shallowFallbackToCPUTensorList(params);
  auto&& _ipex_data = bridge::shallowFallbackToCPUTensor(data);
  auto&& _ipex_batch_sizes = bridge::shallowFallbackToCPUTensor(batch_sizes);
  auto&& _ipex_hx = bridge::shallowFallbackToCPUTensor(hx);
  auto&& _ipex_result = at::quantized_gru(_ipex_data, _ipex_batch_sizes, _ipex_hx, _ipex_params, has_biases, num_layers, dropout, train, bidirectional);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return std::tuple<at::Tensor,at::Tensor>(bridge::upgradeToDPCPPTensor(std::get<0>(_ipex_result)), bridge::upgradeToDPCPPTensor(std::get<1>(_ipex_result)));
}

std::tuple<at::Tensor,at::Tensor> AtenIpexCPUDefault::quantized_lstm_cell(const at::Tensor & input, at::TensorList hx, const at::Tensor & w_ih, const at::Tensor & w_hh, const at::Tensor & b_ih, const at::Tensor & b_hh, const at::Tensor & packed_ih, const at::Tensor & packed_hh, const at::Tensor & col_offsets_ih, const at::Tensor & col_offsets_hh, at::Scalar scale_ih, at::Scalar scale_hh, at::Scalar zero_point_ih, at::Scalar zero_point_hh) {
  TORCH_INTERNAL_ASSERT(input.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(input.is_contiguous());
  auto&& _ipex_hx = bridge::shallowFallbackToCPUTensorList(hx);
  TORCH_INTERNAL_ASSERT(w_ih.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(w_ih.is_contiguous());
  TORCH_INTERNAL_ASSERT(w_hh.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(w_hh.is_contiguous());
  TORCH_INTERNAL_ASSERT(b_ih.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(b_ih.is_contiguous());
  TORCH_INTERNAL_ASSERT(b_hh.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(b_hh.is_contiguous());
  TORCH_INTERNAL_ASSERT(packed_ih.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(packed_ih.is_contiguous());
  TORCH_INTERNAL_ASSERT(packed_hh.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(packed_hh.is_contiguous());
  TORCH_INTERNAL_ASSERT(col_offsets_ih.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(col_offsets_ih.is_contiguous());
  TORCH_INTERNAL_ASSERT(col_offsets_hh.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(col_offsets_hh.is_contiguous());
  auto&& _ipex_input = bridge::shallowFallbackToCPUTensor(input);
  auto&& _ipex_w_ih = bridge::shallowFallbackToCPUTensor(w_ih);
  auto&& _ipex_w_hh = bridge::shallowFallbackToCPUTensor(w_hh);
  auto&& _ipex_b_ih = bridge::shallowFallbackToCPUTensor(b_ih);
  auto&& _ipex_b_hh = bridge::shallowFallbackToCPUTensor(b_hh);
  auto&& _ipex_packed_ih = bridge::shallowFallbackToCPUTensor(packed_ih);
  auto&& _ipex_packed_hh = bridge::shallowFallbackToCPUTensor(packed_hh);
  auto&& _ipex_col_offsets_ih = bridge::shallowFallbackToCPUTensor(col_offsets_ih);
  auto&& _ipex_col_offsets_hh = bridge::shallowFallbackToCPUTensor(col_offsets_hh);
  auto&& _ipex_result = at::quantized_lstm_cell(_ipex_input, _ipex_hx, _ipex_w_ih, _ipex_w_hh, _ipex_b_ih, _ipex_b_hh, _ipex_packed_ih, _ipex_packed_hh, _ipex_col_offsets_ih, _ipex_col_offsets_hh, scale_ih, scale_hh, zero_point_ih, zero_point_hh);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return std::tuple<at::Tensor,at::Tensor>(bridge::upgradeToDPCPPTensor(std::get<0>(_ipex_result)), bridge::upgradeToDPCPPTensor(std::get<1>(_ipex_result)));
}

at::Tensor AtenIpexCPUDefault::quantized_gru_cell(const at::Tensor & input, const at::Tensor & hx, const at::Tensor & w_ih, const at::Tensor & w_hh, const at::Tensor & b_ih, const at::Tensor & b_hh, const at::Tensor & packed_ih, const at::Tensor & packed_hh, const at::Tensor & col_offsets_ih, const at::Tensor & col_offsets_hh, at::Scalar scale_ih, at::Scalar scale_hh, at::Scalar zero_point_ih, at::Scalar zero_point_hh) {
  TORCH_INTERNAL_ASSERT(input.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(input.is_contiguous());
  TORCH_INTERNAL_ASSERT(hx.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(hx.is_contiguous());
  TORCH_INTERNAL_ASSERT(w_ih.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(w_ih.is_contiguous());
  TORCH_INTERNAL_ASSERT(w_hh.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(w_hh.is_contiguous());
  TORCH_INTERNAL_ASSERT(b_ih.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(b_ih.is_contiguous());
  TORCH_INTERNAL_ASSERT(b_hh.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(b_hh.is_contiguous());
  TORCH_INTERNAL_ASSERT(packed_ih.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(packed_ih.is_contiguous());
  TORCH_INTERNAL_ASSERT(packed_hh.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(packed_hh.is_contiguous());
  TORCH_INTERNAL_ASSERT(col_offsets_ih.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(col_offsets_ih.is_contiguous());
  TORCH_INTERNAL_ASSERT(col_offsets_hh.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(col_offsets_hh.is_contiguous());
  auto&& _ipex_input = bridge::shallowFallbackToCPUTensor(input);
  auto&& _ipex_hx = bridge::shallowFallbackToCPUTensor(hx);
  auto&& _ipex_w_ih = bridge::shallowFallbackToCPUTensor(w_ih);
  auto&& _ipex_w_hh = bridge::shallowFallbackToCPUTensor(w_hh);
  auto&& _ipex_b_ih = bridge::shallowFallbackToCPUTensor(b_ih);
  auto&& _ipex_b_hh = bridge::shallowFallbackToCPUTensor(b_hh);
  auto&& _ipex_packed_ih = bridge::shallowFallbackToCPUTensor(packed_ih);
  auto&& _ipex_packed_hh = bridge::shallowFallbackToCPUTensor(packed_hh);
  auto&& _ipex_col_offsets_ih = bridge::shallowFallbackToCPUTensor(col_offsets_ih);
  auto&& _ipex_col_offsets_hh = bridge::shallowFallbackToCPUTensor(col_offsets_hh);
  auto&& _ipex_result = at::quantized_gru_cell(_ipex_input, _ipex_hx, _ipex_w_ih, _ipex_w_hh, _ipex_b_ih, _ipex_b_hh, _ipex_packed_ih, _ipex_packed_hh, _ipex_col_offsets_ih, _ipex_col_offsets_hh, scale_ih, scale_hh, zero_point_ih, zero_point_hh);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::quantized_rnn_relu_cell(const at::Tensor & input, const at::Tensor & hx, const at::Tensor & w_ih, const at::Tensor & w_hh, const at::Tensor & b_ih, const at::Tensor & b_hh, const at::Tensor & packed_ih, const at::Tensor & packed_hh, const at::Tensor & col_offsets_ih, const at::Tensor & col_offsets_hh, at::Scalar scale_ih, at::Scalar scale_hh, at::Scalar zero_point_ih, at::Scalar zero_point_hh) {
  TORCH_INTERNAL_ASSERT(input.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(input.is_contiguous());
  TORCH_INTERNAL_ASSERT(hx.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(hx.is_contiguous());
  TORCH_INTERNAL_ASSERT(w_ih.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(w_ih.is_contiguous());
  TORCH_INTERNAL_ASSERT(w_hh.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(w_hh.is_contiguous());
  TORCH_INTERNAL_ASSERT(b_ih.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(b_ih.is_contiguous());
  TORCH_INTERNAL_ASSERT(b_hh.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(b_hh.is_contiguous());
  TORCH_INTERNAL_ASSERT(packed_ih.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(packed_ih.is_contiguous());
  TORCH_INTERNAL_ASSERT(packed_hh.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(packed_hh.is_contiguous());
  TORCH_INTERNAL_ASSERT(col_offsets_ih.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(col_offsets_ih.is_contiguous());
  TORCH_INTERNAL_ASSERT(col_offsets_hh.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(col_offsets_hh.is_contiguous());
  auto&& _ipex_input = bridge::shallowFallbackToCPUTensor(input);
  auto&& _ipex_hx = bridge::shallowFallbackToCPUTensor(hx);
  auto&& _ipex_w_ih = bridge::shallowFallbackToCPUTensor(w_ih);
  auto&& _ipex_w_hh = bridge::shallowFallbackToCPUTensor(w_hh);
  auto&& _ipex_b_ih = bridge::shallowFallbackToCPUTensor(b_ih);
  auto&& _ipex_b_hh = bridge::shallowFallbackToCPUTensor(b_hh);
  auto&& _ipex_packed_ih = bridge::shallowFallbackToCPUTensor(packed_ih);
  auto&& _ipex_packed_hh = bridge::shallowFallbackToCPUTensor(packed_hh);
  auto&& _ipex_col_offsets_ih = bridge::shallowFallbackToCPUTensor(col_offsets_ih);
  auto&& _ipex_col_offsets_hh = bridge::shallowFallbackToCPUTensor(col_offsets_hh);
  auto&& _ipex_result = at::quantized_rnn_relu_cell(_ipex_input, _ipex_hx, _ipex_w_ih, _ipex_w_hh, _ipex_b_ih, _ipex_b_hh, _ipex_packed_ih, _ipex_packed_hh, _ipex_col_offsets_ih, _ipex_col_offsets_hh, scale_ih, scale_hh, zero_point_ih, zero_point_hh);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::quantized_rnn_tanh_cell(const at::Tensor & input, const at::Tensor & hx, const at::Tensor & w_ih, const at::Tensor & w_hh, const at::Tensor & b_ih, const at::Tensor & b_hh, const at::Tensor & packed_ih, const at::Tensor & packed_hh, const at::Tensor & col_offsets_ih, const at::Tensor & col_offsets_hh, at::Scalar scale_ih, at::Scalar scale_hh, at::Scalar zero_point_ih, at::Scalar zero_point_hh) {
  TORCH_INTERNAL_ASSERT(input.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(input.is_contiguous());
  TORCH_INTERNAL_ASSERT(hx.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(hx.is_contiguous());
  TORCH_INTERNAL_ASSERT(w_ih.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(w_ih.is_contiguous());
  TORCH_INTERNAL_ASSERT(w_hh.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(w_hh.is_contiguous());
  TORCH_INTERNAL_ASSERT(b_ih.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(b_ih.is_contiguous());
  TORCH_INTERNAL_ASSERT(b_hh.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(b_hh.is_contiguous());
  TORCH_INTERNAL_ASSERT(packed_ih.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(packed_ih.is_contiguous());
  TORCH_INTERNAL_ASSERT(packed_hh.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(packed_hh.is_contiguous());
  TORCH_INTERNAL_ASSERT(col_offsets_ih.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(col_offsets_ih.is_contiguous());
  TORCH_INTERNAL_ASSERT(col_offsets_hh.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(col_offsets_hh.is_contiguous());
  auto&& _ipex_input = bridge::shallowFallbackToCPUTensor(input);
  auto&& _ipex_hx = bridge::shallowFallbackToCPUTensor(hx);
  auto&& _ipex_w_ih = bridge::shallowFallbackToCPUTensor(w_ih);
  auto&& _ipex_w_hh = bridge::shallowFallbackToCPUTensor(w_hh);
  auto&& _ipex_b_ih = bridge::shallowFallbackToCPUTensor(b_ih);
  auto&& _ipex_b_hh = bridge::shallowFallbackToCPUTensor(b_hh);
  auto&& _ipex_packed_ih = bridge::shallowFallbackToCPUTensor(packed_ih);
  auto&& _ipex_packed_hh = bridge::shallowFallbackToCPUTensor(packed_hh);
  auto&& _ipex_col_offsets_ih = bridge::shallowFallbackToCPUTensor(col_offsets_ih);
  auto&& _ipex_col_offsets_hh = bridge::shallowFallbackToCPUTensor(col_offsets_hh);
  auto&& _ipex_result = at::quantized_rnn_tanh_cell(_ipex_input, _ipex_hx, _ipex_w_ih, _ipex_w_hh, _ipex_b_ih, _ipex_b_hh, _ipex_packed_ih, _ipex_packed_hh, _ipex_col_offsets_ih, _ipex_col_offsets_hh, scale_ih, scale_hh, zero_point_ih, zero_point_hh);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

std::tuple<at::Tensor,at::Tensor> AtenIpexCPUDefault::_pack_padded_sequence(const at::Tensor & input, const at::Tensor & lengths, bool batch_first) {
  TORCH_INTERNAL_ASSERT(input.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(input.is_contiguous());
  TORCH_INTERNAL_ASSERT(lengths.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(lengths.is_contiguous());
  auto&& _ipex_input = bridge::shallowFallbackToCPUTensor(input);
  auto&& _ipex_lengths = bridge::shallowFallbackToCPUTensor(lengths);
  auto&& _ipex_result = at::_pack_padded_sequence(_ipex_input, _ipex_lengths, batch_first);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return std::tuple<at::Tensor,at::Tensor>(bridge::upgradeToDPCPPTensor(std::get<0>(_ipex_result)), bridge::upgradeToDPCPPTensor(std::get<1>(_ipex_result)));
}

at::Tensor AtenIpexCPUDefault::_pack_padded_sequence_backward(const at::Tensor & grad, at::IntArrayRef input_size, const at::Tensor & batch_sizes, bool batch_first) {
  TORCH_INTERNAL_ASSERT(grad.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad.is_contiguous());
  TORCH_INTERNAL_ASSERT(batch_sizes.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(batch_sizes.is_contiguous());
  auto&& _ipex_grad = bridge::shallowFallbackToCPUTensor(grad);
  auto&& _ipex_batch_sizes = bridge::shallowFallbackToCPUTensor(batch_sizes);
  auto&& _ipex_result = at::_pack_padded_sequence_backward(_ipex_grad, input_size, _ipex_batch_sizes, batch_first);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

std::tuple<at::Tensor,at::Tensor> AtenIpexCPUDefault::_pad_packed_sequence(const at::Tensor & data, const at::Tensor & batch_sizes, bool batch_first, at::Scalar padding_value, int64_t total_length) {
  TORCH_INTERNAL_ASSERT(data.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(data.is_contiguous());
  TORCH_INTERNAL_ASSERT(batch_sizes.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(batch_sizes.is_contiguous());
  auto&& _ipex_data = bridge::shallowFallbackToCPUTensor(data);
  auto&& _ipex_batch_sizes = bridge::shallowFallbackToCPUTensor(batch_sizes);
  auto&& _ipex_result = at::_pad_packed_sequence(_ipex_data, _ipex_batch_sizes, batch_first, padding_value, total_length);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return std::tuple<at::Tensor,at::Tensor>(bridge::upgradeToDPCPPTensor(std::get<0>(_ipex_result)), bridge::upgradeToDPCPPTensor(std::get<1>(_ipex_result)));
}

at::Tensor & AtenIpexCPUDefault::set_(at::Tensor & self, at::Storage source) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(source.device_type() == c10::DeviceType::DPCPP);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = _ipex_self.set_(source);
  self = bridge::shallowUpgradeToDPCPPTensor(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return self;
}

at::Tensor & AtenIpexCPUDefault::set_(at::Tensor & self, at::Storage source, int64_t storage_offset, at::IntArrayRef size, at::IntArrayRef stride) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(source.device_type() == c10::DeviceType::DPCPP);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = _ipex_self.set_(source, storage_offset, size, stride);
  self = bridge::shallowUpgradeToDPCPPTensor(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return self;
}

at::Tensor & AtenIpexCPUDefault::set_(at::Tensor & self, const at::Tensor & source) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(source.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(source.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_source = bridge::shallowFallbackToCPUTensor(source);
  auto&& _ipex_result = _ipex_self.set_(_ipex_source);
  self = bridge::shallowUpgradeToDPCPPTensor(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return self;
}

at::Tensor & AtenIpexCPUDefault::set_(at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = _ipex_self.set_();
  self = bridge::shallowUpgradeToDPCPPTensor(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return self;
}

at::Tensor & AtenIpexCPUDefault::set_quantizer_(at::Tensor & self, at::ConstQuantizerPtr quantizer) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = _ipex_self.set_quantizer_(quantizer);
  self = bridge::shallowUpgradeToDPCPPTensor(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return self;
}

bool AtenIpexCPUDefault::is_set_to(const at::Tensor & self, const at::Tensor & tensor) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(tensor.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(tensor.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_tensor = bridge::shallowFallbackToCPUTensor(tensor);
  auto&& _ipex_result = _ipex_self.is_set_to(_ipex_tensor);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return _ipex_result;
}

at::Tensor & AtenIpexCPUDefault::masked_fill_(at::Tensor & self, const at::Tensor & mask, at::Scalar value) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(mask.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(mask.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_mask = bridge::shallowFallbackToCPUTensor(mask);
  auto&& _ipex_result = _ipex_self.masked_fill_(_ipex_mask, value);
  self = bridge::shallowUpgradeToDPCPPTensor(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return self;
}

at::Tensor AtenIpexCPUDefault::masked_fill(const at::Tensor & self, const at::Tensor & mask, at::Scalar value) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(mask.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(mask.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_mask = bridge::shallowFallbackToCPUTensor(mask);
  auto&& _ipex_result = at::masked_fill(_ipex_self, _ipex_mask, value);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::masked_fill_(at::Tensor & self, const at::Tensor & mask, const at::Tensor & value) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(mask.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(mask.is_contiguous());
  TORCH_INTERNAL_ASSERT(value.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(value.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_mask = bridge::shallowFallbackToCPUTensor(mask);
  auto&& _ipex_value = bridge::shallowFallbackToCPUTensor(value);
  auto&& _ipex_result = _ipex_self.masked_fill_(_ipex_mask, _ipex_value);
  self = bridge::shallowUpgradeToDPCPPTensor(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return self;
}

at::Tensor AtenIpexCPUDefault::masked_fill(const at::Tensor & self, const at::Tensor & mask, const at::Tensor & value) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(mask.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(mask.is_contiguous());
  TORCH_INTERNAL_ASSERT(value.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(value.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_mask = bridge::shallowFallbackToCPUTensor(mask);
  auto&& _ipex_value = bridge::shallowFallbackToCPUTensor(value);
  auto&& _ipex_result = at::masked_fill(_ipex_self, _ipex_mask, _ipex_value);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::masked_scatter_(at::Tensor & self, const at::Tensor & mask, const at::Tensor & source) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(mask.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(mask.is_contiguous());
  TORCH_INTERNAL_ASSERT(source.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(source.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_mask = bridge::shallowFallbackToCPUTensor(mask);
  auto&& _ipex_source = bridge::shallowFallbackToCPUTensor(source);
  auto&& _ipex_result = _ipex_self.masked_scatter_(_ipex_mask, _ipex_source);
  self = bridge::shallowUpgradeToDPCPPTensor(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return self;
}

at::Tensor AtenIpexCPUDefault::masked_scatter(const at::Tensor & self, const at::Tensor & mask, const at::Tensor & source) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(mask.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(mask.is_contiguous());
  TORCH_INTERNAL_ASSERT(source.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(source.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_mask = bridge::shallowFallbackToCPUTensor(mask);
  auto&& _ipex_source = bridge::shallowFallbackToCPUTensor(source);
  auto&& _ipex_result = at::masked_scatter(_ipex_self, _ipex_mask, _ipex_source);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::view(const at::Tensor & self, at::IntArrayRef size) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = _ipex_self.view(size);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::put_(at::Tensor & self, const at::Tensor & index, const at::Tensor & source, bool accumulate) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(index.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(index.is_contiguous());
  TORCH_INTERNAL_ASSERT(source.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(source.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_index = bridge::shallowFallbackToCPUTensor(index);
  auto&& _ipex_source = bridge::shallowFallbackToCPUTensor(source);
  auto&& _ipex_result = _ipex_self.put_(_ipex_index, _ipex_source, accumulate);
  self = bridge::shallowUpgradeToDPCPPTensor(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return self;
}

at::Tensor & AtenIpexCPUDefault::index_add_(at::Tensor & self, int64_t dim, const at::Tensor & index, const at::Tensor & source) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(index.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(index.is_contiguous());
  TORCH_INTERNAL_ASSERT(source.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(source.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_index = bridge::shallowFallbackToCPUTensor(index);
  auto&& _ipex_source = bridge::shallowFallbackToCPUTensor(source);
  auto&& _ipex_result = _ipex_self.index_add_(dim, _ipex_index, _ipex_source);
  self = bridge::shallowUpgradeToDPCPPTensor(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return self;
}

at::Tensor AtenIpexCPUDefault::index_add(const at::Tensor & self, int64_t dim, const at::Tensor & index, const at::Tensor & source) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(index.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(index.is_contiguous());
  TORCH_INTERNAL_ASSERT(source.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(source.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_index = bridge::shallowFallbackToCPUTensor(index);
  auto&& _ipex_source = bridge::shallowFallbackToCPUTensor(source);
  auto&& _ipex_result = at::index_add(_ipex_self, dim, _ipex_index, _ipex_source);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::index_fill_(at::Tensor & self, int64_t dim, const at::Tensor & index, at::Scalar value) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(index.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(index.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_index = bridge::shallowFallbackToCPUTensor(index);
  auto&& _ipex_result = _ipex_self.index_fill_(dim, _ipex_index, value);
  self = bridge::shallowUpgradeToDPCPPTensor(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return self;
}

at::Tensor AtenIpexCPUDefault::index_fill(const at::Tensor & self, int64_t dim, const at::Tensor & index, at::Scalar value) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(index.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(index.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_index = bridge::shallowFallbackToCPUTensor(index);
  auto&& _ipex_result = at::index_fill(_ipex_self, dim, _ipex_index, value);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::index_fill_(at::Tensor & self, int64_t dim, const at::Tensor & index, const at::Tensor & value) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(index.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(index.is_contiguous());
  TORCH_INTERNAL_ASSERT(value.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(value.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_index = bridge::shallowFallbackToCPUTensor(index);
  auto&& _ipex_value = bridge::shallowFallbackToCPUTensor(value);
  auto&& _ipex_result = _ipex_self.index_fill_(dim, _ipex_index, _ipex_value);
  self = bridge::shallowUpgradeToDPCPPTensor(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return self;
}

at::Tensor AtenIpexCPUDefault::index_fill(const at::Tensor & self, int64_t dim, const at::Tensor & index, const at::Tensor & value) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(index.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(index.is_contiguous());
  TORCH_INTERNAL_ASSERT(value.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(value.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_index = bridge::shallowFallbackToCPUTensor(index);
  auto&& _ipex_value = bridge::shallowFallbackToCPUTensor(value);
  auto&& _ipex_result = at::index_fill(_ipex_self, dim, _ipex_index, _ipex_value);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::scatter_(at::Tensor & self, int64_t dim, const at::Tensor & index, const at::Tensor & src) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(index.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(index.is_contiguous());
  TORCH_INTERNAL_ASSERT(src.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(src.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_index = bridge::shallowFallbackToCPUTensor(index);
  auto&& _ipex_src = bridge::shallowFallbackToCPUTensor(src);
  auto&& _ipex_result = _ipex_self.scatter_(dim, _ipex_index, _ipex_src);
  self = bridge::shallowUpgradeToDPCPPTensor(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return self;
}

at::Tensor AtenIpexCPUDefault::scatter(const at::Tensor & self, int64_t dim, const at::Tensor & index, const at::Tensor & src) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(index.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(index.is_contiguous());
  TORCH_INTERNAL_ASSERT(src.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(src.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_index = bridge::shallowFallbackToCPUTensor(index);
  auto&& _ipex_src = bridge::shallowFallbackToCPUTensor(src);
  auto&& _ipex_result = at::scatter(_ipex_self, dim, _ipex_index, _ipex_src);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::scatter_(at::Tensor & self, int64_t dim, const at::Tensor & index, at::Scalar value) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(index.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(index.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_index = bridge::shallowFallbackToCPUTensor(index);
  auto&& _ipex_result = _ipex_self.scatter_(dim, _ipex_index, value);
  self = bridge::shallowUpgradeToDPCPPTensor(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return self;
}

at::Tensor AtenIpexCPUDefault::scatter(const at::Tensor & self, int64_t dim, const at::Tensor & index, at::Scalar value) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(index.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(index.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_index = bridge::shallowFallbackToCPUTensor(index);
  auto&& _ipex_result = at::scatter(_ipex_self, dim, _ipex_index, value);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::scatter_add_(at::Tensor & self, int64_t dim, const at::Tensor & index, const at::Tensor & src) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(index.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(index.is_contiguous());
  TORCH_INTERNAL_ASSERT(src.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(src.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_index = bridge::shallowFallbackToCPUTensor(index);
  auto&& _ipex_src = bridge::shallowFallbackToCPUTensor(src);
  auto&& _ipex_result = _ipex_self.scatter_add_(dim, _ipex_index, _ipex_src);
  self = bridge::shallowUpgradeToDPCPPTensor(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return self;
}

at::Tensor AtenIpexCPUDefault::scatter_add(const at::Tensor & self, int64_t dim, const at::Tensor & index, const at::Tensor & src) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(index.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(index.is_contiguous());
  TORCH_INTERNAL_ASSERT(src.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(src.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_index = bridge::shallowFallbackToCPUTensor(index);
  auto&& _ipex_src = bridge::shallowFallbackToCPUTensor(src);
  auto&& _ipex_result = at::scatter_add(_ipex_self, dim, _ipex_index, _ipex_src);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::lt_(at::Tensor & self, at::Scalar other) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = _ipex_self.lt_(other);
  self = bridge::shallowUpgradeToDPCPPTensor(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return self;
}

at::Tensor & AtenIpexCPUDefault::lt_(at::Tensor & self, const at::Tensor & other) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(other.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(other.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_other = bridge::shallowFallbackToCPUTensor(other);
  auto&& _ipex_result = _ipex_self.lt_(_ipex_other);
  self = bridge::shallowUpgradeToDPCPPTensor(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return self;
}

at::Tensor & AtenIpexCPUDefault::gt_(at::Tensor & self, at::Scalar other) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = _ipex_self.gt_(other);
  self = bridge::shallowUpgradeToDPCPPTensor(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return self;
}

at::Tensor & AtenIpexCPUDefault::gt_(at::Tensor & self, const at::Tensor & other) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(other.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(other.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_other = bridge::shallowFallbackToCPUTensor(other);
  auto&& _ipex_result = _ipex_self.gt_(_ipex_other);
  self = bridge::shallowUpgradeToDPCPPTensor(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return self;
}

at::Tensor & AtenIpexCPUDefault::le_(at::Tensor & self, at::Scalar other) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = _ipex_self.le_(other);
  self = bridge::shallowUpgradeToDPCPPTensor(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return self;
}

at::Tensor & AtenIpexCPUDefault::le_(at::Tensor & self, const at::Tensor & other) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(other.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(other.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_other = bridge::shallowFallbackToCPUTensor(other);
  auto&& _ipex_result = _ipex_self.le_(_ipex_other);
  self = bridge::shallowUpgradeToDPCPPTensor(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return self;
}

at::Tensor & AtenIpexCPUDefault::ge_(at::Tensor & self, at::Scalar other) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = _ipex_self.ge_(other);
  self = bridge::shallowUpgradeToDPCPPTensor(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return self;
}

at::Tensor & AtenIpexCPUDefault::ge_(at::Tensor & self, const at::Tensor & other) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(other.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(other.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_other = bridge::shallowFallbackToCPUTensor(other);
  auto&& _ipex_result = _ipex_self.ge_(_ipex_other);
  self = bridge::shallowUpgradeToDPCPPTensor(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return self;
}

at::Tensor & AtenIpexCPUDefault::eq_(at::Tensor & self, at::Scalar other) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = _ipex_self.eq_(other);
  self = bridge::shallowUpgradeToDPCPPTensor(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return self;
}

at::Tensor & AtenIpexCPUDefault::eq_(at::Tensor & self, const at::Tensor & other) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(other.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(other.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_other = bridge::shallowFallbackToCPUTensor(other);
  auto&& _ipex_result = _ipex_self.eq_(_ipex_other);
  self = bridge::shallowUpgradeToDPCPPTensor(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return self;
}

at::Tensor & AtenIpexCPUDefault::ne_(at::Tensor & self, at::Scalar other) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = _ipex_self.ne_(other);
  self = bridge::shallowUpgradeToDPCPPTensor(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return self;
}

at::Tensor & AtenIpexCPUDefault::ne_(at::Tensor & self, const at::Tensor & other) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(other.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(other.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_other = bridge::shallowFallbackToCPUTensor(other);
  auto&& _ipex_result = _ipex_self.ne_(_ipex_other);
  self = bridge::shallowUpgradeToDPCPPTensor(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return self;
}

at::Tensor AtenIpexCPUDefault::__and__(const at::Tensor & self, at::Scalar other) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::__and__(_ipex_self, other);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::shallowUpgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::__and__(const at::Tensor & self, const at::Tensor & other) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(other.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(other.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_other = bridge::shallowFallbackToCPUTensor(other);
  auto&& _ipex_result = at::__and__(_ipex_self, _ipex_other);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::shallowUpgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::__iand__(at::Tensor & self, at::Scalar other) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = _ipex_self.__iand__(other);
  self = bridge::shallowUpgradeToDPCPPTensor(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return self;
}

at::Tensor & AtenIpexCPUDefault::__iand__(at::Tensor & self, const at::Tensor & other) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(other.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(other.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_other = bridge::shallowFallbackToCPUTensor(other);
  auto&& _ipex_result = _ipex_self.__iand__(_ipex_other);
  self = bridge::shallowUpgradeToDPCPPTensor(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return self;
}

at::Tensor AtenIpexCPUDefault::__or__(const at::Tensor & self, at::Scalar other) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::__or__(_ipex_self, other);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::shallowUpgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::__or__(const at::Tensor & self, const at::Tensor & other) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(other.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(other.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_other = bridge::shallowFallbackToCPUTensor(other);
  auto&& _ipex_result = at::__or__(_ipex_self, _ipex_other);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::shallowUpgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::__ior__(at::Tensor & self, at::Scalar other) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = _ipex_self.__ior__(other);
  self = bridge::shallowUpgradeToDPCPPTensor(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return self;
}

at::Tensor & AtenIpexCPUDefault::__ior__(at::Tensor & self, const at::Tensor & other) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(other.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(other.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_other = bridge::shallowFallbackToCPUTensor(other);
  auto&& _ipex_result = _ipex_self.__ior__(_ipex_other);
  self = bridge::shallowUpgradeToDPCPPTensor(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return self;
}

at::Tensor AtenIpexCPUDefault::__xor__(const at::Tensor & self, at::Scalar other) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::__xor__(_ipex_self, other);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::shallowUpgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::__xor__(const at::Tensor & self, const at::Tensor & other) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(other.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(other.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_other = bridge::shallowFallbackToCPUTensor(other);
  auto&& _ipex_result = at::__xor__(_ipex_self, _ipex_other);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::shallowUpgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::__ixor__(at::Tensor & self, at::Scalar other) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = _ipex_self.__ixor__(other);
  self = bridge::shallowUpgradeToDPCPPTensor(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return self;
}

at::Tensor & AtenIpexCPUDefault::__ixor__(at::Tensor & self, const at::Tensor & other) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(other.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(other.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_other = bridge::shallowFallbackToCPUTensor(other);
  auto&& _ipex_result = _ipex_self.__ixor__(_ipex_other);
  self = bridge::shallowUpgradeToDPCPPTensor(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return self;
}

at::Tensor AtenIpexCPUDefault::__lshift__(const at::Tensor & self, at::Scalar other) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::__lshift__(_ipex_self, other);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::shallowUpgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::__lshift__(const at::Tensor & self, const at::Tensor & other) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(other.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(other.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_other = bridge::shallowFallbackToCPUTensor(other);
  auto&& _ipex_result = at::__lshift__(_ipex_self, _ipex_other);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::shallowUpgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::__ilshift__(at::Tensor & self, at::Scalar other) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = _ipex_self.__ilshift__(other);
  self = bridge::shallowUpgradeToDPCPPTensor(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return self;
}

at::Tensor & AtenIpexCPUDefault::__ilshift__(at::Tensor & self, const at::Tensor & other) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(other.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(other.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_other = bridge::shallowFallbackToCPUTensor(other);
  auto&& _ipex_result = _ipex_self.__ilshift__(_ipex_other);
  self = bridge::shallowUpgradeToDPCPPTensor(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return self;
}

at::Tensor AtenIpexCPUDefault::__rshift__(const at::Tensor & self, at::Scalar other) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::__rshift__(_ipex_self, other);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::shallowUpgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::__rshift__(const at::Tensor & self, const at::Tensor & other) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(other.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(other.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_other = bridge::shallowFallbackToCPUTensor(other);
  auto&& _ipex_result = at::__rshift__(_ipex_self, _ipex_other);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::shallowUpgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::__irshift__(at::Tensor & self, at::Scalar other) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = _ipex_self.__irshift__(other);
  self = bridge::shallowUpgradeToDPCPPTensor(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return self;
}

at::Tensor & AtenIpexCPUDefault::__irshift__(at::Tensor & self, const at::Tensor & other) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(other.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(other.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_other = bridge::shallowFallbackToCPUTensor(other);
  auto&& _ipex_result = _ipex_self.__irshift__(_ipex_other);
  self = bridge::shallowUpgradeToDPCPPTensor(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return self;
}

at::Tensor & AtenIpexCPUDefault::lgamma_(at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = _ipex_self.lgamma_();
  self = bridge::shallowUpgradeToDPCPPTensor(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return self;
}

at::Tensor & AtenIpexCPUDefault::atan2_(at::Tensor & self, const at::Tensor & other) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(other.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(other.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_other = bridge::shallowFallbackToCPUTensor(other);
  auto&& _ipex_result = _ipex_self.atan2_(_ipex_other);
  self = bridge::shallowUpgradeToDPCPPTensor(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return self;
}

at::Tensor & AtenIpexCPUDefault::tril_(at::Tensor & self, int64_t diagonal) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = _ipex_self.tril_(diagonal);
  self = bridge::shallowUpgradeToDPCPPTensor(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return self;
}

at::Tensor & AtenIpexCPUDefault::triu_(at::Tensor & self, int64_t diagonal) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = _ipex_self.triu_(diagonal);
  self = bridge::shallowUpgradeToDPCPPTensor(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return self;
}

at::Tensor & AtenIpexCPUDefault::digamma_(at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = _ipex_self.digamma_();
  self = bridge::shallowUpgradeToDPCPPTensor(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return self;
}

at::Tensor & AtenIpexCPUDefault::polygamma_(at::Tensor & self, int64_t n) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = _ipex_self.polygamma_(n);
  self = bridge::shallowUpgradeToDPCPPTensor(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return self;
}

at::Tensor & AtenIpexCPUDefault::renorm_(at::Tensor & self, at::Scalar p, int64_t dim, at::Scalar maxnorm) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = _ipex_self.renorm_(p, dim, maxnorm);
  self = bridge::shallowUpgradeToDPCPPTensor(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return self;
}

at::Tensor & AtenIpexCPUDefault::pow_(at::Tensor & self, at::Scalar exponent) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = _ipex_self.pow_(exponent);
  self = bridge::shallowUpgradeToDPCPPTensor(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return self;
}

at::Tensor & AtenIpexCPUDefault::pow_(at::Tensor & self, const at::Tensor & exponent) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(exponent.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(exponent.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_exponent = bridge::shallowFallbackToCPUTensor(exponent);
  auto&& _ipex_result = _ipex_self.pow_(_ipex_exponent);
  self = bridge::shallowUpgradeToDPCPPTensor(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return self;
}

at::Tensor & AtenIpexCPUDefault::lerp_(at::Tensor & self, const at::Tensor & end, at::Scalar weight) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(end.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(end.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_end = bridge::shallowFallbackToCPUTensor(end);
  auto&& _ipex_result = _ipex_self.lerp_(_ipex_end, weight);
  self = bridge::shallowUpgradeToDPCPPTensor(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return self;
}

at::Tensor & AtenIpexCPUDefault::lerp_(at::Tensor & self, const at::Tensor & end, const at::Tensor & weight) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(end.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(end.is_contiguous());
  TORCH_INTERNAL_ASSERT(weight.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(weight.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_end = bridge::shallowFallbackToCPUTensor(end);
  auto&& _ipex_weight = bridge::shallowFallbackToCPUTensor(weight);
  auto&& _ipex_result = _ipex_self.lerp_(_ipex_end, _ipex_weight);
  self = bridge::shallowUpgradeToDPCPPTensor(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return self;
}

at::Tensor & AtenIpexCPUDefault::fmod_(at::Tensor & self, at::Scalar other) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = _ipex_self.fmod_(other);
  self = bridge::shallowUpgradeToDPCPPTensor(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return self;
}

at::Tensor & AtenIpexCPUDefault::fmod_(at::Tensor & self, const at::Tensor & other) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(other.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(other.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_other = bridge::shallowFallbackToCPUTensor(other);
  auto&& _ipex_result = _ipex_self.fmod_(_ipex_other);
  self = bridge::shallowUpgradeToDPCPPTensor(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return self;
}

at::Tensor & AtenIpexCPUDefault::remainder_(at::Tensor & self, at::Scalar other) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = _ipex_self.remainder_(other);
  self = bridge::shallowUpgradeToDPCPPTensor(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return self;
}

at::Tensor & AtenIpexCPUDefault::remainder_(at::Tensor & self, const at::Tensor & other) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(other.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(other.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_other = bridge::shallowFallbackToCPUTensor(other);
  auto&& _ipex_result = _ipex_self.remainder_(_ipex_other);
  self = bridge::shallowUpgradeToDPCPPTensor(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return self;
}

at::Tensor & AtenIpexCPUDefault::addbmm_(at::Tensor & self, const at::Tensor & batch1, const at::Tensor & batch2, at::Scalar beta, at::Scalar alpha) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(batch1.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(batch1.is_contiguous());
  TORCH_INTERNAL_ASSERT(batch2.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(batch2.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_batch1 = bridge::shallowFallbackToCPUTensor(batch1);
  auto&& _ipex_batch2 = bridge::shallowFallbackToCPUTensor(batch2);
  auto&& _ipex_result = _ipex_self.addbmm_(_ipex_batch1, _ipex_batch2, beta, alpha);
  self = bridge::shallowUpgradeToDPCPPTensor(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return self;
}

at::Tensor & AtenIpexCPUDefault::addbmm_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & batch1, const at::Tensor & batch2, at::Scalar beta, at::Scalar alpha) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(batch1.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(batch1.is_contiguous());
  TORCH_INTERNAL_ASSERT(batch2.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(batch2.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_batch1 = bridge::shallowFallbackToCPUTensor(batch1);
  auto&& _ipex_batch2 = bridge::shallowFallbackToCPUTensor(batch2);
  auto&& _ipex_result = at::addbmm_out(_ipex_out, _ipex_self, _ipex_batch1, _ipex_batch2, beta, alpha);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor AtenIpexCPUDefault::addbmm(const at::Tensor & self, const at::Tensor & batch1, const at::Tensor & batch2, at::Scalar beta, at::Scalar alpha) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(batch1.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(batch1.is_contiguous());
  TORCH_INTERNAL_ASSERT(batch2.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(batch2.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_batch1 = bridge::shallowFallbackToCPUTensor(batch1);
  auto&& _ipex_batch2 = bridge::shallowFallbackToCPUTensor(batch2);
  auto&& _ipex_result = at::addbmm(_ipex_self, _ipex_batch1, _ipex_batch2, beta, alpha);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::addcdiv_(at::Tensor & self, const at::Tensor & tensor1, const at::Tensor & tensor2, at::Scalar value) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(tensor1.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(tensor1.is_contiguous());
  TORCH_INTERNAL_ASSERT(tensor2.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(tensor2.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_tensor1 = bridge::shallowFallbackToCPUTensor(tensor1);
  auto&& _ipex_tensor2 = bridge::shallowFallbackToCPUTensor(tensor2);
  auto&& _ipex_result = _ipex_self.addcdiv_(_ipex_tensor1, _ipex_tensor2, value);
  self = bridge::shallowUpgradeToDPCPPTensor(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return self;
}

at::Tensor & AtenIpexCPUDefault::random_(at::Tensor & self, int64_t from, int64_t to, at::Generator * generator) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = _ipex_self.random_(from, to, generator);
  self = bridge::shallowUpgradeToDPCPPTensor(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return self;
}

at::Tensor & AtenIpexCPUDefault::random_(at::Tensor & self, int64_t to, at::Generator * generator) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = _ipex_self.random_(to, generator);
  self = bridge::shallowUpgradeToDPCPPTensor(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return self;
}

at::Tensor & AtenIpexCPUDefault::random_(at::Tensor & self, at::Generator * generator) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = _ipex_self.random_(generator);
  self = bridge::shallowUpgradeToDPCPPTensor(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return self;
}

at::Tensor & AtenIpexCPUDefault::uniform_(at::Tensor & self, double from, double to, at::Generator * generator) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = _ipex_self.uniform_(from, to, generator);
  self = bridge::shallowUpgradeToDPCPPTensor(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return self;
}

at::Tensor & AtenIpexCPUDefault::normal_(at::Tensor & self, double mean, double std, at::Generator * generator) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = _ipex_self.normal_(mean, std, generator);
  self = bridge::shallowUpgradeToDPCPPTensor(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return self;
}

at::Tensor & AtenIpexCPUDefault::cauchy_(at::Tensor & self, double median, double sigma, at::Generator * generator) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = _ipex_self.cauchy_(median, sigma, generator);
  self = bridge::shallowUpgradeToDPCPPTensor(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return self;
}

at::Tensor & AtenIpexCPUDefault::log_normal_(at::Tensor & self, double mean, double std, at::Generator * generator) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = _ipex_self.log_normal_(mean, std, generator);
  self = bridge::shallowUpgradeToDPCPPTensor(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return self;
}

at::Tensor & AtenIpexCPUDefault::exponential_(at::Tensor & self, double lambd, at::Generator * generator) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = _ipex_self.exponential_(lambd, generator);
  self = bridge::shallowUpgradeToDPCPPTensor(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return self;
}

at::Tensor & AtenIpexCPUDefault::geometric_(at::Tensor & self, double p, at::Generator * generator) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = _ipex_self.geometric_(p, generator);
  self = bridge::shallowUpgradeToDPCPPTensor(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return self;
}

at::Tensor & AtenIpexCPUDefault::diag_out(at::Tensor & out, const at::Tensor & self, int64_t diagonal) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::diag_out(_ipex_out, _ipex_self, diagonal);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor AtenIpexCPUDefault::diag(const at::Tensor & self, int64_t diagonal) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::diag(_ipex_self, diagonal);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::cross_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & other, c10::optional<int64_t> dim) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(other.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(other.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_other = bridge::shallowFallbackToCPUTensor(other);
  auto&& _ipex_result = at::cross_out(_ipex_out, _ipex_self, _ipex_other, dim);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor AtenIpexCPUDefault::cross(const at::Tensor & self, const at::Tensor & other, c10::optional<int64_t> dim) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(other.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(other.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_other = bridge::shallowFallbackToCPUTensor(other);
  auto&& _ipex_result = at::cross(_ipex_self, _ipex_other, dim);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::triu_out(at::Tensor & out, const at::Tensor & self, int64_t diagonal) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::triu_out(_ipex_out, _ipex_self, diagonal);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor AtenIpexCPUDefault::triu(const at::Tensor & self, int64_t diagonal) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::triu(_ipex_self, diagonal);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::tril_out(at::Tensor & out, const at::Tensor & self, int64_t diagonal) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::tril_out(_ipex_out, _ipex_self, diagonal);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor AtenIpexCPUDefault::tril(const at::Tensor & self, int64_t diagonal) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::tril(_ipex_self, diagonal);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::tril_indices(int64_t row, int64_t col, int64_t offset, const at::TensorOptions & options) {
  TORCH_INTERNAL_ASSERT(options.device().type() == at::DeviceType::DPCPP);
  at::TensorOptions _ipex_options = options.device(at::DeviceType::CPU);
  auto&& _ipex_result = at::tril_indices(row, col, offset, _ipex_options);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::triu_indices(int64_t row, int64_t col, int64_t offset, const at::TensorOptions & options) {
  TORCH_INTERNAL_ASSERT(options.device().type() == at::DeviceType::DPCPP);
  at::TensorOptions _ipex_options = options.device(at::DeviceType::CPU);
  auto&& _ipex_result = at::triu_indices(row, col, offset, _ipex_options);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::trace(const at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::trace(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::ne_out(at::Tensor & out, const at::Tensor & self, at::Scalar other) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::ne_out(_ipex_out, _ipex_self, other);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor AtenIpexCPUDefault::ne(const at::Tensor & self, at::Scalar other) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::ne(_ipex_self, other);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::ne_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & other) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(other.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(other.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_other = bridge::shallowFallbackToCPUTensor(other);
  auto&& _ipex_result = at::ne_out(_ipex_out, _ipex_self, _ipex_other);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor AtenIpexCPUDefault::ne(const at::Tensor & self, const at::Tensor & other) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(other.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(other.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_other = bridge::shallowFallbackToCPUTensor(other);
  auto&& _ipex_result = at::ne(_ipex_self, _ipex_other);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::eq_out(at::Tensor & out, const at::Tensor & self, at::Scalar other) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::eq_out(_ipex_out, _ipex_self, other);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor AtenIpexCPUDefault::eq(const at::Tensor & self, at::Scalar other) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::eq(_ipex_self, other);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::eq_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & other) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(other.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(other.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_other = bridge::shallowFallbackToCPUTensor(other);
  auto&& _ipex_result = at::eq_out(_ipex_out, _ipex_self, _ipex_other);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor AtenIpexCPUDefault::eq(const at::Tensor & self, const at::Tensor & other) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(other.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(other.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_other = bridge::shallowFallbackToCPUTensor(other);
  auto&& _ipex_result = at::eq(_ipex_self, _ipex_other);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::ge_out(at::Tensor & out, const at::Tensor & self, at::Scalar other) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::ge_out(_ipex_out, _ipex_self, other);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor AtenIpexCPUDefault::ge(const at::Tensor & self, at::Scalar other) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::ge(_ipex_self, other);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::ge_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & other) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(other.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(other.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_other = bridge::shallowFallbackToCPUTensor(other);
  auto&& _ipex_result = at::ge_out(_ipex_out, _ipex_self, _ipex_other);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor AtenIpexCPUDefault::ge(const at::Tensor & self, const at::Tensor & other) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(other.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(other.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_other = bridge::shallowFallbackToCPUTensor(other);
  auto&& _ipex_result = at::ge(_ipex_self, _ipex_other);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::le_out(at::Tensor & out, const at::Tensor & self, at::Scalar other) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::le_out(_ipex_out, _ipex_self, other);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor AtenIpexCPUDefault::le(const at::Tensor & self, at::Scalar other) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::le(_ipex_self, other);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::le_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & other) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(other.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(other.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_other = bridge::shallowFallbackToCPUTensor(other);
  auto&& _ipex_result = at::le_out(_ipex_out, _ipex_self, _ipex_other);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor AtenIpexCPUDefault::le(const at::Tensor & self, const at::Tensor & other) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(other.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(other.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_other = bridge::shallowFallbackToCPUTensor(other);
  auto&& _ipex_result = at::le(_ipex_self, _ipex_other);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::gt_out(at::Tensor & out, const at::Tensor & self, at::Scalar other) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::gt_out(_ipex_out, _ipex_self, other);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor AtenIpexCPUDefault::gt(const at::Tensor & self, at::Scalar other) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::gt(_ipex_self, other);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::gt_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & other) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(other.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(other.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_other = bridge::shallowFallbackToCPUTensor(other);
  auto&& _ipex_result = at::gt_out(_ipex_out, _ipex_self, _ipex_other);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor AtenIpexCPUDefault::gt(const at::Tensor & self, const at::Tensor & other) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(other.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(other.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_other = bridge::shallowFallbackToCPUTensor(other);
  auto&& _ipex_result = at::gt(_ipex_self, _ipex_other);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::lt_out(at::Tensor & out, const at::Tensor & self, at::Scalar other) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::lt_out(_ipex_out, _ipex_self, other);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor AtenIpexCPUDefault::lt(const at::Tensor & self, at::Scalar other) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::lt(_ipex_self, other);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::lt_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & other) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(other.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(other.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_other = bridge::shallowFallbackToCPUTensor(other);
  auto&& _ipex_result = at::lt_out(_ipex_out, _ipex_self, _ipex_other);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor AtenIpexCPUDefault::lt(const at::Tensor & self, const at::Tensor & other) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(other.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(other.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_other = bridge::shallowFallbackToCPUTensor(other);
  auto&& _ipex_result = at::lt(_ipex_self, _ipex_other);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::take_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & index) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(index.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(index.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_index = bridge::shallowFallbackToCPUTensor(index);
  auto&& _ipex_result = at::take_out(_ipex_out, _ipex_self, _ipex_index);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor AtenIpexCPUDefault::take(const at::Tensor & self, const at::Tensor & index) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(index.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(index.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_index = bridge::shallowFallbackToCPUTensor(index);
  auto&& _ipex_result = at::take(_ipex_self, _ipex_index);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::index_select_out(at::Tensor & out, const at::Tensor & self, int64_t dim, const at::Tensor & index) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(index.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(index.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_index = bridge::shallowFallbackToCPUTensor(index);
  auto&& _ipex_result = at::index_select_out(_ipex_out, _ipex_self, dim, _ipex_index);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor AtenIpexCPUDefault::index_select(const at::Tensor & self, int64_t dim, const at::Tensor & index) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(index.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(index.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_index = bridge::shallowFallbackToCPUTensor(index);
  auto&& _ipex_result = at::index_select(_ipex_self, dim, _ipex_index);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::masked_select_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & mask) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(mask.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(mask.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_mask = bridge::shallowFallbackToCPUTensor(mask);
  auto&& _ipex_result = at::masked_select_out(_ipex_out, _ipex_self, _ipex_mask);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor AtenIpexCPUDefault::masked_select(const at::Tensor & self, const at::Tensor & mask) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(mask.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(mask.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_mask = bridge::shallowFallbackToCPUTensor(mask);
  auto&& _ipex_result = at::masked_select(_ipex_self, _ipex_mask);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::nonzero_out(at::Tensor & out, const at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::nonzero_out(_ipex_out, _ipex_self);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor AtenIpexCPUDefault::nonzero(const at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::nonzero(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

std::vector<at::Tensor> AtenIpexCPUDefault::nonzero_numpy(const at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::nonzero_numpy(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return bridge::upgradeToDPCPPTensorVec(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::gather_out(at::Tensor & out, const at::Tensor & self, int64_t dim, const at::Tensor & index, bool sparse_grad) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(index.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(index.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_index = bridge::shallowFallbackToCPUTensor(index);
  auto&& _ipex_result = at::gather_out(_ipex_out, _ipex_self, dim, _ipex_index, sparse_grad);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor AtenIpexCPUDefault::gather(const at::Tensor & self, int64_t dim, const at::Tensor & index, bool sparse_grad) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(index.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(index.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_index = bridge::shallowFallbackToCPUTensor(index);
  auto&& _ipex_result = at::gather(_ipex_self, dim, _ipex_index, sparse_grad);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::_gather_sparse_backward(const at::Tensor & self, int64_t dim, const at::Tensor & index, const at::Tensor & grad) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(index.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(index.is_contiguous());
  TORCH_INTERNAL_ASSERT(grad.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_index = bridge::shallowFallbackToCPUTensor(index);
  auto&& _ipex_grad = bridge::shallowFallbackToCPUTensor(grad);
  auto&& _ipex_result = at::_gather_sparse_backward(_ipex_self, dim, _ipex_index, _ipex_grad);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::addcmul_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & tensor1, const at::Tensor & tensor2, at::Scalar value) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(tensor1.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(tensor1.is_contiguous());
  TORCH_INTERNAL_ASSERT(tensor2.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(tensor2.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_tensor1 = bridge::shallowFallbackToCPUTensor(tensor1);
  auto&& _ipex_tensor2 = bridge::shallowFallbackToCPUTensor(tensor2);
  auto&& _ipex_result = at::addcmul_out(_ipex_out, _ipex_self, _ipex_tensor1, _ipex_tensor2, value);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor AtenIpexCPUDefault::addcmul(const at::Tensor & self, const at::Tensor & tensor1, const at::Tensor & tensor2, at::Scalar value) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(tensor1.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(tensor1.is_contiguous());
  TORCH_INTERNAL_ASSERT(tensor2.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(tensor2.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_tensor1 = bridge::shallowFallbackToCPUTensor(tensor1);
  auto&& _ipex_tensor2 = bridge::shallowFallbackToCPUTensor(tensor2);
  auto&& _ipex_result = at::addcmul(_ipex_self, _ipex_tensor1, _ipex_tensor2, value);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::addcmul_(at::Tensor & self, const at::Tensor & tensor1, const at::Tensor & tensor2, at::Scalar value) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(tensor1.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(tensor1.is_contiguous());
  TORCH_INTERNAL_ASSERT(tensor2.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(tensor2.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_tensor1 = bridge::shallowFallbackToCPUTensor(tensor1);
  auto&& _ipex_tensor2 = bridge::shallowFallbackToCPUTensor(tensor2);
  auto&& _ipex_result = _ipex_self.addcmul_(_ipex_tensor1, _ipex_tensor2, value);
  self = bridge::shallowUpgradeToDPCPPTensor(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return self;
}

at::Tensor & AtenIpexCPUDefault::addcdiv_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & tensor1, const at::Tensor & tensor2, at::Scalar value) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(tensor1.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(tensor1.is_contiguous());
  TORCH_INTERNAL_ASSERT(tensor2.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(tensor2.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_tensor1 = bridge::shallowFallbackToCPUTensor(tensor1);
  auto&& _ipex_tensor2 = bridge::shallowFallbackToCPUTensor(tensor2);
  auto&& _ipex_result = at::addcdiv_out(_ipex_out, _ipex_self, _ipex_tensor1, _ipex_tensor2, value);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor AtenIpexCPUDefault::addcdiv(const at::Tensor & self, const at::Tensor & tensor1, const at::Tensor & tensor2, at::Scalar value) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(tensor1.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(tensor1.is_contiguous());
  TORCH_INTERNAL_ASSERT(tensor2.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(tensor2.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_tensor1 = bridge::shallowFallbackToCPUTensor(tensor1);
  auto&& _ipex_tensor2 = bridge::shallowFallbackToCPUTensor(tensor2);
  auto&& _ipex_result = at::addcdiv(_ipex_self, _ipex_tensor1, _ipex_tensor2, value);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

std::tuple<at::Tensor &,at::Tensor &> AtenIpexCPUDefault::lstsq_out(at::Tensor & X, at::Tensor & qr, const at::Tensor & self, const at::Tensor & A) {
  TORCH_INTERNAL_ASSERT(X.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(X.is_contiguous());
  TORCH_INTERNAL_ASSERT(qr.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(qr.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(A.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(A.is_contiguous());
  auto&& _ipex_X = bridge::shallowFallbackToCPUTensor(X);
  auto&& _ipex_qr = bridge::shallowFallbackToCPUTensor(qr);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_A = bridge::shallowFallbackToCPUTensor(A);
  auto&& _ipex_result = at::lstsq_out(_ipex_X, _ipex_qr, _ipex_self, _ipex_A);
  X = bridge::shallowUpgradeToDPCPPTensor(_ipex_X);
  qr = bridge::shallowUpgradeToDPCPPTensor(_ipex_qr);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return std::tuple<at::Tensor &,at::Tensor &>(X, qr);
}

std::tuple<at::Tensor,at::Tensor> AtenIpexCPUDefault::lstsq(const at::Tensor & self, const at::Tensor & A) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(A.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(A.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_A = bridge::shallowFallbackToCPUTensor(A);
  auto&& _ipex_result = at::lstsq(_ipex_self, _ipex_A);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return std::tuple<at::Tensor,at::Tensor>(bridge::upgradeToDPCPPTensor(std::get<0>(_ipex_result)), bridge::upgradeToDPCPPTensor(std::get<1>(_ipex_result)));
}

std::tuple<at::Tensor &,at::Tensor &> AtenIpexCPUDefault::triangular_solve_out(at::Tensor & X, at::Tensor & M, const at::Tensor & self, const at::Tensor & A, bool upper, bool transpose, bool unitriangular) {
  TORCH_INTERNAL_ASSERT(X.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(X.is_contiguous());
  TORCH_INTERNAL_ASSERT(M.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(M.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(A.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(A.is_contiguous());
  auto&& _ipex_X = bridge::shallowFallbackToCPUTensor(X);
  auto&& _ipex_M = bridge::shallowFallbackToCPUTensor(M);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_A = bridge::shallowFallbackToCPUTensor(A);
  auto&& _ipex_result = at::triangular_solve_out(_ipex_X, _ipex_M, _ipex_self, _ipex_A, upper, transpose, unitriangular);
  X = bridge::shallowUpgradeToDPCPPTensor(_ipex_X);
  M = bridge::shallowUpgradeToDPCPPTensor(_ipex_M);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return std::tuple<at::Tensor &,at::Tensor &>(X, M);
}

std::tuple<at::Tensor,at::Tensor> AtenIpexCPUDefault::triangular_solve(const at::Tensor & self, const at::Tensor & A, bool upper, bool transpose, bool unitriangular) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(A.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(A.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_A = bridge::shallowFallbackToCPUTensor(A);
  auto&& _ipex_result = at::triangular_solve(_ipex_self, _ipex_A, upper, transpose, unitriangular);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return std::tuple<at::Tensor,at::Tensor>(bridge::upgradeToDPCPPTensor(std::get<0>(_ipex_result)), bridge::upgradeToDPCPPTensor(std::get<1>(_ipex_result)));
}

std::tuple<at::Tensor,at::Tensor> AtenIpexCPUDefault::_triangular_solve_helper(const at::Tensor & self, const at::Tensor & A, bool upper, bool transpose, bool unitriangular) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(A.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(A.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_A = bridge::shallowFallbackToCPUTensor(A);
  auto&& _ipex_result = at::_triangular_solve_helper(_ipex_self, _ipex_A, upper, transpose, unitriangular);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return std::tuple<at::Tensor,at::Tensor>(bridge::upgradeToDPCPPTensor(std::get<0>(_ipex_result)), bridge::upgradeToDPCPPTensor(std::get<1>(_ipex_result)));
}

std::tuple<at::Tensor &,at::Tensor &> AtenIpexCPUDefault::symeig_out(at::Tensor & e, at::Tensor & V, const at::Tensor & self, bool eigenvectors, bool upper) {
  TORCH_INTERNAL_ASSERT(e.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(e.is_contiguous());
  TORCH_INTERNAL_ASSERT(V.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(V.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_e = bridge::shallowFallbackToCPUTensor(e);
  auto&& _ipex_V = bridge::shallowFallbackToCPUTensor(V);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::symeig_out(_ipex_e, _ipex_V, _ipex_self, eigenvectors, upper);
  e = bridge::shallowUpgradeToDPCPPTensor(_ipex_e);
  V = bridge::shallowUpgradeToDPCPPTensor(_ipex_V);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return std::tuple<at::Tensor &,at::Tensor &>(e, V);
}

std::tuple<at::Tensor,at::Tensor> AtenIpexCPUDefault::symeig(const at::Tensor & self, bool eigenvectors, bool upper) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::symeig(_ipex_self, eigenvectors, upper);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return std::tuple<at::Tensor,at::Tensor>(bridge::upgradeToDPCPPTensor(std::get<0>(_ipex_result)), bridge::upgradeToDPCPPTensor(std::get<1>(_ipex_result)));
}

std::tuple<at::Tensor,at::Tensor> AtenIpexCPUDefault::_symeig_helper(const at::Tensor & self, bool eigenvectors, bool upper) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::_symeig_helper(_ipex_self, eigenvectors, upper);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return std::tuple<at::Tensor,at::Tensor>(bridge::upgradeToDPCPPTensor(std::get<0>(_ipex_result)), bridge::upgradeToDPCPPTensor(std::get<1>(_ipex_result)));
}

std::tuple<at::Tensor &,at::Tensor &> AtenIpexCPUDefault::eig_out(at::Tensor & e, at::Tensor & v, const at::Tensor & self, bool eigenvectors) {
  TORCH_INTERNAL_ASSERT(e.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(e.is_contiguous());
  TORCH_INTERNAL_ASSERT(v.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(v.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_e = bridge::shallowFallbackToCPUTensor(e);
  auto&& _ipex_v = bridge::shallowFallbackToCPUTensor(v);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::eig_out(_ipex_e, _ipex_v, _ipex_self, eigenvectors);
  e = bridge::shallowUpgradeToDPCPPTensor(_ipex_e);
  v = bridge::shallowUpgradeToDPCPPTensor(_ipex_v);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return std::tuple<at::Tensor &,at::Tensor &>(e, v);
}

std::tuple<at::Tensor,at::Tensor> AtenIpexCPUDefault::eig(const at::Tensor & self, bool eigenvectors) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::eig(_ipex_self, eigenvectors);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return std::tuple<at::Tensor,at::Tensor>(bridge::upgradeToDPCPPTensor(std::get<0>(_ipex_result)), bridge::upgradeToDPCPPTensor(std::get<1>(_ipex_result)));
}

std::tuple<at::Tensor &,at::Tensor &,at::Tensor &> AtenIpexCPUDefault::svd_out(at::Tensor & U, at::Tensor & S, at::Tensor & V, const at::Tensor & self, bool some, bool compute_uv) {
  TORCH_INTERNAL_ASSERT(U.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(U.is_contiguous());
  TORCH_INTERNAL_ASSERT(S.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(S.is_contiguous());
  TORCH_INTERNAL_ASSERT(V.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(V.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_U = bridge::shallowFallbackToCPUTensor(U);
  auto&& _ipex_S = bridge::shallowFallbackToCPUTensor(S);
  auto&& _ipex_V = bridge::shallowFallbackToCPUTensor(V);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::svd_out(_ipex_U, _ipex_S, _ipex_V, _ipex_self, some, compute_uv);
  U = bridge::shallowUpgradeToDPCPPTensor(_ipex_U);
  S = bridge::shallowUpgradeToDPCPPTensor(_ipex_S);
  V = bridge::shallowUpgradeToDPCPPTensor(_ipex_V);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return std::tuple<at::Tensor &,at::Tensor &,at::Tensor &>(U, S, V);
}

std::tuple<at::Tensor,at::Tensor,at::Tensor> AtenIpexCPUDefault::svd(const at::Tensor & self, bool some, bool compute_uv) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::svd(_ipex_self, some, compute_uv);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return std::tuple<at::Tensor,at::Tensor,at::Tensor>(bridge::upgradeToDPCPPTensor(std::get<0>(_ipex_result)), bridge::upgradeToDPCPPTensor(std::get<1>(_ipex_result)), bridge::upgradeToDPCPPTensor(std::get<2>(_ipex_result)));
}

std::tuple<at::Tensor,at::Tensor,at::Tensor> AtenIpexCPUDefault::_svd_helper(const at::Tensor & self, bool some, bool compute_uv) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::_svd_helper(_ipex_self, some, compute_uv);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return std::tuple<at::Tensor,at::Tensor,at::Tensor>(bridge::upgradeToDPCPPTensor(std::get<0>(_ipex_result)), bridge::upgradeToDPCPPTensor(std::get<1>(_ipex_result)), bridge::upgradeToDPCPPTensor(std::get<2>(_ipex_result)));
}

at::Tensor & AtenIpexCPUDefault::cholesky_out(at::Tensor & out, const at::Tensor & self, bool upper) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::cholesky_out(_ipex_out, _ipex_self, upper);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor AtenIpexCPUDefault::cholesky(const at::Tensor & self, bool upper) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::cholesky(_ipex_self, upper);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::_cholesky_helper(const at::Tensor & self, bool upper) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::_cholesky_helper(_ipex_self, upper);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::cholesky_solve_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & input2, bool upper) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(input2.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(input2.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_input2 = bridge::shallowFallbackToCPUTensor(input2);
  auto&& _ipex_result = at::cholesky_solve_out(_ipex_out, _ipex_self, _ipex_input2, upper);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor AtenIpexCPUDefault::cholesky_solve(const at::Tensor & self, const at::Tensor & input2, bool upper) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(input2.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(input2.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_input2 = bridge::shallowFallbackToCPUTensor(input2);
  auto&& _ipex_result = at::cholesky_solve(_ipex_self, _ipex_input2, upper);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::_cholesky_solve_helper(const at::Tensor & self, const at::Tensor & A, bool upper) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(A.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(A.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_A = bridge::shallowFallbackToCPUTensor(A);
  auto&& _ipex_result = at::_cholesky_solve_helper(_ipex_self, _ipex_A, upper);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

std::tuple<at::Tensor,at::Tensor> AtenIpexCPUDefault::solve(const at::Tensor & self, const at::Tensor & A) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(A.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(A.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_A = bridge::shallowFallbackToCPUTensor(A);
  auto&& _ipex_result = at::solve(_ipex_self, _ipex_A);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return std::tuple<at::Tensor,at::Tensor>(bridge::upgradeToDPCPPTensor(std::get<0>(_ipex_result)), bridge::upgradeToDPCPPTensor(std::get<1>(_ipex_result)));
}

std::tuple<at::Tensor &,at::Tensor &> AtenIpexCPUDefault::solve_out(at::Tensor & solution, at::Tensor & lu, const at::Tensor & self, const at::Tensor & A) {
  TORCH_INTERNAL_ASSERT(solution.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(solution.is_contiguous());
  TORCH_INTERNAL_ASSERT(lu.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(lu.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(A.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(A.is_contiguous());
  auto&& _ipex_solution = bridge::shallowFallbackToCPUTensor(solution);
  auto&& _ipex_lu = bridge::shallowFallbackToCPUTensor(lu);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_A = bridge::shallowFallbackToCPUTensor(A);
  auto&& _ipex_result = at::solve_out(_ipex_solution, _ipex_lu, _ipex_self, _ipex_A);
  solution = bridge::shallowUpgradeToDPCPPTensor(_ipex_solution);
  lu = bridge::shallowUpgradeToDPCPPTensor(_ipex_lu);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return std::tuple<at::Tensor &,at::Tensor &>(solution, lu);
}

std::tuple<at::Tensor,at::Tensor> AtenIpexCPUDefault::_solve_helper(const at::Tensor & self, const at::Tensor & A) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(A.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(A.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_A = bridge::shallowFallbackToCPUTensor(A);
  auto&& _ipex_result = at::_solve_helper(_ipex_self, _ipex_A);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return std::tuple<at::Tensor,at::Tensor>(bridge::upgradeToDPCPPTensor(std::get<0>(_ipex_result)), bridge::upgradeToDPCPPTensor(std::get<1>(_ipex_result)));
}

at::Tensor & AtenIpexCPUDefault::cholesky_inverse_out(at::Tensor & out, const at::Tensor & self, bool upper) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::cholesky_inverse_out(_ipex_out, _ipex_self, upper);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor AtenIpexCPUDefault::cholesky_inverse(const at::Tensor & self, bool upper) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::cholesky_inverse(_ipex_self, upper);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

std::tuple<at::Tensor &,at::Tensor &> AtenIpexCPUDefault::qr_out(at::Tensor & Q, at::Tensor & R, const at::Tensor & self, bool some) {
  TORCH_INTERNAL_ASSERT(Q.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(Q.is_contiguous());
  TORCH_INTERNAL_ASSERT(R.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(R.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_Q = bridge::shallowFallbackToCPUTensor(Q);
  auto&& _ipex_R = bridge::shallowFallbackToCPUTensor(R);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::qr_out(_ipex_Q, _ipex_R, _ipex_self, some);
  Q = bridge::shallowUpgradeToDPCPPTensor(_ipex_Q);
  R = bridge::shallowUpgradeToDPCPPTensor(_ipex_R);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return std::tuple<at::Tensor &,at::Tensor &>(Q, R);
}

std::tuple<at::Tensor,at::Tensor> AtenIpexCPUDefault::qr(const at::Tensor & self, bool some) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::qr(_ipex_self, some);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return std::tuple<at::Tensor,at::Tensor>(bridge::upgradeToDPCPPTensor(std::get<0>(_ipex_result)), bridge::upgradeToDPCPPTensor(std::get<1>(_ipex_result)));
}

std::tuple<at::Tensor,at::Tensor> AtenIpexCPUDefault::_qr_helper(const at::Tensor & self, bool some) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::_qr_helper(_ipex_self, some);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return std::tuple<at::Tensor,at::Tensor>(bridge::upgradeToDPCPPTensor(std::get<0>(_ipex_result)), bridge::upgradeToDPCPPTensor(std::get<1>(_ipex_result)));
}

std::tuple<at::Tensor &,at::Tensor &> AtenIpexCPUDefault::geqrf_out(at::Tensor & a, at::Tensor & tau, const at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(a.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(a.is_contiguous());
  TORCH_INTERNAL_ASSERT(tau.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(tau.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_a = bridge::shallowFallbackToCPUTensor(a);
  auto&& _ipex_tau = bridge::shallowFallbackToCPUTensor(tau);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::geqrf_out(_ipex_a, _ipex_tau, _ipex_self);
  a = bridge::shallowUpgradeToDPCPPTensor(_ipex_a);
  tau = bridge::shallowUpgradeToDPCPPTensor(_ipex_tau);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return std::tuple<at::Tensor &,at::Tensor &>(a, tau);
}

std::tuple<at::Tensor,at::Tensor> AtenIpexCPUDefault::geqrf(const at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::geqrf(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return std::tuple<at::Tensor,at::Tensor>(bridge::upgradeToDPCPPTensor(std::get<0>(_ipex_result)), bridge::upgradeToDPCPPTensor(std::get<1>(_ipex_result)));
}

at::Tensor & AtenIpexCPUDefault::orgqr_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & input2) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(input2.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(input2.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_input2 = bridge::shallowFallbackToCPUTensor(input2);
  auto&& _ipex_result = at::orgqr_out(_ipex_out, _ipex_self, _ipex_input2);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor AtenIpexCPUDefault::orgqr(const at::Tensor & self, const at::Tensor & input2) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(input2.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(input2.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_input2 = bridge::shallowFallbackToCPUTensor(input2);
  auto&& _ipex_result = at::orgqr(_ipex_self, _ipex_input2);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::ormqr_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & input2, const at::Tensor & input3, bool left, bool transpose) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(input2.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(input2.is_contiguous());
  TORCH_INTERNAL_ASSERT(input3.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(input3.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_input2 = bridge::shallowFallbackToCPUTensor(input2);
  auto&& _ipex_input3 = bridge::shallowFallbackToCPUTensor(input3);
  auto&& _ipex_result = at::ormqr_out(_ipex_out, _ipex_self, _ipex_input2, _ipex_input3, left, transpose);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor AtenIpexCPUDefault::ormqr(const at::Tensor & self, const at::Tensor & input2, const at::Tensor & input3, bool left, bool transpose) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(input2.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(input2.is_contiguous());
  TORCH_INTERNAL_ASSERT(input3.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(input3.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_input2 = bridge::shallowFallbackToCPUTensor(input2);
  auto&& _ipex_input3 = bridge::shallowFallbackToCPUTensor(input3);
  auto&& _ipex_result = at::ormqr(_ipex_self, _ipex_input2, _ipex_input3, left, transpose);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

std::tuple<at::Tensor,at::Tensor,at::Tensor> AtenIpexCPUDefault::_lu_with_info(const at::Tensor & self, bool pivot, bool check_errors) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::_lu_with_info(_ipex_self, pivot, check_errors);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return std::tuple<at::Tensor,at::Tensor,at::Tensor>(bridge::upgradeToDPCPPTensor(std::get<0>(_ipex_result)), bridge::upgradeToDPCPPTensor(std::get<1>(_ipex_result)), bridge::upgradeToDPCPPTensor(std::get<2>(_ipex_result)));
}

at::Tensor & AtenIpexCPUDefault::lu_solve_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & LU_data, const at::Tensor & LU_pivots) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(LU_data.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(LU_data.is_contiguous());
  TORCH_INTERNAL_ASSERT(LU_pivots.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(LU_pivots.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_LU_data = bridge::shallowFallbackToCPUTensor(LU_data);
  auto&& _ipex_LU_pivots = bridge::shallowFallbackToCPUTensor(LU_pivots);
  auto&& _ipex_result = at::lu_solve_out(_ipex_out, _ipex_self, _ipex_LU_data, _ipex_LU_pivots);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor AtenIpexCPUDefault::lu_solve(const at::Tensor & self, const at::Tensor & LU_data, const at::Tensor & LU_pivots) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(LU_data.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(LU_data.is_contiguous());
  TORCH_INTERNAL_ASSERT(LU_pivots.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(LU_pivots.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_LU_data = bridge::shallowFallbackToCPUTensor(LU_data);
  auto&& _ipex_LU_pivots = bridge::shallowFallbackToCPUTensor(LU_pivots);
  auto&& _ipex_result = at::lu_solve(_ipex_self, _ipex_LU_data, _ipex_LU_pivots);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::_lu_solve_helper(const at::Tensor & self, const at::Tensor & LU_data, const at::Tensor & LU_pivots) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(LU_data.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(LU_data.is_contiguous());
  TORCH_INTERNAL_ASSERT(LU_pivots.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(LU_pivots.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_LU_data = bridge::shallowFallbackToCPUTensor(LU_data);
  auto&& _ipex_LU_pivots = bridge::shallowFallbackToCPUTensor(LU_pivots);
  auto&& _ipex_result = at::_lu_solve_helper(_ipex_self, _ipex_LU_data, _ipex_LU_pivots);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::multinomial_out(at::Tensor & out, const at::Tensor & self, int64_t num_samples, bool replacement, at::Generator * generator) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::multinomial_out(_ipex_out, _ipex_self, num_samples, replacement, generator);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor AtenIpexCPUDefault::multinomial(const at::Tensor & self, int64_t num_samples, bool replacement, at::Generator * generator) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::multinomial(_ipex_self, num_samples, replacement, generator);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

std::tuple<at::Tensor,at::Tensor> AtenIpexCPUDefault::_multinomial_alias_setup(const at::Tensor & probs) {
  TORCH_INTERNAL_ASSERT(probs.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(probs.is_contiguous());
  auto&& _ipex_probs = bridge::shallowFallbackToCPUTensor(probs);
  auto&& _ipex_result = at::_multinomial_alias_setup(_ipex_probs);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return std::tuple<at::Tensor,at::Tensor>(bridge::upgradeToDPCPPTensor(std::get<0>(_ipex_result)), bridge::upgradeToDPCPPTensor(std::get<1>(_ipex_result)));
}

at::Tensor AtenIpexCPUDefault::_multinomial_alias_draw(const at::Tensor & J, const at::Tensor & q, int64_t num_samples, at::Generator * generator) {
  TORCH_INTERNAL_ASSERT(J.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(J.is_contiguous());
  TORCH_INTERNAL_ASSERT(q.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(q.is_contiguous());
  auto&& _ipex_J = bridge::shallowFallbackToCPUTensor(J);
  auto&& _ipex_q = bridge::shallowFallbackToCPUTensor(q);
  auto&& _ipex_result = at::_multinomial_alias_draw(_ipex_J, _ipex_q, num_samples, generator);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::lgamma_out(at::Tensor & out, const at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::lgamma_out(_ipex_out, _ipex_self);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor AtenIpexCPUDefault::lgamma(const at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::lgamma(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::digamma_out(at::Tensor & out, const at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::digamma_out(_ipex_out, _ipex_self);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor AtenIpexCPUDefault::digamma(const at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::digamma(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::polygamma_out(at::Tensor & out, int64_t n, const at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::polygamma_out(_ipex_out, n, _ipex_self);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor AtenIpexCPUDefault::polygamma(int64_t n, const at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::polygamma(n, _ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::erfinv(const at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::erfinv(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::erfinv_(at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = _ipex_self.erfinv_();
  self = bridge::shallowUpgradeToDPCPPTensor(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return self;
}

at::Tensor & AtenIpexCPUDefault::erfinv_out(at::Tensor & out, const at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::erfinv_out(_ipex_out, _ipex_self);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor AtenIpexCPUDefault::sign(const at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::sign(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::sign_(at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = _ipex_self.sign_();
  self = bridge::shallowUpgradeToDPCPPTensor(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return self;
}

at::Tensor & AtenIpexCPUDefault::sign_out(at::Tensor & out, const at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::sign_out(_ipex_out, _ipex_self);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor AtenIpexCPUDefault::dist(const at::Tensor & self, const at::Tensor & other, at::Scalar p) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(other.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(other.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_other = bridge::shallowFallbackToCPUTensor(other);
  auto&& _ipex_result = at::dist(_ipex_self, _ipex_other, p);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::atan2_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & other) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(other.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(other.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_other = bridge::shallowFallbackToCPUTensor(other);
  auto&& _ipex_result = at::atan2_out(_ipex_out, _ipex_self, _ipex_other);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor AtenIpexCPUDefault::atan2(const at::Tensor & self, const at::Tensor & other) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(other.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(other.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_other = bridge::shallowFallbackToCPUTensor(other);
  auto&& _ipex_result = at::atan2(_ipex_self, _ipex_other);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::lerp_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & end, at::Scalar weight) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(end.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(end.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_end = bridge::shallowFallbackToCPUTensor(end);
  auto&& _ipex_result = at::lerp_out(_ipex_out, _ipex_self, _ipex_end, weight);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor & AtenIpexCPUDefault::lerp_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & end, const at::Tensor & weight) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(end.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(end.is_contiguous());
  TORCH_INTERNAL_ASSERT(weight.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(weight.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_end = bridge::shallowFallbackToCPUTensor(end);
  auto&& _ipex_weight = bridge::shallowFallbackToCPUTensor(weight);
  auto&& _ipex_result = at::lerp_out(_ipex_out, _ipex_self, _ipex_end, _ipex_weight);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor AtenIpexCPUDefault::lerp(const at::Tensor & self, const at::Tensor & end, at::Scalar weight) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(end.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(end.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_end = bridge::shallowFallbackToCPUTensor(end);
  auto&& _ipex_result = at::lerp(_ipex_self, _ipex_end, weight);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::lerp(const at::Tensor & self, const at::Tensor & end, const at::Tensor & weight) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(end.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(end.is_contiguous());
  TORCH_INTERNAL_ASSERT(weight.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(weight.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_end = bridge::shallowFallbackToCPUTensor(end);
  auto&& _ipex_weight = bridge::shallowFallbackToCPUTensor(weight);
  auto&& _ipex_result = at::lerp(_ipex_self, _ipex_end, _ipex_weight);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::histc_out(at::Tensor & out, const at::Tensor & self, int64_t bins, at::Scalar min, at::Scalar max) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::histc_out(_ipex_out, _ipex_self, bins, min, max);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor AtenIpexCPUDefault::histc(const at::Tensor & self, int64_t bins, at::Scalar min, at::Scalar max) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::histc(_ipex_self, bins, min, max);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::fmod_out(at::Tensor & out, const at::Tensor & self, at::Scalar other) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::fmod_out(_ipex_out, _ipex_self, other);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor AtenIpexCPUDefault::fmod(const at::Tensor & self, at::Scalar other) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::fmod(_ipex_self, other);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::fmod_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & other) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(other.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(other.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_other = bridge::shallowFallbackToCPUTensor(other);
  auto&& _ipex_result = at::fmod_out(_ipex_out, _ipex_self, _ipex_other);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor AtenIpexCPUDefault::fmod(const at::Tensor & self, const at::Tensor & other) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(other.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(other.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_other = bridge::shallowFallbackToCPUTensor(other);
  auto&& _ipex_result = at::fmod(_ipex_self, _ipex_other);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::remainder_out(at::Tensor & out, const at::Tensor & self, at::Scalar other) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::remainder_out(_ipex_out, _ipex_self, other);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor AtenIpexCPUDefault::remainder(const at::Tensor & self, at::Scalar other) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::remainder(_ipex_self, other);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::remainder_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & other) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(other.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(other.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_other = bridge::shallowFallbackToCPUTensor(other);
  auto&& _ipex_result = at::remainder_out(_ipex_out, _ipex_self, _ipex_other);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor AtenIpexCPUDefault::remainder(const at::Tensor & self, const at::Tensor & other) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(other.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(other.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_other = bridge::shallowFallbackToCPUTensor(other);
  auto&& _ipex_result = at::remainder(_ipex_self, _ipex_other);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::min_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & other) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(other.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(other.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_other = bridge::shallowFallbackToCPUTensor(other);
  auto&& _ipex_result = at::min_out(_ipex_out, _ipex_self, _ipex_other);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor AtenIpexCPUDefault::min(const at::Tensor & self, const at::Tensor & other) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(other.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(other.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_other = bridge::shallowFallbackToCPUTensor(other);
  auto&& _ipex_result = at::min(_ipex_self, _ipex_other);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::min(const at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::min(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::max_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & other) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(other.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(other.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_other = bridge::shallowFallbackToCPUTensor(other);
  auto&& _ipex_result = at::max_out(_ipex_out, _ipex_self, _ipex_other);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor AtenIpexCPUDefault::max(const at::Tensor & self, const at::Tensor & other) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(other.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(other.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_other = bridge::shallowFallbackToCPUTensor(other);
  auto&& _ipex_result = at::max(_ipex_self, _ipex_other);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::max(const at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::max(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::median(const at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::median(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

std::tuple<at::Tensor &,at::Tensor &> AtenIpexCPUDefault::sort_out(at::Tensor & values, at::Tensor & indices, const at::Tensor & self, int64_t dim, bool descending) {
  TORCH_INTERNAL_ASSERT(values.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(values.is_contiguous());
  TORCH_INTERNAL_ASSERT(indices.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(indices.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_values = bridge::shallowFallbackToCPUTensor(values);
  auto&& _ipex_indices = bridge::shallowFallbackToCPUTensor(indices);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::sort_out(_ipex_values, _ipex_indices, _ipex_self, dim, descending);
  values = bridge::shallowUpgradeToDPCPPTensor(_ipex_values);
  indices = bridge::shallowUpgradeToDPCPPTensor(_ipex_indices);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return std::tuple<at::Tensor &,at::Tensor &>(values, indices);
}

std::tuple<at::Tensor,at::Tensor> AtenIpexCPUDefault::sort(const at::Tensor & self, int64_t dim, bool descending) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::sort(_ipex_self, dim, descending);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return std::tuple<at::Tensor,at::Tensor>(bridge::upgradeToDPCPPTensor(std::get<0>(_ipex_result)), bridge::upgradeToDPCPPTensor(std::get<1>(_ipex_result)));
}

at::Tensor AtenIpexCPUDefault::argsort(const at::Tensor & self, int64_t dim, bool descending) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::argsort(_ipex_self, dim, descending);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

std::tuple<at::Tensor &,at::Tensor &> AtenIpexCPUDefault::topk_out(at::Tensor & values, at::Tensor & indices, const at::Tensor & self, int64_t k, int64_t dim, bool largest, bool sorted) {
  TORCH_INTERNAL_ASSERT(values.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(values.is_contiguous());
  TORCH_INTERNAL_ASSERT(indices.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(indices.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_values = bridge::shallowFallbackToCPUTensor(values);
  auto&& _ipex_indices = bridge::shallowFallbackToCPUTensor(indices);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::topk_out(_ipex_values, _ipex_indices, _ipex_self, k, dim, largest, sorted);
  values = bridge::shallowUpgradeToDPCPPTensor(_ipex_values);
  indices = bridge::shallowUpgradeToDPCPPTensor(_ipex_indices);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return std::tuple<at::Tensor &,at::Tensor &>(values, indices);
}

std::tuple<at::Tensor,at::Tensor> AtenIpexCPUDefault::topk(const at::Tensor & self, int64_t k, int64_t dim, bool largest, bool sorted) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::topk(_ipex_self, k, dim, largest, sorted);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return std::tuple<at::Tensor,at::Tensor>(bridge::upgradeToDPCPPTensor(std::get<0>(_ipex_result)), bridge::upgradeToDPCPPTensor(std::get<1>(_ipex_result)));
}

at::Tensor AtenIpexCPUDefault::all(const at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::all(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::any(const at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::any(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::renorm_out(at::Tensor & out, const at::Tensor & self, at::Scalar p, int64_t dim, at::Scalar maxnorm) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::renorm_out(_ipex_out, _ipex_self, p, dim, maxnorm);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor AtenIpexCPUDefault::renorm(const at::Tensor & self, at::Scalar p, int64_t dim, at::Scalar maxnorm) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::renorm(_ipex_self, p, dim, maxnorm);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::unfold(const at::Tensor & self, int64_t dimension, int64_t size, int64_t step) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = _ipex_self.unfold(dimension, size, step);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

bool AtenIpexCPUDefault::equal(const at::Tensor & self, const at::Tensor & other) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(other.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(other.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_other = bridge::shallowFallbackToCPUTensor(other);
  auto&& _ipex_result = at::equal(_ipex_self, _ipex_other);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return _ipex_result;
}

at::Tensor & AtenIpexCPUDefault::pow_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & exponent) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(exponent.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(exponent.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_exponent = bridge::shallowFallbackToCPUTensor(exponent);
  auto&& _ipex_result = at::pow_out(_ipex_out, _ipex_self, _ipex_exponent);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor AtenIpexCPUDefault::pow(const at::Tensor & self, const at::Tensor & exponent) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(exponent.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(exponent.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_exponent = bridge::shallowFallbackToCPUTensor(exponent);
  auto&& _ipex_result = at::pow(_ipex_self, _ipex_exponent);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::pow_out(at::Tensor & out, at::Scalar self, const at::Tensor & exponent) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  TORCH_INTERNAL_ASSERT(exponent.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(exponent.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_exponent = bridge::shallowFallbackToCPUTensor(exponent);
  auto&& _ipex_result = at::pow_out(_ipex_out, self, _ipex_exponent);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor AtenIpexCPUDefault::pow(at::Scalar self, const at::Tensor & exponent) {
  TORCH_INTERNAL_ASSERT(exponent.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(exponent.is_contiguous());
  auto&& _ipex_exponent = bridge::shallowFallbackToCPUTensor(exponent);
  auto&& _ipex_result = at::pow(self, _ipex_exponent);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::normal_out(at::Tensor & out, const at::Tensor & mean, double std, at::Generator * generator) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  TORCH_INTERNAL_ASSERT(mean.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(mean.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_mean = bridge::shallowFallbackToCPUTensor(mean);
  auto&& _ipex_result = at::normal_out(_ipex_out, _ipex_mean, std, generator);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor AtenIpexCPUDefault::normal(const at::Tensor & mean, double std, at::Generator * generator) {
  TORCH_INTERNAL_ASSERT(mean.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(mean.is_contiguous());
  auto&& _ipex_mean = bridge::shallowFallbackToCPUTensor(mean);
  auto&& _ipex_result = at::normal(_ipex_mean, std, generator);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::normal_out(at::Tensor & out, double mean, const at::Tensor & std, at::Generator * generator) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  TORCH_INTERNAL_ASSERT(std.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(std.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_std = bridge::shallowFallbackToCPUTensor(std);
  auto&& _ipex_result = at::normal_out(_ipex_out, mean, _ipex_std, generator);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor AtenIpexCPUDefault::normal(double mean, const at::Tensor & std, at::Generator * generator) {
  TORCH_INTERNAL_ASSERT(std.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(std.is_contiguous());
  auto&& _ipex_std = bridge::shallowFallbackToCPUTensor(std);
  auto&& _ipex_result = at::normal(mean, _ipex_std, generator);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::normal_out(at::Tensor & out, const at::Tensor & mean, const at::Tensor & std, at::Generator * generator) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  TORCH_INTERNAL_ASSERT(mean.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(mean.is_contiguous());
  TORCH_INTERNAL_ASSERT(std.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(std.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_mean = bridge::shallowFallbackToCPUTensor(mean);
  auto&& _ipex_std = bridge::shallowFallbackToCPUTensor(std);
  auto&& _ipex_result = at::normal_out(_ipex_out, _ipex_mean, _ipex_std, generator);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor AtenIpexCPUDefault::normal(const at::Tensor & mean, const at::Tensor & std, at::Generator * generator) {
  TORCH_INTERNAL_ASSERT(mean.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(mean.is_contiguous());
  TORCH_INTERNAL_ASSERT(std.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(std.is_contiguous());
  auto&& _ipex_mean = bridge::shallowFallbackToCPUTensor(mean);
  auto&& _ipex_std = bridge::shallowFallbackToCPUTensor(std);
  auto&& _ipex_result = at::normal(_ipex_mean, _ipex_std, generator);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::normal(double mean, double std, at::IntArrayRef size, at::Generator * generator, const at::TensorOptions & options) {
  TORCH_INTERNAL_ASSERT(options.device().type() == at::DeviceType::DPCPP);
  at::TensorOptions _ipex_options = options.device(at::DeviceType::CPU);
  auto&& _ipex_result = at::normal(mean, std, size, generator, _ipex_options);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::normal_out(at::Tensor & out, double mean, double std, at::IntArrayRef size, at::Generator * generator) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_result = at::normal_out(_ipex_out, mean, std, size, generator);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor AtenIpexCPUDefault::alias(const at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::alias(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::_addr(const at::Tensor & self, const at::Tensor & vec1, const at::Tensor & vec2, at::Scalar beta, at::Scalar alpha) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(vec1.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(vec1.is_contiguous());
  TORCH_INTERNAL_ASSERT(vec2.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(vec2.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_vec1 = bridge::shallowFallbackToCPUTensor(vec1);
  auto&& _ipex_vec2 = bridge::shallowFallbackToCPUTensor(vec2);
  auto&& _ipex_result = at::_addr(_ipex_self, _ipex_vec1, _ipex_vec2, beta, alpha);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::_addr_(at::Tensor & self, const at::Tensor & vec1, const at::Tensor & vec2, at::Scalar beta, at::Scalar alpha) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(vec1.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(vec1.is_contiguous());
  TORCH_INTERNAL_ASSERT(vec2.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(vec2.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_vec1 = bridge::shallowFallbackToCPUTensor(vec1);
  auto&& _ipex_vec2 = bridge::shallowFallbackToCPUTensor(vec2);
  auto&& _ipex_result = at::_addr_(_ipex_self, _ipex_vec1, _ipex_vec2, beta, alpha);
  self = bridge::shallowUpgradeToDPCPPTensor(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return self;
}

at::Tensor & AtenIpexCPUDefault::_addr_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & vec1, const at::Tensor & vec2, at::Scalar beta, at::Scalar alpha) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(vec1.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(vec1.is_contiguous());
  TORCH_INTERNAL_ASSERT(vec2.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(vec2.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_vec1 = bridge::shallowFallbackToCPUTensor(vec1);
  auto&& _ipex_vec2 = bridge::shallowFallbackToCPUTensor(vec2);
  auto&& _ipex_result = at::_addr_out(_ipex_out, _ipex_self, _ipex_vec1, _ipex_vec2, beta, alpha);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor & AtenIpexCPUDefault::_index_copy_(at::Tensor & self, int64_t dim, const at::Tensor & index, const at::Tensor & source) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(index.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(index.is_contiguous());
  TORCH_INTERNAL_ASSERT(source.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(source.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_index = bridge::shallowFallbackToCPUTensor(index);
  auto&& _ipex_source = bridge::shallowFallbackToCPUTensor(source);
  auto&& _ipex_result = at::_index_copy_(_ipex_self, dim, _ipex_index, _ipex_source);
  self = bridge::shallowUpgradeToDPCPPTensor(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return self;
}

at::Tensor AtenIpexCPUDefault::_cumsum(const at::Tensor & self, int64_t dim) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::_cumsum(_ipex_self, dim);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::_cumsum_out(at::Tensor & out, const at::Tensor & self, int64_t dim) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::_cumsum_out(_ipex_out, _ipex_self, dim);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor AtenIpexCPUDefault::_cumprod(const at::Tensor & self, int64_t dim) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::_cumprod(_ipex_self, dim);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::_cumprod_out(at::Tensor & out, const at::Tensor & self, int64_t dim) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::_cumprod_out(_ipex_out, _ipex_self, dim);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor AtenIpexCPUDefault::_var(const at::Tensor & self, bool unbiased) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::_var(_ipex_self, unbiased);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::_std(const at::Tensor & self, bool unbiased) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::_std(_ipex_self, unbiased);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::_cat(at::TensorList tensors, int64_t dim) {
  auto&& _ipex_tensors = bridge::shallowFallbackToCPUTensorList(tensors);
  auto&& _ipex_result = at::_cat(_ipex_tensors, dim);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::_cat_out(at::Tensor & out, at::TensorList tensors, int64_t dim) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  auto&& _ipex_tensors = bridge::shallowFallbackToCPUTensorList(tensors);
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_result = at::_cat_out(_ipex_out, _ipex_tensors, dim);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

std::tuple<at::Tensor,at::Tensor> AtenIpexCPUDefault::_mode(const at::Tensor & self, int64_t dim, bool keepdim) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::_mode(_ipex_self, dim, keepdim);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return std::tuple<at::Tensor,at::Tensor>(bridge::upgradeToDPCPPTensor(std::get<0>(_ipex_result)), bridge::upgradeToDPCPPTensor(std::get<1>(_ipex_result)));
}

std::tuple<at::Tensor &,at::Tensor &> AtenIpexCPUDefault::_mode_out(at::Tensor & values, at::Tensor & indices, const at::Tensor & self, int64_t dim, bool keepdim) {
  TORCH_INTERNAL_ASSERT(values.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(values.is_contiguous());
  TORCH_INTERNAL_ASSERT(indices.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(indices.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_values = bridge::shallowFallbackToCPUTensor(values);
  auto&& _ipex_indices = bridge::shallowFallbackToCPUTensor(indices);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::_mode_out(_ipex_values, _ipex_indices, _ipex_self, dim, keepdim);
  values = bridge::shallowUpgradeToDPCPPTensor(_ipex_values);
  indices = bridge::shallowUpgradeToDPCPPTensor(_ipex_indices);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return std::tuple<at::Tensor &,at::Tensor &>(values, indices);
}

std::tuple<at::Tensor,at::Tensor> AtenIpexCPUDefault::_max(const at::Tensor & self, int64_t dim, bool keepdim) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::_max(_ipex_self, dim, keepdim);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return std::tuple<at::Tensor,at::Tensor>(bridge::upgradeToDPCPPTensor(std::get<0>(_ipex_result)), bridge::upgradeToDPCPPTensor(std::get<1>(_ipex_result)));
}

std::tuple<at::Tensor &,at::Tensor &> AtenIpexCPUDefault::_max_out(at::Tensor & max, at::Tensor & max_indices, const at::Tensor & self, int64_t dim, bool keepdim) {
  TORCH_INTERNAL_ASSERT(max.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(max.is_contiguous());
  TORCH_INTERNAL_ASSERT(max_indices.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(max_indices.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_max = bridge::shallowFallbackToCPUTensor(max);
  auto&& _ipex_max_indices = bridge::shallowFallbackToCPUTensor(max_indices);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::_max_out(_ipex_max, _ipex_max_indices, _ipex_self, dim, keepdim);
  max = bridge::shallowUpgradeToDPCPPTensor(_ipex_max);
  max_indices = bridge::shallowUpgradeToDPCPPTensor(_ipex_max_indices);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return std::tuple<at::Tensor &,at::Tensor &>(max, max_indices);
}

std::tuple<at::Tensor,at::Tensor> AtenIpexCPUDefault::_min(const at::Tensor & self, int64_t dim, bool keepdim) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::_min(_ipex_self, dim, keepdim);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return std::tuple<at::Tensor,at::Tensor>(bridge::upgradeToDPCPPTensor(std::get<0>(_ipex_result)), bridge::upgradeToDPCPPTensor(std::get<1>(_ipex_result)));
}

std::tuple<at::Tensor &,at::Tensor &> AtenIpexCPUDefault::_min_out(at::Tensor & min, at::Tensor & min_indices, const at::Tensor & self, int64_t dim, bool keepdim) {
  TORCH_INTERNAL_ASSERT(min.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(min.is_contiguous());
  TORCH_INTERNAL_ASSERT(min_indices.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(min_indices.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_min = bridge::shallowFallbackToCPUTensor(min);
  auto&& _ipex_min_indices = bridge::shallowFallbackToCPUTensor(min_indices);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::_min_out(_ipex_min, _ipex_min_indices, _ipex_self, dim, keepdim);
  min = bridge::shallowUpgradeToDPCPPTensor(_ipex_min);
  min_indices = bridge::shallowUpgradeToDPCPPTensor(_ipex_min_indices);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return std::tuple<at::Tensor &,at::Tensor &>(min, min_indices);
}

at::Tensor & AtenIpexCPUDefault::binary_cross_entropy_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & target, const at::Tensor & weight, int64_t reduction) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(target.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(target.is_contiguous());
  TORCH_INTERNAL_ASSERT(weight.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(weight.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_target = bridge::shallowFallbackToCPUTensor(target);
  auto&& _ipex_weight = bridge::shallowFallbackToCPUTensor(weight);
  auto&& _ipex_result = at::binary_cross_entropy_out(_ipex_out, _ipex_self, _ipex_target, _ipex_weight, reduction);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor AtenIpexCPUDefault::binary_cross_entropy(const at::Tensor & self, const at::Tensor & target, const at::Tensor & weight, int64_t reduction) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(target.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(target.is_contiguous());
  TORCH_INTERNAL_ASSERT(weight.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(weight.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_target = bridge::shallowFallbackToCPUTensor(target);
  auto&& _ipex_weight = bridge::shallowFallbackToCPUTensor(weight);
  auto&& _ipex_result = at::binary_cross_entropy(_ipex_self, _ipex_target, _ipex_weight, reduction);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::binary_cross_entropy_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & target, const at::Tensor & weight, int64_t reduction) {
  TORCH_INTERNAL_ASSERT(grad_input.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_input.is_contiguous());
  TORCH_INTERNAL_ASSERT(grad_output.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_output.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(target.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(target.is_contiguous());
  TORCH_INTERNAL_ASSERT(weight.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(weight.is_contiguous());
  auto&& _ipex_grad_input = bridge::shallowFallbackToCPUTensor(grad_input);
  auto&& _ipex_grad_output = bridge::shallowFallbackToCPUTensor(grad_output);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_target = bridge::shallowFallbackToCPUTensor(target);
  auto&& _ipex_weight = bridge::shallowFallbackToCPUTensor(weight);
  auto&& _ipex_result = at::binary_cross_entropy_backward_out(_ipex_grad_input, _ipex_grad_output, _ipex_self, _ipex_target, _ipex_weight, reduction);
  grad_input = bridge::shallowUpgradeToDPCPPTensor(_ipex_grad_input);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return grad_input;
}

at::Tensor AtenIpexCPUDefault::binary_cross_entropy_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & target, const at::Tensor & weight, int64_t reduction) {
  TORCH_INTERNAL_ASSERT(grad_output.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_output.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(target.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(target.is_contiguous());
  TORCH_INTERNAL_ASSERT(weight.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(weight.is_contiguous());
  auto&& _ipex_grad_output = bridge::shallowFallbackToCPUTensor(grad_output);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_target = bridge::shallowFallbackToCPUTensor(target);
  auto&& _ipex_weight = bridge::shallowFallbackToCPUTensor(weight);
  auto&& _ipex_result = at::binary_cross_entropy_backward(_ipex_grad_output, _ipex_self, _ipex_target, _ipex_weight, reduction);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::mse_loss_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & target, int64_t reduction) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(target.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(target.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_target = bridge::shallowFallbackToCPUTensor(target);
  auto&& _ipex_result = at::mse_loss_out(_ipex_out, _ipex_self, _ipex_target, reduction);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor AtenIpexCPUDefault::mse_loss(const at::Tensor & self, const at::Tensor & target, int64_t reduction) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(target.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(target.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_target = bridge::shallowFallbackToCPUTensor(target);
  auto&& _ipex_result = at::mse_loss(_ipex_self, _ipex_target, reduction);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::mse_loss_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & target, int64_t reduction) {
  TORCH_INTERNAL_ASSERT(grad_input.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_input.is_contiguous());
  TORCH_INTERNAL_ASSERT(grad_output.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_output.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(target.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(target.is_contiguous());
  auto&& _ipex_grad_input = bridge::shallowFallbackToCPUTensor(grad_input);
  auto&& _ipex_grad_output = bridge::shallowFallbackToCPUTensor(grad_output);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_target = bridge::shallowFallbackToCPUTensor(target);
  auto&& _ipex_result = at::mse_loss_backward_out(_ipex_grad_input, _ipex_grad_output, _ipex_self, _ipex_target, reduction);
  grad_input = bridge::shallowUpgradeToDPCPPTensor(_ipex_grad_input);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return grad_input;
}

at::Tensor AtenIpexCPUDefault::mse_loss_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & target, int64_t reduction) {
  TORCH_INTERNAL_ASSERT(grad_output.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_output.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(target.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(target.is_contiguous());
  auto&& _ipex_grad_output = bridge::shallowFallbackToCPUTensor(grad_output);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_target = bridge::shallowFallbackToCPUTensor(target);
  auto&& _ipex_result = at::mse_loss_backward(_ipex_grad_output, _ipex_self, _ipex_target, reduction);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::l1_loss_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & target, int64_t reduction) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(target.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(target.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_target = bridge::shallowFallbackToCPUTensor(target);
  auto&& _ipex_result = at::l1_loss_out(_ipex_out, _ipex_self, _ipex_target, reduction);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor AtenIpexCPUDefault::l1_loss(const at::Tensor & self, const at::Tensor & target, int64_t reduction) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(target.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(target.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_target = bridge::shallowFallbackToCPUTensor(target);
  auto&& _ipex_result = at::l1_loss(_ipex_self, _ipex_target, reduction);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::l1_loss_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & target, int64_t reduction) {
  TORCH_INTERNAL_ASSERT(grad_input.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_input.is_contiguous());
  TORCH_INTERNAL_ASSERT(grad_output.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_output.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(target.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(target.is_contiguous());
  auto&& _ipex_grad_input = bridge::shallowFallbackToCPUTensor(grad_input);
  auto&& _ipex_grad_output = bridge::shallowFallbackToCPUTensor(grad_output);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_target = bridge::shallowFallbackToCPUTensor(target);
  auto&& _ipex_result = at::l1_loss_backward_out(_ipex_grad_input, _ipex_grad_output, _ipex_self, _ipex_target, reduction);
  grad_input = bridge::shallowUpgradeToDPCPPTensor(_ipex_grad_input);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return grad_input;
}

at::Tensor AtenIpexCPUDefault::l1_loss_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & target, int64_t reduction) {
  TORCH_INTERNAL_ASSERT(grad_output.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_output.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(target.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(target.is_contiguous());
  auto&& _ipex_grad_output = bridge::shallowFallbackToCPUTensor(grad_output);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_target = bridge::shallowFallbackToCPUTensor(target);
  auto&& _ipex_result = at::l1_loss_backward(_ipex_grad_output, _ipex_self, _ipex_target, reduction);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::multi_margin_loss_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & target, at::Scalar p, at::Scalar margin, const at::Tensor & weight, int64_t reduction) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(target.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(target.is_contiguous());
  TORCH_INTERNAL_ASSERT(weight.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(weight.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_target = bridge::shallowFallbackToCPUTensor(target);
  auto&& _ipex_weight = bridge::shallowFallbackToCPUTensor(weight);
  auto&& _ipex_result = at::multi_margin_loss_out(_ipex_out, _ipex_self, _ipex_target, p, margin, _ipex_weight, reduction);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor AtenIpexCPUDefault::multi_margin_loss(const at::Tensor & self, const at::Tensor & target, at::Scalar p, at::Scalar margin, const at::Tensor & weight, int64_t reduction) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(target.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(target.is_contiguous());
  TORCH_INTERNAL_ASSERT(weight.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(weight.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_target = bridge::shallowFallbackToCPUTensor(target);
  auto&& _ipex_weight = bridge::shallowFallbackToCPUTensor(weight);
  auto&& _ipex_result = at::multi_margin_loss(_ipex_self, _ipex_target, p, margin, _ipex_weight, reduction);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::multi_margin_loss_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & target, at::Scalar p, at::Scalar margin, const at::Tensor & weight, int64_t reduction) {
  TORCH_INTERNAL_ASSERT(grad_input.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_input.is_contiguous());
  TORCH_INTERNAL_ASSERT(grad_output.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_output.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(target.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(target.is_contiguous());
  TORCH_INTERNAL_ASSERT(weight.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(weight.is_contiguous());
  auto&& _ipex_grad_input = bridge::shallowFallbackToCPUTensor(grad_input);
  auto&& _ipex_grad_output = bridge::shallowFallbackToCPUTensor(grad_output);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_target = bridge::shallowFallbackToCPUTensor(target);
  auto&& _ipex_weight = bridge::shallowFallbackToCPUTensor(weight);
  auto&& _ipex_result = at::multi_margin_loss_backward_out(_ipex_grad_input, _ipex_grad_output, _ipex_self, _ipex_target, p, margin, _ipex_weight, reduction);
  grad_input = bridge::shallowUpgradeToDPCPPTensor(_ipex_grad_input);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return grad_input;
}

at::Tensor AtenIpexCPUDefault::multi_margin_loss_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & target, at::Scalar p, at::Scalar margin, const at::Tensor & weight, int64_t reduction) {
  TORCH_INTERNAL_ASSERT(grad_output.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_output.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(target.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(target.is_contiguous());
  TORCH_INTERNAL_ASSERT(weight.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(weight.is_contiguous());
  auto&& _ipex_grad_output = bridge::shallowFallbackToCPUTensor(grad_output);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_target = bridge::shallowFallbackToCPUTensor(target);
  auto&& _ipex_weight = bridge::shallowFallbackToCPUTensor(weight);
  auto&& _ipex_result = at::multi_margin_loss_backward(_ipex_grad_output, _ipex_self, _ipex_target, p, margin, _ipex_weight, reduction);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::multilabel_margin_loss_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & target, int64_t reduction) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(target.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(target.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_target = bridge::shallowFallbackToCPUTensor(target);
  auto&& _ipex_result = at::multilabel_margin_loss_out(_ipex_out, _ipex_self, _ipex_target, reduction);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor AtenIpexCPUDefault::multilabel_margin_loss(const at::Tensor & self, const at::Tensor & target, int64_t reduction) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(target.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(target.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_target = bridge::shallowFallbackToCPUTensor(target);
  auto&& _ipex_result = at::multilabel_margin_loss(_ipex_self, _ipex_target, reduction);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

std::tuple<at::Tensor &,at::Tensor &> AtenIpexCPUDefault::multilabel_margin_loss_forward_out(at::Tensor & output, at::Tensor & is_target, const at::Tensor & self, const at::Tensor & target, int64_t reduction) {
  TORCH_INTERNAL_ASSERT(output.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(output.is_contiguous());
  TORCH_INTERNAL_ASSERT(is_target.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(is_target.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(target.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(target.is_contiguous());
  auto&& _ipex_output = bridge::shallowFallbackToCPUTensor(output);
  auto&& _ipex_is_target = bridge::shallowFallbackToCPUTensor(is_target);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_target = bridge::shallowFallbackToCPUTensor(target);
  auto&& _ipex_result = at::multilabel_margin_loss_forward_out(_ipex_output, _ipex_is_target, _ipex_self, _ipex_target, reduction);
  output = bridge::shallowUpgradeToDPCPPTensor(_ipex_output);
  is_target = bridge::shallowUpgradeToDPCPPTensor(_ipex_is_target);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return std::tuple<at::Tensor &,at::Tensor &>(output, is_target);
}

std::tuple<at::Tensor,at::Tensor> AtenIpexCPUDefault::multilabel_margin_loss_forward(const at::Tensor & self, const at::Tensor & target, int64_t reduction) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(target.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(target.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_target = bridge::shallowFallbackToCPUTensor(target);
  auto&& _ipex_result = at::multilabel_margin_loss_forward(_ipex_self, _ipex_target, reduction);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return std::tuple<at::Tensor,at::Tensor>(bridge::upgradeToDPCPPTensor(std::get<0>(_ipex_result)), bridge::upgradeToDPCPPTensor(std::get<1>(_ipex_result)));
}

at::Tensor & AtenIpexCPUDefault::multilabel_margin_loss_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & target, int64_t reduction, const at::Tensor & is_target) {
  TORCH_INTERNAL_ASSERT(grad_input.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_input.is_contiguous());
  TORCH_INTERNAL_ASSERT(grad_output.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_output.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(target.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(target.is_contiguous());
  TORCH_INTERNAL_ASSERT(is_target.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(is_target.is_contiguous());
  auto&& _ipex_grad_input = bridge::shallowFallbackToCPUTensor(grad_input);
  auto&& _ipex_grad_output = bridge::shallowFallbackToCPUTensor(grad_output);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_target = bridge::shallowFallbackToCPUTensor(target);
  auto&& _ipex_is_target = bridge::shallowFallbackToCPUTensor(is_target);
  auto&& _ipex_result = at::multilabel_margin_loss_backward_out(_ipex_grad_input, _ipex_grad_output, _ipex_self, _ipex_target, reduction, _ipex_is_target);
  grad_input = bridge::shallowUpgradeToDPCPPTensor(_ipex_grad_input);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return grad_input;
}

at::Tensor AtenIpexCPUDefault::multilabel_margin_loss_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & target, int64_t reduction, const at::Tensor & is_target) {
  TORCH_INTERNAL_ASSERT(grad_output.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_output.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(target.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(target.is_contiguous());
  TORCH_INTERNAL_ASSERT(is_target.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(is_target.is_contiguous());
  auto&& _ipex_grad_output = bridge::shallowFallbackToCPUTensor(grad_output);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_target = bridge::shallowFallbackToCPUTensor(target);
  auto&& _ipex_is_target = bridge::shallowFallbackToCPUTensor(is_target);
  auto&& _ipex_result = at::multilabel_margin_loss_backward(_ipex_grad_output, _ipex_self, _ipex_target, reduction, _ipex_is_target);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::nll_loss_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & target, const at::Tensor & weight, int64_t reduction, int64_t ignore_index) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(target.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(target.is_contiguous());
  TORCH_INTERNAL_ASSERT(weight.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(weight.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_target = bridge::shallowFallbackToCPUTensor(target);
  auto&& _ipex_weight = bridge::shallowFallbackToCPUTensor(weight);
  auto&& _ipex_result = at::nll_loss_out(_ipex_out, _ipex_self, _ipex_target, _ipex_weight, reduction, ignore_index);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor AtenIpexCPUDefault::nll_loss(const at::Tensor & self, const at::Tensor & target, const at::Tensor & weight, int64_t reduction, int64_t ignore_index) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(target.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(target.is_contiguous());
  TORCH_INTERNAL_ASSERT(weight.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(weight.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_target = bridge::shallowFallbackToCPUTensor(target);
  auto&& _ipex_weight = bridge::shallowFallbackToCPUTensor(weight);
  auto&& _ipex_result = at::nll_loss(_ipex_self, _ipex_target, _ipex_weight, reduction, ignore_index);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

std::tuple<at::Tensor &,at::Tensor &> AtenIpexCPUDefault::nll_loss_forward_out(at::Tensor & output, at::Tensor & total_weight, const at::Tensor & self, const at::Tensor & target, const at::Tensor & weight, int64_t reduction, int64_t ignore_index) {
  TORCH_INTERNAL_ASSERT(output.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(output.is_contiguous());
  TORCH_INTERNAL_ASSERT(total_weight.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(total_weight.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(target.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(target.is_contiguous());
  TORCH_INTERNAL_ASSERT(weight.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(weight.is_contiguous());
  auto&& _ipex_output = bridge::shallowFallbackToCPUTensor(output);
  auto&& _ipex_total_weight = bridge::shallowFallbackToCPUTensor(total_weight);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_target = bridge::shallowFallbackToCPUTensor(target);
  auto&& _ipex_weight = bridge::shallowFallbackToCPUTensor(weight);
  auto&& _ipex_result = at::nll_loss_forward_out(_ipex_output, _ipex_total_weight, _ipex_self, _ipex_target, _ipex_weight, reduction, ignore_index);
  output = bridge::shallowUpgradeToDPCPPTensor(_ipex_output);
  total_weight = bridge::shallowUpgradeToDPCPPTensor(_ipex_total_weight);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return std::tuple<at::Tensor &,at::Tensor &>(output, total_weight);
}

std::tuple<at::Tensor,at::Tensor> AtenIpexCPUDefault::nll_loss_forward(const at::Tensor & self, const at::Tensor & target, const at::Tensor & weight, int64_t reduction, int64_t ignore_index) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(target.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(target.is_contiguous());
  TORCH_INTERNAL_ASSERT(weight.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(weight.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_target = bridge::shallowFallbackToCPUTensor(target);
  auto&& _ipex_weight = bridge::shallowFallbackToCPUTensor(weight);
  auto&& _ipex_result = at::nll_loss_forward(_ipex_self, _ipex_target, _ipex_weight, reduction, ignore_index);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return std::tuple<at::Tensor,at::Tensor>(bridge::upgradeToDPCPPTensor(std::get<0>(_ipex_result)), bridge::upgradeToDPCPPTensor(std::get<1>(_ipex_result)));
}

at::Tensor & AtenIpexCPUDefault::nll_loss_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & target, const at::Tensor & weight, int64_t reduction, int64_t ignore_index, const at::Tensor & total_weight) {
  TORCH_INTERNAL_ASSERT(grad_input.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_input.is_contiguous());
  TORCH_INTERNAL_ASSERT(grad_output.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_output.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(target.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(target.is_contiguous());
  TORCH_INTERNAL_ASSERT(weight.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(weight.is_contiguous());
  TORCH_INTERNAL_ASSERT(total_weight.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(total_weight.is_contiguous());
  auto&& _ipex_grad_input = bridge::shallowFallbackToCPUTensor(grad_input);
  auto&& _ipex_grad_output = bridge::shallowFallbackToCPUTensor(grad_output);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_target = bridge::shallowFallbackToCPUTensor(target);
  auto&& _ipex_weight = bridge::shallowFallbackToCPUTensor(weight);
  auto&& _ipex_total_weight = bridge::shallowFallbackToCPUTensor(total_weight);
  auto&& _ipex_result = at::nll_loss_backward_out(_ipex_grad_input, _ipex_grad_output, _ipex_self, _ipex_target, _ipex_weight, reduction, ignore_index, _ipex_total_weight);
  grad_input = bridge::shallowUpgradeToDPCPPTensor(_ipex_grad_input);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return grad_input;
}

at::Tensor AtenIpexCPUDefault::nll_loss_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & target, const at::Tensor & weight, int64_t reduction, int64_t ignore_index, const at::Tensor & total_weight) {
  TORCH_INTERNAL_ASSERT(grad_output.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_output.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(target.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(target.is_contiguous());
  TORCH_INTERNAL_ASSERT(weight.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(weight.is_contiguous());
  TORCH_INTERNAL_ASSERT(total_weight.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(total_weight.is_contiguous());
  auto&& _ipex_grad_output = bridge::shallowFallbackToCPUTensor(grad_output);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_target = bridge::shallowFallbackToCPUTensor(target);
  auto&& _ipex_weight = bridge::shallowFallbackToCPUTensor(weight);
  auto&& _ipex_total_weight = bridge::shallowFallbackToCPUTensor(total_weight);
  auto&& _ipex_result = at::nll_loss_backward(_ipex_grad_output, _ipex_self, _ipex_target, _ipex_weight, reduction, ignore_index, _ipex_total_weight);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::nll_loss2d_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & target, const at::Tensor & weight, int64_t reduction, int64_t ignore_index) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(target.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(target.is_contiguous());
  TORCH_INTERNAL_ASSERT(weight.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(weight.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_target = bridge::shallowFallbackToCPUTensor(target);
  auto&& _ipex_weight = bridge::shallowFallbackToCPUTensor(weight);
  auto&& _ipex_result = at::nll_loss2d_out(_ipex_out, _ipex_self, _ipex_target, _ipex_weight, reduction, ignore_index);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor AtenIpexCPUDefault::nll_loss2d(const at::Tensor & self, const at::Tensor & target, const at::Tensor & weight, int64_t reduction, int64_t ignore_index) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(target.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(target.is_contiguous());
  TORCH_INTERNAL_ASSERT(weight.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(weight.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_target = bridge::shallowFallbackToCPUTensor(target);
  auto&& _ipex_weight = bridge::shallowFallbackToCPUTensor(weight);
  auto&& _ipex_result = at::nll_loss2d(_ipex_self, _ipex_target, _ipex_weight, reduction, ignore_index);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

std::tuple<at::Tensor &,at::Tensor &> AtenIpexCPUDefault::nll_loss2d_forward_out(at::Tensor & output, at::Tensor & total_weight, const at::Tensor & self, const at::Tensor & target, const at::Tensor & weight, int64_t reduction, int64_t ignore_index) {
  TORCH_INTERNAL_ASSERT(output.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(output.is_contiguous());
  TORCH_INTERNAL_ASSERT(total_weight.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(total_weight.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(target.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(target.is_contiguous());
  TORCH_INTERNAL_ASSERT(weight.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(weight.is_contiguous());
  auto&& _ipex_output = bridge::shallowFallbackToCPUTensor(output);
  auto&& _ipex_total_weight = bridge::shallowFallbackToCPUTensor(total_weight);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_target = bridge::shallowFallbackToCPUTensor(target);
  auto&& _ipex_weight = bridge::shallowFallbackToCPUTensor(weight);
  auto&& _ipex_result = at::nll_loss2d_forward_out(_ipex_output, _ipex_total_weight, _ipex_self, _ipex_target, _ipex_weight, reduction, ignore_index);
  output = bridge::shallowUpgradeToDPCPPTensor(_ipex_output);
  total_weight = bridge::shallowUpgradeToDPCPPTensor(_ipex_total_weight);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return std::tuple<at::Tensor &,at::Tensor &>(output, total_weight);
}

std::tuple<at::Tensor,at::Tensor> AtenIpexCPUDefault::nll_loss2d_forward(const at::Tensor & self, const at::Tensor & target, const at::Tensor & weight, int64_t reduction, int64_t ignore_index) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(target.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(target.is_contiguous());
  TORCH_INTERNAL_ASSERT(weight.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(weight.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_target = bridge::shallowFallbackToCPUTensor(target);
  auto&& _ipex_weight = bridge::shallowFallbackToCPUTensor(weight);
  auto&& _ipex_result = at::nll_loss2d_forward(_ipex_self, _ipex_target, _ipex_weight, reduction, ignore_index);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return std::tuple<at::Tensor,at::Tensor>(bridge::upgradeToDPCPPTensor(std::get<0>(_ipex_result)), bridge::upgradeToDPCPPTensor(std::get<1>(_ipex_result)));
}

at::Tensor & AtenIpexCPUDefault::nll_loss2d_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & target, const at::Tensor & weight, int64_t reduction, int64_t ignore_index, const at::Tensor & total_weight) {
  TORCH_INTERNAL_ASSERT(grad_input.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_input.is_contiguous());
  TORCH_INTERNAL_ASSERT(grad_output.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_output.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(target.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(target.is_contiguous());
  TORCH_INTERNAL_ASSERT(weight.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(weight.is_contiguous());
  TORCH_INTERNAL_ASSERT(total_weight.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(total_weight.is_contiguous());
  auto&& _ipex_grad_input = bridge::shallowFallbackToCPUTensor(grad_input);
  auto&& _ipex_grad_output = bridge::shallowFallbackToCPUTensor(grad_output);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_target = bridge::shallowFallbackToCPUTensor(target);
  auto&& _ipex_weight = bridge::shallowFallbackToCPUTensor(weight);
  auto&& _ipex_total_weight = bridge::shallowFallbackToCPUTensor(total_weight);
  auto&& _ipex_result = at::nll_loss2d_backward_out(_ipex_grad_input, _ipex_grad_output, _ipex_self, _ipex_target, _ipex_weight, reduction, ignore_index, _ipex_total_weight);
  grad_input = bridge::shallowUpgradeToDPCPPTensor(_ipex_grad_input);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return grad_input;
}

at::Tensor AtenIpexCPUDefault::nll_loss2d_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & target, const at::Tensor & weight, int64_t reduction, int64_t ignore_index, const at::Tensor & total_weight) {
  TORCH_INTERNAL_ASSERT(grad_output.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_output.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(target.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(target.is_contiguous());
  TORCH_INTERNAL_ASSERT(weight.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(weight.is_contiguous());
  TORCH_INTERNAL_ASSERT(total_weight.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(total_weight.is_contiguous());
  auto&& _ipex_grad_output = bridge::shallowFallbackToCPUTensor(grad_output);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_target = bridge::shallowFallbackToCPUTensor(target);
  auto&& _ipex_weight = bridge::shallowFallbackToCPUTensor(weight);
  auto&& _ipex_total_weight = bridge::shallowFallbackToCPUTensor(total_weight);
  auto&& _ipex_result = at::nll_loss2d_backward(_ipex_grad_output, _ipex_self, _ipex_target, _ipex_weight, reduction, ignore_index, _ipex_total_weight);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::smooth_l1_loss_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & target, int64_t reduction) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(target.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(target.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_target = bridge::shallowFallbackToCPUTensor(target);
  auto&& _ipex_result = at::smooth_l1_loss_out(_ipex_out, _ipex_self, _ipex_target, reduction);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor AtenIpexCPUDefault::smooth_l1_loss(const at::Tensor & self, const at::Tensor & target, int64_t reduction) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(target.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(target.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_target = bridge::shallowFallbackToCPUTensor(target);
  auto&& _ipex_result = at::smooth_l1_loss(_ipex_self, _ipex_target, reduction);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::smooth_l1_loss_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & target, int64_t reduction) {
  TORCH_INTERNAL_ASSERT(grad_input.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_input.is_contiguous());
  TORCH_INTERNAL_ASSERT(grad_output.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_output.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(target.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(target.is_contiguous());
  auto&& _ipex_grad_input = bridge::shallowFallbackToCPUTensor(grad_input);
  auto&& _ipex_grad_output = bridge::shallowFallbackToCPUTensor(grad_output);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_target = bridge::shallowFallbackToCPUTensor(target);
  auto&& _ipex_result = at::smooth_l1_loss_backward_out(_ipex_grad_input, _ipex_grad_output, _ipex_self, _ipex_target, reduction);
  grad_input = bridge::shallowUpgradeToDPCPPTensor(_ipex_grad_input);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return grad_input;
}

at::Tensor AtenIpexCPUDefault::smooth_l1_loss_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & target, int64_t reduction) {
  TORCH_INTERNAL_ASSERT(grad_output.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_output.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(target.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(target.is_contiguous());
  auto&& _ipex_grad_output = bridge::shallowFallbackToCPUTensor(grad_output);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_target = bridge::shallowFallbackToCPUTensor(target);
  auto&& _ipex_result = at::smooth_l1_loss_backward(_ipex_grad_output, _ipex_self, _ipex_target, reduction);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::soft_margin_loss_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & target, int64_t reduction) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(target.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(target.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_target = bridge::shallowFallbackToCPUTensor(target);
  auto&& _ipex_result = at::soft_margin_loss_out(_ipex_out, _ipex_self, _ipex_target, reduction);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor AtenIpexCPUDefault::soft_margin_loss(const at::Tensor & self, const at::Tensor & target, int64_t reduction) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(target.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(target.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_target = bridge::shallowFallbackToCPUTensor(target);
  auto&& _ipex_result = at::soft_margin_loss(_ipex_self, _ipex_target, reduction);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::soft_margin_loss_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & target, int64_t reduction) {
  TORCH_INTERNAL_ASSERT(grad_input.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_input.is_contiguous());
  TORCH_INTERNAL_ASSERT(grad_output.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_output.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(target.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(target.is_contiguous());
  auto&& _ipex_grad_input = bridge::shallowFallbackToCPUTensor(grad_input);
  auto&& _ipex_grad_output = bridge::shallowFallbackToCPUTensor(grad_output);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_target = bridge::shallowFallbackToCPUTensor(target);
  auto&& _ipex_result = at::soft_margin_loss_backward_out(_ipex_grad_input, _ipex_grad_output, _ipex_self, _ipex_target, reduction);
  grad_input = bridge::shallowUpgradeToDPCPPTensor(_ipex_grad_input);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return grad_input;
}

at::Tensor AtenIpexCPUDefault::soft_margin_loss_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & target, int64_t reduction) {
  TORCH_INTERNAL_ASSERT(grad_output.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_output.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(target.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(target.is_contiguous());
  auto&& _ipex_grad_output = bridge::shallowFallbackToCPUTensor(grad_output);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_target = bridge::shallowFallbackToCPUTensor(target);
  auto&& _ipex_result = at::soft_margin_loss_backward(_ipex_grad_output, _ipex_self, _ipex_target, reduction);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::elu_out(at::Tensor & out, const at::Tensor & self, at::Scalar alpha, at::Scalar scale, at::Scalar input_scale) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::elu_out(_ipex_out, _ipex_self, alpha, scale, input_scale);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor AtenIpexCPUDefault::elu(const at::Tensor & self, at::Scalar alpha, at::Scalar scale, at::Scalar input_scale) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::elu(_ipex_self, alpha, scale, input_scale);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::elu_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, at::Scalar alpha, at::Scalar scale, at::Scalar input_scale, const at::Tensor & output) {
  TORCH_INTERNAL_ASSERT(grad_input.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_input.is_contiguous());
  TORCH_INTERNAL_ASSERT(grad_output.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_output.is_contiguous());
  TORCH_INTERNAL_ASSERT(output.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(output.is_contiguous());
  auto&& _ipex_grad_input = bridge::shallowFallbackToCPUTensor(grad_input);
  auto&& _ipex_grad_output = bridge::shallowFallbackToCPUTensor(grad_output);
  auto&& _ipex_output = bridge::shallowFallbackToCPUTensor(output);
  auto&& _ipex_result = at::elu_backward_out(_ipex_grad_input, _ipex_grad_output, alpha, scale, input_scale, _ipex_output);
  grad_input = bridge::shallowUpgradeToDPCPPTensor(_ipex_grad_input);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return grad_input;
}

at::Tensor AtenIpexCPUDefault::elu_backward(const at::Tensor & grad_output, at::Scalar alpha, at::Scalar scale, at::Scalar input_scale, const at::Tensor & output) {
  TORCH_INTERNAL_ASSERT(grad_output.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_output.is_contiguous());
  TORCH_INTERNAL_ASSERT(output.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(output.is_contiguous());
  auto&& _ipex_grad_output = bridge::shallowFallbackToCPUTensor(grad_output);
  auto&& _ipex_output = bridge::shallowFallbackToCPUTensor(output);
  auto&& _ipex_result = at::elu_backward(_ipex_grad_output, alpha, scale, input_scale, _ipex_output);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::elu_(at::Tensor & self, at::Scalar alpha, at::Scalar scale, at::Scalar input_scale) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::elu_(_ipex_self, alpha, scale, input_scale);
  self = bridge::shallowUpgradeToDPCPPTensor(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return self;
}

at::Tensor & AtenIpexCPUDefault::glu_out(at::Tensor & out, const at::Tensor & self, int64_t dim) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::glu_out(_ipex_out, _ipex_self, dim);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor AtenIpexCPUDefault::glu(const at::Tensor & self, int64_t dim) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::glu(_ipex_self, dim);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::glu_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self, int64_t dim) {
  TORCH_INTERNAL_ASSERT(grad_input.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_input.is_contiguous());
  TORCH_INTERNAL_ASSERT(grad_output.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_output.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_grad_input = bridge::shallowFallbackToCPUTensor(grad_input);
  auto&& _ipex_grad_output = bridge::shallowFallbackToCPUTensor(grad_output);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::glu_backward_out(_ipex_grad_input, _ipex_grad_output, _ipex_self, dim);
  grad_input = bridge::shallowUpgradeToDPCPPTensor(_ipex_grad_input);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return grad_input;
}

at::Tensor AtenIpexCPUDefault::glu_backward(const at::Tensor & grad_output, const at::Tensor & self, int64_t dim) {
  TORCH_INTERNAL_ASSERT(grad_output.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_output.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_grad_output = bridge::shallowFallbackToCPUTensor(grad_output);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::glu_backward(_ipex_grad_output, _ipex_self, dim);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::hardtanh_out(at::Tensor & out, const at::Tensor & self, at::Scalar min_val, at::Scalar max_val) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::hardtanh_out(_ipex_out, _ipex_self, min_val, max_val);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor AtenIpexCPUDefault::hardtanh(const at::Tensor & self, at::Scalar min_val, at::Scalar max_val) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::hardtanh(_ipex_self, min_val, max_val);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::hardtanh_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self, at::Scalar min_val, at::Scalar max_val) {
  TORCH_INTERNAL_ASSERT(grad_input.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_input.is_contiguous());
  TORCH_INTERNAL_ASSERT(grad_output.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_output.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_grad_input = bridge::shallowFallbackToCPUTensor(grad_input);
  auto&& _ipex_grad_output = bridge::shallowFallbackToCPUTensor(grad_output);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::hardtanh_backward_out(_ipex_grad_input, _ipex_grad_output, _ipex_self, min_val, max_val);
  grad_input = bridge::shallowUpgradeToDPCPPTensor(_ipex_grad_input);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return grad_input;
}

at::Tensor AtenIpexCPUDefault::hardtanh_backward(const at::Tensor & grad_output, const at::Tensor & self, at::Scalar min_val, at::Scalar max_val) {
  TORCH_INTERNAL_ASSERT(grad_output.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_output.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_grad_output = bridge::shallowFallbackToCPUTensor(grad_output);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::hardtanh_backward(_ipex_grad_output, _ipex_self, min_val, max_val);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::hardtanh_(at::Tensor & self, at::Scalar min_val, at::Scalar max_val) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::hardtanh_(_ipex_self, min_val, max_val);
  self = bridge::shallowUpgradeToDPCPPTensor(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return self;
}

at::Tensor & AtenIpexCPUDefault::leaky_relu_out(at::Tensor & out, const at::Tensor & self, at::Scalar negative_slope) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::leaky_relu_out(_ipex_out, _ipex_self, negative_slope);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor AtenIpexCPUDefault::leaky_relu(const at::Tensor & self, at::Scalar negative_slope) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::leaky_relu(_ipex_self, negative_slope);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::leaky_relu_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self, at::Scalar negative_slope) {
  TORCH_INTERNAL_ASSERT(grad_input.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_input.is_contiguous());
  TORCH_INTERNAL_ASSERT(grad_output.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_output.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_grad_input = bridge::shallowFallbackToCPUTensor(grad_input);
  auto&& _ipex_grad_output = bridge::shallowFallbackToCPUTensor(grad_output);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::leaky_relu_backward_out(_ipex_grad_input, _ipex_grad_output, _ipex_self, negative_slope);
  grad_input = bridge::shallowUpgradeToDPCPPTensor(_ipex_grad_input);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return grad_input;
}

at::Tensor AtenIpexCPUDefault::leaky_relu_backward(const at::Tensor & grad_output, const at::Tensor & self, at::Scalar negative_slope) {
  TORCH_INTERNAL_ASSERT(grad_output.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_output.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_grad_output = bridge::shallowFallbackToCPUTensor(grad_output);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::leaky_relu_backward(_ipex_grad_output, _ipex_self, negative_slope);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::leaky_relu_(at::Tensor & self, at::Scalar negative_slope) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::leaky_relu_(_ipex_self, negative_slope);
  self = bridge::shallowUpgradeToDPCPPTensor(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return self;
}

at::Tensor & AtenIpexCPUDefault::log_sigmoid_out(at::Tensor & out, const at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::log_sigmoid_out(_ipex_out, _ipex_self);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor AtenIpexCPUDefault::log_sigmoid(const at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::log_sigmoid(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

std::tuple<at::Tensor &,at::Tensor &> AtenIpexCPUDefault::log_sigmoid_forward_out(at::Tensor & output, at::Tensor & buffer, const at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(output.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(output.is_contiguous());
  TORCH_INTERNAL_ASSERT(buffer.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(buffer.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_output = bridge::shallowFallbackToCPUTensor(output);
  auto&& _ipex_buffer = bridge::shallowFallbackToCPUTensor(buffer);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::log_sigmoid_forward_out(_ipex_output, _ipex_buffer, _ipex_self);
  output = bridge::shallowUpgradeToDPCPPTensor(_ipex_output);
  buffer = bridge::shallowUpgradeToDPCPPTensor(_ipex_buffer);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return std::tuple<at::Tensor &,at::Tensor &>(output, buffer);
}

std::tuple<at::Tensor,at::Tensor> AtenIpexCPUDefault::log_sigmoid_forward(const at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::log_sigmoid_forward(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return std::tuple<at::Tensor,at::Tensor>(bridge::upgradeToDPCPPTensor(std::get<0>(_ipex_result)), bridge::upgradeToDPCPPTensor(std::get<1>(_ipex_result)));
}

at::Tensor & AtenIpexCPUDefault::log_sigmoid_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & buffer) {
  TORCH_INTERNAL_ASSERT(grad_input.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_input.is_contiguous());
  TORCH_INTERNAL_ASSERT(grad_output.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_output.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(buffer.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(buffer.is_contiguous());
  auto&& _ipex_grad_input = bridge::shallowFallbackToCPUTensor(grad_input);
  auto&& _ipex_grad_output = bridge::shallowFallbackToCPUTensor(grad_output);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_buffer = bridge::shallowFallbackToCPUTensor(buffer);
  auto&& _ipex_result = at::log_sigmoid_backward_out(_ipex_grad_input, _ipex_grad_output, _ipex_self, _ipex_buffer);
  grad_input = bridge::shallowUpgradeToDPCPPTensor(_ipex_grad_input);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return grad_input;
}

at::Tensor AtenIpexCPUDefault::log_sigmoid_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & buffer) {
  TORCH_INTERNAL_ASSERT(grad_output.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_output.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(buffer.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(buffer.is_contiguous());
  auto&& _ipex_grad_output = bridge::shallowFallbackToCPUTensor(grad_output);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_buffer = bridge::shallowFallbackToCPUTensor(buffer);
  auto&& _ipex_result = at::log_sigmoid_backward(_ipex_grad_output, _ipex_self, _ipex_buffer);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::rrelu_with_noise_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & noise, at::Scalar lower, at::Scalar upper, bool training, at::Generator * generator) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(noise.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(noise.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_noise = bridge::shallowFallbackToCPUTensor(noise);
  auto&& _ipex_result = at::rrelu_with_noise_out(_ipex_out, _ipex_self, _ipex_noise, lower, upper, training, generator);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor AtenIpexCPUDefault::rrelu_with_noise(const at::Tensor & self, const at::Tensor & noise, at::Scalar lower, at::Scalar upper, bool training, at::Generator * generator) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(noise.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(noise.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_noise = bridge::shallowFallbackToCPUTensor(noise);
  auto&& _ipex_result = at::rrelu_with_noise(_ipex_self, _ipex_noise, lower, upper, training, generator);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::rrelu_with_noise_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & noise, at::Scalar lower, at::Scalar upper, bool training) {
  TORCH_INTERNAL_ASSERT(grad_input.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_input.is_contiguous());
  TORCH_INTERNAL_ASSERT(grad_output.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_output.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(noise.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(noise.is_contiguous());
  auto&& _ipex_grad_input = bridge::shallowFallbackToCPUTensor(grad_input);
  auto&& _ipex_grad_output = bridge::shallowFallbackToCPUTensor(grad_output);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_noise = bridge::shallowFallbackToCPUTensor(noise);
  auto&& _ipex_result = at::rrelu_with_noise_backward_out(_ipex_grad_input, _ipex_grad_output, _ipex_self, _ipex_noise, lower, upper, training);
  grad_input = bridge::shallowUpgradeToDPCPPTensor(_ipex_grad_input);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return grad_input;
}

at::Tensor AtenIpexCPUDefault::rrelu_with_noise_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & noise, at::Scalar lower, at::Scalar upper, bool training) {
  TORCH_INTERNAL_ASSERT(grad_output.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_output.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(noise.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(noise.is_contiguous());
  auto&& _ipex_grad_output = bridge::shallowFallbackToCPUTensor(grad_output);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_noise = bridge::shallowFallbackToCPUTensor(noise);
  auto&& _ipex_result = at::rrelu_with_noise_backward(_ipex_grad_output, _ipex_self, _ipex_noise, lower, upper, training);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::rrelu_with_noise_(at::Tensor & self, const at::Tensor & noise, at::Scalar lower, at::Scalar upper, bool training, at::Generator * generator) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(noise.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(noise.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_noise = bridge::shallowFallbackToCPUTensor(noise);
  auto&& _ipex_result = at::rrelu_with_noise_(_ipex_self, _ipex_noise, lower, upper, training, generator);
  self = bridge::shallowUpgradeToDPCPPTensor(_ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return self;
}

at::Tensor & AtenIpexCPUDefault::softplus_out(at::Tensor & out, const at::Tensor & self, at::Scalar beta, at::Scalar threshold) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::softplus_out(_ipex_out, _ipex_self, beta, threshold);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor AtenIpexCPUDefault::softplus(const at::Tensor & self, at::Scalar beta, at::Scalar threshold) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::softplus(_ipex_self, beta, threshold);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::softplus_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self, at::Scalar beta, at::Scalar threshold, const at::Tensor & output) {
  TORCH_INTERNAL_ASSERT(grad_input.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_input.is_contiguous());
  TORCH_INTERNAL_ASSERT(grad_output.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_output.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(output.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(output.is_contiguous());
  auto&& _ipex_grad_input = bridge::shallowFallbackToCPUTensor(grad_input);
  auto&& _ipex_grad_output = bridge::shallowFallbackToCPUTensor(grad_output);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_output = bridge::shallowFallbackToCPUTensor(output);
  auto&& _ipex_result = at::softplus_backward_out(_ipex_grad_input, _ipex_grad_output, _ipex_self, beta, threshold, _ipex_output);
  grad_input = bridge::shallowUpgradeToDPCPPTensor(_ipex_grad_input);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return grad_input;
}

at::Tensor AtenIpexCPUDefault::softplus_backward(const at::Tensor & grad_output, const at::Tensor & self, at::Scalar beta, at::Scalar threshold, const at::Tensor & output) {
  TORCH_INTERNAL_ASSERT(grad_output.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_output.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(output.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(output.is_contiguous());
  auto&& _ipex_grad_output = bridge::shallowFallbackToCPUTensor(grad_output);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_output = bridge::shallowFallbackToCPUTensor(output);
  auto&& _ipex_result = at::softplus_backward(_ipex_grad_output, _ipex_self, beta, threshold, _ipex_output);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::softshrink_out(at::Tensor & out, const at::Tensor & self, at::Scalar lambd) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::softshrink_out(_ipex_out, _ipex_self, lambd);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor AtenIpexCPUDefault::softshrink(const at::Tensor & self, at::Scalar lambd) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::softshrink(_ipex_self, lambd);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::softshrink_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self, at::Scalar lambd) {
  TORCH_INTERNAL_ASSERT(grad_input.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_input.is_contiguous());
  TORCH_INTERNAL_ASSERT(grad_output.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_output.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_grad_input = bridge::shallowFallbackToCPUTensor(grad_input);
  auto&& _ipex_grad_output = bridge::shallowFallbackToCPUTensor(grad_output);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::softshrink_backward_out(_ipex_grad_input, _ipex_grad_output, _ipex_self, lambd);
  grad_input = bridge::shallowUpgradeToDPCPPTensor(_ipex_grad_input);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return grad_input;
}

at::Tensor AtenIpexCPUDefault::softshrink_backward(const at::Tensor & grad_output, const at::Tensor & self, at::Scalar lambd) {
  TORCH_INTERNAL_ASSERT(grad_output.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_output.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_grad_output = bridge::shallowFallbackToCPUTensor(grad_output);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::softshrink_backward(_ipex_grad_output, _ipex_self, lambd);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::adaptive_avg_pool2d_out(at::Tensor & out, const at::Tensor & self, at::IntArrayRef output_size) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::adaptive_avg_pool2d_out(_ipex_out, _ipex_self, output_size);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor AtenIpexCPUDefault::adaptive_avg_pool2d(const at::Tensor & self, at::IntArrayRef output_size) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::adaptive_avg_pool2d(_ipex_self, output_size);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::_adaptive_avg_pool2d(const at::Tensor & self, at::IntArrayRef output_size) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::_adaptive_avg_pool2d(_ipex_self, output_size);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor AtenIpexCPUDefault::_adaptive_avg_pool2d_backward(const at::Tensor & grad_output, const at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(grad_output.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_output.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_grad_output = bridge::shallowFallbackToCPUTensor(grad_output);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::_adaptive_avg_pool2d_backward(_ipex_grad_output, _ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::adaptive_avg_pool3d_out(at::Tensor & out, const at::Tensor & self, at::IntArrayRef output_size) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::adaptive_avg_pool3d_out(_ipex_out, _ipex_self, output_size);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor AtenIpexCPUDefault::adaptive_avg_pool3d(const at::Tensor & self, at::IntArrayRef output_size) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::adaptive_avg_pool3d(_ipex_self, output_size);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::adaptive_avg_pool3d_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(grad_input.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_input.is_contiguous());
  TORCH_INTERNAL_ASSERT(grad_output.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_output.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_grad_input = bridge::shallowFallbackToCPUTensor(grad_input);
  auto&& _ipex_grad_output = bridge::shallowFallbackToCPUTensor(grad_output);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::adaptive_avg_pool3d_backward_out(_ipex_grad_input, _ipex_grad_output, _ipex_self);
  grad_input = bridge::shallowUpgradeToDPCPPTensor(_ipex_grad_input);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return grad_input;
}

at::Tensor AtenIpexCPUDefault::adaptive_avg_pool3d_backward(const at::Tensor & grad_output, const at::Tensor & self) {
  TORCH_INTERNAL_ASSERT(grad_output.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_output.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_grad_output = bridge::shallowFallbackToCPUTensor(grad_output);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::adaptive_avg_pool3d_backward(_ipex_grad_output, _ipex_self);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

std::tuple<at::Tensor &,at::Tensor &> AtenIpexCPUDefault::adaptive_max_pool2d_out(at::Tensor & out, at::Tensor & indices, const at::Tensor & self, at::IntArrayRef output_size) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  TORCH_INTERNAL_ASSERT(indices.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(indices.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_indices = bridge::shallowFallbackToCPUTensor(indices);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::adaptive_max_pool2d_out(_ipex_out, _ipex_indices, _ipex_self, output_size);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  indices = bridge::shallowUpgradeToDPCPPTensor(_ipex_indices);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return std::tuple<at::Tensor &,at::Tensor &>(out, indices);
}

std::tuple<at::Tensor,at::Tensor> AtenIpexCPUDefault::adaptive_max_pool2d(const at::Tensor & self, at::IntArrayRef output_size) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::adaptive_max_pool2d(_ipex_self, output_size);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return std::tuple<at::Tensor,at::Tensor>(bridge::upgradeToDPCPPTensor(std::get<0>(_ipex_result)), bridge::upgradeToDPCPPTensor(std::get<1>(_ipex_result)));
}

at::Tensor & AtenIpexCPUDefault::adaptive_max_pool2d_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & indices) {
  TORCH_INTERNAL_ASSERT(grad_input.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_input.is_contiguous());
  TORCH_INTERNAL_ASSERT(grad_output.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_output.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(indices.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(indices.is_contiguous());
  auto&& _ipex_grad_input = bridge::shallowFallbackToCPUTensor(grad_input);
  auto&& _ipex_grad_output = bridge::shallowFallbackToCPUTensor(grad_output);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_indices = bridge::shallowFallbackToCPUTensor(indices);
  auto&& _ipex_result = at::adaptive_max_pool2d_backward_out(_ipex_grad_input, _ipex_grad_output, _ipex_self, _ipex_indices);
  grad_input = bridge::shallowUpgradeToDPCPPTensor(_ipex_grad_input);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return grad_input;
}

at::Tensor AtenIpexCPUDefault::adaptive_max_pool2d_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & indices) {
  TORCH_INTERNAL_ASSERT(grad_output.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_output.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(indices.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(indices.is_contiguous());
  auto&& _ipex_grad_output = bridge::shallowFallbackToCPUTensor(grad_output);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_indices = bridge::shallowFallbackToCPUTensor(indices);
  auto&& _ipex_result = at::adaptive_max_pool2d_backward(_ipex_grad_output, _ipex_self, _ipex_indices);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

std::tuple<at::Tensor &,at::Tensor &> AtenIpexCPUDefault::adaptive_max_pool3d_out(at::Tensor & out, at::Tensor & indices, const at::Tensor & self, at::IntArrayRef output_size) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  TORCH_INTERNAL_ASSERT(indices.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(indices.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_indices = bridge::shallowFallbackToCPUTensor(indices);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::adaptive_max_pool3d_out(_ipex_out, _ipex_indices, _ipex_self, output_size);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  indices = bridge::shallowUpgradeToDPCPPTensor(_ipex_indices);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return std::tuple<at::Tensor &,at::Tensor &>(out, indices);
}

std::tuple<at::Tensor,at::Tensor> AtenIpexCPUDefault::adaptive_max_pool3d(const at::Tensor & self, at::IntArrayRef output_size) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::adaptive_max_pool3d(_ipex_self, output_size);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return std::tuple<at::Tensor,at::Tensor>(bridge::upgradeToDPCPPTensor(std::get<0>(_ipex_result)), bridge::upgradeToDPCPPTensor(std::get<1>(_ipex_result)));
}

at::Tensor & AtenIpexCPUDefault::adaptive_max_pool3d_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & indices) {
  TORCH_INTERNAL_ASSERT(grad_input.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_input.is_contiguous());
  TORCH_INTERNAL_ASSERT(grad_output.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_output.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(indices.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(indices.is_contiguous());
  auto&& _ipex_grad_input = bridge::shallowFallbackToCPUTensor(grad_input);
  auto&& _ipex_grad_output = bridge::shallowFallbackToCPUTensor(grad_output);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_indices = bridge::shallowFallbackToCPUTensor(indices);
  auto&& _ipex_result = at::adaptive_max_pool3d_backward_out(_ipex_grad_input, _ipex_grad_output, _ipex_self, _ipex_indices);
  grad_input = bridge::shallowUpgradeToDPCPPTensor(_ipex_grad_input);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return grad_input;
}

at::Tensor AtenIpexCPUDefault::adaptive_max_pool3d_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & indices) {
  TORCH_INTERNAL_ASSERT(grad_output.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_output.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(indices.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(indices.is_contiguous());
  auto&& _ipex_grad_output = bridge::shallowFallbackToCPUTensor(grad_output);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_indices = bridge::shallowFallbackToCPUTensor(indices);
  auto&& _ipex_result = at::adaptive_max_pool3d_backward(_ipex_grad_output, _ipex_self, _ipex_indices);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::avg_pool2d_out(at::Tensor & out, const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::avg_pool2d_out(_ipex_out, _ipex_self, kernel_size, stride, padding, ceil_mode, count_include_pad, divisor_override);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor AtenIpexCPUDefault::avg_pool2d(const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::avg_pool2d(_ipex_self, kernel_size, stride, padding, ceil_mode, count_include_pad, divisor_override);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::avg_pool2d_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override) {
  TORCH_INTERNAL_ASSERT(grad_input.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_input.is_contiguous());
  TORCH_INTERNAL_ASSERT(grad_output.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_output.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_grad_input = bridge::shallowFallbackToCPUTensor(grad_input);
  auto&& _ipex_grad_output = bridge::shallowFallbackToCPUTensor(grad_output);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::avg_pool2d_backward_out(_ipex_grad_input, _ipex_grad_output, _ipex_self, kernel_size, stride, padding, ceil_mode, count_include_pad, divisor_override);
  grad_input = bridge::shallowUpgradeToDPCPPTensor(_ipex_grad_input);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return grad_input;
}

at::Tensor AtenIpexCPUDefault::avg_pool2d_backward(const at::Tensor & grad_output, const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override) {
  TORCH_INTERNAL_ASSERT(grad_output.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_output.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_grad_output = bridge::shallowFallbackToCPUTensor(grad_output);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::avg_pool2d_backward(_ipex_grad_output, _ipex_self, kernel_size, stride, padding, ceil_mode, count_include_pad, divisor_override);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::avg_pool3d_out(at::Tensor & out, const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::avg_pool3d_out(_ipex_out, _ipex_self, kernel_size, stride, padding, ceil_mode, count_include_pad, divisor_override);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor AtenIpexCPUDefault::avg_pool3d(const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::avg_pool3d(_ipex_self, kernel_size, stride, padding, ceil_mode, count_include_pad, divisor_override);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::avg_pool3d_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override) {
  TORCH_INTERNAL_ASSERT(grad_input.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_input.is_contiguous());
  TORCH_INTERNAL_ASSERT(grad_output.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_output.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_grad_input = bridge::shallowFallbackToCPUTensor(grad_input);
  auto&& _ipex_grad_output = bridge::shallowFallbackToCPUTensor(grad_output);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::avg_pool3d_backward_out(_ipex_grad_input, _ipex_grad_output, _ipex_self, kernel_size, stride, padding, ceil_mode, count_include_pad, divisor_override);
  grad_input = bridge::shallowUpgradeToDPCPPTensor(_ipex_grad_input);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return grad_input;
}

at::Tensor AtenIpexCPUDefault::avg_pool3d_backward(const at::Tensor & grad_output, const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override) {
  TORCH_INTERNAL_ASSERT(grad_output.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_output.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_grad_output = bridge::shallowFallbackToCPUTensor(grad_output);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::avg_pool3d_backward(_ipex_grad_output, _ipex_self, kernel_size, stride, padding, ceil_mode, count_include_pad, divisor_override);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

std::tuple<at::Tensor &,at::Tensor &> AtenIpexCPUDefault::fractional_max_pool2d_out(at::Tensor & output, at::Tensor & indices, const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef output_size, const at::Tensor & random_samples) {
  TORCH_INTERNAL_ASSERT(output.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(output.is_contiguous());
  TORCH_INTERNAL_ASSERT(indices.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(indices.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(random_samples.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(random_samples.is_contiguous());
  auto&& _ipex_output = bridge::shallowFallbackToCPUTensor(output);
  auto&& _ipex_indices = bridge::shallowFallbackToCPUTensor(indices);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_random_samples = bridge::shallowFallbackToCPUTensor(random_samples);
  auto&& _ipex_result = at::fractional_max_pool2d_out(_ipex_output, _ipex_indices, _ipex_self, kernel_size, output_size, _ipex_random_samples);
  output = bridge::shallowUpgradeToDPCPPTensor(_ipex_output);
  indices = bridge::shallowUpgradeToDPCPPTensor(_ipex_indices);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return std::tuple<at::Tensor &,at::Tensor &>(output, indices);
}

std::tuple<at::Tensor,at::Tensor> AtenIpexCPUDefault::fractional_max_pool2d(const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef output_size, const at::Tensor & random_samples) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(random_samples.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(random_samples.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_random_samples = bridge::shallowFallbackToCPUTensor(random_samples);
  auto&& _ipex_result = at::fractional_max_pool2d(_ipex_self, kernel_size, output_size, _ipex_random_samples);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return std::tuple<at::Tensor,at::Tensor>(bridge::upgradeToDPCPPTensor(std::get<0>(_ipex_result)), bridge::upgradeToDPCPPTensor(std::get<1>(_ipex_result)));
}

at::Tensor & AtenIpexCPUDefault::fractional_max_pool2d_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef output_size, const at::Tensor & indices) {
  TORCH_INTERNAL_ASSERT(grad_input.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_input.is_contiguous());
  TORCH_INTERNAL_ASSERT(grad_output.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_output.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(indices.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(indices.is_contiguous());
  auto&& _ipex_grad_input = bridge::shallowFallbackToCPUTensor(grad_input);
  auto&& _ipex_grad_output = bridge::shallowFallbackToCPUTensor(grad_output);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_indices = bridge::shallowFallbackToCPUTensor(indices);
  auto&& _ipex_result = at::fractional_max_pool2d_backward_out(_ipex_grad_input, _ipex_grad_output, _ipex_self, kernel_size, output_size, _ipex_indices);
  grad_input = bridge::shallowUpgradeToDPCPPTensor(_ipex_grad_input);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return grad_input;
}

at::Tensor AtenIpexCPUDefault::fractional_max_pool2d_backward(const at::Tensor & grad_output, const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef output_size, const at::Tensor & indices) {
  TORCH_INTERNAL_ASSERT(grad_output.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_output.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(indices.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(indices.is_contiguous());
  auto&& _ipex_grad_output = bridge::shallowFallbackToCPUTensor(grad_output);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_indices = bridge::shallowFallbackToCPUTensor(indices);
  auto&& _ipex_result = at::fractional_max_pool2d_backward(_ipex_grad_output, _ipex_self, kernel_size, output_size, _ipex_indices);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

std::tuple<at::Tensor &,at::Tensor &> AtenIpexCPUDefault::fractional_max_pool3d_out(at::Tensor & output, at::Tensor & indices, const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef output_size, const at::Tensor & random_samples) {
  TORCH_INTERNAL_ASSERT(output.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(output.is_contiguous());
  TORCH_INTERNAL_ASSERT(indices.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(indices.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(random_samples.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(random_samples.is_contiguous());
  auto&& _ipex_output = bridge::shallowFallbackToCPUTensor(output);
  auto&& _ipex_indices = bridge::shallowFallbackToCPUTensor(indices);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_random_samples = bridge::shallowFallbackToCPUTensor(random_samples);
  auto&& _ipex_result = at::fractional_max_pool3d_out(_ipex_output, _ipex_indices, _ipex_self, kernel_size, output_size, _ipex_random_samples);
  output = bridge::shallowUpgradeToDPCPPTensor(_ipex_output);
  indices = bridge::shallowUpgradeToDPCPPTensor(_ipex_indices);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return std::tuple<at::Tensor &,at::Tensor &>(output, indices);
}

std::tuple<at::Tensor,at::Tensor> AtenIpexCPUDefault::fractional_max_pool3d(const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef output_size, const at::Tensor & random_samples) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(random_samples.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(random_samples.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_random_samples = bridge::shallowFallbackToCPUTensor(random_samples);
  auto&& _ipex_result = at::fractional_max_pool3d(_ipex_self, kernel_size, output_size, _ipex_random_samples);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return std::tuple<at::Tensor,at::Tensor>(bridge::upgradeToDPCPPTensor(std::get<0>(_ipex_result)), bridge::upgradeToDPCPPTensor(std::get<1>(_ipex_result)));
}

at::Tensor & AtenIpexCPUDefault::fractional_max_pool3d_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef output_size, const at::Tensor & indices) {
  TORCH_INTERNAL_ASSERT(grad_input.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_input.is_contiguous());
  TORCH_INTERNAL_ASSERT(grad_output.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_output.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(indices.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(indices.is_contiguous());
  auto&& _ipex_grad_input = bridge::shallowFallbackToCPUTensor(grad_input);
  auto&& _ipex_grad_output = bridge::shallowFallbackToCPUTensor(grad_output);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_indices = bridge::shallowFallbackToCPUTensor(indices);
  auto&& _ipex_result = at::fractional_max_pool3d_backward_out(_ipex_grad_input, _ipex_grad_output, _ipex_self, kernel_size, output_size, _ipex_indices);
  grad_input = bridge::shallowUpgradeToDPCPPTensor(_ipex_grad_input);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return grad_input;
}

at::Tensor AtenIpexCPUDefault::fractional_max_pool3d_backward(const at::Tensor & grad_output, const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef output_size, const at::Tensor & indices) {
  TORCH_INTERNAL_ASSERT(grad_output.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_output.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(indices.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(indices.is_contiguous());
  auto&& _ipex_grad_output = bridge::shallowFallbackToCPUTensor(grad_output);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_indices = bridge::shallowFallbackToCPUTensor(indices);
  auto&& _ipex_result = at::fractional_max_pool3d_backward(_ipex_grad_output, _ipex_self, kernel_size, output_size, _ipex_indices);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

std::tuple<at::Tensor &,at::Tensor &> AtenIpexCPUDefault::max_pool2d_with_indices_out(at::Tensor & out, at::Tensor & indices, const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef dilation, bool ceil_mode) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  TORCH_INTERNAL_ASSERT(indices.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(indices.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_indices = bridge::shallowFallbackToCPUTensor(indices);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::max_pool2d_with_indices_out(_ipex_out, _ipex_indices, _ipex_self, kernel_size, stride, padding, dilation, ceil_mode);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  indices = bridge::shallowUpgradeToDPCPPTensor(_ipex_indices);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return std::tuple<at::Tensor &,at::Tensor &>(out, indices);
}

std::tuple<at::Tensor,at::Tensor> AtenIpexCPUDefault::max_pool2d_with_indices(const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef dilation, bool ceil_mode) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::max_pool2d_with_indices(_ipex_self, kernel_size, stride, padding, dilation, ceil_mode);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return std::tuple<at::Tensor,at::Tensor>(bridge::upgradeToDPCPPTensor(std::get<0>(_ipex_result)), bridge::upgradeToDPCPPTensor(std::get<1>(_ipex_result)));
}

at::Tensor & AtenIpexCPUDefault::max_pool2d_with_indices_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef dilation, bool ceil_mode, const at::Tensor & indices) {
  TORCH_INTERNAL_ASSERT(grad_input.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_input.is_contiguous());
  TORCH_INTERNAL_ASSERT(grad_output.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_output.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(indices.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(indices.is_contiguous());
  auto&& _ipex_grad_input = bridge::shallowFallbackToCPUTensor(grad_input);
  auto&& _ipex_grad_output = bridge::shallowFallbackToCPUTensor(grad_output);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_indices = bridge::shallowFallbackToCPUTensor(indices);
  auto&& _ipex_result = at::max_pool2d_with_indices_backward_out(_ipex_grad_input, _ipex_grad_output, _ipex_self, kernel_size, stride, padding, dilation, ceil_mode, _ipex_indices);
  grad_input = bridge::shallowUpgradeToDPCPPTensor(_ipex_grad_input);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return grad_input;
}

at::Tensor AtenIpexCPUDefault::max_pool2d_with_indices_backward(const at::Tensor & grad_output, const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef dilation, bool ceil_mode, const at::Tensor & indices) {
  TORCH_INTERNAL_ASSERT(grad_output.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_output.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(indices.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(indices.is_contiguous());
  auto&& _ipex_grad_output = bridge::shallowFallbackToCPUTensor(grad_output);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_indices = bridge::shallowFallbackToCPUTensor(indices);
  auto&& _ipex_result = at::max_pool2d_with_indices_backward(_ipex_grad_output, _ipex_self, kernel_size, stride, padding, dilation, ceil_mode, _ipex_indices);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

std::tuple<at::Tensor &,at::Tensor &> AtenIpexCPUDefault::max_pool3d_with_indices_out(at::Tensor & out, at::Tensor & indices, const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef dilation, bool ceil_mode) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  TORCH_INTERNAL_ASSERT(indices.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(indices.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_indices = bridge::shallowFallbackToCPUTensor(indices);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::max_pool3d_with_indices_out(_ipex_out, _ipex_indices, _ipex_self, kernel_size, stride, padding, dilation, ceil_mode);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  indices = bridge::shallowUpgradeToDPCPPTensor(_ipex_indices);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return std::tuple<at::Tensor &,at::Tensor &>(out, indices);
}

std::tuple<at::Tensor,at::Tensor> AtenIpexCPUDefault::max_pool3d_with_indices(const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef dilation, bool ceil_mode) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::max_pool3d_with_indices(_ipex_self, kernel_size, stride, padding, dilation, ceil_mode);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return std::tuple<at::Tensor,at::Tensor>(bridge::upgradeToDPCPPTensor(std::get<0>(_ipex_result)), bridge::upgradeToDPCPPTensor(std::get<1>(_ipex_result)));
}

at::Tensor & AtenIpexCPUDefault::max_pool3d_with_indices_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef dilation, bool ceil_mode, const at::Tensor & indices) {
  TORCH_INTERNAL_ASSERT(grad_input.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_input.is_contiguous());
  TORCH_INTERNAL_ASSERT(grad_output.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_output.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(indices.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(indices.is_contiguous());
  auto&& _ipex_grad_input = bridge::shallowFallbackToCPUTensor(grad_input);
  auto&& _ipex_grad_output = bridge::shallowFallbackToCPUTensor(grad_output);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_indices = bridge::shallowFallbackToCPUTensor(indices);
  auto&& _ipex_result = at::max_pool3d_with_indices_backward_out(_ipex_grad_input, _ipex_grad_output, _ipex_self, kernel_size, stride, padding, dilation, ceil_mode, _ipex_indices);
  grad_input = bridge::shallowUpgradeToDPCPPTensor(_ipex_grad_input);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return grad_input;
}

at::Tensor AtenIpexCPUDefault::max_pool3d_with_indices_backward(const at::Tensor & grad_output, const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef dilation, bool ceil_mode, const at::Tensor & indices) {
  TORCH_INTERNAL_ASSERT(grad_output.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_output.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(indices.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(indices.is_contiguous());
  auto&& _ipex_grad_output = bridge::shallowFallbackToCPUTensor(grad_output);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_indices = bridge::shallowFallbackToCPUTensor(indices);
  auto&& _ipex_result = at::max_pool3d_with_indices_backward(_ipex_grad_output, _ipex_self, kernel_size, stride, padding, dilation, ceil_mode, _ipex_indices);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::max_unpool2d_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & indices, at::IntArrayRef output_size) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(indices.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(indices.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_indices = bridge::shallowFallbackToCPUTensor(indices);
  auto&& _ipex_result = at::max_unpool2d_out(_ipex_out, _ipex_self, _ipex_indices, output_size);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor AtenIpexCPUDefault::max_unpool2d(const at::Tensor & self, const at::Tensor & indices, at::IntArrayRef output_size) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(indices.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(indices.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_indices = bridge::shallowFallbackToCPUTensor(indices);
  auto&& _ipex_result = at::max_unpool2d(_ipex_self, _ipex_indices, output_size);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::max_unpool2d_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & indices, at::IntArrayRef output_size) {
  TORCH_INTERNAL_ASSERT(grad_input.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_input.is_contiguous());
  TORCH_INTERNAL_ASSERT(grad_output.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_output.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(indices.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(indices.is_contiguous());
  auto&& _ipex_grad_input = bridge::shallowFallbackToCPUTensor(grad_input);
  auto&& _ipex_grad_output = bridge::shallowFallbackToCPUTensor(grad_output);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_indices = bridge::shallowFallbackToCPUTensor(indices);
  auto&& _ipex_result = at::max_unpool2d_backward_out(_ipex_grad_input, _ipex_grad_output, _ipex_self, _ipex_indices, output_size);
  grad_input = bridge::shallowUpgradeToDPCPPTensor(_ipex_grad_input);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return grad_input;
}

at::Tensor AtenIpexCPUDefault::max_unpool2d_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & indices, at::IntArrayRef output_size) {
  TORCH_INTERNAL_ASSERT(grad_output.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_output.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(indices.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(indices.is_contiguous());
  auto&& _ipex_grad_output = bridge::shallowFallbackToCPUTensor(grad_output);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_indices = bridge::shallowFallbackToCPUTensor(indices);
  auto&& _ipex_result = at::max_unpool2d_backward(_ipex_grad_output, _ipex_self, _ipex_indices, output_size);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::max_unpool3d_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & indices, at::IntArrayRef output_size, at::IntArrayRef stride, at::IntArrayRef padding) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(indices.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(indices.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_indices = bridge::shallowFallbackToCPUTensor(indices);
  auto&& _ipex_result = at::max_unpool3d_out(_ipex_out, _ipex_self, _ipex_indices, output_size, stride, padding);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor AtenIpexCPUDefault::max_unpool3d(const at::Tensor & self, const at::Tensor & indices, at::IntArrayRef output_size, at::IntArrayRef stride, at::IntArrayRef padding) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(indices.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(indices.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_indices = bridge::shallowFallbackToCPUTensor(indices);
  auto&& _ipex_result = at::max_unpool3d(_ipex_self, _ipex_indices, output_size, stride, padding);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::max_unpool3d_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & indices, at::IntArrayRef output_size, at::IntArrayRef stride, at::IntArrayRef padding) {
  TORCH_INTERNAL_ASSERT(grad_input.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_input.is_contiguous());
  TORCH_INTERNAL_ASSERT(grad_output.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_output.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(indices.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(indices.is_contiguous());
  auto&& _ipex_grad_input = bridge::shallowFallbackToCPUTensor(grad_input);
  auto&& _ipex_grad_output = bridge::shallowFallbackToCPUTensor(grad_output);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_indices = bridge::shallowFallbackToCPUTensor(indices);
  auto&& _ipex_result = at::max_unpool3d_backward_out(_ipex_grad_input, _ipex_grad_output, _ipex_self, _ipex_indices, output_size, stride, padding);
  grad_input = bridge::shallowUpgradeToDPCPPTensor(_ipex_grad_input);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return grad_input;
}

at::Tensor AtenIpexCPUDefault::max_unpool3d_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & indices, at::IntArrayRef output_size, at::IntArrayRef stride, at::IntArrayRef padding) {
  TORCH_INTERNAL_ASSERT(grad_output.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_output.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(indices.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(indices.is_contiguous());
  auto&& _ipex_grad_output = bridge::shallowFallbackToCPUTensor(grad_output);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_indices = bridge::shallowFallbackToCPUTensor(indices);
  auto&& _ipex_result = at::max_unpool3d_backward(_ipex_grad_output, _ipex_self, _ipex_indices, output_size, stride, padding);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::reflection_pad1d_out(at::Tensor & out, const at::Tensor & self, at::IntArrayRef padding) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::reflection_pad1d_out(_ipex_out, _ipex_self, padding);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor AtenIpexCPUDefault::reflection_pad1d(const at::Tensor & self, at::IntArrayRef padding) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::reflection_pad1d(_ipex_self, padding);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::reflection_pad1d_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self, at::IntArrayRef padding) {
  TORCH_INTERNAL_ASSERT(grad_input.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_input.is_contiguous());
  TORCH_INTERNAL_ASSERT(grad_output.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_output.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_grad_input = bridge::shallowFallbackToCPUTensor(grad_input);
  auto&& _ipex_grad_output = bridge::shallowFallbackToCPUTensor(grad_output);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::reflection_pad1d_backward_out(_ipex_grad_input, _ipex_grad_output, _ipex_self, padding);
  grad_input = bridge::shallowUpgradeToDPCPPTensor(_ipex_grad_input);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return grad_input;
}

at::Tensor AtenIpexCPUDefault::reflection_pad1d_backward(const at::Tensor & grad_output, const at::Tensor & self, at::IntArrayRef padding) {
  TORCH_INTERNAL_ASSERT(grad_output.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_output.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_grad_output = bridge::shallowFallbackToCPUTensor(grad_output);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::reflection_pad1d_backward(_ipex_grad_output, _ipex_self, padding);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::reflection_pad2d_out(at::Tensor & out, const at::Tensor & self, at::IntArrayRef padding) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::reflection_pad2d_out(_ipex_out, _ipex_self, padding);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor AtenIpexCPUDefault::reflection_pad2d(const at::Tensor & self, at::IntArrayRef padding) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::reflection_pad2d(_ipex_self, padding);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::reflection_pad2d_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self, at::IntArrayRef padding) {
  TORCH_INTERNAL_ASSERT(grad_input.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_input.is_contiguous());
  TORCH_INTERNAL_ASSERT(grad_output.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_output.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_grad_input = bridge::shallowFallbackToCPUTensor(grad_input);
  auto&& _ipex_grad_output = bridge::shallowFallbackToCPUTensor(grad_output);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::reflection_pad2d_backward_out(_ipex_grad_input, _ipex_grad_output, _ipex_self, padding);
  grad_input = bridge::shallowUpgradeToDPCPPTensor(_ipex_grad_input);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return grad_input;
}

at::Tensor AtenIpexCPUDefault::reflection_pad2d_backward(const at::Tensor & grad_output, const at::Tensor & self, at::IntArrayRef padding) {
  TORCH_INTERNAL_ASSERT(grad_output.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_output.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_grad_output = bridge::shallowFallbackToCPUTensor(grad_output);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::reflection_pad2d_backward(_ipex_grad_output, _ipex_self, padding);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::replication_pad1d_out(at::Tensor & out, const at::Tensor & self, at::IntArrayRef padding) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::replication_pad1d_out(_ipex_out, _ipex_self, padding);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor AtenIpexCPUDefault::replication_pad1d(const at::Tensor & self, at::IntArrayRef padding) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::replication_pad1d(_ipex_self, padding);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::replication_pad1d_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self, at::IntArrayRef padding) {
  TORCH_INTERNAL_ASSERT(grad_input.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_input.is_contiguous());
  TORCH_INTERNAL_ASSERT(grad_output.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_output.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_grad_input = bridge::shallowFallbackToCPUTensor(grad_input);
  auto&& _ipex_grad_output = bridge::shallowFallbackToCPUTensor(grad_output);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::replication_pad1d_backward_out(_ipex_grad_input, _ipex_grad_output, _ipex_self, padding);
  grad_input = bridge::shallowUpgradeToDPCPPTensor(_ipex_grad_input);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return grad_input;
}

at::Tensor AtenIpexCPUDefault::replication_pad1d_backward(const at::Tensor & grad_output, const at::Tensor & self, at::IntArrayRef padding) {
  TORCH_INTERNAL_ASSERT(grad_output.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_output.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_grad_output = bridge::shallowFallbackToCPUTensor(grad_output);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::replication_pad1d_backward(_ipex_grad_output, _ipex_self, padding);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::replication_pad2d_out(at::Tensor & out, const at::Tensor & self, at::IntArrayRef padding) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::replication_pad2d_out(_ipex_out, _ipex_self, padding);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor AtenIpexCPUDefault::replication_pad2d(const at::Tensor & self, at::IntArrayRef padding) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::replication_pad2d(_ipex_self, padding);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::replication_pad2d_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self, at::IntArrayRef padding) {
  TORCH_INTERNAL_ASSERT(grad_input.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_input.is_contiguous());
  TORCH_INTERNAL_ASSERT(grad_output.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_output.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_grad_input = bridge::shallowFallbackToCPUTensor(grad_input);
  auto&& _ipex_grad_output = bridge::shallowFallbackToCPUTensor(grad_output);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::replication_pad2d_backward_out(_ipex_grad_input, _ipex_grad_output, _ipex_self, padding);
  grad_input = bridge::shallowUpgradeToDPCPPTensor(_ipex_grad_input);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return grad_input;
}

at::Tensor AtenIpexCPUDefault::replication_pad2d_backward(const at::Tensor & grad_output, const at::Tensor & self, at::IntArrayRef padding) {
  TORCH_INTERNAL_ASSERT(grad_output.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_output.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_grad_output = bridge::shallowFallbackToCPUTensor(grad_output);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::replication_pad2d_backward(_ipex_grad_output, _ipex_self, padding);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::replication_pad3d_out(at::Tensor & out, const at::Tensor & self, at::IntArrayRef padding) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::replication_pad3d_out(_ipex_out, _ipex_self, padding);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor AtenIpexCPUDefault::replication_pad3d(const at::Tensor & self, at::IntArrayRef padding) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::replication_pad3d(_ipex_self, padding);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::replication_pad3d_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self, at::IntArrayRef padding) {
  TORCH_INTERNAL_ASSERT(grad_input.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_input.is_contiguous());
  TORCH_INTERNAL_ASSERT(grad_output.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_output.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_grad_input = bridge::shallowFallbackToCPUTensor(grad_input);
  auto&& _ipex_grad_output = bridge::shallowFallbackToCPUTensor(grad_output);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::replication_pad3d_backward_out(_ipex_grad_input, _ipex_grad_output, _ipex_self, padding);
  grad_input = bridge::shallowUpgradeToDPCPPTensor(_ipex_grad_input);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return grad_input;
}

at::Tensor AtenIpexCPUDefault::replication_pad3d_backward(const at::Tensor & grad_output, const at::Tensor & self, at::IntArrayRef padding) {
  TORCH_INTERNAL_ASSERT(grad_output.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_output.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_grad_output = bridge::shallowFallbackToCPUTensor(grad_output);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::replication_pad3d_backward(_ipex_grad_output, _ipex_self, padding);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::upsample_linear1d_out(at::Tensor & out, const at::Tensor & self, at::IntArrayRef output_size, bool align_corners) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::upsample_linear1d_out(_ipex_out, _ipex_self, output_size, align_corners);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor AtenIpexCPUDefault::upsample_linear1d(const at::Tensor & self, at::IntArrayRef output_size, bool align_corners) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::upsample_linear1d(_ipex_self, output_size, align_corners);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::upsample_linear1d_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, at::IntArrayRef output_size, at::IntArrayRef input_size, bool align_corners) {
  TORCH_INTERNAL_ASSERT(grad_input.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_input.is_contiguous());
  TORCH_INTERNAL_ASSERT(grad_output.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_output.is_contiguous());
  auto&& _ipex_grad_input = bridge::shallowFallbackToCPUTensor(grad_input);
  auto&& _ipex_grad_output = bridge::shallowFallbackToCPUTensor(grad_output);
  auto&& _ipex_result = at::upsample_linear1d_backward_out(_ipex_grad_input, _ipex_grad_output, output_size, input_size, align_corners);
  grad_input = bridge::shallowUpgradeToDPCPPTensor(_ipex_grad_input);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return grad_input;
}

at::Tensor AtenIpexCPUDefault::upsample_linear1d_backward(const at::Tensor & grad_output, at::IntArrayRef output_size, at::IntArrayRef input_size, bool align_corners) {
  TORCH_INTERNAL_ASSERT(grad_output.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_output.is_contiguous());
  auto&& _ipex_grad_output = bridge::shallowFallbackToCPUTensor(grad_output);
  auto&& _ipex_result = at::upsample_linear1d_backward(_ipex_grad_output, output_size, input_size, align_corners);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::upsample_bilinear2d_out(at::Tensor & out, const at::Tensor & self, at::IntArrayRef output_size, bool align_corners) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::upsample_bilinear2d_out(_ipex_out, _ipex_self, output_size, align_corners);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor AtenIpexCPUDefault::upsample_bilinear2d(const at::Tensor & self, at::IntArrayRef output_size, bool align_corners) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::upsample_bilinear2d(_ipex_self, output_size, align_corners);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::upsample_bilinear2d_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, at::IntArrayRef output_size, at::IntArrayRef input_size, bool align_corners) {
  TORCH_INTERNAL_ASSERT(grad_input.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_input.is_contiguous());
  TORCH_INTERNAL_ASSERT(grad_output.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_output.is_contiguous());
  auto&& _ipex_grad_input = bridge::shallowFallbackToCPUTensor(grad_input);
  auto&& _ipex_grad_output = bridge::shallowFallbackToCPUTensor(grad_output);
  auto&& _ipex_result = at::upsample_bilinear2d_backward_out(_ipex_grad_input, _ipex_grad_output, output_size, input_size, align_corners);
  grad_input = bridge::shallowUpgradeToDPCPPTensor(_ipex_grad_input);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return grad_input;
}

at::Tensor AtenIpexCPUDefault::upsample_bilinear2d_backward(const at::Tensor & grad_output, at::IntArrayRef output_size, at::IntArrayRef input_size, bool align_corners) {
  TORCH_INTERNAL_ASSERT(grad_output.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_output.is_contiguous());
  auto&& _ipex_grad_output = bridge::shallowFallbackToCPUTensor(grad_output);
  auto&& _ipex_result = at::upsample_bilinear2d_backward(_ipex_grad_output, output_size, input_size, align_corners);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::upsample_bicubic2d_out(at::Tensor & out, const at::Tensor & self, at::IntArrayRef output_size, bool align_corners) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::upsample_bicubic2d_out(_ipex_out, _ipex_self, output_size, align_corners);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor AtenIpexCPUDefault::upsample_bicubic2d(const at::Tensor & self, at::IntArrayRef output_size, bool align_corners) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::upsample_bicubic2d(_ipex_self, output_size, align_corners);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::upsample_bicubic2d_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, at::IntArrayRef output_size, at::IntArrayRef input_size, bool align_corners) {
  TORCH_INTERNAL_ASSERT(grad_input.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_input.is_contiguous());
  TORCH_INTERNAL_ASSERT(grad_output.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_output.is_contiguous());
  auto&& _ipex_grad_input = bridge::shallowFallbackToCPUTensor(grad_input);
  auto&& _ipex_grad_output = bridge::shallowFallbackToCPUTensor(grad_output);
  auto&& _ipex_result = at::upsample_bicubic2d_backward_out(_ipex_grad_input, _ipex_grad_output, output_size, input_size, align_corners);
  grad_input = bridge::shallowUpgradeToDPCPPTensor(_ipex_grad_input);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return grad_input;
}

at::Tensor AtenIpexCPUDefault::upsample_bicubic2d_backward(const at::Tensor & grad_output, at::IntArrayRef output_size, at::IntArrayRef input_size, bool align_corners) {
  TORCH_INTERNAL_ASSERT(grad_output.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_output.is_contiguous());
  auto&& _ipex_grad_output = bridge::shallowFallbackToCPUTensor(grad_output);
  auto&& _ipex_result = at::upsample_bicubic2d_backward(_ipex_grad_output, output_size, input_size, align_corners);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::upsample_trilinear3d_out(at::Tensor & out, const at::Tensor & self, at::IntArrayRef output_size, bool align_corners) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::upsample_trilinear3d_out(_ipex_out, _ipex_self, output_size, align_corners);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor AtenIpexCPUDefault::upsample_trilinear3d(const at::Tensor & self, at::IntArrayRef output_size, bool align_corners) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::upsample_trilinear3d(_ipex_self, output_size, align_corners);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::upsample_trilinear3d_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, at::IntArrayRef output_size, at::IntArrayRef input_size, bool align_corners) {
  TORCH_INTERNAL_ASSERT(grad_input.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_input.is_contiguous());
  TORCH_INTERNAL_ASSERT(grad_output.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_output.is_contiguous());
  auto&& _ipex_grad_input = bridge::shallowFallbackToCPUTensor(grad_input);
  auto&& _ipex_grad_output = bridge::shallowFallbackToCPUTensor(grad_output);
  auto&& _ipex_result = at::upsample_trilinear3d_backward_out(_ipex_grad_input, _ipex_grad_output, output_size, input_size, align_corners);
  grad_input = bridge::shallowUpgradeToDPCPPTensor(_ipex_grad_input);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return grad_input;
}

at::Tensor AtenIpexCPUDefault::upsample_trilinear3d_backward(const at::Tensor & grad_output, at::IntArrayRef output_size, at::IntArrayRef input_size, bool align_corners) {
  TORCH_INTERNAL_ASSERT(grad_output.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_output.is_contiguous());
  auto&& _ipex_grad_output = bridge::shallowFallbackToCPUTensor(grad_output);
  auto&& _ipex_result = at::upsample_trilinear3d_backward(_ipex_grad_output, output_size, input_size, align_corners);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::upsample_nearest1d_out(at::Tensor & out, const at::Tensor & self, at::IntArrayRef output_size) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::upsample_nearest1d_out(_ipex_out, _ipex_self, output_size);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor AtenIpexCPUDefault::upsample_nearest1d(const at::Tensor & self, at::IntArrayRef output_size) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::upsample_nearest1d(_ipex_self, output_size);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::upsample_nearest1d_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, at::IntArrayRef output_size, at::IntArrayRef input_size) {
  TORCH_INTERNAL_ASSERT(grad_input.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_input.is_contiguous());
  TORCH_INTERNAL_ASSERT(grad_output.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_output.is_contiguous());
  auto&& _ipex_grad_input = bridge::shallowFallbackToCPUTensor(grad_input);
  auto&& _ipex_grad_output = bridge::shallowFallbackToCPUTensor(grad_output);
  auto&& _ipex_result = at::upsample_nearest1d_backward_out(_ipex_grad_input, _ipex_grad_output, output_size, input_size);
  grad_input = bridge::shallowUpgradeToDPCPPTensor(_ipex_grad_input);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return grad_input;
}

at::Tensor AtenIpexCPUDefault::upsample_nearest1d_backward(const at::Tensor & grad_output, at::IntArrayRef output_size, at::IntArrayRef input_size) {
  TORCH_INTERNAL_ASSERT(grad_output.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_output.is_contiguous());
  auto&& _ipex_grad_output = bridge::shallowFallbackToCPUTensor(grad_output);
  auto&& _ipex_result = at::upsample_nearest1d_backward(_ipex_grad_output, output_size, input_size);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::upsample_nearest2d_out(at::Tensor & out, const at::Tensor & self, at::IntArrayRef output_size) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::upsample_nearest2d_out(_ipex_out, _ipex_self, output_size);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor AtenIpexCPUDefault::upsample_nearest2d(const at::Tensor & self, at::IntArrayRef output_size) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::upsample_nearest2d(_ipex_self, output_size);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::upsample_nearest2d_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, at::IntArrayRef output_size, at::IntArrayRef input_size) {
  TORCH_INTERNAL_ASSERT(grad_input.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_input.is_contiguous());
  TORCH_INTERNAL_ASSERT(grad_output.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_output.is_contiguous());
  auto&& _ipex_grad_input = bridge::shallowFallbackToCPUTensor(grad_input);
  auto&& _ipex_grad_output = bridge::shallowFallbackToCPUTensor(grad_output);
  auto&& _ipex_result = at::upsample_nearest2d_backward_out(_ipex_grad_input, _ipex_grad_output, output_size, input_size);
  grad_input = bridge::shallowUpgradeToDPCPPTensor(_ipex_grad_input);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return grad_input;
}

at::Tensor AtenIpexCPUDefault::upsample_nearest2d_backward(const at::Tensor & grad_output, at::IntArrayRef output_size, at::IntArrayRef input_size) {
  TORCH_INTERNAL_ASSERT(grad_output.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_output.is_contiguous());
  auto&& _ipex_grad_output = bridge::shallowFallbackToCPUTensor(grad_output);
  auto&& _ipex_result = at::upsample_nearest2d_backward(_ipex_grad_output, output_size, input_size);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::upsample_nearest3d_out(at::Tensor & out, const at::Tensor & self, at::IntArrayRef output_size) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::upsample_nearest3d_out(_ipex_out, _ipex_self, output_size);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor AtenIpexCPUDefault::upsample_nearest3d(const at::Tensor & self, at::IntArrayRef output_size) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::upsample_nearest3d(_ipex_self, output_size);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::upsample_nearest3d_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, at::IntArrayRef output_size, at::IntArrayRef input_size) {
  TORCH_INTERNAL_ASSERT(grad_input.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_input.is_contiguous());
  TORCH_INTERNAL_ASSERT(grad_output.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_output.is_contiguous());
  auto&& _ipex_grad_input = bridge::shallowFallbackToCPUTensor(grad_input);
  auto&& _ipex_grad_output = bridge::shallowFallbackToCPUTensor(grad_output);
  auto&& _ipex_result = at::upsample_nearest3d_backward_out(_ipex_grad_input, _ipex_grad_output, output_size, input_size);
  grad_input = bridge::shallowUpgradeToDPCPPTensor(_ipex_grad_input);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return grad_input;
}

at::Tensor AtenIpexCPUDefault::upsample_nearest3d_backward(const at::Tensor & grad_output, at::IntArrayRef output_size, at::IntArrayRef input_size) {
  TORCH_INTERNAL_ASSERT(grad_output.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_output.is_contiguous());
  auto&& _ipex_grad_output = bridge::shallowFallbackToCPUTensor(grad_output);
  auto&& _ipex_result = at::upsample_nearest3d_backward(_ipex_grad_output, output_size, input_size);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::sigmoid_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & output) {
  TORCH_INTERNAL_ASSERT(grad_input.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_input.is_contiguous());
  TORCH_INTERNAL_ASSERT(grad_output.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_output.is_contiguous());
  TORCH_INTERNAL_ASSERT(output.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(output.is_contiguous());
  auto&& _ipex_grad_input = bridge::shallowFallbackToCPUTensor(grad_input);
  auto&& _ipex_grad_output = bridge::shallowFallbackToCPUTensor(grad_output);
  auto&& _ipex_output = bridge::shallowFallbackToCPUTensor(output);
  auto&& _ipex_result = at::sigmoid_backward_out(_ipex_grad_input, _ipex_grad_output, _ipex_output);
  grad_input = bridge::shallowUpgradeToDPCPPTensor(_ipex_grad_input);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return grad_input;
}

at::Tensor AtenIpexCPUDefault::sigmoid_backward(const at::Tensor & grad_output, const at::Tensor & output) {
  TORCH_INTERNAL_ASSERT(grad_output.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_output.is_contiguous());
  TORCH_INTERNAL_ASSERT(output.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(output.is_contiguous());
  auto&& _ipex_grad_output = bridge::shallowFallbackToCPUTensor(grad_output);
  auto&& _ipex_output = bridge::shallowFallbackToCPUTensor(output);
  auto&& _ipex_result = at::sigmoid_backward(_ipex_grad_output, _ipex_output);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::tanh_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & output) {
  TORCH_INTERNAL_ASSERT(grad_input.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_input.is_contiguous());
  TORCH_INTERNAL_ASSERT(grad_output.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_output.is_contiguous());
  TORCH_INTERNAL_ASSERT(output.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(output.is_contiguous());
  auto&& _ipex_grad_input = bridge::shallowFallbackToCPUTensor(grad_input);
  auto&& _ipex_grad_output = bridge::shallowFallbackToCPUTensor(grad_output);
  auto&& _ipex_output = bridge::shallowFallbackToCPUTensor(output);
  auto&& _ipex_result = at::tanh_backward_out(_ipex_grad_input, _ipex_grad_output, _ipex_output);
  grad_input = bridge::shallowUpgradeToDPCPPTensor(_ipex_grad_input);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return grad_input;
}

at::Tensor AtenIpexCPUDefault::tanh_backward(const at::Tensor & grad_output, const at::Tensor & output) {
  TORCH_INTERNAL_ASSERT(grad_output.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_output.is_contiguous());
  TORCH_INTERNAL_ASSERT(output.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(output.is_contiguous());
  auto&& _ipex_grad_output = bridge::shallowFallbackToCPUTensor(grad_output);
  auto&& _ipex_output = bridge::shallowFallbackToCPUTensor(output);
  auto&& _ipex_result = at::tanh_backward(_ipex_grad_output, _ipex_output);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::slow_conv_transpose2d_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & weight, at::IntArrayRef kernel_size, const at::Tensor & bias, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef output_padding, at::IntArrayRef dilation) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(weight.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(weight.is_contiguous());
  TORCH_INTERNAL_ASSERT(bias.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(bias.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_weight = bridge::shallowFallbackToCPUTensor(weight);
  auto&& _ipex_bias = bridge::shallowFallbackToCPUTensor(bias);
  auto&& _ipex_result = at::slow_conv_transpose2d_out(_ipex_out, _ipex_self, _ipex_weight, kernel_size, _ipex_bias, stride, padding, output_padding, dilation);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor AtenIpexCPUDefault::slow_conv_transpose2d(const at::Tensor & self, const at::Tensor & weight, at::IntArrayRef kernel_size, const at::Tensor & bias, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef output_padding, at::IntArrayRef dilation) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(weight.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(weight.is_contiguous());
  TORCH_INTERNAL_ASSERT(bias.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(bias.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_weight = bridge::shallowFallbackToCPUTensor(weight);
  auto&& _ipex_bias = bridge::shallowFallbackToCPUTensor(bias);
  auto&& _ipex_result = at::slow_conv_transpose2d(_ipex_self, _ipex_weight, kernel_size, _ipex_bias, stride, padding, output_padding, dilation);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

std::tuple<at::Tensor &,at::Tensor &,at::Tensor &> AtenIpexCPUDefault::slow_conv_transpose2d_backward_out(at::Tensor & grad_input, at::Tensor & grad_weight, at::Tensor & grad_bias, const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & weight, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef output_padding, at::IntArrayRef dilation, const at::Tensor & columns, const at::Tensor & ones) {
  TORCH_INTERNAL_ASSERT(grad_input.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_input.is_contiguous());
  TORCH_INTERNAL_ASSERT(grad_weight.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_weight.is_contiguous());
  TORCH_INTERNAL_ASSERT(grad_bias.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_bias.is_contiguous());
  TORCH_INTERNAL_ASSERT(grad_output.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_output.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(weight.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(weight.is_contiguous());
  TORCH_INTERNAL_ASSERT(columns.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(columns.is_contiguous());
  TORCH_INTERNAL_ASSERT(ones.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(ones.is_contiguous());
  auto&& _ipex_grad_input = bridge::shallowFallbackToCPUTensor(grad_input);
  auto&& _ipex_grad_weight = bridge::shallowFallbackToCPUTensor(grad_weight);
  auto&& _ipex_grad_bias = bridge::shallowFallbackToCPUTensor(grad_bias);
  auto&& _ipex_grad_output = bridge::shallowFallbackToCPUTensor(grad_output);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_weight = bridge::shallowFallbackToCPUTensor(weight);
  auto&& _ipex_columns = bridge::shallowFallbackToCPUTensor(columns);
  auto&& _ipex_ones = bridge::shallowFallbackToCPUTensor(ones);
  auto&& _ipex_result = at::slow_conv_transpose2d_backward_out(_ipex_grad_input, _ipex_grad_weight, _ipex_grad_bias, _ipex_grad_output, _ipex_self, _ipex_weight, kernel_size, stride, padding, output_padding, dilation, _ipex_columns, _ipex_ones);
  grad_input = bridge::shallowUpgradeToDPCPPTensor(_ipex_grad_input);
  grad_weight = bridge::shallowUpgradeToDPCPPTensor(_ipex_grad_weight);
  grad_bias = bridge::shallowUpgradeToDPCPPTensor(_ipex_grad_bias);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return std::tuple<at::Tensor &,at::Tensor &,at::Tensor &>(grad_input, grad_weight, grad_bias);
}

std::tuple<at::Tensor,at::Tensor,at::Tensor> AtenIpexCPUDefault::slow_conv_transpose2d_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & weight, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef output_padding, at::IntArrayRef dilation, const at::Tensor & columns, const at::Tensor & ones, std::array<bool,3> output_mask) {
  TORCH_INTERNAL_ASSERT(grad_output.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_output.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(weight.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(weight.is_contiguous());
  TORCH_INTERNAL_ASSERT(columns.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(columns.is_contiguous());
  TORCH_INTERNAL_ASSERT(ones.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(ones.is_contiguous());
  auto&& _ipex_grad_output = bridge::shallowFallbackToCPUTensor(grad_output);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_weight = bridge::shallowFallbackToCPUTensor(weight);
  auto&& _ipex_columns = bridge::shallowFallbackToCPUTensor(columns);
  auto&& _ipex_ones = bridge::shallowFallbackToCPUTensor(ones);
  auto&& _ipex_result = at::slow_conv_transpose2d_backward(_ipex_grad_output, _ipex_self, _ipex_weight, kernel_size, stride, padding, output_padding, dilation, _ipex_columns, _ipex_ones, output_mask);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return std::tuple<at::Tensor,at::Tensor,at::Tensor>(bridge::upgradeToDPCPPTensor(std::get<0>(_ipex_result)), bridge::upgradeToDPCPPTensor(std::get<1>(_ipex_result)), bridge::upgradeToDPCPPTensor(std::get<2>(_ipex_result)));
}

at::Tensor & AtenIpexCPUDefault::slow_conv_transpose3d_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & weight, at::IntArrayRef kernel_size, const at::Tensor & bias, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef output_padding, at::IntArrayRef dilation) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(weight.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(weight.is_contiguous());
  TORCH_INTERNAL_ASSERT(bias.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(bias.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_weight = bridge::shallowFallbackToCPUTensor(weight);
  auto&& _ipex_bias = bridge::shallowFallbackToCPUTensor(bias);
  auto&& _ipex_result = at::slow_conv_transpose3d_out(_ipex_out, _ipex_self, _ipex_weight, kernel_size, _ipex_bias, stride, padding, output_padding, dilation);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor AtenIpexCPUDefault::slow_conv_transpose3d(const at::Tensor & self, const at::Tensor & weight, at::IntArrayRef kernel_size, const at::Tensor & bias, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef output_padding, at::IntArrayRef dilation) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(weight.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(weight.is_contiguous());
  TORCH_INTERNAL_ASSERT(bias.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(bias.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_weight = bridge::shallowFallbackToCPUTensor(weight);
  auto&& _ipex_bias = bridge::shallowFallbackToCPUTensor(bias);
  auto&& _ipex_result = at::slow_conv_transpose3d(_ipex_self, _ipex_weight, kernel_size, _ipex_bias, stride, padding, output_padding, dilation);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

std::tuple<at::Tensor &,at::Tensor &,at::Tensor &> AtenIpexCPUDefault::slow_conv_transpose3d_backward_out(at::Tensor & grad_input, at::Tensor & grad_weight, at::Tensor & grad_bias, const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & weight, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef output_padding, at::IntArrayRef dilation, const at::Tensor & finput, const at::Tensor & fgrad_input) {
  TORCH_INTERNAL_ASSERT(grad_input.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_input.is_contiguous());
  TORCH_INTERNAL_ASSERT(grad_weight.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_weight.is_contiguous());
  TORCH_INTERNAL_ASSERT(grad_bias.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_bias.is_contiguous());
  TORCH_INTERNAL_ASSERT(grad_output.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_output.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(weight.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(weight.is_contiguous());
  TORCH_INTERNAL_ASSERT(finput.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(finput.is_contiguous());
  TORCH_INTERNAL_ASSERT(fgrad_input.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(fgrad_input.is_contiguous());
  auto&& _ipex_grad_input = bridge::shallowFallbackToCPUTensor(grad_input);
  auto&& _ipex_grad_weight = bridge::shallowFallbackToCPUTensor(grad_weight);
  auto&& _ipex_grad_bias = bridge::shallowFallbackToCPUTensor(grad_bias);
  auto&& _ipex_grad_output = bridge::shallowFallbackToCPUTensor(grad_output);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_weight = bridge::shallowFallbackToCPUTensor(weight);
  auto&& _ipex_finput = bridge::shallowFallbackToCPUTensor(finput);
  auto&& _ipex_fgrad_input = bridge::shallowFallbackToCPUTensor(fgrad_input);
  auto&& _ipex_result = at::slow_conv_transpose3d_backward_out(_ipex_grad_input, _ipex_grad_weight, _ipex_grad_bias, _ipex_grad_output, _ipex_self, _ipex_weight, kernel_size, stride, padding, output_padding, dilation, _ipex_finput, _ipex_fgrad_input);
  grad_input = bridge::shallowUpgradeToDPCPPTensor(_ipex_grad_input);
  grad_weight = bridge::shallowUpgradeToDPCPPTensor(_ipex_grad_weight);
  grad_bias = bridge::shallowUpgradeToDPCPPTensor(_ipex_grad_bias);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return std::tuple<at::Tensor &,at::Tensor &,at::Tensor &>(grad_input, grad_weight, grad_bias);
}

std::tuple<at::Tensor,at::Tensor,at::Tensor> AtenIpexCPUDefault::slow_conv_transpose3d_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & weight, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef output_padding, at::IntArrayRef dilation, const at::Tensor & finput, const at::Tensor & fgrad_input, std::array<bool,3> output_mask) {
  TORCH_INTERNAL_ASSERT(grad_output.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_output.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(weight.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(weight.is_contiguous());
  TORCH_INTERNAL_ASSERT(finput.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(finput.is_contiguous());
  TORCH_INTERNAL_ASSERT(fgrad_input.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(fgrad_input.is_contiguous());
  auto&& _ipex_grad_output = bridge::shallowFallbackToCPUTensor(grad_output);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_weight = bridge::shallowFallbackToCPUTensor(weight);
  auto&& _ipex_finput = bridge::shallowFallbackToCPUTensor(finput);
  auto&& _ipex_fgrad_input = bridge::shallowFallbackToCPUTensor(fgrad_input);
  auto&& _ipex_result = at::slow_conv_transpose3d_backward(_ipex_grad_output, _ipex_self, _ipex_weight, kernel_size, stride, padding, output_padding, dilation, _ipex_finput, _ipex_fgrad_input, output_mask);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return std::tuple<at::Tensor,at::Tensor,at::Tensor>(bridge::upgradeToDPCPPTensor(std::get<0>(_ipex_result)), bridge::upgradeToDPCPPTensor(std::get<1>(_ipex_result)), bridge::upgradeToDPCPPTensor(std::get<2>(_ipex_result)));
}

at::Tensor & AtenIpexCPUDefault::thnn_conv2d_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & weight, at::IntArrayRef kernel_size, const at::Tensor & bias, at::IntArrayRef stride, at::IntArrayRef padding) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(weight.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(weight.is_contiguous());
  TORCH_INTERNAL_ASSERT(bias.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(bias.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_weight = bridge::shallowFallbackToCPUTensor(weight);
  auto&& _ipex_bias = bridge::shallowFallbackToCPUTensor(bias);
  auto&& _ipex_result = at::thnn_conv2d_out(_ipex_out, _ipex_self, _ipex_weight, kernel_size, _ipex_bias, stride, padding);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor AtenIpexCPUDefault::thnn_conv2d(const at::Tensor & self, const at::Tensor & weight, at::IntArrayRef kernel_size, const at::Tensor & bias, at::IntArrayRef stride, at::IntArrayRef padding) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(weight.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(weight.is_contiguous());
  TORCH_INTERNAL_ASSERT(bias.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(bias.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_weight = bridge::shallowFallbackToCPUTensor(weight);
  auto&& _ipex_bias = bridge::shallowFallbackToCPUTensor(bias);
  auto&& _ipex_result = at::thnn_conv2d(_ipex_self, _ipex_weight, kernel_size, _ipex_bias, stride, padding);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

std::tuple<at::Tensor &,at::Tensor &,at::Tensor &> AtenIpexCPUDefault::thnn_conv2d_forward_out(at::Tensor & output, at::Tensor & finput, at::Tensor & fgrad_input, const at::Tensor & self, const at::Tensor & weight, at::IntArrayRef kernel_size, const at::Tensor & bias, at::IntArrayRef stride, at::IntArrayRef padding) {
  TORCH_INTERNAL_ASSERT(output.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(output.is_contiguous());
  TORCH_INTERNAL_ASSERT(finput.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(finput.is_contiguous());
  TORCH_INTERNAL_ASSERT(fgrad_input.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(fgrad_input.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(weight.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(weight.is_contiguous());
  TORCH_INTERNAL_ASSERT(bias.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(bias.is_contiguous());
  auto&& _ipex_output = bridge::shallowFallbackToCPUTensor(output);
  auto&& _ipex_finput = bridge::shallowFallbackToCPUTensor(finput);
  auto&& _ipex_fgrad_input = bridge::shallowFallbackToCPUTensor(fgrad_input);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_weight = bridge::shallowFallbackToCPUTensor(weight);
  auto&& _ipex_bias = bridge::shallowFallbackToCPUTensor(bias);
  auto&& _ipex_result = at::thnn_conv2d_forward_out(_ipex_output, _ipex_finput, _ipex_fgrad_input, _ipex_self, _ipex_weight, kernel_size, _ipex_bias, stride, padding);
  output = bridge::shallowUpgradeToDPCPPTensor(_ipex_output);
  finput = bridge::shallowUpgradeToDPCPPTensor(_ipex_finput);
  fgrad_input = bridge::shallowUpgradeToDPCPPTensor(_ipex_fgrad_input);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return std::tuple<at::Tensor &,at::Tensor &,at::Tensor &>(output, finput, fgrad_input);
}

std::tuple<at::Tensor,at::Tensor,at::Tensor> AtenIpexCPUDefault::thnn_conv2d_forward(const at::Tensor & self, const at::Tensor & weight, at::IntArrayRef kernel_size, const at::Tensor & bias, at::IntArrayRef stride, at::IntArrayRef padding) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(weight.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(weight.is_contiguous());
  TORCH_INTERNAL_ASSERT(bias.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(bias.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_weight = bridge::shallowFallbackToCPUTensor(weight);
  auto&& _ipex_bias = bridge::shallowFallbackToCPUTensor(bias);
  auto&& _ipex_result = at::thnn_conv2d_forward(_ipex_self, _ipex_weight, kernel_size, _ipex_bias, stride, padding);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return std::tuple<at::Tensor,at::Tensor,at::Tensor>(bridge::upgradeToDPCPPTensor(std::get<0>(_ipex_result)), bridge::upgradeToDPCPPTensor(std::get<1>(_ipex_result)), bridge::upgradeToDPCPPTensor(std::get<2>(_ipex_result)));
}

std::tuple<at::Tensor &,at::Tensor &,at::Tensor &> AtenIpexCPUDefault::thnn_conv2d_backward_out(at::Tensor & grad_input, at::Tensor & grad_weight, at::Tensor & grad_bias, const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & weight, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, const at::Tensor & finput, const at::Tensor & fgrad_input) {
  TORCH_INTERNAL_ASSERT(grad_input.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_input.is_contiguous());
  TORCH_INTERNAL_ASSERT(grad_weight.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_weight.is_contiguous());
  TORCH_INTERNAL_ASSERT(grad_bias.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_bias.is_contiguous());
  TORCH_INTERNAL_ASSERT(grad_output.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_output.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(weight.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(weight.is_contiguous());
  TORCH_INTERNAL_ASSERT(finput.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(finput.is_contiguous());
  TORCH_INTERNAL_ASSERT(fgrad_input.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(fgrad_input.is_contiguous());
  auto&& _ipex_grad_input = bridge::shallowFallbackToCPUTensor(grad_input);
  auto&& _ipex_grad_weight = bridge::shallowFallbackToCPUTensor(grad_weight);
  auto&& _ipex_grad_bias = bridge::shallowFallbackToCPUTensor(grad_bias);
  auto&& _ipex_grad_output = bridge::shallowFallbackToCPUTensor(grad_output);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_weight = bridge::shallowFallbackToCPUTensor(weight);
  auto&& _ipex_finput = bridge::shallowFallbackToCPUTensor(finput);
  auto&& _ipex_fgrad_input = bridge::shallowFallbackToCPUTensor(fgrad_input);
  auto&& _ipex_result = at::thnn_conv2d_backward_out(_ipex_grad_input, _ipex_grad_weight, _ipex_grad_bias, _ipex_grad_output, _ipex_self, _ipex_weight, kernel_size, stride, padding, _ipex_finput, _ipex_fgrad_input);
  grad_input = bridge::shallowUpgradeToDPCPPTensor(_ipex_grad_input);
  grad_weight = bridge::shallowUpgradeToDPCPPTensor(_ipex_grad_weight);
  grad_bias = bridge::shallowUpgradeToDPCPPTensor(_ipex_grad_bias);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return std::tuple<at::Tensor &,at::Tensor &,at::Tensor &>(grad_input, grad_weight, grad_bias);
}

std::tuple<at::Tensor,at::Tensor,at::Tensor> AtenIpexCPUDefault::thnn_conv2d_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & weight, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, const at::Tensor & finput, const at::Tensor & fgrad_input, std::array<bool,3> output_mask) {
  TORCH_INTERNAL_ASSERT(grad_output.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_output.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(weight.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(weight.is_contiguous());
  TORCH_INTERNAL_ASSERT(finput.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(finput.is_contiguous());
  TORCH_INTERNAL_ASSERT(fgrad_input.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(fgrad_input.is_contiguous());
  auto&& _ipex_grad_output = bridge::shallowFallbackToCPUTensor(grad_output);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_weight = bridge::shallowFallbackToCPUTensor(weight);
  auto&& _ipex_finput = bridge::shallowFallbackToCPUTensor(finput);
  auto&& _ipex_fgrad_input = bridge::shallowFallbackToCPUTensor(fgrad_input);
  auto&& _ipex_result = at::thnn_conv2d_backward(_ipex_grad_output, _ipex_self, _ipex_weight, kernel_size, stride, padding, _ipex_finput, _ipex_fgrad_input, output_mask);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return std::tuple<at::Tensor,at::Tensor,at::Tensor>(bridge::upgradeToDPCPPTensor(std::get<0>(_ipex_result)), bridge::upgradeToDPCPPTensor(std::get<1>(_ipex_result)), bridge::upgradeToDPCPPTensor(std::get<2>(_ipex_result)));
}

at::Tensor & AtenIpexCPUDefault::thnn_conv_depthwise2d_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & weight, at::IntArrayRef kernel_size, const at::Tensor & bias, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef dilation) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(weight.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(weight.is_contiguous());
  TORCH_INTERNAL_ASSERT(bias.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(bias.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_weight = bridge::shallowFallbackToCPUTensor(weight);
  auto&& _ipex_bias = bridge::shallowFallbackToCPUTensor(bias);
  auto&& _ipex_result = at::thnn_conv_depthwise2d_out(_ipex_out, _ipex_self, _ipex_weight, kernel_size, _ipex_bias, stride, padding, dilation);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor AtenIpexCPUDefault::thnn_conv_depthwise2d(const at::Tensor & self, const at::Tensor & weight, at::IntArrayRef kernel_size, const at::Tensor & bias, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef dilation) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(weight.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(weight.is_contiguous());
  TORCH_INTERNAL_ASSERT(bias.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(bias.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_weight = bridge::shallowFallbackToCPUTensor(weight);
  auto&& _ipex_bias = bridge::shallowFallbackToCPUTensor(bias);
  auto&& _ipex_result = at::thnn_conv_depthwise2d(_ipex_self, _ipex_weight, kernel_size, _ipex_bias, stride, padding, dilation);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::thnn_conv_depthwise2d_forward_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & weight, at::IntArrayRef kernel_size, const at::Tensor & bias, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef dilation) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(weight.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(weight.is_contiguous());
  TORCH_INTERNAL_ASSERT(bias.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(bias.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_weight = bridge::shallowFallbackToCPUTensor(weight);
  auto&& _ipex_bias = bridge::shallowFallbackToCPUTensor(bias);
  auto&& _ipex_result = at::thnn_conv_depthwise2d_forward_out(_ipex_out, _ipex_self, _ipex_weight, kernel_size, _ipex_bias, stride, padding, dilation);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor AtenIpexCPUDefault::thnn_conv_depthwise2d_forward(const at::Tensor & self, const at::Tensor & weight, at::IntArrayRef kernel_size, const at::Tensor & bias, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef dilation) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(weight.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(weight.is_contiguous());
  TORCH_INTERNAL_ASSERT(bias.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(bias.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_weight = bridge::shallowFallbackToCPUTensor(weight);
  auto&& _ipex_bias = bridge::shallowFallbackToCPUTensor(bias);
  auto&& _ipex_result = at::thnn_conv_depthwise2d_forward(_ipex_self, _ipex_weight, kernel_size, _ipex_bias, stride, padding, dilation);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

std::tuple<at::Tensor &,at::Tensor &> AtenIpexCPUDefault::thnn_conv_depthwise2d_backward_out(at::Tensor & grad_input, at::Tensor & grad_weight, const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & weight, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef dilation) {
  TORCH_INTERNAL_ASSERT(grad_input.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_input.is_contiguous());
  TORCH_INTERNAL_ASSERT(grad_weight.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_weight.is_contiguous());
  TORCH_INTERNAL_ASSERT(grad_output.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_output.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(weight.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(weight.is_contiguous());
  auto&& _ipex_grad_input = bridge::shallowFallbackToCPUTensor(grad_input);
  auto&& _ipex_grad_weight = bridge::shallowFallbackToCPUTensor(grad_weight);
  auto&& _ipex_grad_output = bridge::shallowFallbackToCPUTensor(grad_output);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_weight = bridge::shallowFallbackToCPUTensor(weight);
  auto&& _ipex_result = at::thnn_conv_depthwise2d_backward_out(_ipex_grad_input, _ipex_grad_weight, _ipex_grad_output, _ipex_self, _ipex_weight, kernel_size, stride, padding, dilation);
  grad_input = bridge::shallowUpgradeToDPCPPTensor(_ipex_grad_input);
  grad_weight = bridge::shallowUpgradeToDPCPPTensor(_ipex_grad_weight);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return std::tuple<at::Tensor &,at::Tensor &>(grad_input, grad_weight);
}

std::tuple<at::Tensor,at::Tensor> AtenIpexCPUDefault::thnn_conv_depthwise2d_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & weight, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef dilation, std::array<bool,2> output_mask) {
  TORCH_INTERNAL_ASSERT(grad_output.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_output.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(weight.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(weight.is_contiguous());
  auto&& _ipex_grad_output = bridge::shallowFallbackToCPUTensor(grad_output);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_weight = bridge::shallowFallbackToCPUTensor(weight);
  auto&& _ipex_result = at::thnn_conv_depthwise2d_backward(_ipex_grad_output, _ipex_self, _ipex_weight, kernel_size, stride, padding, dilation, output_mask);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return std::tuple<at::Tensor,at::Tensor>(bridge::upgradeToDPCPPTensor(std::get<0>(_ipex_result)), bridge::upgradeToDPCPPTensor(std::get<1>(_ipex_result)));
}

at::Tensor & AtenIpexCPUDefault::thnn_conv3d_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & weight, at::IntArrayRef kernel_size, const at::Tensor & bias, at::IntArrayRef stride, at::IntArrayRef padding) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(weight.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(weight.is_contiguous());
  TORCH_INTERNAL_ASSERT(bias.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(bias.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_weight = bridge::shallowFallbackToCPUTensor(weight);
  auto&& _ipex_bias = bridge::shallowFallbackToCPUTensor(bias);
  auto&& _ipex_result = at::thnn_conv3d_out(_ipex_out, _ipex_self, _ipex_weight, kernel_size, _ipex_bias, stride, padding);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor AtenIpexCPUDefault::thnn_conv3d(const at::Tensor & self, const at::Tensor & weight, at::IntArrayRef kernel_size, const at::Tensor & bias, at::IntArrayRef stride, at::IntArrayRef padding) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(weight.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(weight.is_contiguous());
  TORCH_INTERNAL_ASSERT(bias.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(bias.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_weight = bridge::shallowFallbackToCPUTensor(weight);
  auto&& _ipex_bias = bridge::shallowFallbackToCPUTensor(bias);
  auto&& _ipex_result = at::thnn_conv3d(_ipex_self, _ipex_weight, kernel_size, _ipex_bias, stride, padding);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

std::tuple<at::Tensor &,at::Tensor &,at::Tensor &> AtenIpexCPUDefault::thnn_conv3d_forward_out(at::Tensor & output, at::Tensor & finput, at::Tensor & fgrad_input, const at::Tensor & self, const at::Tensor & weight, at::IntArrayRef kernel_size, const at::Tensor & bias, at::IntArrayRef stride, at::IntArrayRef padding) {
  TORCH_INTERNAL_ASSERT(output.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(output.is_contiguous());
  TORCH_INTERNAL_ASSERT(finput.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(finput.is_contiguous());
  TORCH_INTERNAL_ASSERT(fgrad_input.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(fgrad_input.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(weight.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(weight.is_contiguous());
  TORCH_INTERNAL_ASSERT(bias.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(bias.is_contiguous());
  auto&& _ipex_output = bridge::shallowFallbackToCPUTensor(output);
  auto&& _ipex_finput = bridge::shallowFallbackToCPUTensor(finput);
  auto&& _ipex_fgrad_input = bridge::shallowFallbackToCPUTensor(fgrad_input);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_weight = bridge::shallowFallbackToCPUTensor(weight);
  auto&& _ipex_bias = bridge::shallowFallbackToCPUTensor(bias);
  auto&& _ipex_result = at::thnn_conv3d_forward_out(_ipex_output, _ipex_finput, _ipex_fgrad_input, _ipex_self, _ipex_weight, kernel_size, _ipex_bias, stride, padding);
  output = bridge::shallowUpgradeToDPCPPTensor(_ipex_output);
  finput = bridge::shallowUpgradeToDPCPPTensor(_ipex_finput);
  fgrad_input = bridge::shallowUpgradeToDPCPPTensor(_ipex_fgrad_input);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return std::tuple<at::Tensor &,at::Tensor &,at::Tensor &>(output, finput, fgrad_input);
}

std::tuple<at::Tensor,at::Tensor,at::Tensor> AtenIpexCPUDefault::thnn_conv3d_forward(const at::Tensor & self, const at::Tensor & weight, at::IntArrayRef kernel_size, const at::Tensor & bias, at::IntArrayRef stride, at::IntArrayRef padding) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(weight.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(weight.is_contiguous());
  TORCH_INTERNAL_ASSERT(bias.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(bias.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_weight = bridge::shallowFallbackToCPUTensor(weight);
  auto&& _ipex_bias = bridge::shallowFallbackToCPUTensor(bias);
  auto&& _ipex_result = at::thnn_conv3d_forward(_ipex_self, _ipex_weight, kernel_size, _ipex_bias, stride, padding);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return std::tuple<at::Tensor,at::Tensor,at::Tensor>(bridge::upgradeToDPCPPTensor(std::get<0>(_ipex_result)), bridge::upgradeToDPCPPTensor(std::get<1>(_ipex_result)), bridge::upgradeToDPCPPTensor(std::get<2>(_ipex_result)));
}

std::tuple<at::Tensor &,at::Tensor &,at::Tensor &> AtenIpexCPUDefault::thnn_conv3d_backward_out(at::Tensor & grad_input, at::Tensor & grad_weight, at::Tensor & grad_bias, const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & weight, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, const at::Tensor & finput, const at::Tensor & fgrad_input) {
  TORCH_INTERNAL_ASSERT(grad_input.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_input.is_contiguous());
  TORCH_INTERNAL_ASSERT(grad_weight.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_weight.is_contiguous());
  TORCH_INTERNAL_ASSERT(grad_bias.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_bias.is_contiguous());
  TORCH_INTERNAL_ASSERT(grad_output.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_output.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(weight.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(weight.is_contiguous());
  TORCH_INTERNAL_ASSERT(finput.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(finput.is_contiguous());
  TORCH_INTERNAL_ASSERT(fgrad_input.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(fgrad_input.is_contiguous());
  auto&& _ipex_grad_input = bridge::shallowFallbackToCPUTensor(grad_input);
  auto&& _ipex_grad_weight = bridge::shallowFallbackToCPUTensor(grad_weight);
  auto&& _ipex_grad_bias = bridge::shallowFallbackToCPUTensor(grad_bias);
  auto&& _ipex_grad_output = bridge::shallowFallbackToCPUTensor(grad_output);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_weight = bridge::shallowFallbackToCPUTensor(weight);
  auto&& _ipex_finput = bridge::shallowFallbackToCPUTensor(finput);
  auto&& _ipex_fgrad_input = bridge::shallowFallbackToCPUTensor(fgrad_input);
  auto&& _ipex_result = at::thnn_conv3d_backward_out(_ipex_grad_input, _ipex_grad_weight, _ipex_grad_bias, _ipex_grad_output, _ipex_self, _ipex_weight, kernel_size, stride, padding, _ipex_finput, _ipex_fgrad_input);
  grad_input = bridge::shallowUpgradeToDPCPPTensor(_ipex_grad_input);
  grad_weight = bridge::shallowUpgradeToDPCPPTensor(_ipex_grad_weight);
  grad_bias = bridge::shallowUpgradeToDPCPPTensor(_ipex_grad_bias);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return std::tuple<at::Tensor &,at::Tensor &,at::Tensor &>(grad_input, grad_weight, grad_bias);
}

std::tuple<at::Tensor,at::Tensor,at::Tensor> AtenIpexCPUDefault::thnn_conv3d_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & weight, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, const at::Tensor & finput, const at::Tensor & fgrad_input, std::array<bool,3> output_mask) {
  TORCH_INTERNAL_ASSERT(grad_output.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_output.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(weight.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(weight.is_contiguous());
  TORCH_INTERNAL_ASSERT(finput.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(finput.is_contiguous());
  TORCH_INTERNAL_ASSERT(fgrad_input.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(fgrad_input.is_contiguous());
  auto&& _ipex_grad_output = bridge::shallowFallbackToCPUTensor(grad_output);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_weight = bridge::shallowFallbackToCPUTensor(weight);
  auto&& _ipex_finput = bridge::shallowFallbackToCPUTensor(finput);
  auto&& _ipex_fgrad_input = bridge::shallowFallbackToCPUTensor(fgrad_input);
  auto&& _ipex_result = at::thnn_conv3d_backward(_ipex_grad_output, _ipex_self, _ipex_weight, kernel_size, stride, padding, _ipex_finput, _ipex_fgrad_input, output_mask);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return std::tuple<at::Tensor,at::Tensor,at::Tensor>(bridge::upgradeToDPCPPTensor(std::get<0>(_ipex_result)), bridge::upgradeToDPCPPTensor(std::get<1>(_ipex_result)), bridge::upgradeToDPCPPTensor(std::get<2>(_ipex_result)));
}

at::Tensor AtenIpexCPUDefault::slow_conv_dilated2d(const at::Tensor & self, const at::Tensor & weight, at::IntArrayRef kernel_size, const at::Tensor & bias, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef dilation) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(weight.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(weight.is_contiguous());
  TORCH_INTERNAL_ASSERT(bias.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(bias.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_weight = bridge::shallowFallbackToCPUTensor(weight);
  auto&& _ipex_bias = bridge::shallowFallbackToCPUTensor(bias);
  auto&& _ipex_result = at::slow_conv_dilated2d(_ipex_self, _ipex_weight, kernel_size, _ipex_bias, stride, padding, dilation);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

std::tuple<at::Tensor,at::Tensor,at::Tensor> AtenIpexCPUDefault::slow_conv_dilated2d_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & weight, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef dilation, std::array<bool,3> output_mask) {
  TORCH_INTERNAL_ASSERT(grad_output.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_output.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(weight.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(weight.is_contiguous());
  auto&& _ipex_grad_output = bridge::shallowFallbackToCPUTensor(grad_output);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_weight = bridge::shallowFallbackToCPUTensor(weight);
  auto&& _ipex_result = at::slow_conv_dilated2d_backward(_ipex_grad_output, _ipex_self, _ipex_weight, kernel_size, stride, padding, dilation, output_mask);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return std::tuple<at::Tensor,at::Tensor,at::Tensor>(bridge::upgradeToDPCPPTensor(std::get<0>(_ipex_result)), bridge::upgradeToDPCPPTensor(std::get<1>(_ipex_result)), bridge::upgradeToDPCPPTensor(std::get<2>(_ipex_result)));
}

at::Tensor AtenIpexCPUDefault::slow_conv_dilated3d(const at::Tensor & self, const at::Tensor & weight, at::IntArrayRef kernel_size, const at::Tensor & bias, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef dilation) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(weight.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(weight.is_contiguous());
  TORCH_INTERNAL_ASSERT(bias.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(bias.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_weight = bridge::shallowFallbackToCPUTensor(weight);
  auto&& _ipex_bias = bridge::shallowFallbackToCPUTensor(bias);
  auto&& _ipex_result = at::slow_conv_dilated3d(_ipex_self, _ipex_weight, kernel_size, _ipex_bias, stride, padding, dilation);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

std::tuple<at::Tensor,at::Tensor,at::Tensor> AtenIpexCPUDefault::slow_conv_dilated3d_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & weight, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef dilation, std::array<bool,3> output_mask) {
  TORCH_INTERNAL_ASSERT(grad_output.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_output.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  TORCH_INTERNAL_ASSERT(weight.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(weight.is_contiguous());
  auto&& _ipex_grad_output = bridge::shallowFallbackToCPUTensor(grad_output);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_weight = bridge::shallowFallbackToCPUTensor(weight);
  auto&& _ipex_result = at::slow_conv_dilated3d_backward(_ipex_grad_output, _ipex_self, _ipex_weight, kernel_size, stride, padding, dilation, output_mask);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  return std::tuple<at::Tensor,at::Tensor,at::Tensor>(bridge::upgradeToDPCPPTensor(std::get<0>(_ipex_result)), bridge::upgradeToDPCPPTensor(std::get<1>(_ipex_result)), bridge::upgradeToDPCPPTensor(std::get<2>(_ipex_result)));
}

at::Tensor & AtenIpexCPUDefault::col2im_out(at::Tensor & out, const at::Tensor & self, at::IntArrayRef output_size, at::IntArrayRef kernel_size, at::IntArrayRef dilation, at::IntArrayRef padding, at::IntArrayRef stride) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::col2im_out(_ipex_out, _ipex_self, output_size, kernel_size, dilation, padding, stride);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor AtenIpexCPUDefault::col2im(const at::Tensor & self, at::IntArrayRef output_size, at::IntArrayRef kernel_size, at::IntArrayRef dilation, at::IntArrayRef padding, at::IntArrayRef stride) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::col2im(_ipex_self, output_size, kernel_size, dilation, padding, stride);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::col2im_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, at::IntArrayRef kernel_size, at::IntArrayRef dilation, at::IntArrayRef padding, at::IntArrayRef stride) {
  TORCH_INTERNAL_ASSERT(grad_input.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_input.is_contiguous());
  TORCH_INTERNAL_ASSERT(grad_output.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_output.is_contiguous());
  auto&& _ipex_grad_input = bridge::shallowFallbackToCPUTensor(grad_input);
  auto&& _ipex_grad_output = bridge::shallowFallbackToCPUTensor(grad_output);
  auto&& _ipex_result = at::col2im_backward_out(_ipex_grad_input, _ipex_grad_output, kernel_size, dilation, padding, stride);
  grad_input = bridge::shallowUpgradeToDPCPPTensor(_ipex_grad_input);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return grad_input;
}

at::Tensor AtenIpexCPUDefault::col2im_backward(const at::Tensor & grad_output, at::IntArrayRef kernel_size, at::IntArrayRef dilation, at::IntArrayRef padding, at::IntArrayRef stride) {
  TORCH_INTERNAL_ASSERT(grad_output.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_output.is_contiguous());
  auto&& _ipex_grad_output = bridge::shallowFallbackToCPUTensor(grad_output);
  auto&& _ipex_result = at::col2im_backward(_ipex_grad_output, kernel_size, dilation, padding, stride);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::im2col_out(at::Tensor & out, const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef dilation, at::IntArrayRef padding, at::IntArrayRef stride) {
  TORCH_INTERNAL_ASSERT(out.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(out.is_contiguous());
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_out = bridge::shallowFallbackToCPUTensor(out);
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::im2col_out(_ipex_out, _ipex_self, kernel_size, dilation, padding, stride);
  out = bridge::shallowUpgradeToDPCPPTensor(_ipex_out);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return out;
}

at::Tensor AtenIpexCPUDefault::im2col(const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef dilation, at::IntArrayRef padding, at::IntArrayRef stride) {
  TORCH_INTERNAL_ASSERT(self.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(self.is_contiguous());
  auto&& _ipex_self = bridge::shallowFallbackToCPUTensor(self);
  auto&& _ipex_result = at::im2col(_ipex_self, kernel_size, dilation, padding, stride);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}

at::Tensor & AtenIpexCPUDefault::im2col_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, at::IntArrayRef input_size, at::IntArrayRef kernel_size, at::IntArrayRef dilation, at::IntArrayRef padding, at::IntArrayRef stride) {
  TORCH_INTERNAL_ASSERT(grad_input.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_input.is_contiguous());
  TORCH_INTERNAL_ASSERT(grad_output.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_output.is_contiguous());
  auto&& _ipex_grad_input = bridge::shallowFallbackToCPUTensor(grad_input);
  auto&& _ipex_grad_output = bridge::shallowFallbackToCPUTensor(grad_output);
  auto&& _ipex_result = at::im2col_backward_out(_ipex_grad_input, _ipex_grad_output, input_size, kernel_size, dilation, padding, stride);
  grad_input = bridge::shallowUpgradeToDPCPPTensor(_ipex_grad_input);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return grad_input;
}

at::Tensor AtenIpexCPUDefault::im2col_backward(const at::Tensor & grad_output, at::IntArrayRef input_size, at::IntArrayRef kernel_size, at::IntArrayRef dilation, at::IntArrayRef padding, at::IntArrayRef stride) {
  TORCH_INTERNAL_ASSERT(grad_output.layout() == c10::kStrided);
  TORCH_INTERNAL_ASSERT(grad_output.is_contiguous());
  auto&& _ipex_grad_output = bridge::shallowFallbackToCPUTensor(grad_output);
  auto&& _ipex_result = at::im2col_backward(_ipex_grad_output, input_size, kernel_size, dilation, padding, stride);
  static_cast<void>(_ipex_result); // Avoid warnings in case not used
  TORCH_INTERNAL_ASSERT(_ipex_result.is_contiguous());
  return bridge::upgradeToDPCPPTensor(_ipex_result);
}



}  // namespace cpu
}  // namespace torch_ipex

