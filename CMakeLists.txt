cmake_minimum_required(VERSION 3.5 FATAL_ERROR)
project(torch_ipex VERSION "0.1.2")

list(APPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmake/Modules)

set(LINUX TRUE)
set(CMAKE_INSTALL_MESSAGE NEVER)
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)

# set compilation env first
include(cmake/DPCPP.cmake)

# The options to build torch_ipex
include(CMakeDependentOption)
option(USE_USM "Use USM" OFF)
option(USE_ONEDPL "Use oneDPL" OFF)
option(USE_ONEMKL "Use oneMKL BLAS" OFF)
option(USE_MULTI_CONTEXT "Create runtime context per device" OFF)
option(BUILD_BY_PER_KERNEL "Build by DPC++ per_kernel option" ON)
option(BUILD_NO_L0_ONEDNN "Build oneDNN without LevelZero support" ON)
option(USE_GEN12HP_ONEDNN "Use the oneDNN Gen12HP branch" OFF)
option(USE_PERSIST_STREAM "Use persistent oneDNN stream" ON)
option(USE_PRIMITIVE_CACHE "Use primitive cache for oneDNN primitive" ON)
option(BUILD_INTERNAL_DEBUG "Use internal debug code path" OFF)
cmake_dependent_option(BUILD_DOUBLE_KERNEL "Build double data type kernels" ON "BUILD_INTERNAL_DEBUG" OFF)

include(cmake/GPU.cmake)

function (print_configuration_summary)
  get_directory_property(CMAKE_COMPILE_DEFINITIONS DIRECTORY ${CMAKE_SOURCE_DIR} COMPILE_DEFINITIONS)

    message(STATUS "")
    message(STATUS "******** Summary ********")
    message(STATUS "General:")
    message(STATUS "  CMake version         : ${CMAKE_VERSION}")
    message(STATUS "  CMake command         : ${CMAKE_COMMAND}")
    message(STATUS "  System                : ${CMAKE_SYSTEM_NAME}")
    message(STATUS "  Target name           : ${LIB_NAME}")
    message(STATUS "  Install path          : ${CMAKE_INSTALL_PREFIX}")
    message(STATUS "  Build type            : ${CMAKE_BUILD_TYPE}")
    message(STATUS "  C++ compiler          : ${CMAKE_CXX_COMPILER}")
    message(STATUS "  C++ compiler id       : ${CMAKE_CXX_COMPILER_ID}")
    message(STATUS "  C++ compiler version  : ${CMAKE_CXX_COMPILER_VERSION}")
    message(STATUS "  CXX flags             : ${CMAKE_CXX_FLAGS}")
    message(STATUS "  Compile flags         : ${IPEX_COMPILE_FLAGS}")
    message(STATUS "  Compile definitions   : ${CMAKE_COMPILE_DEFINITIONS}")
    message(STATUS "  Linker options        : ${CMAKE_SHARED_LINKER_FLAGS}")

    message(STATUS "  Intel SYCL include    : ${SYCL_INCLUDE_DIR}")
    message(STATUS "  Intel SYCL library    : ${SYCL_LIBRARY}")
    message(STATUS "  OpenCL include        : ${OpenCL_INCLUDE_DIR}")
    message(STATUS "  OpenCL library        : ${OpenCL_LIBRARY}")
    message(STATUS "  LevelZero include     : ${LevelZero_INCLUDE_DIR}")
    message(STATUS "  LevelZero library     : ${LevelZero_LIBRARY}")
    message(STATUS "  USE_USM               : ${USE_USM}")
    message(STATUS "  USE_ONEDPL            : ${USE_ONEDPL}")
    message(STATUS "  BUILD_BY_PER_KERNEL   : ${BUILD_BY_PER_KERNEL}")
    message(STATUS "  USE_MULTI_CONTEXT     : ${USE_MULTI_CONTEXT}")
    message(STATUS "  USE_ONEMKL            : ${USE_ONEMKL}")

  if (USE_ONEMKL)
    message(STATUS "  ONEMKL include        : ${ONEMKL_INCLUDE_DIR}")
  endif(USE_ONEMKL)

    message(STATUS "  BUILD_INTERNAL_DEBUG  : ${BUILD_INTERNAL_DEBUG}")
  if (BUILD_INTERNAL_DEBUG)
    message(STATUS "  BUILD_DOUBLE_KERNEL   : ${BUILD_DOUBLE_KERNEL}")
  endif(BUILD_INTERNAL_DEBUG)

    message(STATUS "  USE_PERSIST_STREAM    : ${USE_PERSIST_STREAM}")
    message(STATUS "  ONEDNN_USE_SYCL       : ${ONEDNN_USE_SYCL}")
  if (ONEDNN_USE_SYCL)
    message(STATUS "  BUILD_NO_L0_ONEDNN    : ${BUILD_NO_L0_ONEDNN}")
  endif()
    message(STATUS "  USE_GEN12HP_ONEDNN    : ${USE_GEN12HP_ONEDNN}")
    message(STATUS "  USE_PRIMITIVE_CACHE   : ${USE_PRIMITIVE_CACHE}")
    message(STATUS "")
endfunction()

print_configuration_summary()
